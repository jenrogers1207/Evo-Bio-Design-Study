{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/dataLoad.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/viewControl.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/buttonComponents.js","webpack:///./src/scripts/renderPathView.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","loadData","_x","_x2","_x3","_loadData","this","arguments","_callee","readFunction","fileString","type","regeneratorRuntime","wrap","_context","prev","next","sent","String","abrupt","stop","calculateScales","calculatedAtt","colorKeeper","keys","map","max","d3","rows","upperCI95","min","lowerCI95","realVal","field","yScale","range","domain","clamp","satScale","colorScale","catColor","scaleCat","fields","filter","f","stateColors","sc","state","color","scales","scaleName","matchLeaves","labels","leaves","leafChar","calculatedScales","mappedLeafLabels","x","leaf","label","leafCharIndex","node","V2","attr","chosenOne","indexOf","forEach","k","scaleOb","states","attributes","matchEdges","edges","edgeLen","edge","attrKeys","index","edgeLength","res","estimate","undefined","row","normPaths","paths","att","root","nodeLabels","scale","rootAttr","console","error","maxBranch","xScale","leafIndex","prevStep","assign","step","edgeMove","move","formatAttributeData","pathData","filterArray","path","speciesLabel","species","winState","attrLabel","st","allPaths","edgeArray","leafArray","source","target","le","getPath","pathKeeper","ed","reverse","drawBranchPointDistribution","svg","branchBar","append","classed","text","nodeLengthArray","nodeDuplicateCheck","eMove","bPointScale","pointGroups","selectAll","join","renderDistibutions","mainDiv","moveMetric","attrHide","filterMaster","attribute","newNormed","distributionView_toConsumableArray","keysToHide","medBranchLength","normBins","Array","fill","base","top","binI","internalNodes","leafNodes","flatMap","sortedBins","mapNorm","bin","fData","leafAttr","leafData","histogram","thresholds","ticks","bins","maxO","v","minO","xO","histogramO","branches","colors","chosen","average","stDev","stUp","stDown","test","stat","branchScale","dataMaster","binnedWrap","style","predictedWrap","branchGroup","continDist","on","list","y","select","remove","lineGen","curve","y0","y1","dat","each","nodes","distrib","rangeRect","newy","discreteDist","combEdge","stateGroups","predictedWidth","lineGenD","observedWrap","contOb","contBars","height","xvalues","b","discOb","discBars","dRects","xPoint","padding","updateMainView","main","getLatestData","document","getElementById","disabled","drawPathsAndAttributes","removeFilter","filterId","dataFilters","filterType","filterIndex","testData","filterComponent_toConsumableArray","fun","filterFunction","attributeType","newTestData","selectedOption","predictedFilter","observedFilter","addFilterTag","fromState","toState","newFilterMaster","addFilter","attType","filFunction","oldData","newData","extra","filterOb","before-data","ex","toggleFilters","filterButton","filterDiv","normedPaths","presentFilters","noShow","wrapper","labelGroups","toggle","shownToggs","togg","circle","toggleCircle","newKeys","hideKeys","newFilMaster","renderAttToggles","concat","selectWrapper","attButton","stateChange","attProps","options","optionArray","optKeys","button1","button2","submit","classList","discreteFilter","filId","treeLinks","treeNode","nodeList","missingLinks","missingNodes","continRanges","ranges","brushBars","wrapperRect","xBrush","extent","selection","handle","invert","brushGroup","selections","_groups","__brush","sort","lastFilter","continuousFilter","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","filterToolbar","button","span","xSpan","queryFilter","formater","datum","nodeId","nodeFilter","selectedNode","predicted","observed","numb","filterPred","filterObs","win","selectorDiv","selectId","dropDownWrapper","selectedPaths","comparisonKeeper","pathSelected","selectedPath","otherPaths","selectedDiv","selectedPaths_toConsumableArray","commonNodes","selectedSpecies","treeNodes","attrFilter","selectedToolTest","selectedTool","empty","sortByDistanceDiv","sortByDistanceButton","sortButton","attrSortWrap","radioDiv","radio","svgTest","branchFrequency","reduce","acc","curr","selectWrap","circleScale","values","selectedGroups","pathBars","addRemoveBubble","speciesTitle","string","charAt","toUpperCase","timelines","nodeGroups","distance","hovers","nearest","nodearray","attributeWrapper","attData","attributeGroups","renderAttributes","drawContAtt","drawDiscreteAtt","sorted","a","high","leafOther","highLeaves","low","lowLeaves","same","commonNodeStart","children","nodeIndex","thresh","subset","chil","parentBase","scaledParentMove","parentScale","level","getCommonNodes","childNodeWrap","childNodes","pathArray","line","commonHover","renderSelectedTopology","attWrap","ch","attDataComb","offset","last","mappedDis","dis","spec","maxProb","maxP","notMax","other","findMaxState","attGroups","wrapRect","speciesGrp","attributeHeight","lineGenC","innerStatePaths","disGroup","sp","branchGrpDis","bCirc","otherCirc","tool","transition","duration","html","pageX","pageY","conGroup","branchGrpCon","MeanRect","confiBars","longestBranch","startBranch","renderSelectedView","commonNode","chosenPath","rankedPaths","pathIndex","sortedData","sortOtherPaths","group","pathRemove","dropDown","div","dropText","dropId","dropdiv","dropContent","nodeTooltipFlag","collapsed","pathGroups","pathWrapTest","pathWrap","pathAdd","notIt","renderPaths","attKeys","attrMove","predictedAttrGrps","attribWrap","sizeAndMove","selectedState","leafStateFilter","innerTimeline","innerPaths","change","continuousAtt","continuousPaths","attributeNodesCont","innerBars","drawGroups","stateBins","splitOnArray","newBins","newBinData","pa","firstGroupSvg","firstGroup","secondGroup","g","newM","first","second","groupLabels","renderComparison","buttonGroupTest","buttonGroup","usedColors","groupColor","newColor","find","compareButtonTest","compareButton","comparisonCombined","newAtt","com","atts","filteredComp","selectedTest","attWraps","mean","e","exit","attWrapsEnter","enter","merge","innerWrap","missing","_this","axisGroupTest","axisGroup","maxDiff","newScale","startBins","difArray","_loop","diffs","diff","Math","abs","obsDistWrap","newLeaves","binData","xAxis","distGroups","stateLabel","innerGroup","innerWrapRect","wrappers","w","bars","discreteAtt","innerTimelineDis","statePath","disct","attributeNodesDisc","stateDots","endStateDot","stateBars","probability","chosenIn","valueAdd","buildTreeStructure","getNested","V1","updateBrush","treeBrush","sidebar","toolbarDiv","treeFilter","brushId","attributType","sidebarComponent_toConsumableArray","_ref","mark","renderTreeButtons","treeButton","treeViewButton","renderTree","selectedNodes","no","id","attrDraw","log","margin","width","treemap","size","addingEdgeLength","nestedData","treenodes","descendants","parent","notleaves","circ","toolbarControl","toolbar","pathView","viewButton","togglePathView","scrunchButton","toggleScrunch","discreteViewButton","discretePredictedGroups","savedSelected","then","edgeSource","leafChar2","matchedLeaves","matchedEdges","unique","self","entries","en","t0","t1","t2","t3","t4","awesomeness","island","SVL","ecomorph","PCIII_padwidth_vs_tail"],"mappings":"aACA,SAAAA,EAAAC,GAQA,IAPA,IAMAC,EAAAC,EANAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAIAM,EAAA,EAAAC,EAAA,GACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAKA,IAFAe,KAAAhB,GAEAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,GAAA,IAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,GAAA,EACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,GAAA,GAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,EAAA,GAKApB,EAAA,CACAqB,EAAA,GAGAZ,EAAA,GAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,GAAA,CACAK,EAAAL,EACAgC,GAAA,EACAF,QAAA,IAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,IAAAD,QAAAJ,GAGAK,EAAAC,GAAA,EAGAD,EAAAD,QAKAJ,EAAAO,EAAAnB,EAGAY,EAAAQ,EAAAN,EAGAF,EAAAS,EAAA,SAAAL,EAAAM,EAAAC,GACAX,EAAAY,EAAAR,EAAAM,IACA1B,OAAA6B,eAAAT,EAAAM,EAAA,CAA0CI,YAAA,EAAAC,IAAAJ,KAK1CX,EAAAgB,EAAA,SAAAZ,GACA,oBAAAa,eAAAC,aACAlC,OAAA6B,eAAAT,EAAAa,OAAAC,YAAA,CAAwDC,MAAA,WAExDnC,OAAA6B,eAAAT,EAAA,cAAiDe,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAvC,OAAAwC,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAvC,OAAA6B,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAS,EAAAc,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAtB,GACA,IAAAM,EAAAN,KAAAiB,WACA,WAA2B,OAAAjB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAL,EAAAS,EAAAE,EAAA,IAAAA,GACAA,GAIAX,EAAAY,EAAA,SAAAgB,EAAAC,GAAsD,OAAA7C,OAAAC,UAAAC,eAAAC,KAAAyC,EAAAC,IAGtD7B,EAAA8B,EAAA,yBAEA,IAAAC,EAAAC,OAAA,aAAAA,OAAA,iBACAC,EAAAF,EAAAhD,KAAA2C,KAAAK,GACAA,EAAAhD,KAAAX,EACA2D,IAAAG,QACA,QAAAvD,EAAA,EAAgBA,EAAAoD,EAAAlD,OAAuBF,IAAAP,EAAA2D,EAAApD,IACvC,IAAAU,EAAA4C,EAIA1C,EAAAR,KAAA,SAEAU,mOCpJO,SAAe0C,EAAtBC,EAAAC,EAAAC,GAAA,OAAAC,EAAA/C,MAAAgD,KAAAC,+DAAO,SAAAC,EAAwBC,EAAcC,EAAYC,GAAlD,IAAAxE,EAAA,OAAAyE,mBAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACcP,EAAaC,GAD3B,cACCvE,EADD2E,EAAAG,MAEEN,KAAOO,OAAOP,GAFhBG,EAAAK,OAAA,SAGIhF,GAHJ,wBAAA2E,EAAAM,SAAAZ,8NCCA,SAASa,EAAgBC,EAAeC,GAC3C,OAAOzE,OAAO0E,KAAKF,GAAeG,IAAI,SAAClD,EAAG9B,GAEtC,GAA4B,cAAzB6E,EAAc/C,GAAGoC,KAAqB,CACrC,IAAIe,EAAMC,IAAOL,EAAc/C,GAAGqD,KAAKH,IAAI,SAAApD,GAAC,OAAGA,EAAEwD,aAC7CC,EAAMH,IAAOL,EAAc/C,GAAGqD,KAAKH,IAAI,SAAApD,GAAC,OAAGA,EAAE0D,aACtCJ,IAAQL,EAAc/C,GAAGqD,KAAKH,IAAI,SAAApD,GAAC,OAAGA,EAAE2D,WAEnD,MAAO,CACHC,MAAS1D,EACToC,KAAO,aACPe,IAAOA,EACPI,IAAQA,EACRI,OAAUP,MAAiBQ,MAAM,CAAC,EAAG,KAAKC,OAAO,CAACN,EAAKJ,IAAMW,OAAM,GACnEC,SAAYX,MAAiBQ,MAAM,CAAC,EAAG,KAAKC,OAAO,CAACN,EAAKJ,IACzDa,WAAcZ,MAAiBQ,MAAM,CAACZ,EAAY9E,GAAG,GAAI,YAAY2F,OAAO,CAACN,EAAKJ,IAClFc,SAAYjB,EAAY9E,GAAG,IAG/B,IAAIgG,EAAWnB,EAAc/C,GAAGmE,OAAOC,OAAO,SAAAC,GAAC,MAAO,cAAJA,IAClD,MAAO,CACHX,MAAS1D,EACToC,KAAO,WACPkC,YAAeJ,EAAShB,IAAI,SAACqB,EAAIrG,GAC7B,MAAO,CAACsG,MAASD,EAAIE,MAASzB,EAAY9E,GAAG,MAEjD+F,SAAYjB,EAAY9E,GAAG,GAC3BwG,OAAUR,EAAShB,IAAI,SAAAqB,GAKvB,MAAO,CACHb,MAAS1D,EACT2E,UANYJ,EAOZpB,IALM,EAMNI,IALM,EAMNI,OAAUP,MAAiBQ,MAAM,CAAC,GAAI,IAAIC,OAAO,CAN3C,EADA,UAenB,SAASe,EAAYC,EAAQC,EAAQC,EAAUC,GAGlD,IAAKC,EAAmBJ,EAAOxB,KAAKH,IAAI,SAAApD,GAEpC,OADYA,EAAEoF,IAIlB,OAAOJ,EAAO5B,IAAI,SAACiC,EAAMjH,GAErBiH,EAAKC,MAAQH,EAAiB/G,GAI9B,IAAImH,EAAgBN,EAAS1B,KAAK,GAAG,IAAM0B,EAAS1B,KAAKH,IAAI,SAAApD,GAAC,OAAGA,EAAE,MAAOiF,EAAS1B,KAAKH,IAAI,SAAApD,GAAC,OAAGA,EAAC,UAEjGqF,EAAKG,KAAOH,EAAKI,GACjB,IAAItC,EAAO+B,EAAiB9B,IAAI,SAAApD,GAAC,OAAGA,EAAE4D,QAClC8B,EAAO,GAEPC,EAAYV,EAAS1B,KAAKgC,EAAcK,QAAQP,EAAKC,QA2BxD,OAzBDnC,EAAK0C,QAAQ,SAACC,GACT,IAAIC,EAAUb,EAAiBZ,OAAO,SAAAC,GAAC,OAAGA,EAAEX,OAASkC,IAAG,GAExD,GAAoB,aAAjBC,EAAQzD,KAAoB,CACXyD,EAAQnB,OAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEM,WAAac,EAAUG,KAAI,GAAGjC,OAA1E,IACImC,EAASD,EAAQnB,OAAOxB,IAAI,SAAApD,GAAC,OAAGA,EAAE6E,YAAWzB,IAAI,SAAAsB,GAGjD,MAAO,CAACA,MAASA,EAAOf,QAFXe,IAAUiB,EAAUG,GAAK,EAAI,KAK9CJ,EAAKI,GAAK,CAACE,OAAUA,EAAQV,MAASQ,EAAGxD,KAAQyD,EAAQzD,KAAM+C,MAAM,QACnE,GAAoB,eAAjBU,EAAQzD,KAAsB,CACvByD,EAAQlC,OAEpB6B,EAAKI,GAAK,CAACnC,QAAWgC,EAAUG,GAAIxD,KAAQyD,EAAQzD,KAAM+C,MAAM,QAGhEK,EAAKI,GAAK,2BAIlBT,EAAKY,WAAaP,EAClBL,EAAKA,MAAO,EAELA,IAIT,SAASa,EAAWC,EAAOC,EAASnD,EAAeiC,GACtD,OAAOiB,EAAM5C,KAAKH,IAAI,SAACiD,EAAMjI,GACzB,IAAIkI,EAAW7H,OAAO0E,KAAKF,GACvBsD,EAAQtD,EAAcqD,EAAS,IAAI/C,KAAKH,IAAI,SAAApD,GAAC,OAAGA,EAAC,aAAgB4F,QAAQS,EAAKZ,IA2BlF,OA1BAY,EAAKG,WAAaJ,EAAQ7C,KAAKnF,GAAGgH,EAClCiB,EAAKb,KAAOa,EAAKZ,GACdc,GAAS,GACRD,EAAST,QAAQ,SAAAH,GACb,GAA+B,cAA5BzC,EAAcyC,GAAMpD,KAAqB,CAC5B4C,EAAiBZ,OAAO,SAAAC,GAAC,OAAGA,EAAEX,OAAS8B,IAAM,GAAG7B,OAA5D,IACI4C,EAAMxD,EAAcyC,GAAMnC,KAAKgD,GAInCE,EAAI9C,QAAU8C,EAAIC,SAClBD,EAAInE,KAAO,aACX+D,EAAKJ,WAAiCU,MAAnBN,EAAKJ,WAA0BI,EAAKJ,WAAa,GACpEI,EAAKJ,WAAWP,GAAQe,MACvB,CACD,IAAI7B,EAASM,EAAiBZ,OAAO,SAAAC,GAAC,OAAGA,EAAEX,OAAS8B,IAAM,GAAGd,OACzDgC,EAAM3D,EAAcyC,GAAMnC,KAAKgD,GAC/BP,EAASpB,EAAOxB,IAAI,SAAA1D,GAEpB,MAAO,CAACgF,MAAShF,EAAEmF,UAAWlB,QAASiD,EAAIlH,EAAEmF,cAEjDwB,EAAKJ,WAAiCU,MAAnBN,EAAKJ,WAA0BI,EAAKJ,WAAa,GACpEI,EAAKJ,WAAWP,GAAQ,CAACM,OAASA,EAAQ1D,KAAQ,eAIvD+D,IAKR,SAASQ,EAAUC,EAAO7D,EAAeiC,GAC5C4B,EAAMjB,QAAQ,SAACtE,EAAGnD,GACdmD,EAAE,GAAG0E,WAAa,GAClBxH,OAAO0E,KAAKF,GAAeG,IAAI,SAAA2D,GAC3B,GAA8B,cAA3B9D,EAAc8D,GAAKzE,KAAqB,CACvC,IAAI0E,EAAO/D,EAAc8D,GAAKxD,KAAKe,OAAO,SAAAC,GAAC,OAAIA,EAAE0C,YAAc1F,EAAE,GAAGiE,MAAUjB,EAAE0C,YAAe,QAAU1F,EAAE,GAAGiE,OAAQ,GACtHjE,EAAE,GAAG0E,WAAWc,GAAO,GAEvB,IAAIG,EAAQhC,EAAiBZ,OAAO,SAAAC,GAAC,OAAGA,EAAEX,OAASmD,IAAK,GAAGlD,OAE3DtC,EAAE,GAAG0E,WAAWc,GAAKpD,QAAUqD,EAAKN,SACpCnF,EAAE,GAAG0E,WAAWc,GAAKvD,UAAYwD,EAAKxD,UACtCjC,EAAE,GAAG0E,WAAWc,GAAKrD,UAAYsD,EAAKtD,UACtCnC,EAAE,GAAG0E,WAAWc,GAAKG,MAAQA,EAC7B3F,EAAE,GAAG0E,WAAWc,GAAKzE,KAAO,kBAC1B,GAA8B,YAA3BW,EAAc8D,GAAKzE,KAAmB,CAC3C,IAAI0E,EAAO/D,EAAc8D,GAAKxD,KAAKe,OAAO,SAAAC,GAAC,OAAGA,EAAE0C,YAAc1F,EAAE,GAAGiE,OAAM,GAErE2B,EADSjC,EAAiBZ,OAAO,SAAAC,GAAC,OAAGA,EAAEX,OAASmD,IAAK,GAAGnC,OACtCxB,IAAI,SAAA1D,GAEtB,MAAO,CAACgF,MAAShF,EAAEmF,UAAWlB,QAASqD,EAAKtH,EAAEmF,cAElDtD,EAAE,GAAG0E,WAAWc,GAAO,CAACf,OAASmB,EAAU7E,KAAQ,iBAGnD8E,QAAQC,MAAM,sBAK1B,IAAIC,EAAYhE,IAAOwD,EAAM1D,IAAI,SAAA3C,GAAC,OAAGA,EAAEnC,UAGnCiJ,EAASjE,MAAiBQ,MAAM,CAAC,EAAG,MAAOE,OAAM,GAqBrD,OAnBkB8C,EAAM1D,IAAI,SAAC7B,EAAGnD,GAC5BmD,EAAEgG,OAASA,EAAOxD,OAAO,CAAC,EAAGuD,EAAY,IAEzC,IAAIE,EAAYjG,EAAEjD,OAAS,EAEvBmJ,GADUlG,EAAE6B,IAAI,SAAArD,GAAC,OAAGA,EAAEyG,aACX,GACf,OAAOjF,EAAE6B,IAAI,SAACpD,EAAGV,GACb,IAAIkG,EAAO/G,OAAOiJ,OAAO,GAAI1H,GAEzB2H,EAAOnC,EAAKgB,WAAaiB,EAM7B,OALAjC,EAAKoC,SAAYtI,EAAIkI,EAAaG,EAAO,EACzCF,GAAsBjC,EAAKgB,WAE3BhB,EAAKqC,KAAQvI,EAAIkI,EAAajG,EAAEgG,OAAOjI,GAAKiC,EAAEgG,OAAOD,EAAY,GAE1D9B,MAsBZ,SAASsC,EAAoBC,EAAUnD,EAAQoD,GAElD,IAAI7E,EAAuB,MAAf6E,EAAsBvJ,OAAO0E,KAAK4E,EAAS,GAAG,GAAG9B,YAAa+B,EA+C1E,OA7CcD,EAAS3E,IAAI,SAAA6E,GACvB,OAAO9E,EAAKC,IAAI,SAAClC,GACb,OAAO+G,EAAK7E,IAAI,SAACpD,GACb,IAAIkI,EAAeD,EAAKA,EAAK3J,OAAS,GAAGgH,MACzC,GAA8B,eAA3BtF,EAAEiG,WAAW/E,GAAKoB,KAUjB,OATAtC,EAAEiG,WAAW/E,GAAKiH,QAAUD,EAC5BlI,EAAEiG,WAAW/E,GAAKyD,MAAQC,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAU1C,IAAK,GAAGiD,SAChEnE,EAAEiG,WAAW/E,GAAK2G,KAAO7H,EAAE6H,KAC3B7H,EAAEiG,WAAW/E,GAAKsE,KAAOxF,EAAEwF,KAC3BxF,EAAEiG,WAAW/E,GAAK0G,SAAW5H,EAAE4H,SAC/B5H,EAAEiG,WAAW/E,GAAKoE,MAAQpE,EAC1BlB,EAAEiG,WAAW/E,GAAK2C,OAASe,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1C,IAAK,GAAG2C,OACjE7D,EAAEiG,WAAW/E,GAAK+C,SAAWW,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1C,IAAK,GAAG+C,SACnEjE,EAAEiG,WAAW/E,GAAKgD,WAAaU,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1C,IAAK,GAAGgD,WAC9DlE,EAAEiG,WAAW/E,GAClB,GAA8B,aAA3BlB,EAAEiG,WAAW/E,GAAKoB,KAAoB,CAC3C,GAAGtC,EAAEqF,KAAK,CACN,IAAIX,EAAQ1E,EAAEiG,WAAW/E,GAQzB,OAPAwD,EAAMyD,QAAUD,EAChBxD,EAAM0D,SAAWpI,EAAEiG,WAAW/E,GAAK8E,OAAO1B,OAAO,SAAAC,GAAC,OAAiB,IAAdA,EAAEZ,UAAe,GAAGe,MACzEA,EAAMC,MAAQC,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAU1C,IAAK,GAAGsD,YAAYF,OAAO,SAAAC,GAAC,OAAGA,EAAEG,QAAUA,EAAM0D,WAAU,GAAGzD,MAC1GD,EAAMmD,KAAO7H,EAAE6H,KACfnD,EAAMc,KAAOxF,EAAEwF,KACfd,EAAMkD,SAAW5H,EAAE4H,SACnBlD,EAAM2D,UAAYnH,EACXwD,EAGP,OADa1E,EAAEiG,WAAW/E,GAAK8E,OAAShG,EAAEiG,WAAW/E,GAAK8E,OAAShG,EAAEiG,WAAW/E,IAClEkC,IAAI,SAACkF,EAAIhJ,GAOnB,OANAgJ,EAAG3D,MAAQC,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAU1C,IAAK,GAAGsD,YAAYF,OAAO,SAAAC,GAAC,OAAGA,EAAEG,QAAU4D,EAAG5D,QAAO,GAAGC,MACjG2D,EAAGT,KAAO7H,EAAE6H,KACZS,EAAG9C,KAAOxF,EAAEwF,KACZ8C,EAAGV,SAAW5H,EAAE4H,SAChBU,EAAGD,UAAYnH,EACfoH,EAAGH,QAAUD,EACNI,IAKflB,QAAQC,MAAM,+FCnP3B,SAASkB,EAASC,EAAWC,EAAWC,EAAQC,GACnD,OAAOF,EAAUrF,IAAI,SAAAwF,GAAE,OA4DpB,SAASC,EAAQL,EAAWnD,EAAMyD,EAAYJ,EAAQC,GACzD,IAAIV,EAAOO,EAAUlE,OAAO,SAAAyE,GACxB,OAAOA,EAAGJ,KAAYtD,EAAKqD,KAE/B,OAAGT,EAAK3J,OAAS,GACbwK,EAAWtK,KAAKyJ,EAAK,IACdY,EAAQL,EAAWP,EAAK,GAAIa,EAAYJ,EAAQC,KAEvDG,EAAWtK,KAAK,CAACwI,MAAQ,EAAMxB,KAAQH,EAAKqD,GAASlC,WAAc,IAC5DsC,EAAWE,WArEIH,CAAQL,EAAWI,EAAI,CAACA,GAAKF,EAAQC,mZCF5D,SAASM,EAA4BnL,EAAMoL,GAE9C,IAAIC,EAAYD,EAAIE,OAAO,KAAKC,QAAQ,cAAc,GAAM3D,KAAK,YAAa,qBAC9EyD,EAAUC,OAAO,QAAQC,QAAQ,kBAAkB,GAAM3D,KAAK,SAAU,IAAIA,KAAK,KAAM,IAAIA,KAAK,KAAM,IAAIA,KAAK,OAAQ,QAEvHyD,EAAUC,OAAO,QAAQ1D,KAAK,KAAM,GAAGA,KAAK,KAAM,GAAGA,KAAK,KAAM,OAAOA,KAAK,KAAM,KAAKA,KAAK,SAAU,QAAQA,KAAK,eAAgB,KACnIyD,EAAUC,OAAO,QAAQE,KAAK,QAAQ5D,KAAK,YAAa,oBACxCyD,EAAUC,OAAO,KAAKC,QAAQ,cAAc,GAAM3D,KAAK,YAAa,qBAC1E0D,OAAO,QAAQE,KAAK,UAE9B,IAAIC,EAAkB,GAClBC,EAAqB,GAEzB1L,EAAKsF,IAAI,SAAA6E,GACLA,EAAK3D,OAAO,SAAAlD,GAAC,OAAa,GAAVA,EAAEiE,OAAcjC,IAAI,SAAAoC,IACa,GAA1CgE,EAAmB5D,QAAQJ,EAAKA,QAC/BgE,EAAmBhL,KAAKgH,EAAKA,MAC7B+D,EAAgB/K,KAAK,CAACgH,KAAQA,EAAKA,KAAMiE,MAASjE,EAAKoC,gBAKnE,IAAI8B,EAAcpG,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MACxD6F,EAAcR,EAAUS,UAAU,mBAAmB9L,KAAKyL,GAAiBM,KAAK,KAAKnE,KAAK,QAAS,SAACxF,EAAG9B,GAAJ,OAAS8B,EAAEsF,OAAM6D,QAAQ,iBAAiB,GAIjJ,OAHAM,EAAYjE,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAU,cAAc,IAAMsL,EAAYxJ,EAAEuJ,QAAQ,SAClFE,EAAYP,OAAO,UAAU1D,KAAK,IAAK,GAAGA,KAAK,OAAQ,4BAEhDyD,EAGJ,SAASW,EAAmB/B,EAAUgC,EAASnF,EAAQoF,GAI1D,IAKIC,EAAWC,EAAa5F,OAAO,SAAAC,GAAC,MAAc,mBAAXA,EAAEjC,OAA2Bc,IAAI,SAAApD,GAAC,OAAGA,EAAEmK,YAC1EhH,EAAO1E,OAAO0E,KAAK4E,EAAS,GAAG,GAAG9B,YAAY3B,OAAO,SAAAC,GAAC,OAA4B,IAAzB0F,EAASrE,QAAQrB,KAC1E6F,EAAYC,EAAItC,GAChBuC,EAAaL,EAAS3L,OAAS,EAAIsG,EAAON,OAAO,SAAAC,GAAC,OAAkC,IAA/B0F,EAASrE,QAAQrB,EAAEX,SAAeR,IAAI,SAAApD,GAAC,OAAGA,EAAE4D,QAAS,KAE9GkE,EAAoBsC,EAAWxF,EAAQ0F,GAEvBhH,IAAO8G,EAAUhH,IAAI,SAAA7B,GAAC,OAAGA,EAAEjD,UAA3C,IACIiM,EAAkBjH,IAAU8G,EAAUhH,IAAI,SAAA7B,GAAC,OAAGA,EAAEjD,UAEhDkM,EAAW,IAAIC,MAAMF,GAAiBG,OAAOtH,IAAI,SAACpD,EAAG5B,GACrD,IAAIuJ,EAAO,EAAI4C,EAGf,MAAO,CAACI,KAFIvM,EAAIuJ,EAEMiD,KADVxM,EAAI,GAAIuJ,EACckD,KAAQzM,KAG1C0M,EAAgBV,EAAUhH,IAAI,SAAA6E,GAAI,OAAIA,EAAK3D,OAAO,SAAAkB,GAAI,OAAgB,GAAbA,EAAKH,SAC9D0F,EAAYX,EAAUY,QAAQ,SAAA/C,GAAI,OAAIA,EAAK3D,OAAO,SAAAkB,GAAI,OAAiB,IAAdA,EAAKH,SAElEmF,EAASpH,IAAI,SAAChC,EAAGhD,GACb,IAAI+H,EAAQ2E,EAAcE,QAAQ,SAAA/C,GAAI,OAAIA,EAAK3D,OAAO,SAAAkB,GAClD,OAAS,IAANpH,EAC4B,IAApBoH,EAAKgB,WAELhB,EAAKoC,SAAWxG,EAAEuJ,MAAQnF,EAAKoC,UAAYxG,EAAEwJ,QAI5D,OADAxJ,EAAEtD,KAAOqI,EACF/E,IAGX,IAAI6J,EAAa9H,EAAKC,IAAI,SAAAlC,GACtB,IAAIgG,EAAQtC,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAU1C,IAAK,GAC3CgK,EAAUV,EAASpH,IAAI,SAAA+H,GASvB,OAPGA,EAAIrN,KAAKQ,OAAS,EACjB6M,EAAIC,MAAQD,EAAIrN,KAAKsF,IAAI,SAAAlD,GACrB,OAAOA,EAAE+F,WAAW/E,KAGxBiK,EAAIC,MAAQ,GAET,CAACtN,KAAQqN,EAAIC,MAAOtH,MAAS,CAACqH,EAAIR,KAAMQ,EAAIP,KAAMrE,MAAS4E,EAAIN,KAAM3J,IAAOA,KAGnFmK,EAAWN,EAAU3H,IAAI,SAAApD,GAAC,OAAGA,EAAEiG,WAAW/E,KAC1CoK,EAAW,CAACxN,KAAQuN,GAExB,GAAkB,eAAfnE,EAAM5E,KAAsB,CAK3B,IAAI8C,EAAI9B,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CAAC,EAzD1D,KA2DDyH,EAAYjI,MACf1C,MAAM,SAASV,GAAK,OAAOA,EAAEyD,UAC7BI,OAAOqB,EAAErB,UACTyH,WAAWpG,EAAEqG,MAAM,KAEpBP,EAAQrF,QAAQ,SAAAzE,GAKZ,OAJAA,EAAEkB,KAAO4E,EAAM5E,KACflB,EAAEsK,KAAOH,EAAUnK,EAAEtD,MAErBsD,EAAE2C,OAAS,CAACmD,EAAM7D,IAAK6D,EAAMzD,KACtBrC,IAIX,IAAIuK,EAAOrI,IAAO+H,EAASL,QAAQ,SAAAY,GAAC,OAAGA,EAAEjI,WACrCkI,EAAOvI,IAAO+H,EAASL,QAAQ,SAAAY,GAAC,OAAGA,EAAEjI,WACrCmI,EAAKxI,MAAiBS,OAAO,CAAC8H,EAAMF,IAAO7H,MAAM,CAAC,EA3EjD,KA6EDiI,EAAazI,MAChB1C,MAAM,SAASV,GAAK,OAAOA,EAAEyD,UAC7BI,OAAO+H,EAAG/H,UACVyH,WAAWM,EAAGL,MAAM,KAKrB,OAHAH,EAASI,KAAOK,EAAWV,GAEhB,CAACnK,IAAOA,EAAK8K,SAAA3B,EAAgBa,GAAU5I,KAAQ4E,EAAM5E,KAAMgJ,SAAYA,GAKlF,IAAItF,EAASqF,EAAS,GAAGrF,OACzBkF,EAAQQ,KAAO,KACfJ,EAASI,KAAO1F,EAAO5C,IAAI,SAAA1D,GAAC,OAAG2L,EAAS/G,OAAO,SAAAC,GAAC,OAAGA,EAAE6D,WAAa1I,EAAEgF,UAC5DpB,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EA5F1C,KA8FLoH,EAAQ9H,IAAI,SAAAhC,GACRA,EAAEkB,KAAO4E,EAAM5E,KACf,IAAI2J,EAAS/E,EAAM1C,YAUnB,OATApD,EAAEsK,KAAO1F,EAAO5C,IAAI,SAAAsB,GAChB,IAAIC,EAAQsH,EAAO3H,OAAO,SAAAC,GAAC,OAAGA,EAAEG,QAAUA,EAAMA,QAE5CwH,EAAS9K,EAAEtD,KAAKkN,QAAQ,SAAAhL,GAAC,OAAGA,EAAEgG,OAAO1B,OAAO,SAAAC,GAAC,OAAGA,EAAEG,QAAUA,EAAMA,UAAQtB,IAAI,SAAAwI,GAAC,OAAGA,EAAEjI,UACpFwI,EAAU7I,IAAQ4I,GAClBE,EAAQ9I,IAAa4I,GACzB,MAAO,CAACxH,MAASA,EAAMA,MAAOyH,QAAWA,EAASC,MAASA,EAAOC,KAAQF,EAAUC,EAAOE,OAAUH,EAAUC,EAAOzH,MAASA,EAAM,GAAGA,MAAOb,MAAS1C,EAAE0C,SAGvJ1C,IAGX,IAAImL,EAAOvG,EAAO5C,IAAI,SAAAoJ,GAClB,IAAItL,EAAMsL,EAAK9H,MACf,OAAOwG,EAAQF,QAAQ,SAAAhL,GACnB,OAAOA,EAAE0L,KAAKpH,OAAO,SAAAC,GAAC,OAAGA,EAAEG,QAAUxD,QAK7C,MADW,CAACA,IAAOA,EAAK8K,SAAA3B,EAAgBa,GAAU5I,KAAQ4E,EAAM5E,KAAMgJ,SAAYA,EAAUtF,OAAUuG,KAO1GE,EAAcnJ,MAAiBS,OAAO,CAAC,EAAGwG,IAAkBzG,MAAM,CAAC,EAAG,MAE1DiG,EAAQX,OAAO,OAAOC,QAAQ,iBAAiB,GACrDD,OAAO,QAAQE,KAAK,UAAWvB,EAASzJ,OAAS,KAAMoO,EAAW,GAAGpO,QAE/E,IAAI4K,EAAMa,EAAQX,OAAO,OACzBF,EAAIxD,KAAK,KAAM,qBACfwD,EAAIxD,KAAK,SAAW,IAAAvC,EAAK7E,QAEzB,IACIqL,EADYV,EAA4BmB,EAAWlB,GAC3BU,UAAU,mBAElCpH,EAAO0G,EAAIE,OAAO,KAAKC,QAAQ,mBAAmB,GACtD7G,EAAKkD,KAAK,YAAa,qBAEvB,IAAIiH,EAAanK,EAAKoH,UAAU,cAAc9L,KAAKmN,GAAYpB,KAAK,KAAKnE,KAAK,QAAS,SAAAxF,GAAC,OAAGA,EAAEgB,IAAM,eACnGyL,EAAWjH,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAU,eAAiB,GAADA,EAAkB,MAE7DuO,EAAWvD,OAAO,QAAQE,KAAK,SAAApJ,GAAC,OAAGA,EAAEgB,MAAKwE,KAAK,IAAK,IAAIA,KAAK,IAAK,IAAIkH,MAAM,cAAe,OAAvG,IAEIC,EAAgBF,EAAWvD,OAAO,KAAKC,QAAQ,aAAa,GAI5DyD,GAFYD,EAAczD,OAAO,KAAKC,QAAQ,gBAAgB,GAEhDwD,EAAcjD,UAAU,gBAAgB9L,KAAK,SAAAoC,GAAC,OAAGA,EAAE8L,WAAUnC,KAAK,KAAKR,QAAQ,cAAc,IAC/GyD,EAAYpH,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,cAAc,IAAMqO,EAAYrO,IAAI,SAE3E,IAAI2O,EAAaD,EAAYxI,OAAO,SAAAC,GAAC,MAAc,eAAXA,EAAEjC,OAE1CyK,EAAWC,GAAG,YAAa,SAAC9M,EAAG9B,EAAGoH,GAC9B,IAAIyH,EAAO/M,EAAEpC,KAAKsF,IAAI,SAAApD,GAAC,OAAGA,EAAEiH,aAIxBiG,GAHWvD,EAAYrF,OAAO,SAAA/C,GAAC,OAAG0L,EAAKrH,QAAQrE,EAAEiE,OAAS,IAAG6D,QAAQ,YAAY,GACrE/F,IAAU,YAAYsG,UAAU,SAClBtF,OAAO,SAAAC,GAAC,OAAG0I,EAAKrH,QAAQrB,EAAEzG,KAAK0H,MAAQ,IAAG6D,QAAQ,mBAAmB,GAC3F/F,MAAiBS,OAAO7D,EAAE6D,QAAQD,MAAM,CAAC,EA7JxC,MA8JER,IAAUkC,EAAKpH,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,MAC7FuB,GAAG,WAAY,SAAC9M,EAAG9B,EAAGoH,GACrBlC,IAAa,2BAA2B+F,QAAQ,YAAY,GAC5D/F,IAAa,oBAAoB+F,QAAQ,mBAAmB,GAC5D/F,IAAUkC,EAAKpH,IAAI+O,OAAO,WAAWC,WAGzC,IAAIC,EAAU/J,MACbgK,MAAMhK,KACN8B,EAAE,SAAClF,EAAG9B,EAAGgD,GAEN,OADQkC,MAAiBS,OAAO,CAAC,EAAG3C,EAAE9C,OAAS,IAAIwF,MAAM,CAAC,EAxKjD,KAwK6DE,OAAM,EACrEkJ,CAAE9O,KAEZmP,GAAG,SAAArN,GACA,OAAO,IAEVsN,GAAG,SAAAtN,GACA,IAAIuN,EAAMhP,OAAO0E,KAAKjD,GAAG5B,OAAS,EAElC,OADQgF,MAAiBS,OAAO,CAAC,EAAG,KAAKD,MAAM,CAAC,EAAG,KAAKE,OAAM,EACvDoB,CAAEqI,KAGbV,EAAWW,KAAK,SAACxN,EAAG9B,EAAGuP,GACnB,IAAIC,EAAUtK,IAAUqK,EAAMvP,IAAIwL,UAAU,KAAK9L,KAAK,CAACoC,EAAEwL,OAAO7B,KAAK,KAAKR,QAAQ,gBAAgB,GAClGuE,EAAQlI,KAAK,YAAa,iCACfkI,EAAQxE,OAAO,QAAQ1D,KAAK,IAAK2H,GACvC3H,KAAK,OAAQ,2BACjBkH,MAAM,SAAU,6BAGNG,EAAW3D,OAAO,QAAQ1D,KAAK,SA5LjC,IA4LmDA,KAAK,QAAS,IAAIkH,MAAM,OAAQ,QAAQA,MAAM,SAAU,QAAxH,IAEIiB,EAAYd,EAAWnD,UAAU,cAAc9L,KAAK,SAAAoC,GAKpD,OAJcA,EAAEpC,KAAKsF,IAAI,SAAApD,GAErB,OADAA,EAAE8D,MAAQ5D,EAAE4D,MACL9D,MAEM6J,KAAK,QAAQR,QAAQ,SAAS,GAEnDwE,EAAUnI,KAAK,QAAS,IACxBmI,EAAUnI,KAAK,SAAU,SAACxF,EAAG9B,GACzB,GAAeuI,MAAZzG,EAAE2D,OAAoB,CACrB,IAAIiK,EAAO5N,EAAE2D,OAEb,OADAiK,EAAKhK,MAAM,CAAC,GAAI,IACTgK,EAAK5N,EAAEwD,WAAaoK,EAAK5N,EAAEsD,WAElC,OAAO,IAEZkC,KAAK,YAAa,SAACxF,EAAG9B,GACrB,IAAI0P,EAAO5N,EAAE2D,OAEb,OADAiK,EAAKhK,MAAM,CAAC,GAAI,IACT,eAAegK,EAAK5N,EAAEsD,WAAW,MAG5CqK,EAAUnI,KAAK,OAAQ,4BAEVqH,EAAW3D,OAAO,QAAQ1D,KAAK,QAAS,IAAIA,KAAK,SAAU,SAACxF,EAAG9B,GACxE,OAAgBuI,MAAbzG,EAAEpC,KAAK,GACC,EAEA,IAIR4H,KAAK,YAAa,SAACxF,EAAG9B,GACzB,GAAgBuI,MAAbzG,EAAEpC,KAAK,GAAgB,CACtB,IAAIgQ,EAAO5N,EAAEpC,KAAK,GAAG+F,OAGrB,OAFAiK,EAAKhK,MAAM,CAjON,GAiOe,IAEb,eAAegK,EADXxK,IAAQpD,EAAEpC,KAAKsF,IAAI,SAAApD,GAAC,OAAGA,EAAE2D,YACH,IAEjC,MAAO,mBAEZ+B,KAAK,OAAQ,WAEhB,IAAIqI,EAAejB,EAAYxI,OAAO,SAAAC,GAAC,MAAc,aAAXA,EAAEjC,OACzByL,EAAa3E,OAAO,QAAQ1D,KAAK,KAAM,GAAGA,KAAK,KAAM,GAAGA,KAAK,KAAM,GAAGA,KAAK,KA1OjF,IA0O+FA,KAAK,SAAU,QAAQA,KAAK,eAAgB,IACxIqI,EAAa3E,OAAO,QAAQ1D,KAAK,SA3OpC,IA2OsDA,KAAK,QAAS,IAAIA,KAAK,UAAW,GACrGqI,EAAaf,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAChC,IAAI8L,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EA7OtC,KA8OTR,IAAUlC,EAAEhD,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,IAC/D9B,EAAYrF,OAAO,SAAAC,GAAC,OAAGA,EAAEkF,OAASvJ,EAAE4D,MAAM,IAAMS,EAAEkF,MAAQvJ,EAAE4D,MAAM,KAAIuF,QAAQ,YAAY,GACzF/F,IAAU,YAAYsG,UAAU,SAEvCtF,OAAO,SAAAkB,GAAI,OAAGA,EAAK1H,KAAKkQ,UAAY9N,EAAE4D,MAAM,IAAM0B,EAAK1H,KAAKkQ,SAAW9N,EAAE4D,MAAM,KAAIuF,QAAQ,mBAAmB,KAExH2D,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI+O,OAAO,WAAWC,SAClC9J,IAAa,2BAA2B+F,QAAQ,YAAY,GAC5D/F,IAAa,oBAAoB+F,QAAQ,mBAAmB,KAGhE,IAEI4E,EAFkBpB,EAAcvI,OAAO,SAAAC,GAAC,MAAc,aAAXA,EAAEjC,OAEfsH,UAAU,iBAAiBA,UAAU,WAAW9L,KAAK,SAAAoC,GAAC,OAAGA,EAAE8F,SAAQ6D,KAAK,KAAKR,QAAQ,SAAS,GAEhI4E,EAAY7E,OAAO,QAAQ1D,KAAK,IAAK,SAACnE,EAAGnD,GAiBrC,OAhBekF,MACdgK,MAAMhK,KACN8B,EAAE,SAAClF,EAAG9B,GAEH,OADQkF,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAGoK,KAC3ChB,CAAE9O,KAEZmP,GAAG,SAAArN,GAIA,OAFQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,GAAI,IAAIE,OAAM,EAEtDoB,CAAElF,EAAEoM,UAEdkB,GAAG,SAAAtN,GAEA,OADQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,GAAI,IAAIE,OAAM,EACtDoB,CAAElF,EAAEmM,OAER8B,CAAS5M,KAEjBmE,KAAK,YAAa,sBAAsBA,KAAK,OAAQ,SAACxF,EAAG9B,GACxD,OAAO8B,EAAE,GAAKA,EAAE,GAAGyE,MAAQ,SAC5Be,KAAK,UAAW,IAEnBuI,EAAY7E,OAAO,QAAQ1D,KAAK,IAAK,SAACnE,EAAGnD,GAWrC,OAVckF,MACbgK,MAAMhK,KACN8B,EAAE,SAAClF,EAAG9B,GAEH,OADQkF,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAGoK,KAC3ChB,CAAE9O,KAEZ8O,EAAE,SAAAhN,GAEC,OADQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,GAAI,IAAIE,OAAM,EACtDoB,CAAElF,EAAEiM,UAERkB,CAAQ9L,KAEhBmE,KAAK,YAAa,sBAAsBA,KAAK,OAAQ,QAAQA,KAAK,SAAU,SAACxF,EAAG9B,GAC/E,OAAO8B,EAAE,GAAKA,EAAE,GAAGyE,MAAQ,SAO/B,IAAIyJ,EAAezB,EAAWvD,OAAO,KAAKC,QAAQ,YAAY,GAC9D+E,EAAa1I,KAAK,YAAa,qBAE/B,IAAI2I,EAASD,EAAa9J,OAAO,SAAAC,GAAC,MAAc,eAAXA,EAAEjC,OAEnCgM,EAAWD,EAAOzE,UAAU,aAAa9L,KAAK,SAAAoC,GAC9C,OAAOA,EAAEoL,SAASI,OAAO7B,KAAK,KAAKR,QAAQ,WAAW,GAE7CiF,EAASlF,OAAO,QAAQ1D,KAAK,QAAS,SAACxF,EAAG9B,EAAGgD,GAEtD,OAtTgB,IAqTYA,EAAE9C,SAE/BoH,KAAK,SAAU,SAACxF,EAAG9B,GAElB,OADQkF,MAAiBS,OAAO,CAAC,EAAGtF,OAAO0E,KAAKjD,GAAG5B,SAASwF,MAAM,CAAEyK,GAAkB,GAC/ErB,CAAEzO,OAAO0E,KAAKjD,GAAG5B,OAAS,KAClCoH,KAAK,OAAQ,2BAEhB4I,EAAS5I,KAAK,YAAa,SAACxF,EAAG9B,EAAGgD,GAI9B,MAAO,aAhUS,IA6TYA,EAAE9C,OAGDF,EAAG,MA9TvB,GA4TDkF,MAAiBS,OAAO,CAAC,EAAGtF,OAAO0E,KAAKjD,GAAG5B,SAASwF,MAAM,CAAEyK,GAAkB,GACjErB,CAAEzO,OAAO0E,KAAKjD,GAAG5B,OAAS,IACJ,MAE/C+P,EAAOX,KAAK,SAACxN,EAAG9B,EAAGuP,GACf,IAAIa,EAAUtO,EAAEoL,SAASxN,KAAKsF,IAAI,SAAApD,GAAC,OAAGA,EAAE2D,UACpCyB,EAAI9B,MAAiBS,OAAO,CAACT,IAAOkL,GAAUlL,IAAOkL,KAAW1K,MAAM,CAAC,EApU3D,MAqUZoJ,EAAI5J,MAAiBS,OAAO,CAAC,EAAGT,IAAOpD,EAAEoL,SAASI,KAAKtI,IAAI,SAAAqL,GAAC,OAAGhQ,OAAO0E,KAAKsL,GAAGnQ,UAAW,IAAIwF,MAAM,CAAEyK,GAAkB,IAC3HjL,IAAUqK,EAAMvP,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAc8B,IAAIM,KAAK,YAAa,oBACjGpC,IAAUqK,EAAMvP,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,IAAIxH,KAAK,YAAa,sBAInG,IAAIgJ,EAAUN,EAAa9J,OAAO,SAAAC,GAAC,MAAc,aAAXA,EAAEjC,OACpCqM,EAAWD,EAAO9E,UAAU,aAAa9L,KAAK,SAAAoC,GAC9C,OAAOA,EAAEoL,SAASI,OAAO7B,KAAK,KAAKR,QAAQ,WAAW,GACtDuF,EAASD,EAASvF,OAAO,QAAQ1D,KAAK,QAAS,SAACxF,EAAG9B,EAAGgD,GAEtD,OAhVgB,IA+UYA,EAAE9C,SAE/BoH,KAAK,SAAU,SAACxF,EAAG9B,EAAGgD,GAErB,OADQkC,MAAiBS,OAAO,CAAC,EAAG,MAAMD,MAAM,CAAEyK,GAAiB,GAC5DrB,CAAEhN,EAAE5B,UACZoH,KAAK,OAAQ,SAACxF,EAAG9B,GAChB,OAAeuI,MAARzG,EAAE,GAAkBA,EAAE,GAAGyE,MAAQ,SACzCe,KAAK,UAAW,IAEnBiJ,EAASjJ,KAAK,YAAa,SAACxF,EAAG9B,EAAGgD,GAI9B,MAAO,aA5VS,IAyVYA,EAAE9C,OAGDF,EAAG,MA1VvB,GAwVDkF,MAAiBS,OAAO,CAAC,EAAG,MAAMD,MAAM,CAAEyK,GAAkB,GAC7CrB,CAAEhN,EAAE5B,SACgB,MAE/CsQ,EAAO5B,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAC1B,IAAIsD,EAAQpB,IAAU,KAAKpD,EAAE,GAAGoF,OAAOsE,UAAU,WACjDlF,EAAMJ,OAAO,SAAAC,GAAC,OAAGA,EAAE,GAAGG,QAAUxE,EAAE,GAAGkI,WAAU1C,KAAK,UAAW,IAC/DhB,EAAMJ,OAAO,SAAAC,GAAC,OAAGA,EAAE,GAAGG,OAASxE,EAAE,GAAGkI,WAAU1C,KAAK,UAAW,IAC9DpC,IAAUlC,EAAEhD,IAAIsH,KAAK,UAAW,MACjCsH,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIsH,KAAK,UAAW,IACpBpC,IAAU,KAAKpD,EAAE,GAAGoF,OAAOsE,UAAU,WAAWlE,KAAK,UAAW,MAIhFgJ,EAAOhB,KAAK,SAACxN,EAAG9B,EAAGuP,GACX,IAAI5I,EAAS7E,EAAEoL,SAASI,KAAKtI,IAAI,SAAAqL,GAC7B,OAAe9H,MAAR8H,EAAE,GAAkBA,EAAE,GAAGrG,SAAW,KAE3CyG,EAASvL,MAAgBS,OAAOgB,GAAQjB,MAAM,CAAC,EA7WvC,MA6W0DgL,QAAQ,IAC1E5B,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,MAAMD,MAAM,CAAEyK,GAAkB,IACpEjL,IAAUqK,EAAMvP,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,IAAI/F,KAAK,YAAa,oBACxGpC,IAAUqK,EAAMvP,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAcuL,IAASnJ,KAAK,YAAa,sBClZ3G,SAASqJ,EAAenK,EAAQoF,GAEnC,IAAIgF,EAAO1L,IAAU,SACjBxF,EAAOmR,IAEXD,EAAKpF,UAAU,KAAKwD,SAEoB,eAArC9J,IAAU,gBAAgBgG,QACzBQ,EAAmBhM,EAAMkR,EAAMpK,GAC/BsK,SAASC,eAAe,WAAWC,UAAW,IAE9CC,EAAuBvR,EAAMkR,EAAMpK,EAAQoF,GAC3CkF,SAASC,eAAe,WAAWC,UAAW,wVCZ/C,IAAIlF,EAAe,GAEnB,SAASoF,EAAaC,EAAU3K,GACnC,IAAI4K,EAActF,EAAa5F,OAAO,SAAAC,GAAC,MAAoB,gBAAjBA,EAAEkL,aACxCC,EAAcF,EAAYpM,IAAI,SAAAmB,GAAC,OAAGA,EAAEgL,WAAU3J,QAAQ2J,GAE1D,GAAGG,GAAeF,EAAYlR,OAAS,EAUnC,IARA,IAEIqR,EAAWC,EAFgB,IAAhBF,EAAmBhD,EAAW,GAAK8C,EAAYE,EAAc,GAAG5R,MAQvEM,GAJYkF,IAAU,YAEHsG,UAAU,eAAewD,SAExCsC,EAAc,GAAGtR,EAAIoR,EAAYlR,OAAQF,IAAK,CAEtD,IAAIyR,EAAML,EAAYpR,GAAG0R,eACzB,GAAoC,eAAjCN,EAAYpR,GAAG2R,cAA+B,CAC7C,IAAIC,EAAcH,EAAIF,EAAUH,EAAYpR,GAAG6R,eAAgBT,EAAYpR,GAAG8R,gBAAiBV,EAAYpR,GAAG+R,gBAC9GX,EAAYpR,GAAGN,KAAf8R,EAA0BI,GAC1BR,EAAYpR,GAAGmR,SAAW,KAAMnR,EAEhCgS,EAAaZ,EAAYpR,GAAIwG,GAC7B+K,EAAWK,MACV,CACD,IAAIA,EAAcH,EAAIF,EAAUH,EAAYpR,GAAG6R,eAAgBT,EAAYpR,GAAGiS,UAAWb,EAAYpR,GAAGkS,SACxGd,EAAYpR,GAAGN,KAAf8R,EAA0BI,GAC1BR,EAAYpR,GAAGmR,SAAW,KAAMnR,EAEhCgS,EAAaZ,EAAYpR,GAAIwG,GAC7B+K,EAAWK,GAIvB,IAAIO,EAAkBrG,EAAa5F,OAAO,SAAAC,GAAC,OAAGA,EAAEgL,UAAYA,IAE5DrF,EAAeqG,EAGZ,SAASC,EAAUf,EAAYgB,EAASlB,EAAUmB,EAAaC,EAASC,EAASC,GACpF,IAAIC,EAAW,CAACrB,WAAcA,EAAYM,cAAiBU,EAASlB,SAAYA,EAAUO,eAAiBY,EAAaK,cAAeJ,EAAS7S,KAAQ8S,GAOxJ,OANY,MAATC,GACCA,EAAMhL,QAAQ,SAAAmL,GACVF,EAASE,EAAG,IAAMA,EAAG,KAG7B9G,EAAa1L,KAAKsS,GACXA,EAGJ,SAAS7B,IAEZ,OADW/E,EAAa5L,OAAS,EAAI4L,EAAaA,EAAa5L,OAAS,GAAGR,KAAO4O,EAAW,GAK1F,SAASuE,EAAcC,EAAclC,EAAMhF,EAAYpF,GAE1D,IAAIuM,EAAY7N,IAAU,eACtBxF,EAAOmR,IAERkC,EAAU9H,QAAQ,WACjB6H,EAAa5H,KAAK,gBAClB6H,EAAU9H,QAAQ,UAAU,GAC5B2F,EAAKpC,MAAM,cAAe,SAsXlC,SAA0BuE,EAAWC,EAAapC,EAAMpK,EAAQoF,GAG5D,IAAI7G,EAAO1E,OAAO0E,KAAKiO,EAAY,GAAG,GAAGnL,YACrCoL,EAAiBnH,EAAa5F,OAAO,SAAAC,GAAC,MAAc,mBAAXA,EAAEjC,OAC3CgP,EAASD,EAAe/S,OAAS,EAAI+S,EAAejO,IAAI,SAAApD,GAAC,OAAGA,EAAEmK,YAAa,GAE3EoH,EAAUJ,EAAU/H,OAAO,OAAOC,QAAQ,eAAe,GAC7DkI,EAAQ3E,MAAM,QAAS,SAEvB,IAAI1D,EAAMqI,EAAQnI,OAAO,OAAOC,QAAQ,mBAAmB,GAEhDH,EAAIE,OAAO,QAAQE,KAAK,gBAC7B5D,KAAK,IAAK,IAAIA,KAAK,IAAK,IAE9B,IACI8L,EADYtI,EAAIE,OAAO,KAAK1D,KAAK,YAAa,qBACtBkE,UAAU,KAAK9L,KAAKqF,GAAM0G,KAAK,KAE3D2H,EAAY9L,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,eAAmB,GAAHA,EAAO,MAE9D,IAAIqT,EAASD,EAAYpI,OAAO,UAAU1D,KAAK,KAAM,GAAGA,KAAK,KAAM,GACnE+L,EAAOpI,QAAQ,UAAU,GACzB,IAAIqI,EAAaD,EAAOnN,OAAO,SAAAzD,GAAC,OAA0B,IAAvByQ,EAAO1L,QAAQ/E,KAElD6Q,EAAWrI,QAAQ,SAAS,GAC5BqI,EAAW9E,MAAM,OAAQ,SAAC1M,EAAG9B,GACzB,OAAOwG,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAU1D,IAAG,GAAGiE,WAG/CsN,EAAOzE,GAAG,QAAS,SAAS9M,EAAG9B,GAC3B,IAAIuT,EAAOrO,IAAUrB,OAuC7B,SAAsB2P,EAAQhN,GACvBgN,EAAOvI,QAAQ,UACduI,EAAOvI,QAAQ,SAAS,GACxBuI,EAAOhF,MAAM,OAAQ,UAErBgF,EAAOvI,QAAQ,SAAS,GACxBuI,EAAOhF,MAAM,OAAQ,SAAC1M,EAAG9B,GAAJ,OAASwG,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAU1D,IAAG,GAAGiE,YA5ClE0N,CAAaF,EAAM/M,GAEnBsF,EAAa1L,KAAK,CAAC8D,KAAO,iBAAkB6H,UAAYjK,EAAG6Q,cAAAnB,EAAmBwB,KAE9E,IAAIU,EAAUxO,IAAa,UACvByO,EAAWnN,EAAON,OAAO,SAAAG,GAAE,OAAyC,IAAtCqN,EAAQhU,OAAO8H,QAAQnB,EAAGb,SACxDoO,EAAe9H,EAAa5F,OAAO,SAAAC,GAAC,MAAa,kBAAVA,EAAEjC,OAC7CyP,EAASlM,QAAQ,SAAA3E,GACb8Q,EAAaxT,KAAK,CAAC8D,KAAO,iBAAkB6H,UAAYjJ,EAAI0C,MAAOmN,cAAAnB,EAAmBwB,GAActT,KAAA8R,EAAYwB,OAEpHlH,EAAe8H,EACfjD,EAAenK,EAAQoF,KAEXwH,EAAYpI,OAAO,QAAQE,KAAK,SAAApJ,GAAC,OAAGA,IAAG0M,MAAM,YAAa,IAChElH,KAAK,YAAa,oBAjaxBuM,CAAiBd,EAAWrT,EAAMkR,EAAMpK,EAAQ,cAuExD,SAAqBuM,EAAWD,EAAcE,EAAapC,EAAMhF,EAAYpF,GACzE,IAAIzB,EAAO,CAAC,kBAAkB+O,OAAOzT,OAAO0E,KAAKiO,EAAY,GAAG,GAAGnL,aAC3DkM,EAAgBhB,EAAU/H,OAAO,OAAOC,QAAQ,eAAe,GACnE8I,EAAcvF,MAAM,QAAS,SAC7BuF,EAAc/I,OAAO,MAAME,KAAK,qBAChC,IAAI8I,EAAYC,EAAYF,EAAehP,EAAM,cAAe,IAE5DmP,EAAWH,EAAc/I,OAAO,OAAOC,QAAQ,wBAAwB,GAE3E+I,EAAUpF,GAAG,SAAU,SAAS9M,GAC5B,IAAI+P,EAAiB3M,IAAUrB,MAAMX,SAAS,SAC1CiR,EAAU3N,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAUqM,IAAgB,GAG5D,GAFAqC,EAAS1I,UAAU,KAAKwD,SAEJ,aAAjBmF,EAAQjQ,KAAoB,CAC3B,IAAIkQ,EAAc,CAAC,OACfC,EAAUF,EAAQ3N,OAAOxB,IAAI,SAAA1D,GAAC,OAAGA,EAAEmF,YACvC2N,EAAcA,EAAYN,OAAOO,GACjC,IAAIC,EAAUL,EAAYC,EAAUE,EAAa,kBAAmB,QAChEG,EAAUN,EAAYC,EAAUE,EAAa,iBAAkB,MAC/DI,EAASN,EAASlJ,OAAO,UAAUC,QAAQ,2BAA2B,GAC1EuJ,EAAOtJ,KAAK,UAEZsJ,EAAO5F,GAAG,QAAS,WACf,IAAIqD,EAAYqC,EAAQlN,OAAOqN,UAAU,GACrCvC,EAAUqC,EAAQnN,OAAOqN,UAAU,GAOnC/U,GAHaoM,EAAa5F,OAAO,SAAAC,GAAC,MAAuB,gBAApBA,EAAC,aAG/B0K,KAEP1C,EAAOuG,EAAehV,EAAMmS,EAAgBI,EAAWC,GAEvDyC,EAAQ,KAAK7I,EAAa5F,OAAO,SAAAC,GAAC,MAAuB,aAApBA,EAAEwL,gBAA8BzR,OACrEwS,EAAWN,EAAU,cAAe,WAAYuC,EAAOD,EAAnClD,EAAuD9R,GAAvD8R,EAAkErD,GAAO,CAAC,CAAC,QAAS,CAAC8D,EAAWC,IAAW,CAAC,iBAAkBL,KAEtJlB,EAAenK,EAAQoF,GAGvB,IAAIgJ,EAAa1P,IAAU,YAAYsG,UAAU,SAC7CqJ,EAAY3P,IAAU,YAAYsG,UAAU,SAE5CsJ,EAAW3G,EAAKvB,QAAQ,SAAA/C,GAAI,OAAGA,EAAK7E,IAAI,SAAAoC,GAAI,OAAIA,EAAKA,SAEzDlC,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1D/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAE1D,IAAI8J,EAAeH,EAAU1O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QAChE2N,EAAa9J,QAAQ,kBAAkB,GAEvC,IAAI+J,EAAeH,EAAS3O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QAC/D4N,EAAa/J,QAAQ,kBAAkB,GAKvC+G,EAAaU,EAAUlM,GAGvBsM,EAAa5H,KAAK,gBAClB6H,EAAUvH,UAAU,KAAKwD,SACzB+D,EAAU9H,QAAQ,UAAU,GAC5B2F,EAAKpC,MAAM,cAAe,aAE7B,CAED,IAAI/I,EAASP,MAAiBS,OAAO,CAACwO,EAAQ9O,IAAK8O,EAAQlP,MAAMS,MAAM,CAAC,GAAI,IAExEuP,EAAef,EAASlJ,OAAO,OACnCiK,EAAa3N,KAAK,QAAS,KAAKA,KAAK,SAAU,KAC/C,IACI4N,EAASD,EAAazJ,UAAU,UAAU9L,KADnC,CAAC,CAACwH,MAAQ,YAAahD,KAAQ,aAAc,CAACgD,MAAQ,SAAUhD,KAAQ,cAC1BuH,KAAK,KAAKR,QAAQ,SAAS,GAEpFiK,EAAO5N,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,aAAiB,IAAFA,EAAO,SAExD,IAAImV,EAAYD,EAAOlK,OAAO,KAC9BmK,EAAU7N,KAAK,YAAa,qBAE5B,IAAIX,EAASuO,EAAOlK,OAAO,QAAQE,KAAK,SAACpJ,GAAD,OAAMA,EAAEoF,MAAO,OACvDP,EAAOW,KAAK,IAAK,GAAGA,KAAK,IAAK,GAC9B,IAAI8N,EAAcD,EAAUnK,OAAO,QAAQ1D,KAAK,QAAS,IAAIA,KAAK,SAAU,IAC5E8N,EAAY9N,KAAK,IAAK,IAEtB6N,EAAUnK,OAAO,KAChB1D,KAAK,QAAS,gBACdA,KAAK,YAAa,mBAClB9G,KAAK0E,IAAYO,GAAQ4H,MAAM,IAEhC,IASIgI,EAASnQ,MAAYoQ,OAAO,CAAC,CAAC,GAAG,GAAI,CAAC,GAAI,MAAM1G,GAAG,MATtC,WACb,IAAItN,EAAI4D,IAASqQ,UACjB,GAAS,MAALjU,EACFkU,OAAOlO,KAAK,UAAW,aAGdhG,EAAE0D,IAAIS,EAAOgQ,UAIxBC,EAAaP,EAAUnK,OAAO,KAAKxK,KAAK6U,GAC5CK,EAAWlV,KAAK6U,EAAO5L,KAAM,CAAC,EAAG,KAEjC,IAAI+K,EAASN,EAASlJ,OAAO,UAAUC,QAAQ,2BAA2B,GAC1EuJ,EAAOtJ,KAAK,UAEZsJ,EAAO5F,GAAG,QAAS,WAEf,IAAI+G,EAAaD,EAAWE,QAAQ,GAAG5Q,IAAI,SAAApD,GAAC,OAAGA,EAAEiU,QAAQN,UAAUvQ,IAAI,SAAA1D,GAAC,OAAGA,EAAE,OACzEwQ,EAAkB6D,EAAW,GAAG3Q,IAAIS,EAAOgQ,QAAQK,OACnD/D,EAAiB4D,EAAW,GAAG3Q,IAAIS,EAAOgQ,QAAQK,OAClDC,EAAajK,EAAa5F,OAAO,SAAAC,GAAC,MAAuB,gBAApBA,EAAC,aAEtCzG,EAAOqW,EAAW7V,OAAS,EAAI6V,EAAWA,EAAW7V,OAAS,GAAGR,KAAO4O,EAAW,GAEnFH,EAAO6H,EAAiBtW,EAAMmS,EAAgBC,EAAiBC,GAE/D4C,EAAQ,KAAK7I,EAAa5F,OAAO,SAAAC,GAAC,MAAuB,eAApBA,EAAEwL,gBAAgCzR,OACvEwS,EAAWN,EAAU,cAAe,aAAcuC,EAAOqB,EAArCxE,EAA2D9R,GAA3D8R,EAAsErD,GAAO,CAAC,CAAC,iBAAkB0D,GAAiB,CAAC,kBAAmBC,GAAkB,CAAC,iBAAkBC,KAEnMpB,EAAenK,EAAQoF,GAGvBoG,EAAaU,EAAUlM,GAKvB,IAAIoO,EAAa1P,IAAU,YAAYsG,UAAU,SAC7CqJ,EAAY3P,IAAU,YAAYsG,UAAU,SAE5CsJ,EAAW3G,EAAKvB,QAAQ,SAAA/C,GAAI,OAAGA,EAAK7E,IAAI,SAAAoC,GAAI,OAAIA,EAAKA,SAEzDlC,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1D/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAE1D,IAAI8J,EAAeH,EAAU1O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QAChE2N,EAAa9J,QAAQ,kBAAkB,GAEvC,IAAI+J,EAAeH,EAAS3O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QAC/D4N,EAAa/J,QAAQ,kBAAkB,GAKvC6H,EAAa5H,KAAK,gBAClB6H,EAAUvH,UAAU,KAAKwD,SACzB+D,EAAU9H,QAAQ,UAAU,GAC5B2F,EAAKpC,MAAM,cAAe,YA3NtCyH,CAAYlD,EAAWD,EAAcpT,EAAMkR,EAAMhF,EAAYpF,GAwUrE,SAAqBuM,EAAWD,EAAcE,EAAapC,EAAMhF,EAAYpF,GAEzE,IAAI0P,EAAYnD,EAAU/H,OAAO,OAAOC,QAAQ,kBAAkB,GAC9DiL,EAAUlL,OAAO,MAAME,KAAK,iBAC5B,IAAIiL,EAAOD,EAAUlL,OAAO,QAAQC,QAAQ,eAAe,GACvDmL,EAAQD,EAAKnL,OAAO,SAASC,QAAQ,wBAAwB,GACjEmL,EAAM9O,KAAK,OAAQ,UAAUA,KAAK,cAAe,qBAAqBA,KAAK,aAAc,UACtE6O,EAAKnL,OAAO,UAAUC,QAAQ,wCAAwC,GAAM3D,KAAK,OAAQ,UAAU0D,OAAO,KAAKC,QAAQ,iBAAiB,GAC9I2D,GAAG,QAAS,WAErB,IAAIyH,EAAaD,EAAMhP,OAAO5E,MAAM8T,MAAM,KAAKtR,IAAI,SAAApD,GAAC,OAAGA,EAAE2U,gBAErDpI,EAAO6E,EAAY9M,OAAO,SAAA2D,GAC1B,IAAIE,EAAUF,EAAK3D,OAAO,SAAAkB,GAAI,OAAiB,IAAdA,EAAKH,OAAe,GAAGC,MACxD,OAAOmP,EAAW7O,QAAQuC,IAAY,IAK1C4G,EAAenK,EAAQoF,GAEvB,IAAI4K,EAAgBtR,IAAU,YAC1BuR,EAASD,EAAcxL,OAAO,UAAUC,QAAQ,gBAAgB,GAChEyL,EAAOD,EAAOzL,OAAO,QAAQC,QAAQ,qBAAqB,GAC9DyL,EAAKxL,KAAKiD,EAAKjO,QACfuW,EAAOzL,OAAO,MAAME,KAAK,gBACzB,IAAIyL,EAAQF,EAAOzL,OAAO,KAAKC,QAAQ,sBAAsB,GAC7D0L,EAAM/H,GAAG,QAAS,WACd+B,EAAenK,EAAQoF,GACvB6K,EAAOzH,WAEX9J,IAAU,mBAAmBsJ,MAAM,SAAU,WACzC,OAAuB,GAAdL,EAAKjO,OAA4D,IAA5CG,OAAO0E,KAAKoJ,EAAK,GAAG,GAAGtG,YAAY3H,OAAgB,OAIrF4S,EAAa5H,KAAK,gBAClB6H,EAAUvH,UAAU,KAAKwD,SACzB+D,EAAU9H,QAAQ,UAAU,GAC5B2F,EAAKpC,MAAM,cAAe,SA9W9BoI,CAAY7D,EAAWD,EAAcpT,EAAMkR,EAAMhF,EAAYpF,KAG7DsM,EAAa5H,KAAK,gBAClB6H,EAAUvH,UAAU,KAAKwD,SACzB+D,EAAU9H,QAAQ,UAAU,GAC5B2F,EAAKpC,MAAM,cAAe,QAIlC,SAASwD,EAAatS,EAAM8G,GAExB,IAAIgQ,EAAgBtR,IAAU,YAE9B,GAA0B,eAAvBxF,EAAKiS,cAA+B,CAEnC,IAAIkF,EAAW3R,IAAU,OACrBuR,EAASD,EAAcxL,OAAO,UAAUC,QAAQ,2BAA2B,GAC/E/F,IAAUuR,GAAQK,MAAMpX,GACb+W,EAAOzL,OAAO,QAAQC,QAAQ,qBAAqB,GACzDC,KAAKxL,EAAKA,KAAKQ,QACRuW,EAAOzL,OAAO,MAAME,KAAKxL,EAAKmS,eAAiB,gBAAiBgF,EAASnX,EAAKoS,gBAAgB,IAAM,IAAM+E,EAASnX,EAAKoS,gBAAgB,IAAM,cAAgB+E,EAASnX,EAAKqS,eAAe,IAAM,IAAM8E,EAASnX,EAAKqS,eAAe,KAC9N/G,OAAO,KAAKC,QAAQ,sBAAsB,GACtD2D,GAAG,QAAS,WACG9C,EAAa5F,OAAO,SAAAC,GAAC,MAAoB,gBAAjBA,EAAEkL,aAA8BnL,OAAO,SAAAC,GAAC,OAAGzG,EAAKqM,WAAa5F,EAAE4F,YAExGmF,EAAaxR,EAAKyR,SAAU3K,GAC5BmK,EAAenK,EAAQ,cACvBtB,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1D/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1DwL,EAAOzH,gBAGT,GAA0B,aAAvBtP,EAAKiS,cAA6B,CAEvC,IAAI8E,EAASD,EAAcxL,OAAO,UAAUC,QAAQ,2BAA2B,GACpEwL,EAAOzL,OAAO,QAAQC,QAAQ,qBAAqB,GACzDC,KAAKxL,EAAKA,KAAKQ,QACpBuW,EAAOzL,OAAO,MAAME,KAAKxL,EAAK4G,MAAM,IACpCmQ,EAAOzL,OAAO,KAAKC,QAAQ,sBAAsB,GACjDwL,EAAOzL,OAAO,MAAME,KAAKxL,EAAK4G,MAAM,GAAK,MAE7BmQ,EAAOzL,OAAO,KAAKC,QAAQ,sBAAsB,GACvD2D,GAAG,QAAS,WACdsC,EAAaxR,EAAKyR,SAAU3K,GAC5BmK,EAAenK,EAAQ,cACvBtB,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1D/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1DwL,EAAOzH,gBAGT,GAA0B,WAAvBtP,EAAKiS,cAA2B,CACrC,IAAI8E,EAASD,EAAcxL,OAAO,UAAUC,QAAQ,2BAA2B,GACpEwL,EAAOzL,OAAO,QAAQC,QAAQ,qBAAqB,GACzDC,KAAKxL,EAAKA,KAAKQ,QACpBuW,EAAOzL,OAAO,MAAME,KAAK,eAAiBxL,EAAKqX,QAEnCN,EAAOzL,OAAO,KAAKC,QAAQ,sBAAsB,GACvD2D,GAAG,QAAS,WACdsC,EAAaxR,EAAKyR,SAAU3K,GAC5BmK,EAAenK,EAAQ,cACvBtB,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1D/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1DwL,EAAOzH,YAgKZ,SAASgI,EAAWC,EAAczQ,GAErC,IAAI9G,EAAOmR,IAGP1C,GAFcrC,EAAa5F,OAAO,SAAAC,GAAC,MAAoB,gBAAjBA,EAAEkL,aAEjC3R,EAAKwG,OAAO,SAAA2D,GACnB,OAAOA,EAAK7E,IAAI,SAAAoC,GAAI,OAAIA,EAAKA,OAAMI,QAAQyP,IAAiB,KAOhEjF,EADeI,EAAU,cAAe,SAH5B,KAAKtG,EAAa5F,OAAO,SAAAC,GAAC,MAAuB,WAApBA,EAAEwL,gBAA4BzR,OAGd8W,EAAjCxF,EAAiD9R,GAAjD8R,EAA4DrD,GAAO,CAAC,CAAC,SAAU8I,KAChFzQ,GACvBmK,EAAenK,EAAQ,cAGxB,IAAIoO,EAAa1P,IAAU,YAAYsG,UAAU,SAC7CqJ,EAAY3P,IAAU,YAAYsG,UAAU,SAE5CsJ,EAAW3G,EAAKvB,QAAQ,SAAA/C,GAAI,OAAGA,EAAK7E,IAAI,SAAAoC,GAAI,OAAIA,EAAKA,SAEzDlC,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1D/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAEvC2J,EAAU1O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QACnD6D,QAAQ,kBAAkB,GAEpB4J,EAAS3O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QAClD6D,QAAQ,kBAAkB,GAsC1C,SAAS+K,EAAiBtW,EAAMmS,EAAgBqF,EAAWC,GAEvD,OAAOzX,EAAKwG,OAAO,SAAA2D,GASf,OAAuC,IARrBA,EAAK7E,IAAI,SAAAoC,GACvB,IAAIgQ,EAAOhQ,EAAKS,WAAWgK,GAAgBtM,QAC3C,OAAgB,GAAb6B,EAAKH,KACGmQ,EAAOD,EAAS,IAAMC,EAAOD,EAAS,GAEtCC,EAAOF,EAAU,IAAME,EAAOF,EAAU,KAGpC1P,SAAQ,KAGnC,SAASkN,EAAehV,EAAMmS,EAAgBI,EAAWC,GACrD,GAAqB3J,MAAlBsJ,EACC,OAAOnS,EAAKwG,OAAO,SAAA2D,GACf,IAAIwN,EAAaxN,EAAK3D,OAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEc,OAAcjC,IAAI,SAAAoC,GACjD,IAAIQ,EAASR,EAAKS,WAAWgK,GAAgBjK,OAC7C,MAAiB,QAAdqK,GAGQrK,EAAO1B,OAAO,SAAAgE,GAAE,OAAGA,EAAG5D,QAAU2L,IAAW/R,OAAS,GAAK0H,EAAO1B,OAAO,SAAAgE,GAAE,OAAGA,EAAG5D,QAAU2L,IAAW,GAAG1M,QAAU,MAG5H+R,EAAYzN,EAAK3D,OAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEc,OAAejC,IAAI,SAAAoC,GACrD,IAAImQ,EAAMnQ,EAAKS,WAAWgK,GAAgB7H,SAC1C,MAAe,QAAZkI,GAGQqF,IAAQrF,IAGnB,OAAOmF,EAAW7P,SAAQ,IAAS,GAAK8P,EAAU9P,SAAQ,IAAS,IA+F/E,SAASyM,EAAYuD,EAAazS,EAAM0S,EAAUvQ,GAE9C,IAAIwQ,EAAkBF,EAAYxM,OAAO,OAAOC,QAAQ,YAAY,GACvDyM,EAAgB1M,OAAO,MAAME,KAAKhE,GAgB/C,OAdYwQ,EACX1M,OAAO,UACP1D,KAAK,KAAMmQ,GAAUnQ,KAAK,QAAS,OAEbkE,UAAU,UAChC9L,KAAKqF,GAAM0G,KAAK,UAETP,KAAK,SAAApJ,GAAC,OAAGA,IAAGwF,KAAK,QAAS,SAAAxF,GAAC,OAAGA,IAEtCoD,IAAU,IAAIuS,GAAU7I,GAAG,SAAU,SAAS9M,GAC3C,IAAI+P,EAAiB3M,IAAUrB,MAAMX,SAAS,SAC9CgC,IAAUrB,MAAMyD,KAAK,QAASuK,KAG1B3M,IAAU,IAAKuS,wVC1fnB,IAAIE,EAAgB,GAChBC,EAAmB,GAEvB,SAASC,EAAaC,EAAcC,EAAYvR,EAAQoF,GAE3D,IAAIoM,EAAc9S,IAAU,gBACxB0L,EAAO1L,IAAU,YACrB,GAAqB,OAAjB4S,EAAuB,CAEvBH,EAAgB,GAEhBzS,IAAU,gBAAgBsG,UAAU,KAAKwD,SACzCgJ,EAAYxJ,MAAM,SAAU,GAC5BtJ,IAAU,YAAYsJ,MAAM,cAAe,OAC3C,IAAIoC,EAAO1L,IAAU,YACrB+L,EAAuBgH,EAAIF,GAAanH,EAAMpK,EAAQoF,OAEnD,CAGH,IAAIsM,EAgcL,SAA4BvO,EAAUoO,EAAYC,EAAaxR,EAAQoF,GAE1E,IAEIuM,EAAkBxO,EAASiD,QAAQ,SAAAzJ,GAAC,OAAIA,EAAE+C,OAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEc,OAAejC,IAAI,SAAAhC,GAAC,OAAIA,EAAEoE,SAClFgR,EAAYlT,IAAU,YAAY6J,OAAO,OAAOvD,UAAU,SAC9D4M,EAAUlS,OAAO,SAAAkB,GAAI,OAAI+Q,EAAgB3Q,QAAQJ,EAAK1H,KAAK0H,OAAS,IAAG6D,QAAQ,YAAY,GAG3F,IAAIY,EAAWC,EAAa5F,OAAO,SAAAC,GAAC,MAAe,mBAAXA,EAAEjC,OAA2BhE,OAAS,EAAI4L,EAAa5F,OAAO,SAAAC,GAAC,MAAe,mBAAXA,EAAEjC,OAA2Bc,IAAI,SAAApD,GAAC,OAAIA,EAAEmK,YAAa,GAC5JsM,EAAaxM,EAAS3L,OAAS,EAAIsG,EAAON,OAAO,SAAAG,GACjD,OAAuC,IAAhCwF,EAASrE,QAAQnB,EAAGb,SAC5BR,IAAI,SAAApD,GAAC,OAAIA,EAAE4D,QAAS,KAGnB8S,EAAmBN,EAAYjJ,OAAO,qBACtCwJ,EAAeD,EAAiBE,QAAUR,EAAYhN,OAAO,OAAOC,QAAQ,oBAAoB,GAAQqN,EAC5GC,EAAa/M,UAAU,KAAKwD,SAG5B,IAAIyJ,EAAoBF,EAAavN,OAAO,OAAOwD,MAAM,UAAW,gBACpEiK,EAAkBzN,OAAO,QAAQE,KAAK,cACtC,IAAIwN,EAAuBD,EAAkBzN,OAAO,UAAUC,QAAQ,4BAA4B,GAClGyN,EAAqBxN,KAAK,sBAC1BwN,EAAqB9J,GAAG,QAAS,WAsgBrC,IAAmB+J,EACW,wBADXA,EAtgBkCD,GAugBlCxN,OACXyN,EAAWzN,KAAK,sBAEhByN,EAAWzN,KAAK,wBAvgBpB,IAAIhD,EAAW1B,EAAOxB,IAAI,SAAApD,GAAC,OAAIA,EAAE4D,QAC7BoT,EAAeL,EAAavN,OAAO,OAAOwD,MAAM,UAAW,gBAC/DoK,EAAa5N,OAAO,MAAME,KAAK,aAAasD,MAAM,UAAW,UAE7D,IAAIqK,EAAWD,EAAapN,UAAU,kBAAkB9L,KAAKwI,GAAUuD,KAAK,OAAOR,QAAQ,2CAA2C,GAClI6N,EAAQD,EAAS7N,OAAO,SAAS1D,KAAK,OAAQ,SAASpE,SAAS,OAAQ,wBAAwBA,SAAS,QAAS,SAAApB,GAAC,OAAIA,IAAGwF,KAAK,KAAM,SAACxF,EAAG9B,GAAJ,MAAU,SAAWA,IAAGiL,QAAQ,oBAAoB,GAC7L4N,EAAS7N,OAAO,SAASE,KAAK,SAAApJ,GAAC,OAAIA,IAAGoB,SAAS,MAAO,SAACpB,EAAG9B,GAAJ,MAAU,SAAWA,IAAGiL,QAAQ,oBAAoB,GAE1G,IAAI8N,EAAUf,EAAYjJ,OAAO,kBAC7BjE,EAAMiO,EAAQP,QAAUR,EAAYhN,OAAO,OAAOC,QAAQ,cAAc,GAAQ8N,EAEpFjO,EAAIU,UAAU,KAAKwD,SAEnB,IAAIgK,EAAkBrP,EAASiD,QAAQ,SAAApE,GAAG,OAAIA,EAAIoE,QAAQ,SAAAzG,GAAC,OAAIA,EAAEiB,SAAO6R,OAAO,SAASC,EAAKC,GAMzF,YALwB,IAAbD,EAAIC,GACXD,EAAIC,GAAQ,EAEZD,EAAIC,IAAS,EAEVD,GACR,IAGH,GAAwB,IAApBvP,EAASzJ,OAAc,CAGvB,IAAIkZ,EAAatO,EAAIE,OAAO,KAAKC,QAAQ,eAAe,GACxDmO,EAAW9R,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAU,oBAGvC,IAAIqZ,EAAcnU,MAAcQ,MAAM,CAAC,EAAG,KAAKC,OAAO,CAAC,EAAGT,IAAO7E,OAAOiZ,OAAON,MAE3EO,EAAiBH,EAAW5N,UAAU,UAAU9L,KAAKiK,GAAU8B,KAAK,KAAKR,QAAQ,SAAS,GAE1FuO,EAAWD,EAAevO,OAAO,QAAQC,QAAQ,aAAa,GAClEuO,EAASlS,KAAK,KAAM,GAKpBmS,EAAgBF,EAAgB/S,EAAQoF,GAGxC2N,EAAe3K,GAAG,YAAa,SAAS9M,EAAG9B,GACvC,IAAI6U,EAAW3P,IAAU,YAAYsG,UAAU,SAC3CoJ,EAAY1P,IAAU,YAAYsG,UAAU,SAKhD,OAJAqJ,EAAS3O,OAAO,SAAAC,GACZ,OAAOrE,EAAEkD,IAAI,SAAApD,GAAC,OAAIA,EAAEwF,OAAMI,QAAQrB,EAAEzG,KAAK0H,OAAS,IACnD6D,QAAQ,SAAS,GACpB2J,EAAU1O,OAAO,SAAAC,GAAC,OAAIrE,EAAEkD,IAAI,SAAApD,GAAC,OAAIA,EAAEwF,OAAMI,QAAQrB,EAAEzG,KAAK0H,OAAS,IAAG6D,QAAQ,SAAS,GAC9E/F,IAAUrB,MAAMoH,QAAQ,SAAS,KACzC2D,GAAG,WAAY,SAAS9M,EAAG9B,GACXkF,IAAU,YAAYsG,UAAU,SAASP,QAAQ,SAAS,GACzD/F,IAAU,YAAYsG,UAAU,SAASP,QAAQ,SAAS,GAC1E,OAAO/F,IAAUrB,MAAMoH,QAAQ,SAAS,KAG5C,IAAIyO,EAAeH,EAAevO,OAAO,QAAQE,KAAK,SAAApJ,GAClD,IAAI6X,EAAS7X,EAAEoE,OAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEc,OAAe,GAAGC,MAC/C,OAAOyS,EAAOC,OAAO,GAAGC,cAAgBF,EAAOpW,MAAM,KAGzDmW,EAAapS,KAAK,IAAK,IAAIA,KAAK,IAAK,IAErC,IAAIwS,EAAYP,EAAevO,OAAO,KAAKC,QAAQ,aAAa,GAChE6O,EAAUxS,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAU,sBAE1B8Z,EAAU9O,OAAO,QACxB1D,KAAK,KAAM,GACXA,KAAK,KAAM,KACXA,KAAK,KAAM,IACXA,KAAK,KAAM,IAJhB,IAMIyS,EAAaD,EAAUtO,UAAU,SAAS9L,KAAK,SAACoC,GAAD,OAAOA,IAAG2J,KAAK,KAAKR,QAAQ,QAAQ,GAEvF8O,EAAWzS,KAAK,YAAa,SAACxF,GAC1B,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAC9CsU,EAAWhT,EAAElF,EAAE0H,UACnB,MAAO,aAAewQ,EAAW,UAGrC,IAAIxG,EAASuG,EAAW/O,OAAO,UAAU1D,KAAK,KAAM,GAAGA,KAAK,KAAM,GAAGA,KAAK,IAAK,SAAAxF,GAC3E,OAAOuX,EAAYL,EAAgBlX,EAAEsF,SACtCE,KAAK,QAAS,SAACxF,EAAG9B,GAAJ,MAAU,QAAU8B,EAAEsF,OAEvCoM,EAAO5E,GAAG,YAAa,SAAS9M,EAAG9B,GAC/B,IAAIia,EAASF,EAAW7T,OAAO,SAAAlD,GAAC,OAAIA,EAAEoE,OAAStF,EAAEsF,OAC7CyN,EAAW3P,IAAU,YAAYsG,UAAU,SAC1BqJ,EAAS3O,OAAO,SAAAC,GAAC,OAAIA,EAAEzG,KAAK0H,OAAStF,EAAEsF,OAAM6D,QAAQ,mBAAmB,GAC7F,OAAOgP,EAAOhP,QAAQ,gBAAgB,KACvC2D,GAAG,WAAY,SAAS9M,EAAG9B,GAC1B,IAAIia,EAASF,EAAW7T,OAAO,SAAAlD,GAAC,OAAIA,EAAEoE,OAAStF,EAAEsF,OAEjD,OADAlC,IAAa,oBAAoB+F,QAAQ,mBAAmB,GACrDgP,EAAOhP,QAAQ,gBAAgB,KAGnB8O,EAAW7T,OAAO,SAAAC,GAAC,OAAeoC,MAAXpC,EAAEe,QAAoB8D,OAAO,QAAQE,KAAK,SAAApJ,GACpF,IAAI6X,EAAS7X,EAAEoF,MAAM0S,OAAO,GAAGC,cAAgB/X,EAAEoF,MAAM3D,MAAM,GAC7D,OAAOoW,IACRrS,KAAK,IAAK,IAAIA,KAAK,IAAK,GAE3BiS,EAAejS,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAU,eAAsB,GAAJA,EAAU,MAEvE,IAAIuP,EAAQgK,EAAexK,OAAO,cAAcvD,UAAU,SAC1D+D,EAAMX,GAAG,YAAa,SAAC9M,EAAG9B,GAEtB,IAAIka,EAAUnC,EAAW7R,OAAO,SAAA2D,GAC5B,IAAIsQ,EAAYtQ,EAAK+C,QAAQ,SAAAzG,GAAC,OAAIA,EAAEiB,OACpC,OAAO+S,EAAU3S,QAAQ1F,EAAEsF,OAAS,IAGzB8S,EAAQ,GACRA,EAAQ,KAO3B,IAAIE,EAAmBb,EAAevO,OAAO,KAAKC,QAAQ,qBAAqB,GAC3EoP,EAAU3Q,EAAoBC,EAAUnD,EAAQ6R,GAChDiC,EAAkBC,EAAiBH,EAAkBC,EAAS7T,EAAQ,MAuD1E,OArDA+S,EAAejS,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAU,gBAAmBA,GAAK,IAAyBK,OAAO0E,KAAKjD,EAAE,GAAG+F,YAAY3H,OAAS,IAAO,MAEzIsa,EAAYF,GACZG,EAAgBH,EAAiB9T,GAAQ,GAAO,GAIhDsE,EAAI0D,MAAM,SAA8E,IAAlE7E,EAASzJ,OAASoa,EAAgB5a,OAAOsF,IAAI,SAAApD,GAAC,OAAIA,EAAE,KAAI1B,QAAgB,GAAK,MACnG8X,EAAYxJ,MAAM,SAA8E,IAAlE7E,EAASzJ,OAASoa,EAAgB5a,OAAOsF,IAAI,SAAApD,GAAC,OAAIA,EAAE,KAAI1B,QAAgB,GAAK,MAC3Gka,EAAiB9S,KAAK,YAAa,SAACxF,GAAD,MAAO,uBAC1CoD,IAAa,kBAAkB+F,QAAQ,iBAAiB,GAGxD6N,EAAMlK,GAAG,QAAS,SAAC9M,EAAG9B,GAClB,IAAIiH,EAAO0C,EAAS3E,IAAI,SAAAoC,GAAI,OAAIA,EAAKlB,OAAO,SAAApE,GAAC,OAAe,IAAXA,EAAEmF,OAAe,KAAI,GAClEyT,EAASzC,EAAIF,GAAYjC,KAAK,SAAS6E,EAAGtK,GAC1C,OAAOsK,EAAEzU,OAAO,SAAAlD,GAAC,OAAe,IAAXA,EAAEiE,OAAe,GAAGY,WAAW/F,GAAGyD,QAAU8K,EAAEnK,OAAO,SAAAlD,GAAC,OAAe,IAAXA,EAAEiE,OAAe,GAAGY,WAAW/F,GAAGyD,UAGjHqL,EAAO1L,IAAU,YAErB+L,EAAuByJ,EAAO9P,UAAWgG,EAAMpK,EAAQoF,GACvDgF,EAAKpC,MAAM,cAAe,SAE1B,IAAI9F,EAAQkI,EAAK7B,OAAO,sBAAsBvD,UAAU,UAEpDoP,EAAOlS,EAAMxC,OAAO,SAAA2D,GACpB,IAAIgR,EAAYhR,EAAK3D,OAAO,SAAAkB,GAAI,OAAkB,IAAdA,EAAKH,OAAe,GACxD,OAAO4T,EAAUhT,WAAW/F,GAAGyD,QAAU0B,EAAKY,WAAW/F,GAAGyD,UAEhEqV,EAAK3P,QAAQ,QAAQ,GAErB,IAAI6P,EAAaF,EAAKlb,OAAOsF,IAAI,SAAA6E,GAAI,OAAIA,EAAK3D,OAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEc,OAAe,GAAGG,OAE9EgR,EAAUlS,OAAO,SAAAC,GAAC,OAAI2U,EAAWtT,QAAQrB,EAAEzG,KAAK0H,OAAS,IAAG6D,QAAQ,QAAQ,GAE5E,IAAI8P,EAAMrS,EAAMxC,OAAO,SAAA2D,GACnB,IAAIgR,EAAYhR,EAAK3D,OAAO,SAAAkB,GAAI,OAAkB,IAAdA,EAAKH,OAAe,GACxD,OAAO4T,EAAUhT,WAAW/F,GAAGyD,QAAU0B,EAAKY,WAAW/F,GAAGyD,UAEhEwV,EAAI9P,QAAQ,OAAO,GAEnB,IAAI+P,EAAYD,EAAIrb,OAAOsF,IAAI,SAAA6E,GAAI,OAAIA,EAAK3D,OAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEc,OAAe,GAAGG,OAE5EgR,EAAUlS,OAAO,SAAAC,GAAC,OAAI6U,EAAUxT,QAAQrB,EAAEzG,KAAK0H,OAAS,IAAG6D,QAAQ,OAAO,GAE1E,IAAIgQ,EAAOvS,EAAMxC,OAAO,SAAA2D,GACpB,IAAIgR,EAAYhR,EAAK3D,OAAO,SAAAkB,GAAI,OAAkB,IAAdA,EAAKH,OAAe,GACxD,OAAO4T,EAAUhT,WAAW/F,GAAGyD,UAAY0B,EAAKY,WAAW/F,GAAGyD,UAElE0V,EAAKhQ,QAAQ,QAAQ,KAGlBtB,EAEJ,GAAGA,EAASzJ,OAAS,GAAKyJ,EAASzJ,OAAS,EAAG,KAE9Cgb,EAtoBZ,SAAwBxS,GACpB,IAAIQ,EAAYhE,IAAOwD,EAAM1D,IAAI,SAAA7B,GAAC,OAAIA,EAAEjD,UAGpCgb,EAFgBxS,EAAMxC,OAAO,SAAA2D,GAAI,OAAIA,EAAK3J,SAAWgJ,IAAW,GACpChD,OAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEc,OAG7CyB,EAAM1D,IAAI,SAAA6E,GACNqR,EAAkBjD,EAAIpO,GAAM3D,OAAO,SAAAC,GAC/B,OAAQ+U,EAAgBlW,IAAI,SAAApD,GAAC,OAAIA,EAAEwF,OAAMI,QAAQrB,EAAEiB,OAAS,EAAe,GAAVjB,EAAEc,SAG3E,IAAIkU,EAAWzS,EAAM1D,IAAI,SAAA6E,GAErB,IAAIuR,GADJvR,GAAyB,IAAjBA,EAAK,GAAG5C,KAAiB4C,EAAKe,UAAYf,GAC7B7E,IAAI,SAAA7B,GAAC,OAAIA,EAAEiE,OAC5BiU,EAASD,EAAU5T,QAAQ0T,EAAgBA,EAAgBhb,OAAS,GAAGkH,MACvEkU,EAASzR,EAAK3D,OAAO,SAACC,EAAGnG,GAAJ,OAAUA,EAAIqb,IACvC,OAAOC,IAiBX,OAdAJ,EAAgBA,EAAgBhb,OAAS,GAAGib,SAAWA,EAASnW,IAAI,SAAC6E,EAAM7J,GACvE,IAAIiF,EAAMC,IAAO2E,EAAK7E,IAAI,SAAA7B,GAAC,OAAIA,EAAEqG,YAAa0R,EAAgBA,EAAgBhb,OAAS,GAAGsJ,SAC1F,OAAOK,EAAK7E,IAAI,SAACuW,EAAMra,EAAG8B,GACtBuY,EAAKC,WAAaN,EAAgBA,EAAgBhb,OAAS,GAAGsJ,SAC9D+R,EAAK9R,KAAO8R,EAAK/R,SAAW0R,EAAgBA,EAAgBhb,OAAS,GAAGsJ,SACxE+R,EAAKhP,KAAc,IAANrL,EAAW,EAAI8B,EAAE9B,EAAI,GAAGsI,SAAW0R,EAAgBA,EAAgBhb,OAAS,GAAGsJ,SAC5F,IACIiS,EADcvW,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KACrCgW,CAAYR,EAAgBA,EAAgBhb,OAAS,GAAGsJ,UAG/E,OAFA+R,EAAKpS,OAASjE,MAAiBS,OAAO,CAAC,EAAGV,IAAMS,MAAM,CAAC,EAAI,IAAO+V,IAClEF,EAAKI,MAAQ3b,EACNub,MAIRL,EAqmBmBU,CAAejS,IA5jB7C,SAAgCuR,EAAiBpQ,EAAKtE,EAAQwS,EAAiBpN,GAEvE,IAAIwN,EAAatO,EAAIE,OAAO,KAAKC,QAAQ,eAAe,GACxDmO,EAAW9R,KAAK,YAAa,oBAG7B,IAAI+R,EAAcnU,MAAcQ,MAAM,CAAC,EAAG,KAAKC,OAAO,CAAC,EAAGT,IAAO7E,OAAOiZ,OAAON,MAE3EO,EAAiBH,EAAW5N,UAAU,UAAU9L,KAAK,CAACwb,IAAkBzP,KAAK,KAAKR,QAAQ,SAAS,GAEnGuO,EAAWD,EAAevO,OAAO,QAAQC,QAAQ,aAAa,GAClEuO,EAASlS,KAAK,KAAM,GACpBkS,EAASlS,KAAK,SAAW,GAAM,GAAK4T,EAAgBA,EAAgBhb,OAAS,GAAGib,SAASjb,QAKzFuZ,EAAgBF,EAAgB/S,EAAQoF,GAGxC,IAAIkO,EAAYP,EAAevO,OAAO,KAAKC,QAAQ,aAAa,GAChE6O,EAAUxS,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAU,sBAE1B8Z,EAAU9O,OAAO,QACxB1D,KAAK,KAAM,GACXA,KAAK,KAAM,SAACxF,EAAG9B,GACZ,IAAIgH,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAClD,OAAOsB,EAAElF,EAAEA,EAAE5B,OAAS,GAAGsJ,YAE5BlC,KAAK,KAAM,IACXA,KAAK,KAAM,IAPhB,IASIyS,EAAaD,EAAUtO,UAAU,SAAS9L,KAAK,SAACoC,GAAD,OAAOA,IAAG2J,KAAK,KAAKR,QAAQ,QAAQ,GAEvF8O,EAAWzS,KAAK,YAAa,SAACxF,GAC1B,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAC9CsU,EAAWhT,EAAElF,EAAE0H,UACnB,MAAO,aAAewQ,EAAW,UAGrCD,EAAW9O,QAAQ,eAAe,GAElC,IAAI4Q,EAAgB9B,EAAW7T,OAAO,SAAArE,GAAC,OAAkB0G,MAAd1G,EAAEsZ,WAAuB3P,UAAU,WAAW9L,KAAK,SAAAoC,GAAC,OAAIA,EAAEqZ,WAAU1P,KAAK,KAAKR,QAAQ,SAAS,GAEtI6Q,EAAaD,EAAcrQ,UAAU,UAAU9L,KAAK,SAAAoC,GAAC,OAAIA,IAAG2J,KAAK,KAAKR,QAAQ,QAAQ,GAC1F6Q,EAAWxU,KAAK,YAAa,SAACxF,EAAG9B,EAAGgD,GAChC,MAAO,aAAelB,EAAEqH,OAAOrH,EAAE2H,MAAQ,KAAkB,GAAV3H,EAAE6Z,MAAc,MAGrEE,EAAc7Q,OAAO,QAAQ1D,KAAK,IAAK,SAACxF,EAAG9B,EAAGgD,GAC1C,IAAI+Y,EAAY,CAAC,CAAE/U,EAAK,EAAG8H,EAAK,GAAK,CAAE9H,EAAK,EAAG8H,EAAK9O,IACpD8B,EAAEkD,IAAI,SAAApD,GACFma,EAAU3b,KAAK,CAAE4G,EAAKpF,EAAEuH,OAAOvH,EAAE6H,MAAOqF,EAAKlN,EAAE+Z,UAEnD,IAAIK,EAAO9W,MACNgK,MAAMhK,KACN8B,EAAE,SAASlF,GACR,OAAOA,EAAEkF,IAEZ8H,EAAE,SAAAhN,GAAC,OAAW,GAANA,EAAEgN,IACf,OAAOkN,EAAKD,KACbzU,KAAK,cAAe,OAAOA,KAAK,OAAQ,QAAQA,KAAK,SAAU,QAElEuU,EAAcjN,GAAG,YAAa,SAAC9M,EAAG9B,GACd8B,EAAEkD,IAAI,SAAApD,GAAC,OAAGA,EAAEmI,UAA5B,IACIkQ,EAASF,EAAW7T,OAAO,SAAAlD,GAAC,OAAIA,EAAEoE,OAAStF,EAAEsF,OAC7C6U,EAAchE,EAAIiD,GAAiBlW,IAAI,SAAAnD,GAAC,OAAGA,EAAEuF,OAAM0M,OAAOhS,EAAEkD,IAAI,SAAAhC,GAAC,OAAGA,EAAEoE,QACtEyN,EAAW3P,IAAU,YAAYsG,UAAU,SAC3CoJ,EAAa1P,IAAU,YAAYsG,UAAU,SAGjD,OAFAqJ,EAAS3O,OAAO,SAAAC,GAAC,OAAI8V,EAAYzU,QAAQrB,EAAEzG,KAAK0H,OAAS,IAAG6D,QAAQ,SAAS,GAC7E2J,EAAU1O,OAAO,SAAAC,GAAC,OAAI8V,EAAYzU,QAAQrB,EAAEzG,KAAK0H,OAAS,IAAG6D,QAAQ,SAAS,GACvEgP,EAAOhP,QAAQ,gBAAgB,KACvC2D,GAAG,WAAY,SAAC9M,EAAG9B,GAClBkF,IAAa,UAAU+F,QAAQ,SAAS,KAG/B8O,EAAW/O,OAAO,UAAU1D,KAAK,KAAM,GAAGA,KAAK,KAAM,GAAGA,KAAK,IAAK,SAAAxF,GAC3E,OAAOuX,EAAYL,EAAgBlX,EAAEsF,SACtCE,KAAK,QAAS,SAACxF,EAAG9B,GAAJ,MAAU,QAAU8B,EAAEsF,OAEvB0U,EAAW9Q,OAAO,UAAU1D,KAAK,IAAK,GAAGA,KAAK,OAAQ,OAAOA,KAAK,IAAK,GAE7EsH,GAAG,YAAa,SAAS9M,EAAG9B,GAClC,IAAIia,EAASF,EAAW7T,OAAO,SAAAlD,GAAC,OAAIA,EAAEoE,OAAStF,EAAEsF,OAC7CyN,EAAW3P,IAAU,YAAYsG,UAAU,SAC1BqJ,EAAS3O,OAAO,SAAAC,GAAC,OAAIA,EAAEzG,KAAK0H,OAAStF,EAAEsF,OAAM6D,QAAQ,mBAAmB,GAC7F,OAAOgP,EAAOhP,QAAQ,gBAAgB,KACvC2D,GAAG,WAAY,SAAS9M,EAAG9B,GAC1B,IAAIia,EAASF,EAAW7T,OAAO,SAAAlD,GAAC,OAAIA,EAAEoE,OAAStF,EAAEsF,OAEjD,OADAlC,IAAa,oBAAoB+F,QAAQ,mBAAmB,GACrDgP,EAAOhP,QAAQ,gBAAgB,KAG1C6Q,EAAW5V,OAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEc,OAAe+D,OAAO,QAAQE,KAAK,SAAApJ,GAAC,OAAIA,EAAEoF,QAAOI,KAAK,IAAK,GAAGA,KAAK,IAAK,GAgejG4U,CAAuBhB,EAAiBpQ,EAAKtE,EAAQwS,EAAiBpN,GAGtE,IAAIuQ,EAAUrR,EAAIE,OAAO,KAAKC,QAAQ,qBAAqB,GAKvDoP,GAJgBa,EAAgBA,EAAgBhb,OAAS,GAAGib,SAASnW,IAAI,SAAAoX,GACzE,OAAOnE,EAAIiD,GAAiBpH,OAAOsI,KAGzB1S,EAAoBC,EAAUnD,EAAQ6R,IAChDgE,EAAchC,EAAQ,GAAGrV,IAAI,SAAC2D,EAAK3I,GACnC,IAAI+J,EAAUJ,EAAS,GAAGzD,OAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEc,OAAe,GAAGC,MACzDyB,EAAIA,EAAIzI,OAAS,GAAGoc,OAAS,EAE7B,IADA,IAAIvQ,EAAY,CAAC7E,MAASyB,EAAIA,EAAIzI,OAAO,GAAGgH,MAAOhD,KAAOyE,EAAIA,EAAIzI,OAAO,GAAGgE,KAAMxE,KAAQ,CAAC,CAACqK,QAAWA,EAASrB,MAASC,KACjHR,EAAQ,EAAGA,EAAQkS,EAAQna,OAAQiI,IAAS,CAChD,IAAI4B,EAAUJ,EAASxB,GAAOjC,OAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEc,OAAe,GAAGC,MACzDqV,EAAOlC,EAAQlS,GAAOnI,GAAGE,OAAS,EACtCma,EAAQlS,GAAOnI,GAAGuc,GAAMD,OAAkB,EAARnU,EAClC4D,EAAUrM,KAAKU,KAAK,CAAC2J,QAAWA,EAASrB,MAAS2R,EAAQlS,GAAOnI,KAErE,OAAO+L,IAaRyQ,EAAYH,EAAYrX,IAAI,SAAAyX,GAa5B,OAZAA,EAAI/c,KAAO+c,EAAI/c,KAAKsF,IAAI,SAAC0X,EAAM1c,GAU9B,OATG0c,EAAKhU,MAAQgU,EAAKhU,MAAM1D,IAAI,SAAApD,GAC3B,GAAgB,aAAb6a,EAAIvY,KAAoB,CACvB,IAAIoY,EAAS,EAAItc,EACb2c,EAAU/a,EAAEgG,OAAQ,CAACrC,QAAW,EAAKe,MAAS1E,EAAEoI,SAAUzD,MAAQ3E,EAAE2E,MAAOiD,SAAY5H,EAAE4H,SAAU8S,OAAS1a,EAAE0a,OAAQrV,MAAQ,GAf9I,SAAsBW,EAAQ0U,GAC1B,IAAIM,EAAO1X,IAAO0C,EAAO5C,IAAI,SAAAwI,GAAC,OAAGA,EAAEjI,WAC/BsX,EAASjV,EAAO1B,OAAO,SAAAC,GAAC,OAAGA,EAAEZ,SAAWqX,IACxC5S,EAAWpC,EAAOA,EAAO5C,IAAI,SAAApD,GAAC,OAAGA,EAAE2D,UAASiC,QAAQoV,IAIxD,OAHA5S,EAAS8S,MAAQD,EACjB7S,EAASsS,OAASA,EAEXtS,EAQ2I+S,CAAanb,EAAG0a,GAC1J,OAAOK,EAEP,OAAO/a,IAGR8a,IAEDD,IAGPO,EAAYb,EAAQ3Q,UAAU,KAAK9L,KAAK8c,GAAW/Q,KAAK,KAAKR,QAAQ,QAAQ,GACjF+R,EAAU1V,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAU,iBAAqB,GAADA,EAA8B,MAExFgd,EAAUhS,OAAO,QACfE,KAAK,SAAApJ,GAAC,OAAGA,EAAEoF,QACXsH,MAAM,cAAe,OACrBA,MAAM,YAAa,IACnBlH,KAAK,YAAa,mBAEpB,IAAI2V,EAAWD,EAAUhS,OAAO,QAAQ1D,KAAK,QAAS,MACtD2V,EAAS3V,KAAK,SAxQK,IAyQnB2V,EAASzO,MAAM,OAAQ,QACvByO,EAASzO,MAAM,SAAU,QACzByO,EAASzO,MAAM,UAAW,IAE1BwO,EAAUhS,OAAO,QAAQC,QAAQ,QAAQ,GAAM3D,KAAK,KAAM,GAAGA,KAAK,KAAM,IAAIA,KAAK,KAAM,MAAMA,KAAK,KAAM,IAExG,IAAI4V,EAAaF,EAAUxR,UAAU,KAAK9L,KAAK,SAAAoC,GAK1C,OAJAA,EAAEpC,KAAOoC,EAAEpC,KAAKsF,IAAI,SAAApD,GAEhB,OADAA,EAAEsC,KAAOpC,EAAEoC,KACJtC,IAEJE,EAAEpC,OACV+L,KAAK,KAAKR,QAAQ,WAAW,GAE7B8E,EAAW7K,MACd8B,EAAE,SAAAlF,GACC,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAC9CsU,EAAWlY,EAAE0H,SACjB,OAAOxC,EAAEgT,KAEZlL,EAAE,SAAAhN,GACC,IAAIgN,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAACyX,GAAmB,IAClE,OAAOrO,EAAEhN,EAAEyD,SAAWzD,EAAEwa,SAGxBc,EAAWlY,MACd8B,EAAE,SAAAlF,GACC,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAC9CsU,EAAWlY,EAAE0H,SACjB,OAAOxC,EAAEgT,KAEZlL,EAAE,SAAAhN,GACC,IAAIgN,EAAIhN,EAAE2D,OAEV,OADAqJ,EAAEpJ,MAAM,CAACyX,GAAmB,IACrBrO,EAAEhN,EAAEyD,SAAW,IAGtB8X,GAAkBH,EAAWlS,OAAO,QACvC1D,KAAK,IAAK,SAAAxF,GACN,MAAmB,aAAXA,EAAEoC,KAAuB6L,EAASjO,EAAE4G,OAAS0U,EAAStb,EAAE4G,SAEpEpB,KAAK,QAAS,SAACxF,EAAG9B,GACd,OAAO8B,EAAEiI,QAAU,gBACvByE,MAAM,eAAgB,IACtBA,MAAM,OAAQ,QACdA,MAAM,SAAU,QAEjB6O,GAAgBzO,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GACnCkC,IAAUlC,EAAEhD,IAAIiL,QAAQ,YAAY,KACrC2D,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACpBkC,IAAUlC,EAAEhD,IAAIiL,QAAQ,YAAY,KAGzC,IAAIqS,GAAWJ,EAAWhX,OAAO,SAAAqX,GAChC,MAAmB,aAAZA,EAAGrZ,OAGPsZ,GAAeF,GAAS9R,UAAU,WAAW9L,KAAK,SAAAoC,GAAC,OAAEA,EAAE4G,QAAO+C,KAAK,KAAKR,QAAQ,UAAU,GAE9FuS,GAAalW,KAAK,YAAa,SAACxF,GAC/B,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAC1CsU,EAAWhT,EAAElF,EAAE0H,UACnB,MAAO,aAAawQ,EAAS,SAGjC,IAAIyD,GAAQD,GAAaxS,OAAO,UAAU1D,KAAK,IAAK,GAAGA,KAAK,KAAM,SAACxF,EAAG9B,GAClE,IAAI8O,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAACyX,GAAqB,IACpE,OAAOrO,EAAEhN,EAAEyD,SAAWzD,EAAEwa,SACzBhV,KAAK,KAAM,GAEdmW,GAAMnW,KAAK,OAAQ,SAACxF,EAAG9B,GAAJ,OAAS8B,EAAEyE,QAE9B,IAAImX,GAAYF,GAAatX,OAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEc,OAAcuE,UAAU,UAAU9L,KAAK,SAAAoC,GAAC,OAAGA,EAAEgb,QAAOrR,KAAK,UAAUR,QAAQ,SAAS,GAC9HyS,GAAUpW,KAAK,IAAK,GAAGA,KAAK,KAAM,GAAGA,KAAK,KAAM,SAACzF,EAAG7B,GAChD,IAAI8O,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IAEhC,OADJmJ,EAAEpJ,MAAM,CAAC,EAAIyX,KACFrO,EAAEjN,EAAE0D,WACZ+B,KAAK,OAAQ,SAACzF,GAAD,OAAMA,EAAE0E,QAAOiI,MAAM,UAAW,IAEpDkP,GAAU9O,GAAG,YAAa,SAAS9M,GAC/B,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,IACpB,IAAIrI,EAAIjB,IAAU,OAClByY,EAAKG,KAAKhc,EAAEwE,MAAQ,KAAOH,EAAErE,EAAEyD,UAC5BiJ,MAAM,OAAStJ,IAAS6Y,MAAQ,GAAM,MACtCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,QAEzCpP,GAAG,WAAY,SAAS9M,GACvB,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,KAGxBiP,GAAM7O,GAAG,YAAa,SAAS9M,GAC3B,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,IACpB,IAAIrI,EAAIjB,IAAU,OAClByY,EAAKG,KAAKhc,EAAEwE,MAAQ,KAAOH,EAAErE,EAAEyD,UAC5BiJ,MAAM,OAAStJ,IAAS6Y,MAAQ,GAAM,MACtCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,QAEzCpP,GAAG,WAAY,SAAS9M,GACvB,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,KAIxBgP,GAAa5O,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAChC,IAAI8L,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IACpCmJ,EAAEpJ,MAAM,CAAC,EAAIyX,KACbrS,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASzC,KAAK,SAAU,OAC5DwD,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASkB,QAAQ,YAAY,GACjE/F,IAAUlC,EAAEhD,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,IAC9EnI,IAAUlC,EAAEhD,IAAIwL,UAAU,UAAUgD,MAAM,UAAW,MACtDI,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI+O,OAAO,YACvB7J,IAAUlC,EAAEhD,IAAI+O,OAAO,YAAYC,SACnC9J,IAAa,mBAAoBpD,EAAEiI,SAASzC,KAAK,SAAU,QAC3DpC,IAAa,mBAAoBpD,EAAEiI,SAASkB,QAAQ,YAAY,GAChE/F,IAAa,UAAUsJ,MAAM,UAAW,MAG5C,IAAIyP,GAAWf,EAAWhX,OAAO,SAAAqX,GAC7B,MAAmB,eAAZA,EAAGrZ,OAGVga,GAAeD,GAASzS,UAAU,WAAW9L,KAAK,SAAAoC,GAAC,OAAEA,EAAE4G,QAAO+C,KAAK,KAAKR,QAAQ,UAAU,GAE9FiT,GAAa5W,KAAK,YAAa,SAACxF,GAC/B,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAC1CsU,EAAWhT,EAAElF,EAAE0H,UACnB,MAAO,aAAawQ,EAAS,SAIlCkE,GAAatP,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAChC,IAAI8L,EAAIhN,EAAE2D,OACVqJ,EAAEpJ,MAAM,CAAC,EAAIyX,KACbrS,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASzC,KAAK,SAAU,OAC5DwD,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASkB,QAAQ,YAAY,GACjE/F,IAAUlC,EAAEhD,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,IAC9EnI,IAAUlC,EAAEhD,IAAIwL,UAAU,UAAUgD,MAAM,UAAW,MACtDI,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI+O,OAAO,YACvB7J,IAAUlC,EAAEhD,IAAI+O,OAAO,YAAYC,SACnC9J,IAAa,mBAAoBpD,EAAEiI,SAASzC,KAAK,SAAU,QAC3DpC,IAAa,mBAAoBpD,EAAEiI,SAASkB,QAAQ,YAAY,GAChE/F,IAAa,UAAUsJ,MAAM,UAAW,MAG5C,IAAI2P,GAAWD,GAAalT,OAAO,QAEnCmT,GAAS7W,KAAK,QAAS,IAAIA,KAAK,SAAU,GAC1C6W,GAAS7W,KAAK,IAAK,SAACxF,EAAG9B,GACnB,IAAI8I,EAAQtC,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1D,EAAEoF,QAAO,GAC/C4H,EAAI5J,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CA3ahD,GA2akE,IAChF,OAAOoJ,EAAEhN,EAAEyD,WAGf,IAAI6Y,GAAYF,GAAahY,OAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEc,OAAc+D,OAAO,QAoB/D,OAnBAoT,GAAU9W,KAAK,QAAS,IAAIA,KAAK,SAAU,SAACxF,EAAG9B,GAC3C,IAAI8I,EAAQtC,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1D,EAAEoF,QAAO,GAC/C4H,EAAI5J,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CAlbhD,GAkbkE,IAChF,OAAOoJ,EAAEhN,EAAEwD,WAAawJ,EAAEhN,EAAEsD,aAGhCgZ,GAAU9W,KAAK,IAAK,SAACxF,EAAG9B,GACpB,IAAI8I,EAAQtC,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1D,EAAEoF,QAAO,GAC/C4H,EAAI5J,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CAxbhD,GAwbkE,IAChF,OAAOoJ,EAAEhN,EAAEsD,aAEfgZ,GAAU5P,MAAM,UAAW,IAG3B1D,EAAI0D,MAAM,SAAwE,IAA5D7E,EAASzJ,OAAS8c,EAAUtd,OAAOsF,IAAI,SAAApD,GAAC,OAAIA,EAAE,KAAI1B,QAAgB,GAAK,MAC7F8X,EAAYxJ,MAAM,SAAwE,IAA5D7E,EAASzJ,OAAS8c,EAAUtd,OAAOsF,IAAI,SAAApD,GAAC,OAAIA,EAAE,KAAI1B,QAAgB,GAAK,MACrGic,EAAQ7U,KAAK,YAAa,SAACxF,GAAD,MAAO,qBACjCoD,IAAa,kBAAkB+F,QAAQ,iBAAiB,GAEjDiQ,EASP,IAAIhS,GAAYhE,IAAOyE,EAAS3E,IAAI,SAAA7B,GAAC,OAAIA,EAAEjD,UACvCme,GAAgB1U,EAASzD,OAAO,SAAA2D,GAAI,OAAIA,EAAK3J,SAAWgJ,KAAW,GACnEoV,GAAcD,GAAcnY,OAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEc,OACzCiU,GAAkBoD,GAEtB3U,EAAS3E,IAAI,SAAA6E,GACTqR,GAAkBjD,EAAIpO,GAAM3D,OAAO,SAAAC,GAC/B,OAAQ+U,GAAgBlW,IAAI,SAAApD,GAAC,OAAIA,EAAEwF,OAAMI,QAAQrB,EAAEiB,OAAS,EAAe,GAAVjB,EAAEc,SAG3E6D,EAAIkE,SACJ,IAAIA,GAASuJ,EAAavN,OAAO,KAAKC,QAAQ,UAAU,GAgExD,OA/DA+D,GAAO1H,KAAK,YAAa,qBACzB0H,GAAOhE,OAAO,UAAU1D,KAAK,IAAK,GAAGA,KAAK,OAAQ,QAClD0H,GAAOhE,OAAO,QAAQE,KAAK,KAAK5D,KAAK,YAAa,oBAClD0H,GAAOR,MAAM,SAAU,WACvBQ,GAAOJ,GAAG,QAAS,SAAC9M,EAAG9B,EAAGgD,GACtBkC,IAAa,SAAS+F,QAAQ,QAAQ,GACtC/F,IAAa,QAAQ+F,QAAQ,OAAO,GACpCmN,EAAUrJ,OAAO,aAAa9D,QAAQ,YAAY,GAClD4M,EAAa,KAAMvJ,EAAW,GAAI9H,EAAQoF,KAI9CF,EAAmB/B,EAAUqO,EAAaxR,GAC1CwR,EAAYxJ,MAAM,SAAU,SAE5BtJ,IAAa,kBAAkB+F,QAAQ,iBAAiB,GAGxD6N,EAAMlK,GAAG,QAAS,SAAC9M,EAAG9B,GAClB,IAAIiH,EAAO0C,EAAS3E,IAAI,SAAAoC,GAAI,OAAIA,EAAKlB,OAAO,SAAApE,GAAC,OAAe,IAAXA,EAAEmF,OAAe,KAAI,GAClEyT,EAASzC,EAAIF,GAAYjC,KAAK,SAAS6E,EAAGtK,GAC1C,OAAOsK,EAAEzU,OAAO,SAAAlD,GAAC,OAAe,IAAXA,EAAEiE,OAAe,GAAGY,WAAW/F,GAAGyD,QAAU8K,EAAEnK,OAAO,SAAAlD,GAAC,OAAe,IAAXA,EAAEiE,OAAe,GAAGY,WAAW/F,GAAGyD,UAGjHqL,EAAO1L,IAAU,YAErB+L,EAAuByJ,EAAO9P,UAAWgG,EAAMpK,EAAQoF,GACvDgF,EAAKpC,MAAM,cAAe,SAE1B,IAAI9F,EAAQkI,EAAK7B,OAAO,sBAAsBvD,UAAU,UAEpDoP,EAAOlS,EAAMxC,OAAO,SAAA2D,GACpB,IAAIgR,EAAYhR,EAAK3D,OAAO,SAAAkB,GAAI,OAAkB,IAAdA,EAAKH,OAAe,GACxD,OAAO4T,EAAUhT,WAAW/F,GAAGyD,QAAU0B,EAAKY,WAAW/F,GAAGyD,UAEhEqV,EAAK3P,QAAQ,QAAQ,GAErB,IAAI6P,EAAaF,EAAKlb,OAAOsF,IAAI,SAAA6E,GAAI,OAAIA,EAAK3D,OAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEc,OAAe,GAAGG,OAE9EgR,EAAUlS,OAAO,SAAAC,GAAC,OAAI2U,EAAWtT,QAAQrB,EAAEzG,KAAK0H,OAAS,IAAG6D,QAAQ,QAAQ,GAE5E,IAAI8P,EAAMrS,EAAMxC,OAAO,SAAA2D,GACnB,IAAIgR,EAAYhR,EAAK3D,OAAO,SAAAkB,GAAI,OAAkB,IAAdA,EAAKH,OAAe,GACxD,OAAO4T,EAAUhT,WAAW/F,GAAGyD,QAAU0B,EAAKY,WAAW/F,GAAGyD,UAEhEwV,EAAI9P,QAAQ,OAAO,GAEnB,IAAI+P,EAAYD,EAAIrb,OAAOsF,IAAI,SAAA6E,GAAI,OAAIA,EAAK3D,OAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEc,OAAe,GAAGG,OAE5EgR,EAAUlS,OAAO,SAAAC,GAAC,OAAI6U,EAAUxT,QAAQrB,EAAEzG,KAAK0H,OAAS,IAAG6D,QAAQ,OAAO,GAE1E,IAAIgQ,EAAOvS,EAAMxC,OAAO,SAAA2D,GACpB,IAAIgR,EAAYhR,EAAK3D,OAAO,SAAAkB,GAAI,OAAkB,IAAdA,EAAKH,OAAe,GACxD,OAAO4T,EAAUhT,WAAW/F,GAAGyD,UAAY0B,EAAKY,WAAW/F,GAAGyD,UAElE0V,EAAKhQ,QAAQ,QAAQ,KAGzBH,EAAI0D,MAAM,SAA8E,IAAlE7E,EAASzJ,OAASoa,gBAAgB5a,OAAOsF,IAAI,SAAApD,GAAC,OAAIA,EAAE,KAAI1B,QAAgB,GAAK,MACnG8X,EAAYxJ,MAAM,SAAwE,IAA5D7E,EAASzJ,OAAS8c,UAAUtd,OAAOsF,IAAI,SAAApD,GAAC,OAAIA,EAAE,KAAI1B,QAAgB,GAAK,MACrGic,QAAQ7U,KAAK,YAAa,SAACxF,GAAD,MAAO,uBACjCoD,IAAa,kBAAkB+F,QAAQ,iBAAiB,GAEjDiQ,GAz9BWqD,CAAmBtG,EADrCN,EAAgBA,EAAc7D,OAAOgE,IACDG,EAAyBF,GAAaC,EAAaxR,EAAQoF,GAI9EqF,EAwClB,SAAwBtH,EAAUoO,EAAYyG,GAEjD,KAAG7U,EAASzJ,OAAS,GAmBhB,CAED,IAAIue,EAAa9U,EAAS,GAAGiB,UAAU5F,IAAI,SAAApD,GAAC,OAAIA,EAAEwF,OAE9CsX,EAAc3G,EAAW/S,IAAI,SAAA6E,GAC7B,IACIsE,EAAOtE,EAAKe,UAAU5F,IAAI,SAACoC,EAAMpH,GAEjC,OADIye,EAAWjX,QAAQJ,EAAKA,MACrB,CAAEI,QAAWiX,EAAWjX,QAAQJ,EAAKA,MAAOuX,UAAa3e,EAAGoH,KAAQA,EAAM0G,OAAU2Q,EAAWA,EAAWjX,QAAQJ,EAAKA,UAC/HlB,OAAO,SAAAC,GAAC,OAAIA,EAAEqB,SAAW,IACxBwS,EAAY7L,EAAK,GAAG3G,QAAU2G,EAAK,GAAGwQ,UAC1C,MAAO,CAAEjf,KAAQmK,EAAKe,UAAWoP,SAAYA,KAE7C4E,EAAaF,EAAY5I,KAAK,SAAS6E,EAAGtK,GAAK,OAAOsK,EAAEX,SAAW3J,EAAE2J,WACzE,OAAO4E,EA/BP,GAAiB,MAAdJ,EAAmB,CAElB,IAAIC,EAAaD,EAAW5T,UAAU5F,IAAI,SAAApD,GAAC,OAAIA,EAAEwF,OAC7CsX,EAAc3G,EAAW/S,IAAI,SAAA6E,GAC7B,IACIsE,EAAOtE,EAAKe,UAAU5F,IAAI,SAACoC,EAAMpH,GAEjC,OADIye,EAAWjX,QAAQJ,EAAKA,MACrB,CAAEI,QAAWiX,EAAWjX,QAAQJ,EAAKA,MAAOuX,UAAa3e,EAAGoH,KAAQA,EAAM0G,OAAU2Q,EAAWA,EAAWjX,QAAQJ,EAAKA,UAC/HlB,OAAO,SAAAC,GAAC,OAAIA,EAAEqB,SAAW,IACxBwS,EAAY7L,EAAK,GAAG3G,QAAU2G,EAAK,GAAGwQ,UAC1C,MAAO,CAAEjf,KAAQmK,EAAKe,UAAWoP,SAAYA,KAE7C4E,EAAaF,EAAY5I,KAAK,SAAS6E,EAAGtK,GAAK,OAAOsK,EAAEX,SAAW3J,EAAE2J,WAEzE,OAAO4E,EAEX5V,QAAQC,MAAM,sCA/DI4V,CAAe5G,EAAIN,GAALM,EAAyBF,GAAzBE,EAA0CC,IAGtBlT,IAAI,SAAA1D,GAAC,OAAIA,EAAE5B,OAAOkR,EAAMpK,EAAQoF,GAEpFgF,EAAKpC,MAAM,cAAe,UA+K3B,SAASiL,EAAgBqF,EAAOtY,EAAQoF,GAE3C,IAAImT,EAAaD,EAAM9T,OAAO,KAAKC,QAAQ,UAAU,GACrD8T,EAAWzX,KAAK,YAAa,qBAC7ByX,EAAW/T,OAAO,UAAU1D,KAAK,IAAK,GAAGA,KAAK,OAAQ,QACtDyX,EAAW/T,OAAO,QAAQE,KAAK,KAAK5D,KAAK,YAAa,oBACtDyX,EAAWvQ,MAAM,SAAU,WAC3BuQ,EAAWnQ,GAAG,QAAS,SAAC9M,EAAG9B,EAAGgD,GAC1BkC,IAAa,SAAS+F,QAAQ,QAAQ,GACtC/F,IAAa,QAAQ+F,QAAQ,OAAO,GACpCmN,UAAUrJ,OAAO,aAAa9D,QAAQ,YAAY,GAClD4M,EAAa,KAAMvJ,EAAW,GAAI9H,EAAQoF,KC3N3C,SAASoT,EAASC,EAAK7K,EAAa8K,EAAUC,GACjD,IAAIC,EAAUH,EAAIjU,OAAO,OAAOC,QAAQ,YAAY,GACpDmU,EAAQ5Q,MAAM,UAAW,gBACzB,IAAIiI,EAAS2I,EAAQpU,OAAO,UAAUC,QAAQ,6BAA6B,GAAMC,KAAKgU,GAClFG,EAAcD,EAAQpU,OAAO,OAAO1D,KAAK,KAAM6X,GAAQlU,QAAQ,oBAAoB,GACvFoU,EAAYrU,OAAO,KAAKE,KAAK,QAC7B,IAAIiJ,EAAUkL,EAAY7T,UAAU,KAAK9L,KAAK0U,GAAa3I,KAAK,KAAKP,KAAK,SAAApJ,GAAC,OAAGA,EAAE0D,QAUhF,OARAiR,EAAO7H,GAAG,QAAS,SAAC9M,EAAG9B,EAAGgD,GACnBqc,EAAYpU,QAAQ,QACnBoU,EAAYpU,QAAQ,QAAQ,GAE5BoU,EAAYpU,QAAQ,QAAQ,KAI7BkJ,2HCPJ,SAASlD,EAAuBtH,EAAUiH,EAAM9J,EAAkB8E,GAErE,IAAI0T,GAAkB,EAElBC,EAAYra,IAAU,YAAYoC,KAAK,SAE3CsJ,EAAK7B,OAAO,mBAAmBvD,UAAU,KAAKwD,SAE9C,IAAIwQ,EAsED,SAAqB7V,EAAUiH,EAAMpK,EAAQoF,GAIhD,IAAImN,EAAUnI,EAAK7B,OAAO,mBACtBjE,EAAMiO,EAAQP,QAAU5H,EAAK5F,OAAO,OAAO1D,KAAK,KAAM,kBAAoByR,EAE1EuG,GAAkB,EAElBG,EAAe3U,EAAIiE,OAAO,iBAC1B2Q,EAAWD,EAAajH,QAAU1N,EAAIE,OAAO,KAAKC,QAAQ,gBAAgB,GAAQwU,EACtFC,EAASpY,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,oBAGpC,IAAIgZ,EAAkBrP,EAASiD,QAAQ,SAAApE,GAAG,OAAGA,EAAIoE,QAAQ,SAAAzG,GAAC,OAAGA,EAAEiB,SAAO6R,OAAO,SAAUC,EAAKC,GAMxF,YALwB,IAAbD,EAAIC,GACbD,EAAIC,GAAQ,EAEZD,EAAIC,IAAS,EAERD,GACJ,IAIHG,EAAcnU,MAAcQ,MAAM,CAAC,EAAG,KAAKC,OAAO,CAAC,EAAGT,IAAO7E,OAAOiZ,OAAON,MAC3EwG,EAAaE,EAASlU,UAAU,UAAU9L,KAAKiK,GAAU8B,KAAK,KAAKR,QAAQ,SAAS,GACzEuU,EAAWxU,OAAO,QAAQC,QAAQ,aAAa,GACrD3D,KAAK,KAAM,GAKpB,IAAIqY,EAAUH,EAAWxU,OAAO,KAAKC,QAAQ,sBAAsB,GACnE0U,EAAQrY,KAAK,YAAa,qBAC1BqY,EAAQ3U,OAAO,UAAU1D,KAAK,IAAK,GAAGA,KAAK,OAAQ,QACnDqY,EAAQ3U,OAAO,QAAQE,KAAK,KAAK5D,KAAK,YAAa,oBACnDqY,EAAQnR,MAAM,SAAU,WAExBmR,EAAQ/Q,GAAG,QAAS,SAAC9M,EAAG9B,EAAGgD,GAEvB,IAAI4c,EAAQ1a,IAAalC,GAAGkD,OAAO,SAACC,EAAGjF,GAAJ,OAASA,GAAKlB,IAAGiL,QAAQ,iBAAiB,GAE1E/F,IAAUlC,EAAEhD,IAAIiL,QAAQ,kBACvB/F,IAAUlC,EAAEhD,IAAIiL,QAAQ,iBAAiB,GACzC4M,EAAa,KAAM+H,EAAMlgB,OAAQ8G,EAAQoF,KAEzC1G,IAAUlC,EAAEhD,IAAIiL,QAAQ,iBAAiB,GACzC4M,EAAa,CAAC/V,GAAI8d,EAAMlgB,OAAQ8G,EAAQoF,MAKhD4T,EAAW5Q,GAAG,YAAa,SAAS9M,EAAG9B,GACnC,IAAI6U,EAAY3P,IAAU,YAAYsG,UAAU,SAC5CoJ,EAAa1P,IAAU,YAAYsG,UAAU,SAKjD,OAJAqJ,EAAS3O,OAAO,SAAAC,GACZ,OAAOrE,EAAEkD,IAAI,SAAApD,GAAC,OAAGA,EAAEwF,OAAMI,QAAQrB,EAAEzG,KAAK0H,OAAS,IAClD6D,QAAQ,SAAS,GACpB2J,EAAU1O,OAAO,SAAAC,GAAC,OAAGrE,EAAEkD,IAAI,SAAApD,GAAC,OAAGA,EAAEwF,OAAMI,QAAQrB,EAAEzG,KAAK0H,OAAS,IAAG6D,QAAQ,SAAS,GAC5E/F,IAAUrB,MAAMoH,QAAQ,SAAS,KACzC2D,GAAG,WAAY,SAAS9M,EAAG9B,GACVkF,IAAU,YAAYsG,UAAU,SAASP,QAAQ,SAAS,GACzD/F,IAAU,YAAYsG,UAAU,SAASP,QAAQ,SAAS,GAC3E,OAAO/F,IAAUrB,MAAMoH,QAAQ,SAAS,KAGzBuU,EAAWxU,OAAO,QAAQE,KAAK,SAAApJ,GAC/C,IAAI6X,EAAS7X,EAAEoE,OAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEc,OAAe,GAAGC,MAC7C,OAAOyS,EAAOC,OAAO,GAAGC,cAAgBF,EAAOpW,MAAM,KAG5C+D,KAAK,IAAK,IAAIA,KAAK,IAAK,IAErC,IAAIwS,EAAY0F,EAAWxU,OAAO,KAAKC,QAAQ,aAAa,GAC5D6O,EAAUxS,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,sBAEzB8Z,EAAU9O,OAAO,QAC5B1D,KAAK,KAAM,GACXA,KAAK,KAAM,KACXA,KAAK,KAAM,IACXA,KAAK,KAAM,IAJZ,IAMIyS,EAAaD,EAAUtO,UAAU,SAAS9L,KAAK,SAACoC,GAChD,OAAOA,IAAI2J,KAAK,KAAKnE,KAAK,QAAS,SAACxF,EAAG9B,EAAGgD,GACtC,OAAOkC,IAAUlC,EAAEA,EAAE9C,OAAS,IAAIR,OAAO,GAAGwH,MAAQ,UAG5D6S,EAAWzS,KAAK,YAAa,SAACxF,GAC1B,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAC9CsU,EAA2B,SAAfpO,EAAyB9J,EAAE2H,KAAOzC,EAAElF,EAAE0H,UACtD,MAAO,aAAcwQ,EAAU,UAEnCD,EAAWnL,GAAG,QAAS,SAAC9M,EAAG9B,EAAGgD,GACvBsc,GACCA,GAAkB,EAClBpa,IAAU,mBAAmB+F,QAAQ,UAAU,KAE/CqU,GAAkB,EAClBpa,IAAU,mBACTsJ,MAAM,OAAStJ,IAAS6Y,MAAS,MACjCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,MACrCjP,OAAO,UACP7D,KAAKpJ,EAAEsF,MACRlC,IAAU,mBAAmB+F,QAAQ,UAAU,GAE/C/F,IAAU,mBAAmB0J,GAAG,QAAS,WACrCoI,EAAWlV,EAAEsF,KAAMZ,GACnB8Y,GAAkB,EAClBpa,IAAU,mBAAmB+F,QAAQ,UAAU,KAGnD/F,IAAU,mBAAmB0J,GAAG,QAAS,WAC1BiC,IAAX,IACI1C,EAAOqR,EAAWtZ,OAAO,SAAA2D,GACzB,OAAOA,EAAK7E,IAAI,SAAAoC,GAAI,OAAIA,EAAKA,OAAMI,QAAQ1F,EAAEsF,OAAS,IAEtDwY,EAAQJ,EAAWtZ,OAAO,SAAA2D,GAC1B,OAAwD,IAAjDA,EAAK7E,IAAI,SAAAoC,GAAI,OAAIA,EAAKA,OAAMI,QAAQ1F,EAAEsF,QAGjDkY,GAAkB,EAClBpa,IAAU,mBAAmB+F,QAAQ,UAAU,GAE/C4M,EAAa1J,EAAKzO,OAAQkgB,EAAMlgB,OAAQ8G,EAAQoF,QAO/CmO,EAAW/O,OAAO,UAAU1D,KAAK,KAAM,GAAGA,KAAK,KAAM,GAAGA,KAAK,IAAK,SAAAxF,GAC3E,OAAOuX,EAAYL,EAAgBlX,EAAEsF,SACtCE,KAAK,QAAS,SAACxF,EAAG9B,GAAJ,MAAS,QAAQ8B,EAAEsF,OAE7BwH,GAAG,YAAa,SAAS9M,EAAG9B,GAC/B,IAAIia,EAASF,EAAW7T,OAAO,SAAAlD,GAAC,OAAGA,EAAEoE,OAAStF,EAAEsF,OAC5CyN,EAAY3P,IAAU,YAAYsG,UAAU,SAC3BqJ,EAAS3O,OAAO,SAAAC,GAAC,OAAGA,EAAEzG,KAAK0H,OAAStF,EAAEsF,OAAM6D,QAAQ,mBAAmB,GAC5F,OAAOgP,EAAOhP,QAAQ,gBAAgB,KACvC2D,GAAG,WAAY,SAAS9M,EAAG9B,GAC1B,IAAIia,EAASF,EAAW7T,OAAO,SAAAlD,GAAC,OAAGA,EAAEoE,OAAStF,EAAEsF,OAEhD,OADAlC,IAAa,oBAAoB+F,QAAQ,mBAAmB,GACrDgP,EAAOhP,QAAQ,gBAAgB,KAGnB8O,EAAW7T,OAAO,SAAAC,GAAC,OAAcoC,MAAXpC,EAAEe,QAAoB8D,OAAO,QAAQE,KAAK,SAAApJ,GACnF,IAAI6X,EAAS7X,EAAEoF,MAAM0S,OAAO,GAAGC,cAAgB/X,EAAEoF,MAAM3D,MAAM,GAC7D,OAAOoW,IACRrS,KAAK,IAAK,IAAIA,KAAK,IAAK,GAE3B,OAAOkY,EA7NUK,CAAYlW,EAAUiH,EAAM9J,EAAkB8E,GAG3DwO,EAAmBoF,EAAWxU,OAAO,KAAKC,QAAQ,qBAAqB,GACvEY,EAAWC,EAAa5F,OAAO,SAAAC,GAAC,MAAc,mBAAXA,EAAEjC,OAA2Bc,IAAI,SAAApD,GAAC,OAAGA,EAAEmK,YAE1E+T,EAAUjU,EAAS3L,OAAS,EAAI4G,EAAiBZ,OAAO,SAAAC,GAAC,OAAkC,IAA/B0F,EAASrE,QAAQrB,EAAEX,SAAeR,IAAI,SAAApD,GAAC,OAAGA,EAAE4D,QAAS,KAEjH6U,EAAU3Q,EAAoBC,EAAU7C,EAAkBgZ,GAE1DC,EAAuB,OAAZD,EAAmBhZ,EAAiB5G,OAAS4f,EAAQ5f,OAEhE8f,EAAoBzF,EAAiBH,EAAkBC,EAASvT,EAAkB,KAAMyY,GACxFpC,EAAiC,SAAdoC,EAAuB,GAAK,GACnDC,EAAWlY,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,gBAAkBA,IAAMmd,EAAkB,IAAK4C,EAAW,IAAM,MAExFvF,EAAYwF,EAAmBpU,EAAY2T,GAC3C9E,EAAgBuF,EAAmBpU,EAAY2T,GAAW,GA4CxE,OAGG,SAAqBzU,EAAKmV,EAAYvgB,EAAMqgB,GAE/CjV,EAAI0D,MAAM,SAAY9O,EAAKQ,QAAU6f,EAAW,IAAQ,MACxDE,EAAW3Y,KAAK,YAAa,SAACxF,GAAD,MAAM,uBAjDnCoe,CAAYtP,EAAK7B,OAAO,mBAAoBqL,EAAkBzQ,EAAWoW,EAAW5C,GAEnEjY,IAAa,kBACnB0J,GAAG,QAAS,SAAC9M,EAAG9B,GACpBsf,GACCA,GAAkB,EAClBpa,IAAU,kBAAkB+F,QAAQ,UAAU,KAE9CqU,GAAkB,EAClBpa,IAAU,kBACTsJ,MAAM,OAAStJ,IAAS6Y,MAAS,MACjCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,MACrCjP,OAAO,UACP7D,KAAKpJ,EAAEkI,UACR9E,IAAU,kBAAkB+F,QAAQ,UAAU,GAE9C/F,IAAU,oBAAoB0J,GAAG,QAAS,YHyR/C,SAAyBuR,EAAe3Z,GAE3C,IAAI9G,EAAOmR,IAGP1C,GAFcrC,EAAa5F,OAAO,SAAAC,GAAC,MAAoB,gBAAjBA,EAAEkL,aAEjC3R,EAAKwG,OAAO,SAAA2D,GACnB,OAAOA,EAAKA,EAAK3J,OAAS,GAAG2H,WAAWsY,EAAcjZ,OAAO8C,WAAamW,EAAcnW,YAO5FgI,EADeI,EAAU,cAAe,OAH5B,KAAKtG,EAAa5F,OAAO,SAAAC,GAAC,MAAuB,SAApBA,EAAEwL,gBAA0BzR,OAGd8W,EAA/BxF,EAA+C9R,GAA/C8R,EAA0DrD,GAAO,CAAC,CAAC,YAAa,CAACgS,EAAcjZ,MAAOiZ,EAAcnW,aACrHxD,GACvBmK,EAAenK,EAAQ,cAGxB,IAAIoO,EAAa1P,IAAU,YAAYsG,UAAU,SAC7CqJ,EAAY3P,IAAU,YAAYsG,UAAU,SAE5CsJ,EAAW3G,EAAKvB,QAAQ,SAAA/C,GAAI,OAAGA,EAAK7E,IAAI,SAAAoC,GAAI,OAAIA,EAAKA,SAEzDlC,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1D/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAEvC2J,EAAU1O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QACnD6D,QAAQ,kBAAkB,GAEpB4J,EAAS3O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QAClD6D,QAAQ,kBAAkB,GGpT1BmV,CAAgBte,EAAGgF,GACnBwY,GAAkB,EAClBpa,IAAU,kBAAkB+F,QAAQ,UAAU,KAIlD/F,IAAU,oBAAoB0J,GAAG,QAAS,WACtC,IAAIlP,EAAOmR,IACP1C,EAAOzO,EAAKwG,OAAO,SAAA2D,GACnB,OAAOA,EAAKA,EAAK3J,OAAS,GAAG2H,WAAW/F,EAAEoF,OAAO8C,WAAalI,EAAEkI,WAGhE4V,EAAQlgB,EAAKwG,OAAO,SAAA2D,GACpB,OAAOA,EAAKA,EAAK3J,OAAS,GAAG2H,WAAW/F,EAAEoF,OAAO8C,UAAYlI,EAAEkI,WAGnEsV,GAAkB,EAClBpa,IAAU,kBAAkB+F,QAAQ,UAAU,GAE9C4M,EAAa1J,EAAMyR,EAAO9Y,EAAkB8E,QAMjD4T,EAkKJ,SAASjF,EAAiBH,EAAkB1a,EAAM8G,EAAQoD,EAAa2V,GAC1E,IAAIpC,EAAiC,SAAdoC,EAAuB,GAAK,GAC/CS,EAAoB5F,EAAiB5O,UAAU,KAAK9L,KAAK,SAACoC,EAAG9B,GAAJ,OAASN,EAAKM,KAAIyL,KAAK,KACpFuU,EAAkB/U,QAAQ,0BAA0B,GACpD+U,EAAkB1Y,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAU,gBAAiBA,GAAKmd,EAAkB,GAAI,MAE1F,IAAIlT,EAAY+V,EAAkBhV,OAAO,QAAQE,KAAK,SAAApJ,GAAC,OAAGA,EAAEA,EAAE5B,OAAS,GAAGgH,QAI1E,OAHA+C,EAAUgB,QAAQ,mBAAmB,GACrChB,EAAU3C,KAAK,YAAa,sBAErB0Y,sDASX,SAAAjc,EAA+Bsc,EAAezU,EAAY2T,GAA1D,IAAApP,EAAAlB,EAAAqR,EAAA,OAAAnc,mBAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEI8b,EAAc3gB,OAAO+H,QAAQ,SAAAoC,GATjC,IAA0BnK,KAUDmK,GAThB7E,IAAI,SAAC7B,EAAGnD,GACT,IAAIuJ,EAAa,IAANvJ,EAAU,EAAI,EACrBmO,EAAQhL,EAAEoC,QAAU7F,EAAKM,EAAEuJ,GAAMhE,QAAW,EAAI,GACpDpC,EAAEod,OAASpS,MAUXgC,EAAwB,SAAdoP,EAAuB,GAAK,GACtCtQ,EAAU/J,MACb8B,EAAE,SAAAlF,GACC,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAElD,MAD+B,SAAfkG,EAAyB9J,EAAE2H,KAAOzC,EAAElF,EAAE0H,YAEzDsF,EAAE,SAAAhN,GACC,IAAIgN,EAAIhN,EAAE2D,OAEV,OADAqJ,EAAEpJ,MAAM,CAACyK,EAAQ,IACA,SAAdoP,EACQzd,EAAEye,OAEFzR,EAAEhN,EAAEyD,WAIf+a,EAAaD,EAAcrV,OAAO,QACrC1D,KAAK,IAAK2H,GACV3H,KAAK,QAAS,cACdkH,MAAM,SAAU,SAAC1M,GAAD,OAAMA,EAAE,GAAGyE,QA1BhClC,EAAAK,OAAA,SA4BW4b,GA5BX,wBAAAjc,EAAAM,SAAAZ,2MA+BO,SAASyW,EAAYwF,EAAmBpU,EAAY2T,GAEvD,IAAIiB,EAAgBR,EAAkB9Z,OAAO,SAAApE,GACzC,OAA2ByG,MAAnBzG,EAAEA,EAAE5B,OAAS,GAA4C,eAAzB4B,EAAEA,EAAE5B,OAAS,GAAGgE,KAAmC,eAAXpC,EAAEoC,OAGlFiZ,EAAiC,SAAdoC,EAAwB,GAAK,GAEhDc,EAAgBG,EAAcxV,OAAO,KAAKC,QAAQ,uBAAuB,4CAE5DwV,CAAgBJ,EAAezU,EAAY2T,GAEvCc,EAAcrV,OAAO,QAAQC,QAAQ,kBAAkB,GAC7D3D,KAAK,SAAU6V,GAC9B,IAAIuD,EAAqBL,EAAc7U,UAAU,KAAK9L,KAAK,SAAAoC,GAAC,OAAGA,IAAG2J,KAAK,KAAKR,QAAQ,kBAAkB,GAElG0V,EAAYD,EAAmB1V,OAAO,KAAKC,QAAQ,cAAc,GAErD0V,EAAU3V,OAAO,QAAQC,QAAQ,uBAAuB,GAC9D3D,KAAK,SAAU6V,GACzBwD,EAAUrZ,KAAK,YAAa,SAACxF,GACzB,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAElD,MAAO,cADwB,SAAfkG,EAAyB9J,EAAE2H,KAAOzC,EAAElF,EAAE0H,WACvB,SAEnC,IAAIiG,EAAYkR,EAAU3V,OAAO,QAAQC,QAAQ,cAAc,GAqD/D,OApDAwE,EAAUnI,KAAK,QAAS,IAAIA,KAAK,SAAU,SAACxF,EAAG9B,GAC3C,IAAI8O,EAAIhN,EAAE2D,OACVqJ,EAAEpJ,MAAM,CAACyX,EAAiB,IAC1B,IAAIzX,EAAQ5D,EAAEmF,KAAO,EAAI6H,EAAEhN,EAAEwD,WAAawJ,EAAEhN,EAAEsD,WAE9C,MAD+B,SAAdma,EAAwB,GAAK7Z,IAGlD+J,EAAUnI,KAAK,YAAa,SAACxF,EAAG9B,GAC5B,IAAI8O,EAAIhN,EAAE2D,OAGV,OAFAqJ,EAAEpJ,MAAM,CAACyX,EAAiB,IAEnB,iBADKrb,EAAEmF,MAAuB,SAAdsY,EAAyB,EAAIzQ,EAAEhN,EAAEsD,YAC1B,MAElCqK,EAAUjB,MAAM,OAAQ,SAAC1M,GACrB,OAAOA,EAAEgE,WAAWhE,EAAEyD,WAE1BkK,EAAUnI,KAAK,UAAW,SAACxF,GACvB,OAAOA,EAAE+D,SAAS/D,EAAEyD,WAER,QAAbga,GACCoB,EAAU3V,OAAO,QAAQ1D,KAAK,QAAS,IAAIA,KAAK,SAAU,GACzDA,KAAK,YAAa,SAACxF,EAAG9B,GACnB,IAAI8O,EAAIhN,EAAE2D,OAEV,OADAqJ,EAAEpJ,MAAM,CAACyX,EAAiB,IACnB,gBAAiBrO,EAAEhN,EAAEyD,SAAU,MACzC+B,KAAK,OAAQ,SAAAxF,GAAC,OAAGA,EAAEyE,QAAO0E,QAAQ,WAAW,GAIlD0V,EAAU/R,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAC7B,IAAI8L,EAAIhN,EAAE2D,OACVqJ,EAAEpJ,MAAM,CAAC,EAAGyX,IACZjY,IAAUlC,EAAEhD,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,IAC9E,IAAIsQ,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,IACpB,IAAIrI,EAAIjB,IAAU,OAClByY,EAAKG,KAAK,SAAS3X,EAAErE,EAAEyD,SAAU,sBAA8BY,EAAErE,EAAEsD,WAAY,sBAA8Be,EAAErE,EAAEwD,YAC9GkJ,MAAM,OAAStJ,IAAS6Y,MAAS,MACjCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,MACxCL,EAAKnP,MAAM,SAAU,UAEtBI,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI+O,OAAO,YACvB7J,IAAUlC,EAAEhD,IAAI+O,OAAO,YAAYC,SACxB9J,IAAU,YAChB0Y,aACFC,SAAS,KACTrP,MAAM,UAAW,KAGjBkS,EAGJ,SAAS3D,EAAanV,EAAQ0U,GACjC,IAAIM,EAAO1X,IAAO0C,EAAO5C,IAAI,SAAAwI,GAAC,OAAGA,EAAEjI,WAC/BsX,EAASjV,EAAO1B,OAAO,SAAAC,GAAC,OAAGA,EAAEZ,SAAWqX,IACxC5S,EAAWpC,EAAOA,EAAO5C,IAAI,SAAApD,GAAC,OAAGA,EAAE2D,UAASiC,QAAQoV,IAGxD,OAFA5S,EAAS8S,MAAQD,EACjB7S,EAASsS,OAASA,EACXtS,EAEJ,SAAS4W,EAAWC,EAAWra,GAElC,IACI+R,EAAerT,IAAU,aAC7BqT,EAAa/M,UAAU,KAAKwD,SAE5B,IAAI4B,EAAO1L,IAAU,SACrB0L,EAAKpC,MAAM,cAAe,GAE1BtJ,IAAU,YAAY8F,OAAO,QAAQE,KAAK2V,EAAU,GAAGrb,OAEvD,IAAIsb,EAAe,CAAC,CAACtb,MAAQ,SAASsO,OAAOtN,EAAON,OAAO,SAAAC,GAAC,OAAIA,EAAEX,OAASqb,EAAU,GAAGrb,OAAqB,aAAXW,EAAEjC,QAClF8a,EAAS9Z,IAAU,YAAa4b,EAAc,WAAW,uBAE/DlS,GAAG,QAAS,SAAC9M,EAAG9B,EAAGgD,GAG3B,GAFAkC,IAAU,YAAY8F,OAAO,QAAQE,KAAKpJ,EAAE0D,OAE9B,aAAX1D,EAAEoC,KAAoB,CAEV2M,IAAX,IACIkQ,EAAUF,EAAU7b,IAAI,SAAAsB,GACxB,IAAI0a,EAAalf,EAAE0E,OAAOxB,IAAI,SAAAqB,GAC1B,IAAIb,EAAQa,EAAGb,MACXzD,EAAOsE,EAAGI,UACV+L,EAAUlM,EAAM5G,KAAKwG,OAAO,SAAA+a,GAE5B,OADWA,EAAG/a,OAAO,SAAAsE,GAAE,OAAe,IAAZA,EAAGvD,OAAe,GAChCY,WAAWrC,GAAOwE,WAAajI,IAE/C,MAAO,CAACyD,MAASA,EAAOc,MAASvE,EAAMrC,KAAQ8S,KAGnD,OADAlM,EAAM5G,KAAOshB,EACN1a,IAKRsK,EAAO1L,IAAU,SACrB0L,EAAKpF,UAAU,KAAKwD,SACpB4B,EAAKpC,MAAM,cAAe,QAC1B,IAEI0S,EAFgBtQ,EAAKpF,UAAU,mBAAmB9L,KAAKqhB,GAAStV,KAAK,OAAOR,QAAQ,eAAe,GAErED,OAAO,OACzCkW,EAAc5Z,KAAK,SAAU,SAAAhG,GAAC,OAAkB,IAAdA,EAAE5B,KAAKQ,SACzC,IAAIihB,EAAaD,EAAclW,OAAO,KAIlCoW,GAFaD,EAAWnW,OAAO,QAAQE,KAAK,SAAA/E,GAAC,OAAGA,EAAEG,QAAOgB,KAAK,YAAa,qBAE7D6Z,EAAW3V,UAAU,kBAAkB9L,KAAK,SAAA2hB,GAQ1D,OAPgBA,EAAE3hB,KAAKsF,IAAI,SAACpD,GACxB,IAAI0f,EAAO,GAIX,OAHAA,EAAKC,MAAQ,CAACF,EAAE7b,MAAO6b,EAAE/a,OACzBgb,EAAKE,OAAS,CAAC5f,EAAE4D,MAAO5D,EAAE0E,OAC1Bgb,EAAK5hB,KAAOkC,EAAElC,KACP4hB,MAEQ7V,KAAK,KAAKR,QAAQ,gBAAgB,KAEzDmW,EAAcA,EAAYlb,OAAO,SAAAC,GAAC,OAAGA,EAAEzG,KAAKQ,OAAS,KACzCoH,KAAK,YAAa,SAAChG,EAAGtB,GAAJ,MAAS,iBAAiB,GAAU,IAAJA,GAAU,MAExEohB,EAAY9R,KAAK,SAAChO,EAAGtB,EAAGgD,GACvB,IAAI+H,EAAYF,EAA4BvJ,EAAE5B,KAAMwF,IAAUlC,EAAEhD,KAChE+K,EAAUgE,OAAO,QAAQzH,KAAK,KAAM,IAAIA,KAAK,OAAO,QACpDyD,EAAUS,UAAU,kBAAkBA,UAAU,UAAUlE,KAAK,OAAQ,4BAEvEyD,EAAUgE,OAAO,eAAe/D,OAAO,QAAQE,KAAK,SAACzI,EAAGzC,GAAJ,MAAS,KAAMyC,EAAE/C,KAAKQ,SAAQoH,KAAK,YAAa,oBACpGyD,EAAUS,UAAU,QAAQgD,MAAM,YAAa,UAAUA,MAAM,OAAQ,QAEvEzD,EAAUgE,OAAO,QAAQzH,KAAK,SAAU,QACxC,IAAIma,EAAcvc,IAAUlC,EAAEhD,IAAIgL,OAAO,KAGrC2U,EAAU8B,EAAYzW,OAAO,KAAKC,QAAQ,sBAAsB,GACpE0U,EAAQrY,KAAK,YAAa,sBAC1BqY,EAAQ3U,OAAO,UAAU1D,KAAK,IAAK,GAAGA,KAAK,OAAQ,QACnDqY,EAAQ3U,OAAO,QAAQE,KAAK,KAAK5D,KAAK,YAAa,oBAAoBA,KAAK,OAAQ,QAEpFqY,EAAQnR,MAAM,SAAU,WAExBmR,EAAQ/Q,GAAG,QAAS,WAChB,IAAIkO,EAAQ5X,IAAalC,GAAGkD,OAAO,SAACC,EAAEjF,GAAH,OAAQA,GAAKlB,KF5OzD,SAAS0hB,EAAiB5C,EAAO/G,EAAYC,EAAaxR,GAE7D,IAAImb,EAAkB3J,EAAYjJ,OAAO,gBACrC6S,EAAcD,EAAgBnJ,QAAUR,EAAYhN,OAAO,OAAOC,QAAQ,eAAe,GAAQ0W,EAErGC,EAAYpT,MAAM,UAAU,gBAAgBA,MAAM,QAAS,SAASA,MAAM,SAAU,QACpF,IAAIoC,EAAO1L,IAAU,YAGrB,GAFA0L,EAAKpC,MAAM,cAAe,SAEd,MAATsQ,EAAc,CACb,IAAI+C,EAAajK,EAAiB5S,IAAI,SAAApD,GAAC,OAAGA,EAAEkgB,aACxCC,EAAWjd,GAAYkd,KAAK,SAAAngB,GAAC,OAAkC,IAA9BggB,EAAWra,QAAQ3F,EAAE,MAC1Did,EAAMgD,WAAaC,EAAS,GAC5BnK,EAAiBxX,KAAK0e,GAG1B,GAAGlH,EAAiB1X,OAAS,EAAE,CAC3B,IAAI+hB,EAAoB/c,IAAU,YAAY6J,OAAO,mBACjDmT,EAAgBD,EAAkBzJ,QAAUtT,IAAU,YAAY8F,OAAO,UAAUE,KAAK,eAAe5D,KAAK,KAAM,kBAAkB2D,QAAQ,gBAAgB,GAAQgX,EACxKC,EAActT,GAAG,QAAS,WACG,gBAAzBsT,EAAchX,OAA2BgX,EAAchX,KAAK,gBAAkBgX,EAAchX,KAAK,eACjGwW,EAAiB,KAAM3J,EAAYC,EAAaxR,KAIxD,IAAI2b,EAAqB3b,EAAOxB,IAAI,SAACqB,EAAIrG,GACrC,IAAIoiB,EAAS,CAAC5c,MAASa,EAAGb,MAAOtB,KAAQmC,EAAGnC,KAAMxE,KAAQ,IAK1D,OAJAkY,EAAiB5S,IAAI,SAACqd,EAAKriB,GACvB,IAAIsiB,EAAO5Y,EAAoB2Y,EAAI3iB,KAAM8G,EAAQ,CAACH,EAAGb,QACrD4c,EAAO1iB,KAAKU,KAAK,CAAC0e,MAAS,CAACyC,MAASc,EAAId,MAAOC,OAAUa,EAAIb,OAAQjb,MAAS8b,EAAIP,YAAapiB,KAAQ4iB,EAAK1V,QAAQ,SAAA+N,GAAC,OAAGA,QAEtHyH,IAGP3L,EAASmL,EAAYpW,UAAU,UAAU9L,KAAKkY,GAAkBnM,KAAK,UAAUR,QAAQ,gBAAgB,GAAMuD,MAAM,aAAc,SAAA1M,GAAC,OAAGA,EAAEggB,aAC3IrL,EAAOjL,UAAU,QAAQ9L,KAAK,SAAA+C,GAAC,MAAG,CAACA,KAAIgJ,KAAK,QAAQP,KAAK,SAAAzI,GACrD,OAAOA,EAAE8e,MAAM,GAAI,IAAM9e,EAAE+e,OAAO,GAAK,MAAMxW,OAAO,QAAQE,KAAK,SAAAzI,GAAC,OAAGA,EAAE/C,KAAKQ,SAAQ+K,QAAQ,qBAAqB,GAE1GwL,EAAOjL,UAAU,KAAK9L,KAAK,SAAAoC,GAAC,MAAG,CAACA,KAAI2J,KAAK,KAAKR,QAAQ,sBAAsB,GAAMuD,MAAM,eAAgB,QAC9GI,GAAG,QAAS,SAAC9M,EAAG9B,GACjB,IAAIuiB,EAAe3K,EAAiB1R,OAAO,SAAAC,GAAC,OAAGA,EAAE2b,YAAchgB,EAAEggB,cACjElK,EAAmB2K,GACCriB,OAAS,EACzBwhB,EAAiB,KAAM3J,EAAYC,EAAaxR,IAEhDwR,EAAYxM,UAAU,KAAKwD,SAC3BgJ,EAAYxJ,MAAM,SAAU,OAC5BoC,EAAKpC,MAAM,cAAe,UAIlC,IAAIgU,EAAexK,EAAYjJ,OAAO,mBAClCwJ,EAAeiK,EAAahK,QAAUR,EAAYhN,OAAO,OAAOC,QAAQ,kBAAkB,GAAQuX,EACtGxK,EAAYxJ,MAAM,SAAU,SAASA,MAAM,QAAS,QACpD+J,EAAa/J,MAAM,SAAU,SAE7B,IAAIiU,EAAWlK,EAAa/M,UAAU,gBAAgB9L,KAAKyiB,EAAmBjc,OAAO,SAAAC,GAAC,MAAc,eAAXA,EAAEjC,OAAuBc,IAAI,SAACqd,GA0BnH,OAzBAA,EAAI3iB,KAAKsF,IAAI,SAAAnD,GACT,IACIoD,EAAMuB,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAU6c,EAAI7c,QAAO,GAAGP,IAClDI,EAAMmB,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAU6c,EAAI7c,QAAO,GAAGH,IAClD+G,EAAW,IAAIC,MAHH,GAGoBC,OAAOtH,IAAI,SAACpD,EAAG5B,GAI/C,MAAO,CAACuM,KAFIvM,GADD,EAJC,GAOUwM,KADVxM,EAAG,IAFJ,EAJC,GAOsByM,KAAQzM,EAAGiF,IAAOA,EAAKI,IAAMA,KAG/DqH,EAAgB7K,EAAEnC,KAAKsF,IAAI,SAAA6E,GAAI,OAAIA,EAAK3D,OAAO,SAAAkB,GAAI,OAAgB,GAAbA,EAAKH,SAC3D0F,EAAY9K,EAAEnC,KAAKkN,QAAQ,SAAA/C,GAAI,OAAIA,EAAK3D,OAAO,SAAAkB,GAAI,OAAiB,IAAdA,EAAKH,SAU/D,OATApF,EAAEyL,KAAOlB,EAASpH,IAAI,SAAChC,GACnB,IAAI+E,EAAQ2E,EAAcE,QAAQ,SAAA/C,GAAI,OAAIA,EAAK3D,OAAO,SAAAkB,GAClD,OAAOA,EAAKoC,UAAYxG,EAAEuJ,MAAQnF,EAAKoC,UAAYxG,EAAEwJ,QAIzD,OAFAxJ,EAAEtD,KAAOqI,EACT/E,EAAE0f,KAAOxd,IAAQ6C,EAAM/C,IAAI,SAAA2d,GAAC,OAAGA,EAAEpd,WAC1BvC,IAEXnB,EAAE+E,OAAS+F,EACJ9K,IAGJwgB,KAEXI,EAASG,OAAO5T,SAChB,IAAI6T,EAAgBJ,EAASK,QAAQ9X,OAAO,KAAKC,QAAQ,eAAe,GAExD4X,EAAc7X,OAAO,QAAQE,KAAK,SAAApJ,GAAC,OAAGA,EAAE0D,QAAOgJ,MAAM,cAAe,OACnEA,MAAM,YAAa,QAAQlH,KAAK,YAAa,uBAE9Dmb,EAAWI,EAAcE,MAAMN,IACtBnb,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,gBAAgB,GAAQ,GAAJA,GAAS,MAEjE,IAAIgjB,EAAYP,EAASjX,UAAU,iBAAiB9L,KAAK,SAAAoC,GAAC,MAAG,CAACA,KAAI2J,KAAK,KAAKR,QAAQ,eAAe,GACnG+X,EAAU1b,KAAK,YAAa,qBACb0b,EAAUxX,UAAU,qBAAqB9L,KAAK,SAAAoC,GAAC,MAAG,CAACA,KAAI2J,KAAK,QAAQR,QAAQ,gBAAgB,GAC1F3D,KAAK,QAAS,KAAKA,KAAK,SAAU,IAAIA,KAAK,OAAQ,QAAQA,KAAK,SAAU,QAE/F,GAAGpC,IAAU,mBAAmBsT,SAAmD,gBAAxCtT,IAAU,mBAAmBgG,OAAyB,CACzF,IAAI+D,EAAU/J,MACb8B,EAAE,SAAClF,EAAG9B,GAEH,OADQkF,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAC3CsB,CAAEhH,KAEZ8O,EAAE,SAAAhN,GACC,IAAIgN,EAAIhN,EAAE2D,OAEV,OADAqJ,EAAEpJ,MAAM,CAAC,GAAI,IACNoJ,EAAEhN,EAAE4gB,QAGflD,EAAawD,EAAUxX,UAAU,iBAAiB9L,KAAK,SAAAoC,GAAC,OAAGA,EAAEpC,OAAM+L,KAAK,KAAKR,QAAQ,eAAe,GACxGuU,EAAWhU,UAAU,KAAKwD,SAC1B,IAAItG,EAAQ8W,EAAWxU,OAAO,QAAQ1D,KAAK,IAAK,SAAAxF,GAC5C,IAAIgH,EAAQhH,EAAEwL,KAAK,GAAG5N,KAAK,GAAG+F,OAS9B,OARA3D,EAAEwL,KAAOxL,EAAEwL,KAAKtI,IAAI,SAACqL,EAAGrQ,EAAGgD,GAMvB,YALcuF,IAAX8H,EAAEqS,OACDrS,EAAEqS,KAAO5gB,EAAEwL,KAAKtN,EAAE,GAAG0iB,KACrB5gB,EAAEmhB,SAAU,GAEhB5S,EAAE5K,OAASqD,EACJuH,IAEJpB,EAAQnN,EAAEwL,QAClBrC,QAAQ,QAAQ,GAEnBvC,EAAM8F,MAAM,OAAQ,QACpB9F,EAAM8F,MAAM,SAAU,SAAA1M,GAAC,OAAGA,EAAEgd,MAAMvY,QAClCmC,EAAM8F,MAAM,eAAgB,OAEfwU,EAAUhY,OAAO,KAAKC,QAAQ,UAAU,GAErD+X,EAAUpU,GAAG,YAAa,SAAS9M,EAAG9B,GAAG,IAAAkjB,EAAArf,KAEjCiF,EAAQtC,EAAON,OAAO,SAAAC,GAAC,OAAGA,EAAEX,QAAU1D,EAAE0D,QAAO,GAC/C2d,EAAgBje,IAAUrB,MAAMkL,OAAO,WACvCqU,EAAYD,EAAc3K,QAAUtT,IAAUrB,MAAMmH,OAAO,KAAKC,QAAQ,UAAU,GAAQkY,EAE9F,GAAGje,IAAU,mBAAmBsT,SAAiD,gBAAtCtT,IAAU,mBAAmBgG,OACpEkY,EAAU9b,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,cAAckF,IAASge,GAAM,GAAK,IAAI,QAC3EE,EAAU5iB,KAAK0E,IAAY4D,EAAMrD,QAAQ4H,MAAM,QAC9C,CACD,IACIgW,EADQne,IAAUrB,MAAMkL,OAAO,gBAAgBvD,UAAU,QACzC9L,OAAOsF,IAAI,SAAAlD,GAAC,OAAGA,EAAE,GAAGuhB,UAAS,GAEjDD,EAAU9b,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,cAAckF,IAASge,GAAM,GAAK,IAAI,QAC3E,IAAII,EAAWpe,MAAiBS,OAAO,CAAC0d,EAAS,IAAI3d,MAAM,CAAC,EAAG,KAC/D0d,EAAU5iB,KAAK0E,IAAYoe,GAAUjW,MAAM,OAIhDuB,GAAG,aAAc,WACA1J,IAAUrB,MAAMkL,OAAO,WAC7BC,eAGb,CAEDgU,EAAUxX,UAAU,gBAAgBwD,SACpC,IAAIwQ,EAAawD,EAAUxX,UAAU,iBAAiB9L,KAAK,SAAAoC,GAGvD,IAFA,IAAIyhB,EAAYzhB,EAAEpC,KAAK,GAAG4N,KACtBkW,EAAW,GAF4CC,EAAA,SAGnDzjB,GACJ,IAAI0jB,EAAQ,GACZ5hB,EAAEpC,KAAKM,GAAGsN,KAAKtI,IAAI,SAACqL,EAAGnP,QACLqH,IAAX8H,EAAEqS,OACDrS,EAAEqS,KAAO5gB,EAAEpC,KAAKM,GAAGsN,KAAKpM,EAAE,GAAGwhB,WAERna,IAAtBgb,EAAUriB,GAAGwhB,OACZa,EAAUriB,GAAGwhB,KAAOa,EAAUriB,EAAE,GAAGwhB,MAEvC,IAAIW,EAAUvhB,EAAEpC,KAAK,GAAG4N,KAAK,GAAGrI,IAAMnD,EAAEpC,KAAK,GAAG4N,KAAK,GAAGjI,IACxDqe,EAAMtjB,KAAK,CAACujB,KAAOC,KAAKC,IAAIN,EAAUriB,GAAGwhB,KAAOrS,EAAEqS,MAAOW,QAAWA,MAExEG,EAASpjB,KAAKsjB,IAZV1jB,EAAI,EAAGA,EAAI8B,EAAEpC,KAAKQ,OAAQF,IAAKyjB,EAA/BzjB,GAcR,OAAOwjB,IACR/X,KAAK,KAAKR,QAAQ,eAAe,GAEhCgE,EAAU/J,MACT8B,EAAE,SAAClF,EAAG9B,GAEH,OADQkF,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAC3CsB,CAAEhH,KAEZ8O,EAAE,SAAAhN,GACC,IAAIgN,EAAI5J,MAAiBS,OAAO,CAAC,EAAG7D,EAAEuhB,UAAUzd,OAAM,GAEtD,OADAkJ,EAAEpJ,MAAM,CAAC,GAAI,IACNoJ,EAAEhN,EAAE6hB,QAGfjb,EAAQ8W,EAAWxU,OAAO,QAAQ1D,KAAK,IAAK,SAAAxF,GAC5C,OAAOmN,EAAQnN,KAGnB4G,EAAM8F,MAAM,OAAQ,QACpB9F,EAAM8F,MAAM,SAAU,SACtB9F,EAAM8F,MAAM,eAAgB,OAK5B,IAAIsV,EAAcrB,EAASjX,UAAU,uBAAuB9L,KAAK,SAAAoC,GAE7D,IAAImD,EAAMC,IAAOpD,EAAEpC,KAAKkN,QAAQ,SAAAzG,GAAC,OAAGA,EAAES,OAAO5B,IAAI,SAAApD,GAAC,OAAGA,EAAE2D,aACnDF,EAAMH,IAAOpD,EAAEpC,KAAKkN,QAAQ,SAAAzG,GAAC,OAAGA,EAAES,OAAO5B,IAAI,SAAApD,GAAC,OAAGA,EAAE2D,aAEnDyB,EAAI9B,MAAiBS,OAAO,CAACN,EAAKJ,IAAMS,MAAM,CAAC,EAAG,MAElDyH,EAAYjI,MACf1C,MAAM,SAASV,GAAK,OAAOA,EAAEyD,UAC7BI,OAAOqB,EAAErB,UACTyH,WAAWpG,EAAEqG,MAAM,KAUpB,MAAO,CAAC,CAAC3N,KARMoC,EAAEpC,KAAKsF,IAAI,SAAApD,GACtB,IAAImiB,EAAY9L,EAAIrW,EAAEgF,QAAQ5B,IAAI,SAAAiC,GAG9B,OAFAA,EAAKD,EAAIA,EACTC,EAAK6X,MAAQld,EAAEkd,MACR7X,IAEX,MAAO,CAAC+c,QAAU7W,EAAUvL,EAAEgF,QAASlH,KAAQqkB,EAAWjF,MAASld,EAAEkd,MAAO3V,OAAUnC,KAEhEmC,OAAUnC,MACrCyE,KAAK,KAAKR,QAAQ,sBAAsB,GAC3C6Y,EAAYxc,KAAK,YAAa,qBAE9B,IAAI2c,EAAQH,EAAYtY,UAAU,YAAY9L,KAAK,SAAAoC,GAAC,MAAG,CAACA,KAAI2J,KAAK,KAAKR,QAAQ,UAAU,GACxFgZ,EAAM3c,KAAK,YAAa,oBACxB2c,EAAM3U,KAAK,SAACxN,EAAG9B,EAAGuP,GACdrK,IAAUqK,EAAMvP,IAAIQ,KAAK0E,IAAcpD,EAAEqH,QAAQkE,MAAM,MAG3D,IAAI6W,EAAaJ,EAAYtY,UAAU,mBAAmB9L,KAAK,SAAAoC,GAAC,OAAGA,EAAEpC,OAAM+L,KAAK,KAAKR,QAAQ,kBAAkB,GAE/GiZ,EAAW1Y,UAAU,SAAS9L,KAAK,SAAAoC,GAG3B,MAAO,CADI,CAAC4gB,KADDxd,IAAQpD,EAAEpC,KAAKsF,IAAI,SAAA3C,GAAC,OAAGA,EAAEkD,WACVuZ,MAAQhd,EAAEgd,MAAO9X,EAAIlF,EAAEqH,WAEtDsC,KAAK,QAAQR,QAAQ,QAAQ,GAAM3D,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,cAAc8B,EAAEkF,EAAElF,EAAE4gB,MAAM,KAAK,QAC/Fpb,KAAK,SAAU,IAAIA,KAAK,QAAS,GAAGA,KAAK,OAAQ,SAAAxF,GAAC,OAAGA,EAAEgd,MAAMvY,QAAOiI,MAAM,UAAW,OAEvE0V,EAAW1Y,UAAU,cAAc9L,KAAK,SAAAoC,GAAC,MAAG,CAACA,KAAI2J,KAAK,KAAKR,QAAQ,aAAa,GAAM3D,KAAK,YAAa,SAACxF,EAAG9B,EAAGgD,GAE1H,MAAO,eADIkC,MAAiBS,OAAO,CAAC,EAAG3C,EAAE9C,SAASwF,MAAM,CAAC,EAAG,IACrC+D,CAAKzJ,EAAE,IAAM,MAEhBwL,UAAU,kBAAkB9L,KAAK,SAAAoC,GAAC,OAAGA,EAAEpC,OAAM+L,KAAK,UAAUnE,KAAK,IAAK,GAC7FA,KAAK,KAAM,SAACxF,EAAG9B,GACZ,OAAO8B,EAAEkF,EAAElF,EAAEyD,WACd+B,KAAK,KAAM,SAACxF,EAAG9B,EAAGgD,GACjB,OAAO,IACRsE,KAAK,OAAQ,SAAAxF,GAAC,OAAGA,EAAEgd,MAAMvY,QEXhBmb,CAAiBpgB,EAAGwb,EAAMpd,OAAQwF,IAAU,aAAcsB,KAG9D,IAAI2d,EAAa1C,EAAYzW,OAAO,QAAQE,KAAK,SAAC5J,EAAGtB,GAAJ,OAASsB,EAAEkgB,OAAO,KACnE2C,EAAW7c,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,qBACtCmkB,EAAW7c,KAAK,OAAQ,UAGzB,IAAI8c,EAAahD,EAAYlb,OAAO,SAAAC,GAAC,OAAGA,EAAEzG,KAAKQ,OAAS,IAAG8K,OAAO,KAAKC,QAAQ,cAAc,GAC7FmZ,EAAW9c,KAAK,YAAa,SAACxF,EAAE9B,GAAH,MAAQ,sBAErC,IAAIyiB,EAAW2B,EAAW5Y,UAAU,gBAAgB9L,KAAK,SAACoC,GACtD,IAAIwgB,EAAO5Y,EAAoB5H,EAAEpC,KAAM8G,EAAQ,MA6BhD,OA5BmB8b,EAAK,GAAGtd,IAAI,SAAC2D,EAAK3I,GAChC,IAAI+J,EAAUjI,EAAEpC,KAAK,GAAGwG,OAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEc,OAAe,GAAGC,MACvDyB,EAAIA,EAAIzI,OAAS,GAAGoc,OAAS,EAE7B,IADA,IAAIvQ,EAAY,CAAC7E,MAASyB,EAAIA,EAAIzI,OAAO,GAAGgH,MAAOhD,KAAOyE,EAAIA,EAAIzI,OAAO,GAAGgE,KAAMxE,KAAQ,CAAC,CAACqK,QAAWA,EAASrB,MAASC,KACjHR,EAAQ,EAAGA,EAAQma,EAAKpiB,OAAQiI,IAAS,CAC7C,IAAI4B,EAAUjI,EAAEpC,KAAKyI,GAAOjC,OAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEc,OAAe,GAAGC,MACvDqV,EAAO+F,EAAKna,GAAOnI,GAAGE,OAAS,EACnCoiB,EAAKna,GAAOnI,GAAGuc,GAAMD,OAAkB,EAARnU,EAC/B4D,EAAUrM,KAAKU,KAAK,CAAC2J,QAAWA,EAASrB,MAAS4Z,EAAKna,GAAOnI,KAElE,OAAO+L,IAGgB/G,IAAI,SAAAyX,GAa5B,OAZAA,EAAI/c,KAAO+c,EAAI/c,KAAKsF,IAAI,SAAC0X,EAAM1c,GAU9B,OATG0c,EAAKhU,MAAQgU,EAAKhU,MAAM1D,IAAI,SAAApD,GAC3B,GAAgB,aAAb6a,EAAIvY,KAAoB,CACvB,IAAIoY,EAAS,EAAItc,EAEjB,OADc4B,EAAEgG,OAAQ,CAACrC,QAAW,EAAKe,MAAS1E,EAAEoI,SAAUzD,MAAQ3E,EAAE2E,MAAOiD,SAAY5H,EAAE4H,SAAU8S,OAAS1a,EAAE0a,OAAQrV,MAAQ,GAAQ8V,EAAanb,EAAG0a,GAG1J,OAAO1a,IAGR8a,IAEDD,MAGXhR,KAAK,KAAKR,QAAQ,eAAe,GAEhCoZ,EAAgB5B,EAASzX,OAAO,QAAQ1D,KAAK,QAAS,KACzD+c,EAAc/c,KAAK,SA5Hd,IA6HL+c,EAAc7V,MAAM,OAAQ,QAC5B6V,EAAc7V,MAAM,SAAU,QAE9BiU,EAASnb,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,gBAAkB,GAADA,EAAiB,IAAI,MAC1EskB,EAAShd,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,iBAAkB,IAADA,EAAuB,IAAI,MAChF8K,EAAIxD,KAAK,SAAW,IAAAgd,EAAS5kB,OAAOQ,OAA4B,IAEnDuiB,EAASzX,OAAO,QAC5BE,KAAK,SAAApJ,GAAC,OAAGA,EAAEoF,QACXsH,MAAM,cAAe,OACrBA,MAAM,YAAa,IACblH,KAAK,YAAa,oBAEzB,IAAI4V,EAAauF,EAASjX,UAAU,KAAK9L,KAAK,SAAAoC,GAK1C,OAJAA,EAAEpC,KAAOoC,EAAEpC,KAAKsF,IAAI,SAAApD,GAEhB,OADAA,EAAEsC,KAAOpC,EAAEoC,KACJtC,IAEJE,EAAEpC,OACV+L,KAAK,KAAKR,QAAQ,WAAW,GAE5B8E,EAAW7K,MACd8B,EAAE,SAAAlF,GAGC,OAFQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAE3CsB,CADQlF,EAAE0H,YAGpBsF,EAAE,SAAAhN,GAEC,OADQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAACyK,GAAU,GAClDrB,CAAEhN,EAAEyD,WAGX6X,EAAWlY,MACd8B,EAAE,SAAAlF,GAGC,OAFQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAE3CsB,CADQlF,EAAE0H,YAGpBsF,EAAE,SAAAhN,GACC,IAAIgN,EAAIhN,EAAE2D,OAEV,OADAqJ,EAAEpJ,MAAM,CAACyK,GAAU,IACZrB,EAAEhN,EAAEyD,SAAW,IAGJ2X,EAAWlS,OAAO,QACvC1D,KAAK,IAAK,SAAAxF,GACH,MAAmB,aAAXA,EAAEoC,KAAuB6L,EAASjO,EAAE4G,OAAS0U,EAAStb,EAAE4G,SAEvEpB,KAAK,QAAS,SAACxF,EAAG9B,GACX,OAAO8B,EAAEiI,QAAU,gBAC1ByE,MAAM,eAAgB,IACtBA,MAAM,OAAQ,QACdA,MAAM,SAAU,QAEDI,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GACnCkC,IAAUlC,EAAEhD,IAAIiL,QAAQ,YAAY,KACrC2D,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIiL,QAAQ,YAAY,KAGxC,IAIIuS,EAJWN,EAAWhX,OAAO,SAAAqX,GACjC,MAAmB,aAAZA,EAAGrZ,OAGkBsH,UAAU,WAAW9L,KAAK,SAAAoC,GAAC,OAAEA,EAAE4G,QAAO+C,KAAK,KAAKR,QAAQ,UAAU,GAE9FuS,EAAalW,KAAK,YAAa,SAACxF,GAGxB,MAAO,aAFHoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAC/BsB,CAAElF,EAAE0H,UACU,SAGrC,IAAIiU,EAAQD,EAAaxS,OAAO,UAAU1D,KAAK,IAAK,GAAGA,KAAK,KAAM,SAACxF,EAAG9B,GAElE,OADQkF,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAACyK,GAAY,GACpDrB,CAAEhN,EAAEyD,WACZ+B,KAAK,KAAM,GAEdmW,EAAMxS,QAAQ,aAAa,GAE3BwS,EAAMnW,KAAK,OAAQ,SAACxF,EAAG9B,EAAGgD,GACtB,OAAS,IAANhD,EACQ8B,EAAEyE,MACJvG,IAAMgD,EAAE9C,OAAS,EACnB4B,EAAEwE,QAAUpB,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAG4G,MAChC,4BAEPxE,EAAEnB,OAAQ,EACHmB,EAAEyE,OAGVzE,EAAEwE,QAAUpB,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAG4G,OAASxE,EAAEwE,QAAUpB,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAG4G,MACjF,4BAEPxE,EAAEnB,OAAQ,EACHmB,EAAEyE,SAK7B,IAAImX,EAAYF,EAAatX,OAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEc,OAAcuE,UAAU,UAAU9L,KAAK,SAAAoC,GAAC,OAAGA,EAAEgb,QAAOrR,KAAK,UAAUR,QAAQ,SAAS,GAE9HyS,EAAUpW,KAAK,IAAK,GAAGA,KAAK,KAAM,GAAGA,KAAK,KAAM,SAACzF,EAAG7B,GAC/C,IAAI8O,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IAEhC,OADJmJ,EAAEpJ,MAAM,CAAC,EAAIyK,KACFrB,EAAEjN,EAAE0D,WACZ+B,KAAK,OAAQ,4BAErBoW,EAAU9O,GAAG,YAAa,SAAS9M,GAC9B,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,IACpB,IAAIrI,EAAIjB,IAAU,OAClByY,EAAKG,KAAKhc,EAAEwE,MAAQ,KAAOH,EAAErE,EAAEyD,UAC5BiJ,MAAM,OAAStJ,IAAS6Y,MAAQ,GAAM,MACtCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,QAEzCpP,GAAG,WAAY,SAAS9M,GACZoD,IAAU,YAChB0Y,aACFC,SAAS,KACTrP,MAAM,UAAW,KAGzBiP,EAAM7O,GAAG,YAAa,SAAS9M,GAC1B,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,IACpB,IAAIrI,EAAIjB,IAAU,OAClByY,EAAKG,KAAKhc,EAAEwE,MAAQ,KAAOH,EAAErE,EAAEyD,UAC5BiJ,MAAM,OAAStJ,IAAS6Y,MAAQ,GAAM,MACtCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,QAEzCpP,GAAG,WAAY,SAAS9M,GACZoD,IAAU,YAChB0Y,aACFC,SAAS,KACTrP,MAAM,UAAW,KAIzBgP,EAAa5O,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAC/B,IAAI8L,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IACpCmJ,EAAEpJ,MAAM,CAAC,EAAIyK,KACbrF,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASzC,KAAK,SAAU,OAC5DwD,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASkB,QAAQ,YAAY,GACjE/F,IAAUlC,EAAEhD,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,IAC9EnI,IAAUlC,EAAEhD,IAAIwL,UAAU,UAAUgD,MAAM,UAAW,IAAKlH,KAAK,OAAQ,SAACxF,GAAD,OAAMA,EAAEyE,QAC/ErB,IAAUlC,EAAEhD,IAAIwL,UAAU,cAAcgD,MAAM,UAAW,IAAKlH,KAAK,OAAQ,SAACxF,GAAD,OAAMA,EAAEyE,UAEpFqI,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI+O,OAAO,YACvB7J,IAAUlC,EAAEhD,IAAI+O,OAAO,YAAYC,SACnC9J,IAAa,mBAAoBpD,EAAEiI,SAASzC,KAAK,SAAU,QAC3DpC,IAAa,mBAAoBpD,EAAEiI,SAASkB,QAAQ,YAAY,GAChE/F,IAAa,UAAUoC,KAAK,OAAQ,4BACpCpC,IAAUlC,EAAEhD,IAAIwL,UAAU,cAActF,OAAO,SAAAqe,GAAC,OAAc,GAAXA,EAAE5jB,QAAe2G,KAAK,OAAQ,8BAGtF,IAII4W,EAJWhB,EAAWhX,OAAO,SAAAqX,GAC5B,MAAmB,eAAZA,EAAGrZ,OAGasH,UAAU,WAAW9L,KAAK,SAAAoC,GAAC,OAAEA,EAAE4G,QAAO+C,KAAK,KAAKR,QAAQ,UAAU,GAE9FiT,EAAa5W,KAAK,YAAa,SAACxF,GAG1B,MAAO,aAFHoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAC/BsB,CAAElF,EAAE0H,UACU,SAInC0U,EAAatP,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAC/B,IAAI8L,EAAIhN,EAAE2D,OACVqJ,EAAEpJ,MAAM,CAAC,EAAIyK,KACbrF,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASzC,KAAK,SAAU,OAC5DwD,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASkB,QAAQ,YAAY,GACjE/F,IAAUlC,EAAEhD,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,IAC9EnI,IAAUlC,EAAEhD,IAAIwL,UAAU,UAAUgD,MAAM,UAAW,MACtDI,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI+O,OAAO,YACvB7J,IAAUlC,EAAEhD,IAAI+O,OAAO,YAAYC,SACnC9J,IAAa,mBAAoBpD,EAAEiI,SAASzC,KAAK,SAAU,QAC3DpC,IAAa,mBAAoBpD,EAAEiI,SAASkB,QAAQ,YAAY,GAChE/F,IAAa,UAAUsJ,MAAM,UAAW,MAG5C,IAAI2P,EAAWD,EAAalT,OAAO,QACnCmT,EAAS7W,KAAK,QAAS,IAAIA,KAAK,SAAU,GAC1C6W,EAAS7W,KAAK,IAAK,SAACxF,EAAG9B,GACnB,IAAI8I,EAAQtC,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1D,EAAEoF,QAAO,GAEnD,OADQhC,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CA7TtD,GA6T+D,GAChEoJ,CAAEhN,EAAEyD,WAGf,IAAI6Y,EAAYF,EAAahY,OAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEc,OAAc+D,OAAO,QAC/DoT,EAAU9W,KAAK,QAAS,IAAIA,KAAK,SAAU,SAACxF,EAAG9B,GAC3C,IAAI8I,EAAQtC,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1D,EAAEoF,QAAO,GAC/C4H,EAAI5J,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CApUtD,GAoU+D,IACvE,OAAOoJ,EAAEhN,EAAEwD,WAAawJ,EAAEhN,EAAEsD,aAGhCgZ,EAAU9W,KAAK,IAAK,SAACxF,EAAG9B,GACpB,IAAI8I,EAAQtC,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1D,EAAEoF,QAAO,GAEnD,OADQhC,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CA1UtD,GA0U+D,GAChEoJ,CAAEhN,EAAEsD,aAEfgZ,EAAU5P,MAAM,UAAW,SAIpBxF,QAAQC,MAAM,2BAElBsP,EAAaxJ,OAAO,wBAAwB9D,QAAQ,QAAQ,KAGhE,IAAI8N,EAAUnI,EAAK7B,OAAO,mBACtBjE,EAAMiO,EAAQP,QAAU5H,EAAK5F,OAAO,OAAO1D,KAAK,KAAM,kBAAoByR,EAC9EjO,EAAIU,UAAU,KAAKwD,SAEnBlE,EAAIxD,KAAK,SAAW,GAAAuZ,EAAU3gB,QAC9B4K,EAAIE,OAAO,KAAK1D,KAAK,YAAa,sBAAsB0D,OAAO,QAAQE,KAAK2V,EAAU,GAAGrb,OAEzF,IAAI8e,EAAWxZ,EAAIU,UAAU,YAAY9L,KAAKmhB,GAAWpV,KAAK,KAAKR,QAAQ,WAAW,GACtFqZ,EAAShV,KAAK,SAACxN,EAAG9B,EAAGgD,GACjB,IAAI+H,EAAYF,EAA4B/I,EAAEpC,KAAMwF,IAAUlC,EAAEhD,KAChE+K,EAAUgE,OAAO,QAAQzH,KAAK,KAAM,IAAIA,KAAK,OAAO,QACpDyD,EAAUS,UAAU,kBAAkBA,UAAU,UAAUlE,KAAK,OAAQ,4BAEvEyD,EAAUgE,OAAO,eAAe/D,OAAO,QAAQE,KAAK,SAACpJ,EAAG9B,GAAJ,MAAS,KAAM8B,EAAEpC,KAAKQ,SAAQoH,KAAK,YAAa,oBACpGyD,EAAUS,UAAU,QAAQgD,MAAM,YAAa,UAAUA,MAAM,OAAQ,QAEvEzD,EAAUgE,OAAO,QAAQzH,KAAK,SAAU,UAG5C,IAAIma,EAAc6C,EAAStZ,OAAO,QAAQE,KAAK,SAACpJ,EAAG9B,GAAJ,OAAS8B,EAAEwE,QAC1Dmb,EAAYna,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,sBACvCyhB,EAAYjT,MAAM,cAAe,OACjCiT,EAAYna,KAAK,OAAQ,QAEzB,IAAI8c,EAAaE,EAAStZ,OAAO,KAAKC,QAAQ,cAAc,GAC5DmZ,EAAW9c,KAAK,YAAa,SAACxF,EAAE9B,GAAH,MAAQ,sBAErC,IAAIyiB,EAAW2B,EAAW5Y,UAAU,gBAAgB9L,KAAK,SAACoC,EAAG9B,GACzD,IAAIsiB,EAAO5Y,EAAoB5H,EAAEpC,KAAM8G,EAAQ,MA6BhD,OA5BmB8b,EAAK,GAAGtd,IAAI,SAAC2D,EAAK3I,GAChC,IAAI+J,EAAUjI,EAAEpC,KAAK,GAAGwG,OAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEc,OAAe,GAAGC,MACvDyB,EAAIA,EAAIzI,OAAS,GAAGoc,OAAS,EAE7B,IADA,IAAIvQ,EAAY,CAAC7E,MAASyB,EAAIA,EAAIzI,OAAO,GAAGgH,MAAOhD,KAAOyE,EAAIA,EAAIzI,OAAO,GAAGgE,KAAMxE,KAAQ,CAAC,CAACqK,QAAWA,EAASrB,MAASC,KACjHR,EAAQ,EAAGA,EAAQma,EAAKpiB,OAAQiI,IAAS,CAC7C,IAAI4B,EAAUjI,EAAEpC,KAAKyI,GAAOjC,OAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEc,OAAe,GAAGC,MACvDqV,EAAO+F,EAAKna,GAAOnI,GAAGE,OAAS,EACnCoiB,EAAKna,GAAOnI,GAAGuc,GAAMD,OAAkB,EAARnU,EAC/B4D,EAAUrM,KAAKU,KAAK,CAAC2J,QAAWA,EAASrB,MAAS4Z,EAAKna,GAAOnI,KAElE,OAAO+L,IAGgB/G,IAAI,SAAAyX,GAa5B,OAZAA,EAAI/c,KAAO+c,EAAI/c,KAAKsF,IAAI,SAAC0X,EAAM1c,GAU9B,OATG0c,EAAKhU,MAAQgU,EAAKhU,MAAM1D,IAAI,SAAApD,GAC3B,GAAgB,aAAb6a,EAAIvY,KAAoB,CACvB,IAAIoY,EAAS,EAAItc,EAEjB,OADc4B,EAAEgG,OAAQ,CAACrC,QAAW,EAAKe,MAAS1E,EAAEoI,SAAUzD,MAAQ3E,EAAE2E,MAAOiD,SAAY5H,EAAE4H,SAAU8S,OAAS1a,EAAE0a,OAAQrV,MAAQ,GAAQ8V,EAAanb,EAAG0a,GAG1J,OAAO1a,IAGR8a,IAEDD,MAGXhR,KAAK,KAAKR,QAAQ,eAAe,GAEhCoZ,EAAgB5B,EAASzX,OAAO,QAAQ1D,KAAK,QAAS,KAC1D+c,EAAc/c,KAAK,SAnZN,IAoZb+c,EAAc7V,MAAM,OAAQ,QAC5B6V,EAAc7V,MAAM,SAAU,QAE9BiU,EAASnb,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,gBAAkB,GAADA,EAAiB,IAAI,MAC1EskB,EAAShd,KAAK,YAAa,SAACxF,EAAG9B,GAAJ,MAAS,iBAAkB,IAADA,EAAuB,IAAI,MAChF8K,EAAIxD,KAAK,SAAW,IAAAgd,EAAS5kB,OAAOQ,OAA4B,IAEnDuiB,EAASzX,OAAO,QAC5BE,KAAK,SAAApJ,GAAC,OAAGA,EAAEoF,QACXsH,MAAM,cAAe,OACrBA,MAAM,YAAa,IACblH,KAAK,YAAa,oBAEzB,IAAI4V,EAAauF,EAASjX,UAAU,KAAK9L,KAAK,SAAAoC,GAK1C,OAJAA,EAAEpC,KAAOoC,EAAEpC,KAAKsF,IAAI,SAAApD,GAEhB,OADAA,EAAEsC,KAAOpC,EAAEoC,KACJtC,IAEJE,EAAEpC,OACV+L,KAAK,KAAKR,QAAQ,WAAW,GAE5B8E,EAAW7K,MACX8B,EAAE,SAAAlF,GAGC,OAFQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAE3CsB,CADQlF,EAAE0H,YAGpBsF,EAAE,SAAAhN,GAEC,OADQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAACyK,GAAU,GAClDrB,CAAEhN,EAAEyD,WAGX6X,EAAWlY,MACd8B,EAAE,SAAAlF,GAGC,OAFQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAE3CsB,CADQlF,EAAE0H,YAGpBsF,EAAE,SAAAhN,GACC,IAAIgN,EAAIhN,EAAE2D,OAEV,OADAqJ,EAAEpJ,MAAM,CAACyK,GAAU,IACZrB,EAAEhN,EAAEyD,SAAW,IAGJ2X,EAAWlS,OAAO,QACvC1D,KAAK,IAAK,SAAAxF,GACN,MAAmB,aAAXA,EAAEoC,KAAuB6L,EAASjO,EAAE4G,OAAS0U,EAAStb,EAAE4G,SAEpEpB,KAAK,QAAS,SAACxF,EAAG9B,GACd,OAAO8B,EAAEiI,QAAU,gBACvByE,MAAM,eAAgB,IACtBA,MAAM,OAAQ,QACdA,MAAM,SAAU,QAEDI,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GACtCkC,IAAUlC,EAAEhD,IAAIiL,QAAQ,YAAY,KACrC2D,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACpBkC,IAAUlC,EAAEhD,IAAIiL,QAAQ,YAAY,KAGzC,IAIIuS,EAJWN,EAAWhX,OAAO,SAAAqX,GAChC,MAAmB,aAAZA,EAAGrZ,OAGiBsH,UAAU,WAAW9L,KAAK,SAAAoC,GAAC,OAAEA,EAAE4G,QAAO+C,KAAK,KAAKR,QAAQ,UAAU,GAE9FuS,EAAalW,KAAK,YAAa,SAACxF,GAGxB,MAAO,aAFHoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAC/BsB,CAAElF,EAAE0H,UACU,SAGrC,IAAIiU,EAAQD,EAAaxS,OAAO,UAAU1D,KAAK,IAAK,GAAGA,KAAK,KAAM,SAACxF,EAAG9B,GAGjE,OAFQkF,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAACyK,GAAY,GAEpDrB,CAAEhN,EAAEyD,WACZ+B,KAAK,KAAM,GAEdmW,EAAMxS,QAAQ,aAAa,GAE3BwS,EAAMnW,KAAK,OAAQ,SAACxF,EAAG9B,EAAGgD,GACvB,OAAS,IAANhD,EACQ8B,EAAEyE,MACJvG,IAAMgD,EAAE9C,OAAS,EACnB4B,EAAEwE,QAAUpB,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAG4G,MAChC,4BAEPxE,EAAEnB,OAAQ,EACHmB,EAAEyE,OAGVzE,EAAEwE,QAAUpB,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAG4G,OAASxE,EAAEwE,QAAUpB,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAG4G,MACjF,4BAEPxE,EAAEnB,OAAQ,EACHmB,EAAEyE,SAKrB,IAAImX,EAAYF,EAAatX,OAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEc,OAAcuE,UAAU,UAAU9L,KAAK,SAAAoC,GAAC,OAAGA,EAAEgb,QAAOrR,KAAK,UAAUR,QAAQ,SAAS,GAE9HyS,EAAUpW,KAAK,IAAK,GAAGA,KAAK,KAAM,GAAGA,KAAK,KAAM,SAACzF,EAAG7B,GAC/C,IAAI8O,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IAEhC,OADJmJ,EAAEpJ,MAAM,CAAC,EAAIyK,KACFrB,EAAEjN,EAAE0D,WACZ+B,KAAK,OAAQ,4BAErBoW,EAAU9O,GAAG,YAAa,SAAS9M,GAC9B,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,IACpB,IAAIrI,EAAIjB,IAAU,OAClByY,EAAKG,KAAKhc,EAAEwE,MAAQ,KAAOH,EAAErE,EAAEyD,UAC5BiJ,MAAM,OAAStJ,IAAS6Y,MAAQ,GAAM,MACtCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,QAEzCpP,GAAG,WAAY,SAAS9M,GACZoD,IAAU,YAChB0Y,aACFC,SAAS,KACTrP,MAAM,UAAW,KAGzBiP,EAAM7O,GAAG,YAAa,SAAS9M,GAC1B,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,IACpB,IAAIrI,EAAIjB,IAAU,OAClByY,EAAKG,KAAKhc,EAAEwE,MAAQ,KAAOH,EAAErE,EAAEyD,UAC5BiJ,MAAM,OAAStJ,IAAS6Y,MAAQ,GAAM,MACtCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,QAEzCpP,GAAG,WAAY,SAAS9M,GACZoD,IAAU,YAChB0Y,aACFC,SAAS,KACTrP,MAAM,UAAW,KAIzBgP,EAAa5O,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAC/B,IAAI8L,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IACpCmJ,EAAEpJ,MAAM,CAAC,EAAIyK,KACbrF,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASzC,KAAK,SAAU,OAC5DwD,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASkB,QAAQ,YAAY,GACjE/F,IAAUlC,EAAEhD,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,IAC9EnI,IAAUlC,EAAEhD,IAAIwL,UAAU,UAAUgD,MAAM,UAAW,IAAKlH,KAAK,OAAQ,SAACxF,GAAD,OAAMA,EAAEyE,QAC/ErB,IAAUlC,EAAEhD,IAAIwL,UAAU,cAAcgD,MAAM,UAAW,IAAKlH,KAAK,OAAQ,SAACxF,GAAD,OAAMA,EAAEyE,UAEpFqI,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI+O,OAAO,YACvB7J,IAAUlC,EAAEhD,IAAI+O,OAAO,YAAYC,SACnC9J,IAAa,mBAAoBpD,EAAEiI,SAASzC,KAAK,SAAU,QAC3DpC,IAAa,mBAAoBpD,EAAEiI,SAASkB,QAAQ,YAAY,GAChE/F,IAAa,UAAUoC,KAAK,OAAQ,4BACpCpC,IAAUlC,EAAEhD,IAAIwL,UAAU,cAActF,OAAO,SAAAqe,GAAC,OAAc,GAAXA,EAAE5jB,QAAe2G,KAAK,OAAQ,8BAGtF,IAII4W,EAJWhB,EAAWhX,OAAO,SAAAqX,GAC5B,MAAmB,eAAZA,EAAGrZ,OAGasH,UAAU,WAAW9L,KAAK,SAAAoC,GAAC,OAAEA,EAAE4G,QAAO+C,KAAK,KAAKR,QAAQ,UAAU,GAE9FiT,EAAa5W,KAAK,YAAa,SAACxF,GAG1B,MAAO,aAFHoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KAC/BsB,CAAElF,EAAE0H,UACU,SAIlC0U,EAAatP,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAChC,IAAI8L,EAAIhN,EAAE2D,OACVqJ,EAAEpJ,MAAM,CAAC,EAAIyK,KACbrF,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASzC,KAAK,SAAU,OAC5DwD,EAAIU,UAAU,mBAAoB1J,EAAEiI,SAASkB,QAAQ,YAAY,GACjE/F,IAAUlC,EAAEhD,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,IAC9EnI,IAAUlC,EAAEhD,IAAIwL,UAAU,UAAUgD,MAAM,UAAW,MACtDI,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI+O,OAAO,YACvB7J,IAAUlC,EAAEhD,IAAI+O,OAAO,YAAYC,SACnC9J,IAAa,mBAAoBpD,EAAEiI,SAASzC,KAAK,SAAU,QAC3DpC,IAAa,mBAAoBpD,EAAEiI,SAASkB,QAAQ,YAAY,GAChE/F,IAAa,UAAUsJ,MAAM,UAAW,MAG5C,IAAI2P,EAAWD,EAAalT,OAAO,QACnCmT,EAAS7W,KAAK,QAAS,IAAIA,KAAK,SAAU,GAC1C6W,EAAS7W,KAAK,IAAK,SAACxF,EAAG9B,GACnB,IAAI8I,EAAQtC,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1D,EAAEoF,QAAO,GAEnD,OADQhC,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CArlBtD,GAqlB+D,GAChEoJ,CAAEhN,EAAEyD,WAGf,IAAI6Y,EAAYF,EAAahY,OAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEc,OAAc+D,OAAO,QAC/DoT,EAAU9W,KAAK,QAAS,IAAIA,KAAK,SAAU,SAACxF,EAAG9B,GAC3C,IAAI8I,EAAQtC,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1D,EAAEoF,QAAO,GAC/C4H,EAAI5J,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CA5lBtD,GA4lB+D,IACvE,OAAOoJ,EAAEhN,EAAEwD,WAAawJ,EAAEhN,EAAEsD,aAGhCgZ,EAAU9W,KAAK,IAAK,SAACxF,EAAG9B,GACpB,IAAI8I,EAAQtC,EAAON,OAAO,SAAA5E,GAAC,OAAGA,EAAEkE,QAAU1D,EAAEoF,QAAO,GAEnD,OADQhC,MAAiBS,OAAO,CAACmD,EAAMzD,IAAKyD,EAAM7D,MAAMS,MAAM,CAlmBtD,GAkmB+D,GAChEoJ,CAAEhN,EAAEsD,aAEfgZ,EAAU5P,MAAM,UAAW,IAEzB,SAASiM,EAAgBuF,EAAmBpU,EAAY2T,EAAWiF,GAEtE,IAAIC,EAAczE,EAAkB9Z,OAAO,SAAApE,GACvC,MAAgC,aAAzBA,EAAEA,EAAE5B,OAAS,GAAGgE,OAG3BugB,EAAYjZ,UAAU,KAAKwD,SAE3B,IAAImO,EAAiC,SAAdoC,EAAuB,GAAK,GAE/CmF,EAAmBD,EAAYzZ,OAAO,KAAKC,QAAQ,uBAAuB,GAE9EyZ,EAAiB1Z,OAAO,QAAQC,QAAQ,QAAQ,GAAM3D,KAAK,KAAM,GAAGA,KAAK,KAAM,IAAIA,KAAK,KAAM,MAAMA,KAAK,KAAM,IAE/G,IAAIqd,EAAYD,EAAiBlZ,UAAU,KAAK9L,KAAK,SAAAoC,GACjD,IAAI8iB,EAAQ9iB,EAAEkD,IAAI,SAAApD,GAOd,OANsB,GAAVA,EAAEqF,KAAgBrF,EAAEgG,OAAO5C,IAAI,SAAA1D,GAIvC,OAHAA,EAAEmI,KAAO7H,EAAE6H,KACXnI,EAAEkI,SAAW5H,EAAE4H,SACflI,EAAEiF,MAAQ3E,EAAE2E,MACLjF,IACNM,IAOT,OAJWgjB,EAAM,GAAG5f,IAAI,SAAA1D,GAAC,OAAGA,EAAEgF,QACbtB,IAAI,SAAAlC,GACjB,OAAO8hB,EAAM5f,IAAI,SAAApD,GAAC,OAAGA,EAAEsE,OAAO,SAAAC,GAAC,OAAGA,EAAEG,OAASxD,IAAK,SAGvD2I,KAAK,KAAKR,QAAQ,cAAc,GAE/BgE,EAAU/J,MACb8B,EAAE,SAAAlF,GACC,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAElD,OAD+B,SAAfkG,EAAyB9J,EAAE2H,KAAOzC,EAAElF,EAAE0H,WACpC,IACrBsF,EAAE,SAAAhN,GAEC,OADQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAACyX,EAAgB,EAAG,GAC3DrO,CAAEhN,EAAEyD,WAGOof,EAAU3Z,OAAO,QACtC1D,KAAK,IAAK2H,GACV3H,KAAK,QAAS,SAACxF,EAAG9B,GAAJ,OAAS8B,EAAE,GAAGiI,QAAU,gBACtCyE,MAAM,eAAgB,IACtBA,MAAM,SAAU,SAAC1M,GACd,OAAOA,EAAE,GAAGyE,QAGKme,EAAiB1Z,OAAO,QAAQC,QAAQ,kBAAkB,GAChE3D,KAAK,SAAU6V,GAC9B,IAAI0H,EAAqBH,EAAiBlZ,UAAU,4BAA4B9L,KAAK,SAAAoC,GACjF,OAAOA,IAAK2J,KAAK,KAgCrB,GA9BAoZ,EAAmBvd,KAAK,YAAa,SAACxF,GAClC,IAAIkF,EAAI9B,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,MAClD,OAAG5D,EAAE,GAEM,cADwB,SAAf8J,EAAyB9J,EAAE,GAAG2H,KAAOzC,EAAElF,EAAE,GAAG0H,WAC/B,OAGtB,cADwB,SAAfoC,EAAyB9J,EAAE2H,KAAOzC,EAAElF,EAAE0H,WACzB,SAIrCqb,EAAmB7Z,OAAO,QAAQ1D,KAAK,QAAS,IAAIA,KAAK,SAAU6V,GAAiB7V,KAAK,UAAW,GAEpGud,EAAmB7Z,OAAO,QAAQ1D,KAAK,KAAM,IAAIA,KAAK,KAAM,IAAIA,KAAK,KAAM,GAAGA,KAAK,KAAM6V,GAGzF0H,EAAmBjW,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GAClC,IAAI8L,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IACpCmJ,EAAEpJ,MAAM,CAAC,EAAGyX,IACZjY,IAAUlC,EAAEhD,IAAIgL,OAAO,KAAKC,QAAQ,UAAU,GAAMzK,KAAK0E,IAAY4J,GAAGzB,MAAM,MAC/EuB,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI+O,OAAO,YACvB7J,IAAUlC,EAAEhD,IAAI+O,OAAO,YAAYC,WAG3C6V,EAAmBvd,KAAK,QAAS,SAACxF,EAAG9B,EAAGgD,GACpC,IAAI6G,EAAO3E,IAAalC,GAAGtD,OAC3B,OAAOmK,EAAKA,EAAK3J,OAAS,GAAG6J,UAC9BkB,QAAQ,2BAA2B,IAE1B,IAATuZ,EAAe,CAEd,IAAIM,EAAYD,EAAmB3e,OAAO,SAACyC,EAAK3I,GAAN,OAAqBuI,MAAVI,EAAI,KAAiB6C,UAAU,SAAS9L,KAAK,SAAAoC,GAE9F,OAAOA,IACR2J,KAAK,UAAUR,QAAQ,QAAQ,GAElC6Z,EAAUxd,KAAK,KAAM,IAAIA,KAAK,KAAM,SAACxF,GAEjC,OADQoD,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAACyX,EAAkB,EAAG,GAC7DrO,CAAEhN,EAAEyD,WACZ+B,KAAK,IAAK,GAEbwd,EAAUtW,MAAM,OAAQ,SAAC1M,EAAG9B,EAAGgD,GAY3B,MAAO,SAGX8hB,EAAU5e,OAAO,SAAAC,GAAC,OAAGA,EAAEZ,QAAU,KAAK+B,KAAK,IAAK,GAWhDwd,EAAUlW,GAAG,YAAa,SAAS9M,GAC/B,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,IACpB,IAAIrI,EAAIjB,IAAU,OAClByY,EAAKG,KAAKhc,EAAEwE,MAAQ,KAAOH,EAAErE,EAAEyD,UAC5BiJ,MAAM,OAAStJ,IAAS6Y,MAAS,MACjCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,QAEzCpP,GAAG,WAAY,SAAS9M,GACZoD,IAAU,YAChB0Y,aACFC,SAAS,KACTrP,MAAM,UAAW,KAGxB,IAAIuW,EAAcF,EAAmB3e,OAAO,SAACyC,EAAK3I,GAC9C,YAAkBuI,IAAXI,EAAI,KAAoBsC,QAAQ,iBAAiB,GAE5D8Z,EAAY/Z,OAAO,UAAU1D,KAAK,KAAM,IAAIA,KAAK,KAAM,GAAGA,KAAK,IAAK,GAAGkH,MAAM,OAAQ,SAAA1M,GAClF,OAAOA,EAAEyE,QAIZwe,EAAY/Z,OAAO,QAAQE,KAAK,SAAApJ,GAAC,OAAGA,EAAEkI,WAAU1C,KAAK,YAAa,oBAAoBkH,MAAM,YAAa,QAExG,CACDqW,EAAmB3e,OAAO,SAACyC,EAAK3I,GAC5B,OAAiBuI,MAAVI,EAAI,KAAmBqC,OAAO,QAAQ1D,KAAK,SAAU6V,GAAiB7V,KAAK,QAAS,IAAIA,KAAK,OAAQ,QAChH,IAAI0d,EAAYH,EAAmB3e,OAAO,SAACyC,EAAK3I,GAAN,OAAqBuI,MAAVI,EAAI,KAAiB6C,UAAU,aAAa9L,KAAK,SAAAoC,GAClG,OAAOA,IACR2J,KAAK,QAAQR,QAAQ,YAAY,GAEpC+Z,EAAU1d,KAAK,QAAS,IAAIA,KAAK,SAAU,SAACxF,EAAG9B,GAG3C,OADQkF,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAGyX,GAC3CrO,CAAEhN,EAAEyD,WAGfyf,EAAU1d,KAAK,OAAQ,SAACxF,EAAG9B,GAAJ,OAAS8B,EAAEyE,QAClCye,EAAU1d,KAAK,UAAW,OAC1B0d,EAAU1d,KAAK,SAAU,QACzB0d,EAAU1d,KAAK,YAAa,SAACxF,EAAG9B,EAAGgD,GAC/B,IAAI8L,EAAI5J,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAGyX,IAC9C8H,EAAc/f,IAAalC,GAAGtD,OAAOoW,KAAK,SAAC6E,EAAGtK,GAAJ,OAASA,EAAE9K,QAAUoV,EAAEpV,UACjE2f,EAAWD,EAAYjgB,IAAI,SAAA7B,GAAC,OAAGA,EAAEmD,QAAOkB,QAAQ1F,EAAEwE,OAEtD,GAAgB,IAAb4e,EACK,MAAO,iBAIP,IADJ,IAAIC,EAAW,EACH5b,EAAO,EAAGA,EAAO2b,EAAU3b,IAC/B4b,GAAsBF,EAAY1b,GAAMhE,QAEhD,MAAO,eAAgBuJ,EAAEqW,GAAW,MAI5CH,EAAUpW,GAAG,YAAa,SAAS9M,GAC/B,IAAI6b,EAAOzY,IAAU,YACrByY,EAAKC,aACFC,SAAS,KACTrP,MAAM,UAAW,IACpB,IAAIrI,EAAIjB,IAAU,OAClByY,EAAKG,KAAKhc,EAAEwE,MAAQ,KAAOH,EAAErE,EAAEyD,UAC5BiJ,MAAM,OAAStJ,IAAS6Y,MAAS,MACjCvP,MAAM,MAAQtJ,IAAS8Y,MAAQ,GAAM,QAEzCpP,GAAG,WAAY,SAAS9M,GACZoD,IAAU,YAChB0Y,aACFC,SAAS,KACTrP,MAAM,UAAW,KAGxB,IAAIuW,EAAcF,EAAmB3e,OAAO,SAACyC,EAAK3I,GAC9C,YAAkBuI,IAAXI,EAAI,KAAoBsC,QAAQ,iBAAiB,GAE5D8Z,EAAY/Z,OAAO,UAAU1D,KAAK,KAAM,IAAIA,KAAK,KAAM,GAAGA,KAAK,IAAK,GAAGkH,MAAM,OAAQ,SAAA1M,GAClF,OAAOA,EAAEyE,QAGZwe,EAAY/Z,OAAO,QAAQE,KAAK,SAAApJ,GAAC,OAAGA,EAAEkI,WAAU1C,KAAK,YAAa,oBAAoBkH,MAAM,YAAa,IAI7G,OAAOqW,gdC5qCJ,SAASO,EAAmB1c,EAAOX,GAGtC,OPFG,SAASsd,EAAUje,EAAMgD,GAG5B,OAFAhD,EAAK+T,SAAW/Q,EAAUlE,OAAO,SAAAC,GAAC,OAAG1B,OAAO0B,EAAEmf,MAAQ7gB,OAAO2C,EAAKA,QAClEA,EAAKrF,KAAO0C,OAAO2C,EAAKA,MACrBA,EAAK+T,SAASjb,OAAS,GACtBkH,EAAK+T,SAAS1T,QAAQ,SAAA5F,GAAC,OAAGwjB,EAAUxjB,EAAGuI,KAIpChD,GAFIA,EOLMie,CADN3c,EAAM,GAAG,GACaX,EAAM5C,MAI3C,SAASogB,EAAYC,EAAWhf,GAAO,IAAA0c,EAAArf,KAE/B4hB,EAAUvgB,IAAU,YACpBwgB,EAAaxgB,IAAU,YAEvBxF,GAAOoM,EAAa5L,OAAeoO,EAAW,IAI9CH,EAAOwX,EAAWjmB,EAHV+lB,EAAQ1W,OAAO,OAAOA,OAAO,KAAKvD,UAAU,SAC9BtF,OAAO,SAAAlD,GAAC,OAAIA,EAAE8L,EAAI5J,IAASqQ,UAAU,GAAG,IAAQvS,EAAE8L,EAAI5J,IAASqQ,UAAU,GAAG,IAAQvS,EAAEgE,EAAI9B,IAASqQ,UAAU,GAAG,IAAQvS,EAAEgE,EAAI9B,IAASqQ,UAAU,GAAG,KAAKtK,QAAQ,YAAY,GACvKvL,OAAOsF,IAAI,SAAAhC,GAAC,OAAGA,EAAEtD,KAAK0H,QAElDwe,EAAU,SAAU9Z,EAAa5F,OAAO,SAAAC,GAAC,MAAsB,aAAnBA,EAAE0f,eAA6B3lB,OAChEkS,EAAU,cAAe,WAAYwT,EAASD,EAArCG,EAAqDpmB,GAArDomB,EAAgE3X,GAAO,MAE/FwC,EAAenK,EAAQ,cAKvB,IAAIoO,EAAa1P,IAAU,YAAYsG,UAAU,SAC7CqJ,EAAY3P,IAAU,YAAYsG,UAAU,SAE5CsJ,EAAW3G,EAAKvB,QAAQ,SAAA/C,GAAI,OAAGA,EAAK7E,IAAI,SAAAoC,GAAI,OAAIA,EAAKA,SAEzDlC,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1D/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAEvC2J,EAAU1O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QACnD6D,QAAQ,kBAAkB,GAEpB4J,EAAS3O,OAAO,SAAAC,GAAC,OAAsC,IAAnC2O,EAAStN,QAAQrB,EAAEzG,KAAK0H,QAClD6D,QAAQ,kBAAkB,GAIvC,IAAIwL,EAASiP,EAAW1a,OAAO,UAAUC,QAAQ,gBAAgB,GACtDwL,EAAOzL,OAAO,QAAQC,QAAQ,qBAAqB,GACzDC,KAAKiD,EAAKjO,QACHuW,EAAOzL,OAAO,MAAME,KAAK,eAEnBF,OAAO,KAAKC,QAAQ,sBAAsB,GACtD2D,GAAG,QAAT,iBAAAmX,KAAA5hB,mBAAA6hB,KAAkB,SAAAjiB,EAAOjC,EAAG9B,EAAGgD,GAAb,OAAAmB,mBAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACd2M,EAAa0U,GADCvhB,EAAAE,KAAA,EAERoM,EAAenK,EAAQ,cAFf,OAGdtB,IAAa,aAAa+F,QAAQ,YAAY,GAC9C/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1D/F,IAAa,mBAAmB+F,QAAQ,kBAAkB,GAC1DwL,EAAOzH,SACP9J,IAAUge,GAAM1iB,KAAKglB,EAAU/b,KAAM,MACrCvE,IAAU,eAAe8J,SARX,wBAAA3K,EAAAM,SAAAZ,kLAAlB,gBAAAN,EAAAC,EAAAC,GAAA,OAAAoiB,EAAAllB,MAAAgD,KAAAC,YAAA,IAYG,SAASmiB,EAAkBjT,EAAalM,EAAkB2e,GAE7D,IAAIS,EAAaT,EAAQza,OAAO,UAAUE,KAAK,kBAAkBD,QAAQ,6BAA6B,GAEnGua,EAAYtgB,MAAWoQ,OAAO,CAAC,CAAC,EAAG,GAAI,CAAC,IAAK,OAAO1G,GAAG,MAAO,SAAC9M,EAAG9B,EAAGgD,GAAP,OAAauiB,EAAYC,EAAW1e,KACrGof,EAAWtX,GAAG,QAAS,WACF6W,EAAQ1W,OAAO,OAAO/D,OAAO,KAAKC,QAAQ,cAAc,GAAMzK,KAAKglB,KAIxF,IAAIW,EAAiBV,EAAQza,OAAO,UAAUE,KAAK,gBAAgBD,QAAQ,6BAA6B,GAExGkb,EAAevX,GAAG,QAAS,WAExB6W,EAAQ1W,OAAO,OAAOC,SACO,iBAA1BmX,EAAejb,QACbkb,EAAWX,GAAS,EAAM,MAC1BU,EAAejb,KAAK,kBAEpBkb,EAAWX,GAAS,EAAO,MAC3BU,EAAejb,KAAK,mBAI5B,IAAIkJ,EAAc,CAAC,CAAC5O,MAAQ,SAE5BsB,EAAiB9B,IAAI,SAAApD,GAAC,OAAGwS,EAAYhU,KAAKwB,KAExBod,EAASyG,EAASrR,EAAa,aAAa,yBAClDxF,GAAG,QAAS,SAAC9M,EAAG9B,EAAGgD,GACb,aAAXlB,EAAEoC,KACDkiB,EAAWX,GAAS,EAAO3jB,IACtBA,EAAEoC,KACPkiB,EAAWX,GAAS,EAAO,OAIhCA,EAAQ1W,OAAO,0BAA0B9D,QAAQ,QAAQ,KAIhE,SAAS0a,EAAWjmB,EAAM2mB,GACtB,OAAO3mB,EAAKwG,OAAO,SAAA2D,GAGf,OAFgBA,EAAK7E,IAAI,SAAAshB,GAAE,OAAGA,EAAGlf,OACRpC,IAAI,SAAAuhB,GAAE,OAAGF,EAAc7e,QAAQ+e,IAAO,IAC/C/e,SAAQ,IAAS,IAIlC,SAAS4e,EAAWX,EAASvlB,EAAQsmB,GAEzB,MAAZA,GACCxd,QAAQyd,IAAI,UAAUD,GAG1B,IAAIE,EAAe,GAAfA,EAA0B,GAA1BA,EAAsC,GAAtCA,EAAgD,GACpDC,EAAQ,IAAMD,EAAcA,EAC5BvW,EAAS,IAAMuW,EAAaA,EAGxBE,EAAU1hB,MACb2hB,KAAK,CAAC1W,EAAQwW,KAEf,SAASG,EAAiB7e,EAAMvI,GAC5BA,EAAKkQ,SAAWlQ,EAAK0I,WAAaH,EAC/BvI,EAAKyb,UACJzb,EAAKyb,SAAS1T,QAAQ,SAAA8T,GAClBuL,EAAiBpnB,EAAKkQ,SAAU2L,KAI5CuL,CAAiB,EAAGC,GAAW,IAG/B,IAAIC,EAAY9hB,IAAa6hB,GAAW,IAGxCC,EAAYJ,EAAQI,GAEpB,IAAI7d,EAASjE,MAAiBS,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAGihB,IAAQ/gB,OAAM,GACrE6f,EAAQ1W,OAAO,OAAOC,SACtB,IAGAqS,EAHcoE,EAAQza,OAAO,OAC5B1D,KAAK,QAASqf,EAAQD,EAAcA,GACpCpf,KAAK,SAAU6I,EAASuW,EAAaA,GAC1B1b,OAAO,KAClB1D,KAAK,YACJ,aAAeof,EAAc,IAAMA,EAAa,KAsB9Ctf,GAnBOia,EAAE7V,UAAU,SACtB9L,KAAMsnB,EAAUC,cAAc1jB,MAAM,IACpCkI,KAAK,QACLnE,KAAK,QAAS,QACdA,KAAK,IAAK,SAASxF,GAChB,OAAG5B,EACQ,IAAMiJ,EAAOrH,EAAEpC,KAAKkQ,UAAY,IAAM9N,EAAEkF,EAC7C,KAAOmC,EAAOrH,EAAEpC,KAAKkQ,UAAYzG,EAAOrH,EAAEolB,OAAOxnB,KAAKkQ,WAAa,EAAI,IAAM9N,EAAEkF,EAC/E,KAAOmC,EAAOrH,EAAEpC,KAAKkQ,UAAYzG,EAAOrH,EAAEolB,OAAOxnB,KAAKkQ,WAAa,EAAI,IAAM9N,EAAEolB,OAAOlgB,EACtF,IAAMmC,EAAOrH,EAAEolB,OAAOxnB,KAAKkQ,UAAY,IAAM9N,EAAEolB,OAAOlgB,EAEjD,IAAMlF,EAAEgN,EAAI,IAAMhN,EAAEkF,EACzB,KAAOlF,EAAEgN,EAAIhN,EAAEolB,OAAOpY,GAAK,EAAI,IAAMhN,EAAEkF,EACvC,KAAOlF,EAAEgN,EAAIhN,EAAEolB,OAAOpY,GAAK,EAAI,IAAMhN,EAAEolB,OAAOlgB,EAC9C,IAAMlF,EAAEolB,OAAOpY,EAAI,IAAMhN,EAAEolB,OAAOlgB,IAKjCqa,EAAE7V,UAAU,SACtB9L,KAAKsnB,EAAUC,eACfxb,KAAK,KACLnE,KAAK,QAAS,SAASxF,GACxB,MAAO,QACNA,EAAEqZ,SAAW,kBAAoB,iBACjC7T,KAAK,YAAa,SAASxF,GAExB,OAAG5B,EACQ,aAAeiJ,EAAOrH,EAAEpC,KAAKkQ,UAAY,IAAM9N,EAAEkF,EAAI,IAErD,aAAelF,EAAEgN,EAAI,IAAMhN,EAAEkF,EAAI,OAUhD,GAHAI,EAAK4D,OAAO,UACX1D,KAAK,IAAK,GAEI,MAAZkf,EAAiB,CAChB,IAAI5f,EAASQ,EAAKlB,OAAO,SAAAlD,GAAC,OAAmB,IAAhBA,EAAEtD,KAAKuH,OAChCkgB,EAAY/f,EAAKlB,OAAO,SAAAlD,GAAC,OAAkB,GAAfA,EAAEtD,KAAKuH,OAEvCuf,EAASpgB,YAAYqB,QAAQ,SAAAkB,GACzB,IAAIye,EAAOxgB,EAAOV,OAAO,SAAAC,GACrB,OAAOA,EAAEzG,KAAKmI,WAAW2e,EAAShhB,OAAOwE,WAAarB,EAAIrC,QAC3DyI,OAAO,UACVqY,EAAK9f,KAAK,OAAQqB,EAAIpC,OACtB6gB,EAAK9f,KAAK,IAAK,GACf6f,EAAU3b,UAAU,UAAUlE,KAAK,OAAQ,eAG/CF,EAAKoE,UAAU,UAAUlE,KAAK,OAAQ,QAqB1C,OAlBAF,EAAKwH,GAAG,YAAa,SAAC9M,EAAG9B,EAAGgD,GACxB,IAAI0F,EAAQxD,IAAU,mBAAmBsG,UAAU,UACtCtG,IAAU,sBAAsBsG,UAAU,kBAChDtF,OAAO,SAAAC,GAAC,OAAGA,EAAEiB,OAAStF,EAAEpC,KAAK0H,OAAM6D,QAAQ,YAAY,GAE1CvC,EAAMxC,OAAO,SAAA2D,GAE7B,OADYA,EAAK7E,IAAI,SAAApD,GAAC,OAAGA,EAAEwF,OACdI,QAAQ1F,EAAEpC,KAAK0H,OAAS,IACtC6D,QAAQ,SAAS,GACNO,UAAU,KAAKtF,OAAO,SAAAmb,GAAC,OAAGA,EAAEja,OAAStF,EAAEpC,KAAK0H,OAAM6D,QAAQ,YAAY,GACpF/F,IAAUlC,EAAEhD,IAAIiL,QAAQ,mBAAmB,KAE5C2D,GAAG,WAAY,SAAC9M,EAAG9B,EAAGgD,GACrBkC,IAAa,gBAAgB+F,QAAQ,SAAS,GAC9C/F,IAAa,cAAc+F,QAAQ,YAAY,GAC/C/F,IAAUlC,EAAEhD,IAAIiL,QAAQ,mBAAmB,KAGxC7D,EC9NJ,SAASigB,EAAeC,EAAStU,EAAapC,EAAM9J,EAAkB8E,EAAY2b,GAErF,IAAIC,EAAaF,EAAQtc,OAAO,UAAU1D,KAAK,KAAM,eAAeA,KAAK,OAAS,UAAUA,KAAK,QAAS,6BAC1GkgB,EAAW5Y,GAAG,QAAS,kBA2F3B,SAAwB4Y,EAAY1gB,EAAkB8E,GAEzB,eAAtB4b,EAAWtc,OACVsc,EAAWtc,KAAK,gBAEhBsc,EAAWtc,KAAK,cAEpByF,EAAe7J,EAAkB8E,GAlGL6b,CAAeD,EAAY1gB,EAAkB8E,KAEzD,UAAb2b,EACCC,EAAWtc,KAAK,gBACE,YAAbqc,EACLC,EAAWtc,KAAK,cAEhBlC,QAAQC,MAAM,gCAGlB,IAAI6J,EAAewU,EAAQtc,OAAO,UAAU1D,KAAK,KAAM,eACvDwL,EAAaxL,KAAK,QAAS,6BAA6B4D,KAAK,gBAC7D4H,EAAalE,GAAG,QAAS,kBAAKiE,EAAcC,EAAclC,EAAMhF,EAAY9E,KAG5E,IAAI4gB,EAAgBJ,EAAQtc,OAAO,UAAU1D,KAAK,KAAM,WACxDogB,EAAcpgB,KAAK,QAAS,6BAA6B4D,KAAK,uBAC9Dwc,EAAcpgB,KAAK,SAAS,GAC5BogB,EAAc9Y,GAAG,QAAS,kBAgD9B,SAAuB6H,EAAQ7F,EAAM9J,GAEjC,IAAIpH,EAAOmR,IAEU,wBAAlB4F,EAAOvL,QACNuL,EAAOvL,KAAK,qBACZ0F,EAAKpF,UAAU,KAAKwD,SACpByH,EAAOnP,KAAK,SAAS,GACrB2J,EAAuBvR,EAAMkR,EAAM9J,EAAkB,gBAErD2P,EAAOvL,KAAK,uBACZ0F,EAAKpF,UAAU,KAAKwD,SACpByH,EAAOnP,KAAK,SAAS,GAErB2J,EAAuBvR,EAAMkR,EAAM9J,EAAkB,eA9D1B6gB,CAAcD,EAAe9W,EAAM9J,KAElE,IAAI8gB,EAAqBN,EAAQtc,OAAO,UAAU1D,KAAK,KAAM,iBAC7DsgB,EAAmBtgB,KAAK,QAAS,6BAA6B4D,KAAK,2BACnE0c,EAAmBtgB,KAAK,SAAS,GACjCsgB,EAAmBhZ,GAAG,QAAS,WAC3B,IAAIiZ,EAA0B3iB,IAAa,2BACV,4BAA9B0iB,EAAmB1c,QAClB0c,EAAmB1c,KAAK,2BACxBuP,EAAgBoN,EAAyBjc,EAAY2T,GAAW,KAEhEqI,EAAmB1c,KAAK,2BACxBuP,EAAgBoN,EAAyBjc,EAAY2T,GAAW,MAIxE,IAAInL,EAAc,CAAC,CAAC5O,MAAQ,SAE5BsB,EAAiB9B,IAAI,SAAApD,GACH,aAAXA,EAAEsC,MACDkQ,EAAYhU,KAAKwB,KAIPod,EAASsI,EAASlT,EAAa,WAAW,uBAEhDxF,GAAG,QAAS,SAAC9M,EAAG9B,EAAGgD,GAC3B,GAAc,aAAXlB,EAAEoC,KAAoB,CACrB,IAAIxE,EAAOmR,IACPgQ,EAAY/e,EAAE0E,OAAOxB,IAAI,SAAApD,GACzB,MAAO,CAAC4D,MAAS5D,EAAE4D,MAAOc,MAAS1E,EAAE6E,UAAW/G,KAAQ,MAE5DmhB,EAAU7b,IAAI,SAAAsB,GACXA,EAAM5G,KAAOA,EAAKwG,OAAO,SAAAwC,GAEhB,OADOA,EAAMxC,OAAO,SAAAogB,GAAE,OAAe,IAAZA,EAAGrf,OAChB,GAAGY,WAAWvB,EAAMd,OAAOwE,WAAa1D,EAAMA,UAGvEpB,IAAU,SAASsG,UAAU,KAAKwD,SAClC4R,EAAWC,EAAW/Z,QAErBkC,QAAQC,MAAM,2BAElBqe,EAAQvY,OAAO,wBAAwB9D,QAAQ,QAAQ,gVC/DxD,IAAMqD,EAAa,GACbwZ,EAAgB,GAChBvI,GAAY,EACZwH,GAAa,GAEbjiB,GAAc,CACvB,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,YAGDV,GAAOc,IAAU,YACjB0L,GAAOxM,GAAK2K,OAAO,SAEnB0W,IADgBrhB,GAAK2K,OAAO,aAClB3K,GAAK2K,OAAO,aACtB2W,GAAathB,GAAK2K,OAAO,YAE7BvL,EAAS0B,IAAS,kCAAmC,QAAQ6iB,KAA7D,iBAAAhC,KAAA5hB,mBAAA6hB,KAAkE,SAAAjiB,EAAMgE,GAAN,IAAAC,EAAAggB,EAAAphB,EAAAC,EAAAohB,EAAAthB,EAAA9B,EAAAiC,EAAAohB,EAAAC,EAAAzf,EAAAsK,EAAA,OAAA7O,mBAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAG9D8H,MAAM/L,UAAU8nB,OAAS,WACrB,OAAOvkB,KAAKqC,OAAO,SAAU1D,EAAO2F,EAAOkgB,GACvC,OAAOA,EAAK7gB,QAAQhF,KAAW2F,KALuB9D,EAAAE,KAAA,EAS1Cf,EAAS0B,IAAS,wCAAyC,QATjB,cAS1D8C,EAT0D3D,EAAAG,KAY1DwjB,EAAajgB,EAAM5C,KAAKH,IAAI,SAAAlD,GAAC,OAAGA,EAAEwjB,KAClC1e,EAASmB,EAAM5C,KAAKe,OAAO,SAAAC,GAAC,OAAgC,GAA7B6hB,EAAWxgB,QAAQrB,EAAEkB,MAbMhD,EAAAE,KAAA,EAczCf,EAAS0B,IAAS,oCAAqC,IAdd,cAc1D2B,EAd0DxC,EAAAG,KAAAH,EAAAE,KAAA,GAexCf,EAAS0B,IAAQ,kCAAmC,IAfZ,eAe1D+iB,EAf0D5jB,EAAAG,KAAAH,EAAAE,KAAA,GAgB3Cf,EAAS0B,IAAS,mCAAoC,IAhBX,eAgB1DyB,EAhB0DtC,EAAAG,KAoBnDnE,OAAOioB,QAAQL,GAAW/hB,OAAO,SAAAqiB,GAAE,MAAY,WAATA,EAAG,IAA4B,QAATA,EAAG,KApBZlkB,EAAAE,KAAA,GA4BpCf,EAAS0B,IAAS,4CAA6C,cA5B3B,eAAAb,EAAAmkB,GAAAnkB,EAAAG,KAAAH,EAAAE,KAAA,GA6BzCf,EAAS0B,IAAS,uCAAwC,YA7BjB,eAAAb,EAAAokB,GAAApkB,EAAAG,KAAAH,EAAAE,KAAA,GA8B5Cf,EAAS0B,IAAS,oCAAqC,cA9BX,eAAAb,EAAAqkB,GAAArkB,EAAAG,KAAAH,EAAAE,KAAA,GA+BxCf,EAAS0B,IAAS,yCAA0C,YA/BpB,eAAAb,EAAAskB,GAAAtkB,EAAAG,KAAAH,EAAAE,KAAA,GAgC1Bf,EAAS0B,IAAS,0CAA2C,cAhCnC,QAAAb,EAAAukB,GAAAvkB,EAAAG,KA2B1DK,EA3B0D,CA4B1DgkB,YA5B0DxkB,EAAAmkB,GA6B1DM,OA7B0DzkB,EAAAokB,GA8B1DM,IA9B0D1kB,EAAAqkB,GA+B1DM,SA/B0D3kB,EAAAskB,GAgC1DM,uBAhC0D5kB,EAAAukB,IAmC9D5f,QAAQyd,IAAI,aAAc5hB,EAAa,wBAGnCiC,EAAmBlC,EAAgBC,EAAeC,IAGlDojB,EAAgBxhB,EAAYC,EAAQC,EAAQC,EAAUC,GAGtDqhB,EAAergB,EAAWC,EAAOC,EAASnD,EAAeiC,GAGzD4B,EAAQyB,EAASge,EAAcD,EAAe,KAAM,MAEpDlV,EAAcvK,EAAUC,EAAO7D,EAAeiC,GAClDwH,EAAWlO,KAAK4S,GAEhBqU,EAAe3B,GAAY1S,EAAapC,GAAM9J,EAAkB,aAAc,SAE9D1C,GAAK2K,OAAO,eAAe9D,QAAQ,UAAU,GAG7D8b,GAAW3mB,KAAKglB,EAAmB1c,EAAOX,IAC1Cke,EAAkBjT,EAAalM,EAAkB2e,IACtCW,EAAWX,IAAS,EAAO,MPrEVjf,EOwEZM,EPxEoB8E,EOwEF,aPtE9BgF,SACAlR,SADAkR,EAAO1L,IAAU,SACjBxF,EAAOmR,IAEXD,EAAKpF,UAAU,KAAKwD,SAEjBtP,EAAKQ,OAAS,IACbwL,EAAmBhM,EAAMkR,EAAMpK,GAC/BtB,IAAU,gBAAgBgG,KAAK,cAC/B4F,SAASC,eAAe,WAAWC,UAAW,IAE9CC,EAAuBvR,EAAMkR,EAAMpK,EAAQoF,GAC3C1G,IAAU,gBAAgBgG,KAAK,gBAC/B4F,SAASC,eAAe,WAAWC,UAAW,GOJY,yBAAA3M,EAAAM,OPV3D,IAAyB6B,EAAQoF,EAEhCgF,EACAlR,GOO0DqE,kLAAlE,gBAAAN,GAAA,OAAAsiB,EAAAllB,MAAAgD,KAAAC,YAAA,IAiEcM,GAAK4G,OAAO,OACzB1D,KAAK,KAAM,WACXkH,MAAM,UAAW","file":"js/app.93d997ac.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([134,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as d3 from 'd3';\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\n\n","import * as d3 from \"d3\";\n\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n            \n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n        leaf.label = mappedLeafLabels[i];\n        \n        //let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n      \n        let leafCharIndex = leafChar.rows[0][\"\"] ? leafChar.rows.map(m=> m[\"\"]) : leafChar.rows.map(m=> m[\"species\"]);\n  \n        leaf.node = leaf.V2;\n        let keys = calculatedScales.map(m=> m.field);\n        let attr = {};\n         \n        let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n        keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                    // return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                     return {'state': state, realVal: value};\n                 });\n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 //attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n                 attr[k] = {'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n \n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                   // res.scaleVal = scale(res.estimate);\n                   // res.scaledLow = scale(res.lowerCI95);\n                    //res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                       // return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                        return {'state': s.scaleName, realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\n\nexport function normPaths(paths, calculatedAtt, calculatedScales){\n    paths.forEach((p, i)=> {\n        p[0].attributes = {};\n        Object.keys(calculatedAtt).map(att=> { \n            if(calculatedAtt[att].type == 'continuous'){\n                let root = calculatedAtt[att].rows.filter(f=> (f.nodeLabels == p[0].node) || (f.nodeLabels == ('node ' + p[0].node)))[0];\n                p[0].attributes[att] = {};\n                \n                let scale = calculatedScales.filter(f=> f.field == att)[0].yScale;\n            \n                p[0].attributes[att].realVal = root.estimate;\n                p[0].attributes[att].upperCI95 = root.upperCI95;\n                p[0].attributes[att].lowerCI95 = root.lowerCI95;\n                p[0].attributes[att].scale = scale;\n                p[0].attributes[att].type = 'continuous';\n            }else if(calculatedAtt[att].type == 'discrete'){\n                let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n                let scales = calculatedScales.filter(f=> f.field == att)[0].scales;\n                let rootAttr = scales.map(s=> {\n                    //return {'state': s.scaleName,  scaleVal: s.yScale(root[s.scaleName]), realVal: root[s.scaleName]};\n                    return {'state': s.scaleName, realVal: root[s.scaleName]};\n                });\n                p[0].attributes[att] = {'states':rootAttr, 'type': 'discrete'};\n               \n            }else{\n                console.error('type not found');\n            }\n        });\n    });\n    \n    let maxBranch = d3.max(paths.map(r=> r.length));\n\n    //SCALES for X, Y /////\n    let xScale = d3.scaleLinear().range([0, 1000]).clamp(true);\n \n    let normedPaths = paths.map((p, i)=> {\n        p.xScale = xScale.domain([0, maxBranch - 1]);\n     \n        let leafIndex = p.length - 1;\n        let lengths = p.map(l=> l.edgeLength);\n        let prevStep = 0;\n        return p.map((m, j)=> {\n            let node = Object.assign({}, m);\n            //INTEGRATE THE DISTNACES HERE WHEN THEY WORK\n            let step = node.edgeLength + prevStep;\n            node.edgeMove = (j < leafIndex) ? step : 1;\n            prevStep = prevStep + node.edgeLength;\n         \n            node.move = (j < leafIndex) ? p.xScale(j) : p.xScale(maxBranch - 1);\n        \n            return node;\n        });\n    });\n\n    return normedPaths;\n}\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(pathData, scales, filterArray){\n\n    let keys = (filterArray == null)? Object.keys(pathData[0][0].attributes): filterArray;\n   \n    let newData = pathData.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                let speciesLabel = path[path.length - 1].label;\n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].species = speciesLabel;\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.move;\n                    m.attributes[key].node = m.node;\n                    m.attributes[key].edgeMove = m.edgeMove;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = scales.filter(s=> s.field === key)[0].yScale;\n                    m.attributes[key].satScale = scales.filter(s=> s.field === key)[0].satScale;\n                    m.attributes[key].colorScale = scales.filter(s=> s.field === key)[0].colorScale;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf){\n                        let state = m.attributes[key];\n                        state.species = speciesLabel;\n                        state.winState = m.attributes[key].states.filter(f=> f.realVal === 1)[0].state;\n                        state.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === state.winState)[0].color;\n                        state.move = m.move;\n                        state.node = m.node;\n                        state.edgeMove = m.edgeMove;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : m.attributes[key];//.filter(f => f.state != undefined);\n                        return states.map((st, j)=> {\n                            st.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === st.state)[0].color;\n                            st.move = m.move;\n                            st.node = m.node;\n                            st.edgeMove = m.edgeMove;\n                            st.attrLabel = key;\n                            st.species = speciesLabel;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n\nexport function getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function calculateMovingAverage(data, i) {\n\n    if (movingAverage === 0) {\n        return data[i][yValue];\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        sum += x;\n    }\n\n    return sum / count;\n};\n\nexport function calculateMovingStandardDeviation(data, i, avg) {\n\n    if (movingAverage === 0) {\n        return 0;\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        var dx = x - avg;\n        sum += (dx * dx);\n    }\n\n    var variance = sum / count;\n    return Math.sqrt(variance);\n};\n\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n        if(notEmpty(node.children)){\n            pathArray.push(node);\n            pullPath([...pathArray], node.children, arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node_data['node name']);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, node]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import '../styles/index.scss';\nimport {formatAttributeData} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function drawBranchPointDistribution(data, svg){\n\n    let branchBar = svg.append('g').classed('branch-bar', true).attr('transform', 'translate(10, 10)');\n    branchBar.append('rect').classed('point-dis-rect', true).attr('height', 25).attr('x', -10).attr('y', -10).attr('fill', '#fff');\n\n    branchBar.append('line').attr('y1', 2).attr('y2', 2).attr('x1', '100').attr('x2', 890).attr('stroke', 'gray').attr('stroke-width', .25)\n    branchBar.append('text').text('Root').attr('transform', 'translate(70, 7)');\n    let leafLabel = branchBar.append('g').classed('leaf-label', true).attr('transform', 'translate(950, 7)');\n    leafLabel.append('text').text('Leaves');\n\n    let nodeLengthArray = [];\n    let nodeDuplicateCheck = []\n\n    data.map(path=> {\n        path.filter(n=> n.leaf != true).map(node=> {\n            if(nodeDuplicateCheck.indexOf(node.node) == -1){\n                nodeDuplicateCheck.push(node.node);\n                nodeLengthArray.push({'node': node.node, 'eMove': node.edgeMove });\n            }\n        })\n    });\n\n    let bPointScale = d3.scaleLinear().domain([0, 1]).range([0, 795]);\n    let pointGroups = branchBar.selectAll('g.branch-points').data(nodeLengthArray).join('g').attr('class', (d, i)=> d.node).classed('branch-points', true);\n    pointGroups.attr('transform', (d, i) => 'translate('+(105 + bPointScale(d.eMove))+', 0)');\n    pointGroups.append('circle').attr('r', 5).attr('fill', \"rgba(123, 141, 153, 0.5)\");\n\n    return branchBar;\n}\n\nexport function renderDistibutions(pathData, mainDiv, scales, moveMetric){\n    \n   // mainDiv.selectAll('*').remove();\n\n    let observedWidth = 200;\n    let predictedWidth = 800;\n    let height = 90;\n    let margin = 20;\n\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n    let keys = Object.keys(pathData[0][0].attributes).filter(f=> attrHide.indexOf(f) === -1);\n    let newNormed = [...pathData];\n    let keysToHide = attrHide.length > 0 ? scales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    formatAttributeData(newNormed, scales, keysToHide);\n\n    let maxBranch = d3.max(newNormed.map(p=> p.length)) - 1;\n    let medBranchLength = d3.median(newNormed.map(p=> p.length));\n\n    let normBins = new Array(medBranchLength).fill().map((m, i)=> {\n        let step = 1 / medBranchLength;\n        let base = (i * step);\n        let top = ((i + 1)* step);\n        return {'base': base, 'top': top, 'binI': i }\n    });\n   \n    let internalNodes = newNormed.map(path => path.filter(node=> node.leaf != true));\n    let leafNodes = newNormed.flatMap(path => path.filter(node=> node.leaf === true));\n\n    normBins.map((n, i)=> {\n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n            if(i === 0){\n                return node.edgeLength === 0;\n            }else{\n                return node.edgeMove > n.base && node.edgeMove <= n.top;\n            }\n        } ));\n        n.data = edges;\n        return n;\n    });\n\n    let sortedBins = keys.map(key=> {\n        let scale = scales.filter(f=> f.field === key)[0];\n        let mapNorm = normBins.map(bin => {\n\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    return d.attributes[key];\n                })\n            }else{\n                bin.fData = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        });\n\n        let leafAttr = leafNodes.map(m=> m.attributes[key]);\n        let leafData = {'data': leafAttr}\n   \n        if(scale.type === 'continuous'){\n         \n           // let max = d3.max(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n           // let min = d3.min(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n           \n            let x = d3.scaleLinear().domain([scale.min, scale.max]).range([0, height]);\n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n  \n            mapNorm.forEach(n=> {\n                n.type = scale.type;\n                n.bins = histogram(n.data);\n               \n                n.domain = [scale.max, scale.min];\n                return n;\n            });\n\n            //Histogram for observed////\n            let maxO = d3.max(leafAttr.flatMap(v=> v.realVal));\n            let minO = d3.min(leafAttr.flatMap(v=> v.realVal));\n            let xO = d3.scaleLinear().domain([minO, maxO]).range([0, height])\n\n            let histogramO = d3.histogram()\n            .value(function(d) { return d.realVal; })  \n            .domain(xO.domain())  \n            .thresholds(xO.ticks(20)); \n\n            leafData.bins = histogramO(leafAttr);\n\n            let newK = {'key': key, 'branches': [...mapNorm], 'type': scale.type, 'leafData': leafData}\n            return newK;\n\n        }else{\n\n            let states = leafAttr[0].states;\n            mapNorm.bins = null\n            leafData.bins = states.map(s=> leafAttr.filter(f=> f.winState === s.state));\n            let x = d3.scaleLinear().domain([0, 1]).range([0, height]);\n            \n            mapNorm.map(n=> {\n                n.type = scale.type;\n                let colors = scale.stateColors;\n                n.bins = states.map(state=> {\n                    let color = colors.filter(f=> f.state === state.state);\n                  \n                    let chosen = n.data.flatMap(m=> m.states.filter(f=> f.state === state.state)).map(v=> v.realVal);\n                    let average = d3.mean(chosen);\n                    let stDev = d3.deviation(chosen);\n                    return {'state': state.state, 'average': average, 'stDev': stDev, 'stUp': average + stDev, 'stDown': average - stDev, 'color': color[0].color, 'range': n.range }\n                });\n                \n                return n;\n            });\n\n            let test = states.map(stat=> {\n                let key = stat.state;\n                return mapNorm.flatMap(m=> {\n                    return m.bins.filter(f=> f.state === key);\n                });\n            });\n\n            let newK = {'key': key, 'branches': [...mapNorm], 'type': scale.type, 'leafData': leafData, 'states': test}\n            return newK;\n        }\n    });\n\n    ///////RENDERING//////////\n    \n    let branchScale = d3.scaleLinear().domain([0, medBranchLength]).range([0, 780]);\n\n    let dataCount = mainDiv.append('div').classed('species-count', true);\n    dataCount.append('text').text(\"Shown: \"+ pathData.length + \" /\"+ dataMaster[0].length);\n\n    let svg = mainDiv.append('svg');\n    svg.attr('id', 'main-summary-view');\n    svg.attr('height', (keys.length * (height + 25)));\n\n    let branchBar = drawBranchPointDistribution(newNormed, svg);\n    let pointGroups = branchBar.selectAll('g.branch-points');\n  \n    let wrap = svg.append('g').classed('summary-wrapper', true);\n    wrap.attr('transform', 'translate(10, 50)');\n\n    let binnedWrap = wrap.selectAll('.attr-wrap').data(sortedBins).join('g').attr('class', d=> d.key + ' attr-wrap');\n    binnedWrap.attr('transform', (d, i)=>  'translate(0,'+(i * (height + 5))+')');\n    \n    let label = binnedWrap.append('text').text(d=> d.key).attr('y', 40).attr('x', 80).style('text-anchor', 'end');\n\n    let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n\n    let pathGroup = predictedWrap.append('g').classed('path-wrapper', true);\n\n    let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> d.branches).join('g').classed('branch-bin', true);\n    branchGroup.attr('transform', (d, i)=> 'translate('+(100 + branchScale(i))+', 0)');\n\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    continDist.on('mouseover', (d, i, node)=> {\n        let list = d.data.map(m=> m.nodeLabels);\n        let selected = pointGroups.filter(p=> list.indexOf(p.node) > -1).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > 0).classed('selected-branch', true);\n        let y = d3.scaleLinear().domain(d.domain).range([0, height])\n        let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    var lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, n.length - 1]).range([0, height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1(d=> {\n        let dat = Object.keys(d).length - 1\n        let x = d3.scaleLinear().domain([0, 50]).range([0, 80]).clamp(true);\n        return x(dat); \n    });\n\n    continDist.each((d, i, nodes)=> {\n        let distrib = d3.select(nodes[i]).selectAll('g').data([d.bins]).join('g').classed('distribution', true);\n        distrib.attr('transform', 'translate(11, '+height+') rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', \"rgba(133, 193, 233, .9)\");\n    });\n\n    let contRect = continDist.append('rect').attr('height', height).attr('width', 10).style('fill', 'none').style('stroke', 'gray');\n\n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        })\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.yScale != undefined){\n            let newy = d.yScale;\n            newy.range([80, 0]);\n            return newy(d.lowerCI95) - newy(d.upperCI95)\n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n        let newy = d.yScale;\n        newy.range([80, 0]);\n        return 'translate(0,'+newy(d.upperCI95)+')'\n    });\n\n    rangeRect.attr('fill', \"rgba(133, 193, 233, .05)\");\n\n    let avRect = continDist.append('rect').attr('width', 10).attr('height', (d, i)=> {\n        if(d.data[0] != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n\n    avRect.attr('transform', (d, i) => {\n        if(d.data[0] != undefined){\n            let newy = d.data[0].yScale;\n            newy.range([height, 0]);\n            let mean = d3.mean(d.data.map(m=> m.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', '#004573');\n\n    let discreteDist = branchGroup.filter(f=> f.type === 'discrete');\n    let discreteLine = discreteDist.append('line').attr('x0', 2).attr('x1', 2).attr('y0', 0).attr('y1', height).attr('stroke', 'gray').attr('stroke-width', 0.5);\n    let hoverRect = discreteDist.append('rect').attr('height', height).attr('width', 10).attr('opacity', 0);\n    discreteDist.on('mouseover', (d, i, n)=> {\n        let y = d3.scaleLinear().domain([1, 0]).range([0, height]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        let selected = pointGroups.filter(f=> f.eMove >= d.range[0] && f.eMove < d.range[1]).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n      \n        treeNode.filter(node=> node.data.combEdge >= d.range[0] && node.data.combEdge < d.range[1]).classed('selected-branch', true);\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('.y-axis').remove();\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n    })\n\n    let discreteBinWrap = predictedWrap.filter(f=> f.type === 'discrete');\n   \n    let stateGroups = discreteBinWrap.selectAll('.path-wrapper').selectAll('g.state').data(d=> d.states).join('g').classed('state', true);\n\n    stateGroups.append('path').attr('d', (p, i)=> {\n        var lineGenD = d3.area()\n        .curve(d3.curveCardinal)\n        .x((d, i)=> {\n            let y = d3.scaleLinear().domain([0, 9]).range([0, predictedWidth + 100]);\n            return y(i); \n        })\n        .y0(d=> {\n            \n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n        \n            return x(d.stDown);\n        })\n        .y1(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.stUp); \n        });\n        return lineGenD(p);\n\n    }).attr('transform', 'translate(100, 10)').attr('fill', (d, i)=> {\n        return d[0] ? d[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    stateGroups.append('path').attr('d', (p, i)=> {\n        var lineGen = d3.line()\n        .curve(d3.curveCardinal)\n        .x((d, i)=> {\n            let y = d3.scaleLinear().domain([0, 9]).range([0, predictedWidth + 100]);\n            return y(i); \n        })\n        .y(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.average); \n        });\n        return lineGen(p);\n\n    }).attr('transform', 'translate(100, 10)').attr('fill', 'none').attr('stroke', (d, i)=> {\n        return d[0] ? d[0].color : '#fff';\n    });\n\n\n\n    ////OBSERVED CONTIUOUS/////\n\n    let observedWrap = binnedWrap.append('g').classed('observed', true);\n    observedWrap.attr('transform', 'translate('+ (predictedWidth + 150) +', 0)')\n\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n\n    let contBars = contOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(height - margin), 0])\n        return y(Object.keys(d).length - 2)\n    }).attr('fill', 'rgba(133, 193, 233, .5)');\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(height - margin), 0])\n        let movey = height - y(Object.keys(d).length - 2);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    contOb.each((d, i, nodes)=> {\n        let xvalues = d.leafData.data.map(m=> m.realVal);\n        let x = d3.scaleLinear().domain([d3.min(xvalues), d3.max(xvalues)]).range([0, observedWidth])\n        let y = d3.scaleLinear().domain([0, d3.max(d.leafData.bins.map(b=> Object.keys(b).length)) - 2]).range([(height - margin), 0]);\n        d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(x)).attr('transform', 'translate(0, '+height+')');\n        d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y)).attr('transform', 'translate(0, '+margin+')');\n    });\n    \n////Observed Discrete////\n    let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n    let discBars = discOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n    let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n        let width = observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, 100]).range([(height -margin), 0])\n        return y(d.length)\n    }).attr('fill', (d, i) => {\n        return d[0] != undefined ? d[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    discBars.attr('transform', (d, i, n)=> {\n        let movex = observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, 100]).range([(height - margin), 0])\n        let movey = (height) - y(d.length);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    dRects.on('mouseover', (d, i, n)=> {\n        let state = d3.select('g.'+d[0].label).selectAll('g.state');\n        state.filter(f=> f[0].state === d[0].winState).attr('opacity', 0.8);\n        state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n        d3.select(n[i]).attr('opacity', 0.9);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).attr('opacity', 0.3);\n        let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n     \n    })\n\n    discOb.each((d, i, nodes)=> {\n            let labels = d.leafData.bins.map(b=> {\n                return b[0] != undefined ? b[0].winState : '';\n                })\n            let xPoint = d3.scalePoint().domain(labels).range([0, observedWidth]).padding(.6)\n            let y = d3.scaleLinear().domain([0, 100]).range([(height - margin), 0]);\n            d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5)).attr('transform', 'translate(0, '+margin+')');\n            d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n    });\n}\n","import * as d3 from \"d3\";\nimport { renderDistibutions } from './distributionView';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport { getLatestData } from \"./filterComponent\";\n\n\nexport function updateMainView(scales, moveMetric){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(d3.select('#view-toggle').text() === 'View Paths'){\n        renderDistibutions(data, main, scales, moveMetric);\n        document.getElementById(\"scrunch\").disabled = true;\n    }else{\n        drawPathsAndAttributes(data, main, scales, moveMetric);\n        document.getElementById(\"scrunch\").disabled = false;\n    }\n\n}\n\nexport function initialViewLoad(scales, moveMetric){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(data.length > 50){\n        renderDistibutions(data, main, scales, moveMetric);\n        d3.select('#view-toggle').text('View Paths');\n        document.getElementById(\"scrunch\").disabled = true;\n    }else{\n        drawPathsAndAttributes(data, main, scales, moveMetric);\n        d3.select('#view-toggle').text('View Summary');\n        document.getElementById(\"scrunch\").disabled = false;\n    }\n\n}","import '../styles/index.scss';\n\nimport * as d3 from \"d3\";\nimport {dataMaster} from './index';\nimport { updateMainView } from './viewControl';\n\nexport let filterMaster = [];\n\nexport function removeFilter(filterId, scales){\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n    let filterIndex = dataFilters.map(f=> f.filterId).indexOf(filterId);\n\n    if(filterIndex != dataFilters.length - 1){\n   \n        let baseData = filterIndex === 0? dataMaster[0] : dataFilters[filterIndex - 1].data;\n    \n        let testData = [...baseData];\n\n        let filterToolbar = d3.select(\"#toolbar\");\n\n        let badges = filterToolbar.selectAll('.filter-tag').remove();\n  \n        for(let i = filterIndex + 1; i < dataFilters.length; i ++){\n       \n            let fun = dataFilters[i].filterFunction;\n            if(dataFilters[i].attributeType === 'continuous'){\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].predictedFilter, dataFilters[i].observedFilter);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'c-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }else{//discrete\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].fromState, dataFilters[i].toState);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'd-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }\n        }\n    }\n    let newFilterMaster = filterMaster.filter(f=> f.filterId != filterId);\n\n    filterMaster = newFilterMaster;\n}\n\nexport function addFilter(filterType, attType, filterId, filFunction, oldData, newData, extra){\n    let filterOb = {'filterType': filterType, 'attributeType': attType, 'filterId': filterId, 'filterFunction':filFunction, 'before-data': oldData, 'data': newData}\n    if(extra != null){\n        extra.forEach(ex=> {\n            filterOb[ex[0]] = ex[1];\n        });\n    }\n    filterMaster.push(filterOb);\n    return filterOb;\n}\n\nexport function getLatestData(){\n    let data = filterMaster.length > 0 ? filterMaster[filterMaster.length - 1].data : dataMaster[0];\n    return data;\n}\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, main, moveMetric, scales){\n\n    let filterDiv = d3.select('#filter-tab');\n    let data = getLatestData();\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        renderAttToggles(filterDiv, data, main, scales, 'edgeLength');\n        stateFilter(filterDiv, filterButton, data, main, moveMetric, scales);\n        queryFilter(filterDiv, filterButton, data, main, moveMetric, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\n\nfunction addFilterTag(data, scales){\n\n    let filterToolbar = d3.select('#toolbar');\n\n    if(data.attributeType === 'continuous'){\n\n        let formater = d3.format(\".2s\");\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        d3.select(button).datum(data);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        let label = button.append('h6').text(data.selectedOption + \"  Predicted: \"+ formater(data.predictedFilter[0]) + \"-\" + formater(data.predictedFilter[1]) + \" Observed: \" + formater(data.observedFilter[0]) + \"-\" + formater(data.observedFilter[1]));\n        let xSpan = label.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> data.attribute != f.attribute);\n            ////YOU NEED TO CHANGE THIS TO REMOVE FILTER FUNCTION\n            removeFilter(data.filterId, scales);\n            updateMainView(scales, 'edgeLength')\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'discrete'){\n     \n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(data.state[0]);\n        button.append('i').classed('fas fa-arrow-right', true);\n        button.append('h6').text(data.state[1] + '  ');\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView(scales, 'edgeLength')\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'branch'){\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(' At Branch: ' + data.nodeId);\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView(scales, 'edgeLength')\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }\n    \n}\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n              \n                    //let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n                    let data = getLatestData();\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filId = 'd-'+filterMaster.filter(f=> f.attributeType === 'discrete').length;\n                    let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n                    updateMainView(scales, moveMetric);\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR////\n                    addFilterTag(filterOb, scales);\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    let filId = 'c-'+filterMaster.filter(f=> f.attributeType === 'continuous').length;\n                    let filterOb = addFilter('data-filter', 'continuous', filId, continuousFilter, [...data], [...test], [['selectedOption', selectedOption], ['predictedFilter', predictedFilter], ['observedFilter', observedFilter]]);\n\n                    updateMainView(scales, moveMetric);\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    addFilterTag(filterOb, scales);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\nexport function nodeFilter(selectedNode, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path.map(node => node.node).indexOf(selectedNode) > -1;\n    });\n\n    let filId = 'b-'+filterMaster.filter(f=> f.attributeType === 'branch').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'branch', filId, nodeFilter, [...data], [...test], [['nodeId', selectedNode]])\n    addFilterTag(filterOb, scales);\n    updateMainView(scales, 'edgeLength');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\nexport function leafStateFilter(selectedState, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path[path.length - 1].attributes[selectedState.label].winState === selectedState.winState;\n    });\n\n    let filId = 'l-'+filterMaster.filter(f=> f.attributeType === 'leaf').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'leaf', filId, nodeFilter, [...data], [...test], [['leafState', [selectedState.label, selectedState.winState]]])\n    addFilterTag(filterOb, scales);\n    updateMainView(scales, 'edgeLength');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n}\nfunction discreteFilter(data, selectedOption, fromState, toState){\n    if(selectedOption != undefined){\n        return data.filter(path=> {\n            let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n                let states = node.attributes[selectedOption].states;\n                if(fromState === 'Any'){\n                    return true;\n                }else{\n                    return states.filter(st=> st.state === fromState).length > 0 && states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n                }\n            });\n            let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n            let win = node.attributes[selectedOption].winState;\n            if(toState === 'Any'){\n                return true;\n            }else{\n                return win === toState;\n            }\n            });\n            return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n        });\n    }\n}\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n         \n            updateMainView(scales, moveMetric);\n\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                updateMainView(scales, moveMetric);\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, main, scales, moveMetric){\n\n    ////NEED TO GET RID OF TOGGLE SVG\n    let keys = Object.keys(normedPaths[0][0].attributes);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n   \n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths], 'data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n        updateMainView(scales, moveMetric)\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import * as d3 from \"d3\";\nimport { branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes } from './renderPathView';\nimport { formatAttributeData } from './dataFormat';\nimport { filterMaster } from './filterComponent';\nimport { dataMaster, collapsed, colorKeeper } from './index';\nimport { renderDistibutions } from \"./distributionView\";\n\nexport let selectedPaths = [];\nexport let comparisonKeeper = [];\n\nexport function pathSelected(selectedPath, otherPaths, scales, moveMetric) {\n\n    let selectedDiv = d3.select('div#selected');\n    let main = d3.select('div#main');\n    if (selectedPath === null) {\n\n        selectedPaths = [];\n\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, moveMetric, false);\n\n    } else {\n      \n        selectedPaths = selectedPaths.concat(selectedPath);\n        let commonNodes = renderSelectedView([...selectedPaths], [...otherPaths], selectedDiv, scales, moveMetric);\n        let sortedPaths = sortOtherPaths([...selectedPaths], [...otherPaths], [...commonNodes]);\n        \n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let pathGroups = drawPathsAndAttributes(sortedPaths.map(s => s.data), main, scales, moveMetric, false);\n\n        main.style('padding-top', '250px');\n    }\n}\nfunction getCommonNodes(paths){\n    let maxBranch = d3.max(paths.map(p => p.length));\n    let longestBranch = paths.filter(path => path.length === maxBranch)[0];\n    let startBranch = longestBranch.filter(f=> f.leaf != true);\n    let commonNodeStart = startBranch;\n    //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n    paths.map(path => {\n        commonNodeStart = [...path].filter(f => {\n            return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n    });\n\n    let children = paths.map(path => {\n        path = (path[0].leaf === true) ? path.reverse() : path;\n        let nodeIndex = path.map(p => p.node);\n        let thresh = nodeIndex.indexOf(commonNodeStart[commonNodeStart.length - 1].node);\n        let subset = path.filter((f, i) => i > thresh);\n        return subset;\n    });\n\n    commonNodeStart[commonNodeStart.length - 1].children = children.map((path, i) => {\n        let max = d3.max(path.map(p => p.edgeMove)) - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n        return path.map((chil, j, n) => {\n            chil.parentBase = commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.move = chil.edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.base = (j === 0) ? 0 : n[j - 1].edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            let parentScale = d3.scaleLinear().domain([0, 1]).range([0, 1000])\n            let scaledParentMove = parentScale(commonNodeStart[commonNodeStart.length - 1].edgeMove);\n            chil.xScale = d3.scaleLinear().domain([0, max]).range([0, (1000 - scaledParentMove)]);\n            chil.level = i;\n            return chil;\n        });\n    });\n\n    return commonNodeStart;\n}\nexport function sortOtherPaths(pathData, otherPaths, commonNode) {\n\n    if(pathData.length > 1){\n\n        if(commonNode != null){\n\n            let chosenPath = commonNode.reverse().map(m => m.node);\n            let rankedPaths = otherPaths.map(path => {\n                let step = 0;\n                let test = path.reverse().map((node, i) => {\n                    if (chosenPath.indexOf(node.node));\n                    return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n                }).filter(f => f.indexOf > -1);\n                let distance = (test[0].indexOf + test[0].pathIndex);\n                return { 'data': path.reverse(), 'distance': distance };\n            });\n            let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        \n            return sortedData;\n        }\n        console.error('multiple paths without common node');\n    }else{\n\n        let chosenPath = pathData[0].reverse().map(m => m.node);\n    \n        let rankedPaths = otherPaths.map(path => {\n            let step = 0;\n            let test = path.reverse().map((node, i) => {\n                if (chosenPath.indexOf(node.node));\n                return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n            }).filter(f => f.indexOf > -1);\n            let distance = (test[0].indexOf + test[0].pathIndex);\n            return { 'data': path.reverse(), 'distance': distance };\n        });\n        let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        return sortedData;\n    }\n\n}\nfunction renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency, moveMetric){\n\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', 'translate(0, 20)')\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data([commonNodeStart]).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n        pathBars.attr('height', (35 + (25 * commonNodeStart[commonNodeStart.length - 1].children.length)));\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales, moveMetric)\n\n        /////////\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(145, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', (d, i) => {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n                return x(d[d.length - 1].edgeMove)\n            })\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        nodeGroups.classed('common-node', true);\n\n        let childNodeWrap = nodeGroups.filter(c => c.children != undefined).selectAll('g.child').data(d => d.children).join('g').classed('child', true);\n\n        let childNodes = childNodeWrap.selectAll('g.node').data(d => d).join('g').classed('node', true)\n        childNodes.attr('transform', (d, i, n) => {\n            return 'translate(' + d.xScale(d.move) + ', ' + (d.level * 20) + ')';\n        });\n\n        childNodeWrap.append('path').attr('d', (d, i, n) => {\n            let pathArray = [{ 'x': 0, 'y': 0 }, { 'x': 0, 'y': i }];\n            d.map(m => {\n                pathArray.push({ 'x': m.xScale(m.move), 'y': m.level })\n            });\n            let line = d3.line()\n                .curve(d3.curveMonotoneY)\n                .x(function(d) {\n                    return d.x;\n                })\n                .y(d => (d.y * 20))\n            return line(pathArray);\n        }).attr('stoke-width', '2px').attr('fill', 'none').attr('stroke', 'gray');\n\n        childNodeWrap.on('mouseover', (d, i)=> {\n            let specArray = d.map(m=> m.species);\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let commonHover = [...commonNodeStart].map(c=> c.node).concat(d.map(n=> n.node));\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            treeLinks.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', (d, i)=> {\n            d3.selectAll('.hover').classed('hover', false);\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        let childCirc = childNodes.append('circle').attr('r', 7).attr('fill', 'red').attr('y', 5);\n\n        childCirc.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        childNodes.filter(f => f.leaf === true).append('text').text(d => d.label).attr('x', 9).attr('y', 4);\n        //selectWrap.attr('transform', 'translate('+(50+(20 *commonNodeStart[commonNodeStart.length - 1].children.length))+')')\n       \n\n}\nexport function addRemoveBubble(group, scales, moveMetric){\n\n    let pathRemove = group.append('g').classed('x-icon', true);\n    pathRemove.attr('transform', 'translate(15, 10)');\n    pathRemove.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathRemove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n    pathRemove.style('cursor', 'pointer');\n    pathRemove.on('click', (d, i, n) => {\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        pathSelected(null, dataMaster[0], scales, moveMetric);\n    });\n\n}\nexport function renderComparison(group, otherPaths, selectedDiv, scales){\n \n    let buttonGroupTest = selectedDiv.select('.button-wrap');\n    let buttonGroup = buttonGroupTest.empty() ? selectedDiv.append('div').classed('button-wrap', true) : buttonGroupTest;\n    \n    buttonGroup.style('display','inline-block').style('width', '900px').style('height', '50px');\n    let main = d3.select('div#main');\n    main.style('padding-top', '300px');\n\n    if(group != null){\n        let usedColors = comparisonKeeper.map(m=> m.groupColor);\n        let newColor = colorKeeper.find(c => usedColors.indexOf(c[0]) === -1);\n        group.groupColor = newColor[0];\n        comparisonKeeper.push(group);\n    }\n\n    if(comparisonKeeper.length > 1){\n        let compareButtonTest = d3.select('#toolbar').select('#compare-button');\n        let compareButton = compareButtonTest.empty() ? d3.select('#toolbar').append('button').text('Normal Mode').attr('id', 'compare-button').classed('btn btn-info', true) : compareButtonTest;\n        compareButton.on('click', ()=> {\n            compareButton.text() === \"Normal Mode\" ? compareButton.text('Compare Mode') : compareButton.text('Normal Mode');\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        });\n    }\n\n    let comparisonCombined = scales.map((sc, i)=> {\n        let newAtt = {'field': sc.field, 'type': sc.type, 'data': []}\n        comparisonKeeper.map((com, i)=> {\n            let atts = formatAttributeData(com.data, scales, [sc.field]);\n            newAtt.data.push({'group': {'first': com.first, 'second': com.second, 'color': com.groupColor}, 'data': atts.flatMap(a=> a)});\n        })\n        return newAtt;\n    });\n\n    let button = buttonGroup.selectAll('button').data(comparisonKeeper).join('button').classed('btn btn-info', true).style('background', d=> d.groupColor);\n    button.selectAll('span').data(t=> [t]).join('span').text(t=> {\n        return t.first[1]+ \"/\" + t.second[1] + \" \"}).append('span').text(t=> t.data.length).classed(\"badge badge-light\", true)\n    \n    let xOut = button.selectAll('i').data(d=> [d]).join('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    xOut.on('click', (d, i)=> {\n        let filteredComp = comparisonKeeper.filter(f=> f.groupColor != d.groupColor);\n        comparisonKeeper = filteredComp;\n        if(comparisonKeeper.length > 0){\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        }else{\n            selectedDiv.selectAll('*').remove();\n            selectedDiv.style('height', '0px');\n            main.style('padding-top', '0px');\n        }\n    });\n\n    let selectedTest = selectedDiv.select('.comparison-svg');\n    let selectedTool = selectedTest.empty() ? selectedDiv.append('svg').classed('comparison-svg', true) : selectedTest;\n    selectedDiv.style('height', '300px').style('width', '100%');\n    selectedTool.style('height', '300px');\n\n    let attWraps = selectedTool.selectAll('.att-wrapper').data(comparisonCombined.filter(f=> f.type === 'continuous').map((com)=>{\n        com.data.map(c=> {\n            let binLength = 6;\n            let max = scales.filter(f=> f.field === com.field)[0].max;\n            let min = scales.filter(f=> f.field === com.field)[0].min;\n            let normBins = new Array(binLength).fill().map((m, i)=> {\n                let step = 1 / binLength;\n                let base = (i * step);\n                let top = ((i+ 1)* step);\n                return {'base': base, 'top': top, 'binI': i, 'max': max, 'min':min }\n            });\n\n            let internalNodes = c.data.map(path => path.filter(node=> node.leaf != true));\n            let leafNodes = c.data.flatMap(path => path.filter(node=> node.leaf === true));\n            c.bins = normBins.map((n)=> {\n                let edges = internalNodes.flatMap(path => path.filter(node=> {\n                    return node.edgeMove >= n.base && node.edgeMove <= n.top;\n                } ));\n                n.data = edges;\n                n.mean = d3.mean(edges.map(e=> e.realVal))\n                return n;\n            });\n            c.leaves = leafNodes;\n            return c;\n        })\n        \n        return com;\n    }));\n    attWraps.exit().remove();\n    let attWrapsEnter = attWraps.enter().append('g').classed('att-wrapper', true);\n\n    let attLabels = attWrapsEnter.append('text').text(d=> d.field).style('text-anchor', 'end')\n                    .style('font-size', '11px').attr('transform', 'translate(120, 35)');\n\n    attWraps = attWrapsEnter.merge(attWraps);\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+(10+(i * 70))+')');\n\n    let innerWrap = attWraps.selectAll('g.inner-group').data(d=> [d]).join('g').classed('inner-group', true);\n    innerWrap.attr('transform', 'translate(150, 0)');\n    let wrapRect = innerWrap.selectAll('rect.outline-rect').data(d=> [d]).join('rect').classed('outline-rect', true)\n                    .attr('width', 800).attr('height', 60).attr('fill', '#fff').attr('stroke', 'gray');\n    \nif(d3.select('#compare-button').empty() || d3.select('#compare-button').text() === \"Normal Mode\"){\n        let lineGen = d3.line()\n        .x((d, i)=> {\n            let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n            return x(i);\n        })\n        .y(d=> {\n            let y = d.yScale;\n            y.range([60, 1]);\n            return y(d.mean);\n        });\n\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> d.data).join('g').classed('path-groups', true);\n    pathGroups.selectAll('*').remove();\n    let paths = pathGroups.append('path').attr('d', d=> { \n        let scale = d.bins[0].data[0].yScale\n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.mean === undefined){\n                b.mean = d.bins[i-1].mean;\n                d.missing = true;\n            }\n            b.yScale = scale;\n            return b;\n        });\n        return lineGen(d.bins);\n    }).classed('path', true);\n\n    paths.style('fill', 'none');\n    paths.style('stroke', d=> d.group.color);\n    paths.style('stroke-width', '1px');\n\n    let yAxisG = innerWrap.append('g').classed('y-axis', true);\n\n    innerWrap.on('mousemove', function(d, i) {\n        \n        let scale = scales.filter(f=> f.field === d.field)[0];\n        let axisGroupTest = d3.select(this).select('.y-axis');\n        let axisGroup = axisGroupTest.empty() ? d3.select(this).append('g').classed('y-axis', true) : axisGroupTest;\n        \n        if(d3.select('#compare-button').empty() || d3.select('#compare-button').text()==='Normal Mode'){\n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)')\n            axisGroup.call(d3.axisLeft(scale.yScale).ticks(5));\n        }else{\n            let pathD = d3.select(this).select('.path-groups').selectAll('path');\n            let maxDiff = pathD.data().map(d=> d[0].maxDiff)[0];\n            \n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)');\n            let newScale = d3.scaleLinear().domain([maxDiff, 0]).range([0, 60]);\n            axisGroup.call(d3.axisLeft(newScale).ticks(5));\n        }\n\n    \n    }).on('mouseleave', function(){\n        let axisGroup = d3.select(this).select('.y-axis');\n        axisGroup.remove();\n    });\n    \n}else{\n\n    innerWrap.selectAll('.path-groups').remove();\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> {\n        let startBins = d.data[0].bins;\n        let difArray = [];\n        for(let i = 1; i < d.data.length; i ++){\n            let diffs = []\n            d.data[i].bins.map((b, j)=>{\n                if(b.mean === undefined){\n                    b.mean = d.data[i].bins[j-1].mean;\n                }\n                if(startBins[j].mean === undefined){\n                    startBins[j].mean = startBins[j-1].mean;\n                }\n                let maxDiff = d.data[0].bins[0].max - d.data[0].bins[0].min;\n                diffs.push({'diff':Math.abs(startBins[j].mean - b.mean), 'maxDiff': maxDiff});\n            });\n            difArray.push(diffs);\n        }\n        return difArray;\n    }).join('g').classed('path-groups', true);\n\n    let lineGen = d3.line()\n        .x((d, i)=> {\n            let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n            return x(i);\n        })\n        .y(d=> {\n            let y = d3.scaleLinear().domain([0, d.maxDiff]).clamp(true);\n            y.range([60, 0]);\n            return y(d.diff);\n        });\n\n    let paths = pathGroups.append('path').attr('d', d=> { \n        return lineGen(d);\n    });\n\n    paths.style('fill', 'none');\n    paths.style('stroke', 'black');\n    paths.style('stroke-width', '1px');\n\n}\n\n    /////////////////////////\n    let obsDistWrap = attWraps.selectAll('.observed-dist-wrap').data(d=> {\n  \n        let max = d3.max(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n        let min = d3.min(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n\n        let x = d3.scaleLinear().domain([min, max]).range([0, 200]);\n    \n        let histogram = d3.histogram()\n        .value(function(d) { return d.realVal; })  \n        .domain(x.domain())  \n        .thresholds(x.ticks(10)); \n        \n        let leafData = d.data.map(m=> {\n            let newLeaves = [...m.leaves].map(leaf => {\n                leaf.x = x;\n                leaf.group = m.group;\n                return leaf;\n            })\n            return {'binData':histogram(m.leaves), 'data': newLeaves, 'group': m.group, 'xScale': x};\n        });\n        return [{'data':leafData, 'xScale': x}];\n    }).join('g').classed('observed-dist-wrap', true);\n    obsDistWrap.attr('transform', 'translate(970, 0)');\n  \n    let xAxis = obsDistWrap.selectAll('g.axis-x').data(d=> [d]).join('g').classed('axis-x', true);\n    xAxis.attr('transform', 'translate(0, 50)')\n    xAxis.each((d, i, nodes)=> {\n        d3.select(nodes[i]).call(d3.axisBottom(d.xScale).ticks(5))\n    });\n\n    let distGroups = obsDistWrap.selectAll('.observed-group').data(d=> d.data).join('g').classed('observed-group', true);\n\n    distGroups.selectAll('.line').data(d => {\n            let mean = d3.mean(d.data.map(r=> r.realVal))\n            let vals = {'mean': mean, 'group':d.group, 'x':d.xScale}\n            return [vals];\n    }).join('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.mean)-1.5)+',0)')\n    .attr('height', 50).attr('width', 3).attr('fill', d=> d.group.color).style('opacity', '0.4')\n\n    let circWrap = distGroups.selectAll('.circ-wrap').data(d=> [d]).join('g').classed('circ-wrap', true).attr('transform', (d, i, n)=> {\n        let move = d3.scaleLinear().domain([0, n.length]).range([0, 60]);\n        return 'translate(0,'+(move(i+0.5))+')'})\n\n    let distCirc = circWrap.selectAll('circle.disDots').data(d=> d.data).join('circle').attr('r', 3)\n    .attr('cx', (d, i) => {\n        return d.x(d.realVal);\n    }).attr('cy', (d, i, n)=> {\n        return 0;\n    }).attr('fill', d=> d.group.color);\n\n   \n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales, moveMetric) {\n\n    let attributeHeight = 50;\n\n    let selectedSpecies = pathData.flatMap(p => p.filter(f => f.leaf === true).map(n => n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node => selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n    ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f => f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f => f.type === 'hide-attribute').map(m => m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc => {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m => m.field) : null;\n\n    ////IF THE SELECTED DIV IS THERE ALREADY USE THAT/////\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    ///////////////////////\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', () => sortPaths(sortByDistanceButton));\n\n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m => m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n    let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n    let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d => d).attr('id', (d, i) => 'radio-' + i).classed(\"form-check-input\", true);\n    radioDiv.append('label').text(d => d).property('for', (d, i) => 'radio-' + i).classed(\"form-check-label\", true);\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty() ? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    svg.selectAll('*').remove();\n\n    let branchFrequency = pathData.flatMap(row => row.flatMap(f => f.node)).reduce(function(acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n            acc[curr] = 1;\n        } else {\n            acc[curr] += 1;\n        }\n        return acc;\n    }, {});\n\n    ///RENDERING SELECTED PATHS////\n    if (pathData.length === 1) {\n\n        /////////////////////////////////////////////////\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', (d, i) => 'translate(0,20)');\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales, moveMetric)\n\n        /////////\n        selectedGroups.on('mouseover', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => {\n                return d.map(m => m.node).indexOf(f.data.node) > -1;\n            }).classed('hover', true);\n            treeLinks.filter(f => d.map(m => m.node).indexOf(f.data.node) > -1).classed('hover', true);\n            return d3.select(this).classed('hover', true);\n        }).on('mouseout', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n            let treeLinks = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n            return d3.select(this).classed('hover', false);\n        });\n\n        let speciesTitle = selectedGroups.append('text').text(d => {\n            let string = d.filter(f => f.leaf === true)[0].label;\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        });\n\n        speciesTitle.attr('x', 25).attr('y', 15);\n\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(150, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', 1000)\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        circle.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        let speciesNodeLabel = nodeGroups.filter(f => f.label != undefined).append('text').text(d => {\n            let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n            return string;\n        }).attr('x', 10).attr('y', 5);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(0,' + (i * 60) + ')');\n\n        let nodes = selectedGroups.select('.time-line').selectAll('.node');\n        nodes.on('mouseover', (d, i) => {\n\n            let nearest = otherPaths.filter(path => {\n                let nodearray = path.flatMap(f => f.node);\n                return nodearray.indexOf(d.node) > -1;\n            });\n\n            let nearestA = nearest[0];\n            let nearestB = nearest[1];\n           \n        });\n\n        //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(10,' + (i * ((attributeHeight + 5) * (Object.keys(d[1].attributes).length + 1))) + ')');\n\n        drawContAtt(attributeGroups);\n        drawDiscreteAtt(attributeGroups, scales, false, false);\n\n        //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attributeWrapper.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales, moveMetric);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n      \n        return pathData;\n\n    } else if(pathData.length > 1 && pathData.length < 5) {\n       \n        let commonNodeStart = getCommonNodes(pathData);\n        renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency, moveMetric);\n\n        /////END PATH RENDER///////\n        let attWrap = svg.append('g').classed('attribute-wrapper', true);\n        let attributeData = commonNodeStart[commonNodeStart.length - 1].children.map(ch => {\n            return [...commonNodeStart].concat(ch);\n        });\n\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attDataComb = attData[0].map((att, i)=> {\n            let species = pathData[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < attData.length; index++ ){\n                let species = pathData[index].filter(f=> f.leaf === true)[0].label;\n                let last = attData[index][i].length - 1\n                attData[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': attData[index][i]})\n            }\n            return attribute;\n        });\n\n        function findMaxState(states, offset){\n            let maxP = d3.max(states.map(v=> v.realVal));\n            let notMax = states.filter(f=> f.realVal != maxP);\n            let winState = states[states.map(m=> m.realVal).indexOf(maxP)]\n            winState.other = notMax;\n            winState.offset = offset;\n    \n            return winState;\n        }\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n\n       let attGroups = attWrap.selectAll('g').data(mappedDis).join('g').classed('attr', true);\n       attGroups.attr('transform', (d, i) => 'translate(145,' + (i * (attributeHeight + 10)) + ')');\n\n       attGroups.append('text')\n        .text(d=> d.label)\n        .style('text-anchor', 'end')\n        .style('font-size', 11)\n        .attr('transform', 'translate(0,'+(attributeHeight/2)+')');\n\n       let wrapRect = attGroups.append('rect').attr('width', 1010);\n       wrapRect.attr('height', attributeHeight);\n       wrapRect.style('fill', '#fff');\n       wrapRect.style('stroke', 'gray');\n       wrapRect.style('opacity', 0.5);\n\n       attGroups.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n     \n       let speciesGrp = attGroups.selectAll('g').data(d=> {\n            d.data = d.data.map(m=> {\n                m.type = d.type;\n                return m;\n            });\n            return d.data;\n        }).join('g').classed('species', true);\n\n       let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n           return y(d.realVal) + d.offset;\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([attributeHeight-2, 1]);\n           return y(d.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n           d3.select(n[i]).classed('selected', true);\n       }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).classed('selected', false);\n       });\n\n       let disGroup = speciesGrp.filter(sp=> {\n        return sp.type === 'discrete';\n        });\n\n       let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n       branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        });\n\n        let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 5, 2]);\n            return y(d.realVal) + d.offset;\n        }).attr('cx', 5);\n\n        bCirc.attr('fill', (d, i)=> d.color);\n\n        let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n        otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n                return y(c.realVal);\n            }).attr('fill', (c)=> c.color).style('opacity', 0.1);\n\n        otherCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n\n        bCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n        \n        /////AXIS ON HOVER////\n        branchGrpDis.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let conGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'continuous';\n        });\n\n        let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n        branchGrpCon.attr('transform', (d)=> {\n         let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n             let distance = x(d.edgeMove);\n             return 'translate('+distance+', 0)';\n         });\n\n         /////AXIS ON HOVER////\n        branchGrpCon.on('mouseover', (d, i, n)=> {\n            let y = d.yScale;\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let MeanRect = branchGrpCon.append('rect');\n   \n        MeanRect.attr('width', 10).attr('height', 3);\n        MeanRect.attr('y', (d, i) => {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0])\n            return y(d.realVal);\n        });\n\n        let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n        confiBars.attr('width', 10).attr('height', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.lowerCI95) - y(d.upperCI95);\n        });\n\n        confiBars.attr('y', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.upperCI95);\n        })\n        confiBars.style('opacity', 0.1);\n\n        //tranforming elements\n        svg.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(0, 60)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n\n\n    }else{\n       \n        /////////\n        //getting common node\n        ///\n\n        let maxBranch = d3.max(pathData.map(p => p.length));\n        let longestBranch = pathData.filter(path => path.length === maxBranch)[0];\n        let startBranch = longestBranch.filter(f=> f.leaf != true);\n        let commonNodeStart = startBranch;\n        //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n        pathData.map(path => {\n            commonNodeStart = [...path].filter(f => {\n                return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n        });\n\n        svg.remove();\n        let remove = selectedTool.append('g').classed('x-icon', true);\n        remove.attr('transform', 'translate(15, 10)');\n        remove.append('circle').attr('r', 7).attr('fill', '#fff');\n        remove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n        remove.style('cursor', 'pointer');\n        remove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales, moveMetric);\n        });        \n\n        /////////\n        renderDistibutions(pathData, selectedDiv, scales, moveMetric);\n        selectedDiv.style('height', '550px');\n\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales, moveMetric);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n    }\n    \n}\n\nfunction sortPaths(sortButton) {\n    if (sortButton.text() === 'Sort Most to Least') {\n        sortButton.text('Sort Least to Most');\n    } else {\n        sortButton.text('Sort Most to Least');\n    }\n}","export function dropDown(div, optionArray, dropText, dropId){\n    let dropdiv = div.append('div').classed('dropdown', true);\n    dropdiv.style('display', 'inline-block')\n    let button = dropdiv.append('button').classed('btn dropbtn btn-secondary', true).text(dropText);\n    let dropContent = dropdiv.append('div').attr('id', dropId).classed('dropdown-content', true);\n    dropContent.append('a').text('text');\n    let options = dropContent.selectAll('a').data(optionArray).join('a').text(d=> d.field);\n\n    button.on('click', (d, i, n)=> {\n        if(dropContent.classed('show')){\n            dropContent.classed('show', false);\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n\n    return options;\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport { colorKeeper } from './index';\nimport {pathSelected, renderComparison} from './selectedPaths';\nimport {formatAttributeData} from './dataFormat';\nimport {filterMaster, nodeFilter, getLatestData, leafStateFilter} from './filterComponent';\nimport { drawBranchPointDistribution } from './distributionView';\nimport { dropDown } from './buttonComponents';\n\nexport function drawPathsAndAttributes(pathData, main, calculatedScales, moveMetric){\n\n    let nodeTooltipFlag = true;\n\n    let collapsed = d3.select('#scrunch').attr('value');\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(pathData, main, calculatedScales, moveMetric);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n\n    let attKeys = attrHide.length > 0 ? calculatedScales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    let attData = formatAttributeData(pathData, calculatedScales, attKeys);\n\n    let attrMove = attKeys === null ? calculatedScales.length : attKeys.length;\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, calculatedScales, null, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (attrMove + 1))) +')');\n    \n    let cGroups = drawContAtt(predictedAttrGrps, moveMetric, collapsed);\n    let dGroups = drawDiscreteAtt(predictedAttrGrps, moveMetric, collapsed, false);\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, pathData, (attrMove * attributeHeight));\n\n    let leafStates = d3.selectAll('.discrete-leaf');\n    leafStates.on('click', (d, i)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#state-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.winState);\n            d3.select(\"#state-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-state\").on('click', ()=> {\n                \n                leafStateFilter(d, calculatedScales);\n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n            });\n\n            d3.select(\"#select-by-state\").on('click', ()=> {\n                let data = getLatestData();\n                let test = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState === d.winState;\n                });\n\n                let notIt = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState != d.winState;\n                });\n            \n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test, notIt, calculatedScales, moveMetric);\n\n            });\n\n        }});\n\n    return pathGroups;\n\n}\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 25)');\n        ///////////////////////////////////\n}\nexport function renderPaths(pathData, main, scales, moveMetric){\n    \n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    \n    let nodeTooltipFlag = false;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n    \n    let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.attr('y', -8);\n\n    //////////\n    ///Selecting species\n    /////////\n    let pathAdd = pathGroups.append('g').classed(\"fas fa-search-plus\", true);\n    pathAdd.attr('transform', 'translate(15, 10)');\n    pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathAdd.append('text').text('+').attr('transform', 'translate(-5, 5)');\n    pathAdd.style('cursor', 'pointer');\n\n    pathAdd.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales, moveMetric);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected([d], notIt.data(), scales, moveMetric);\n        }\n    });\n\n    /////////\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       let string = d.filter(f=> f.leaf === true)[0].label;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 25).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', 1000)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> {\n        return d}).join('g').attr('class', (d, i, n)=> {\n            return d3.select(n[n.length - 1]).data()[0].label + \" node\";\n        });\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 10)';});\n\n    nodeGroups.on('click', (d, i, n)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#branch-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.node);\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-node\").on('click', ()=> {\n                nodeFilter(d.node, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-node\").on('click', ()=> {\n                let data = getLatestData();\n                let test = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) > -1;\n                });\n                let notIt = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) === -1;\n                });\n\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test.data(), notIt.data(), scales, moveMetric);\n\n            });\n        }\n          \n    });\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n}\nexport function renderAttributes(attributeWrapper, data, scales, filterArray, collapsed){\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> data[i]).join('g');\n    predictedAttrGrps.classed('predicated-attr-groups', true);\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n\n    let attrLabel = predictedAttrGrps.append('text').text(d=> d[d.length - 1].label);\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    return predictedAttrGrps;\n}\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 1 : 18;\n        p.change = test;\n    })\n}\nasync function continuousPaths(innerTimeline, moveMetric, collapsed){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path, moveMetric);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? 20 : 45;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance; })\n    .y(d=> {\n        let y = d.yScale;\n        y.range([height, 0]);\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> d[0].color);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\nexport function drawContAtt(predictedAttrGrps, moveMetric, collapsed){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return (d[d.length - 1] != undefined) ? d[d.length - 1].type === 'continuous' : d.type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? 20 : 45;\n\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, moveMetric, collapsed);\n ////////\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n    let innerRect = innerBars.append('rect').classed('attribute-inner-bar', true);\n    innerRect.attr('height', attributeHeight);\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', 20).attr('height', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.lowerCI95) - y(d.upperCI95);\n        let barHeight = (collapsed === 'true') ? 20 : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(d.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.realVal);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.realVal);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', 20).attr('height', 5)\n        .attr('transform', (d, i)=> {\n            let y = d.yScale;\n            y.range([attributeHeight, 0]);\n            return 'translate(0, '+ y(d.realVal) +')';})\n        .attr('fill', d=> d.color).classed('val-bar', true);\n    }\n\n    /////AXIS ON HOVER////\n    innerBars.on('mouseover', (d, i, n)=> {\n        let y = d.yScale;\n        y.range([0, attributeHeight]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n        let f = d3.format(\".3f\");\n        tool.html('mean: '+f(d.realVal) +\"</br>\"+\"</br>\"+ 'upperCI: '+ f(d.upperCI95) +\"</br>\"+\"</br>\"+ 'lowerCI: '+ f(d.lowerCI95))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        tool.style('height', 'auto');\n       \n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('g.y-axis')\n        d3.select(n[i]).select('g.y-axis').remove();\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    return attributeNodesCont;\n   \n}\nexport function findMaxState(states, offset){\n    let maxP = d3.max(states.map(v=> v.realVal));\n    let notMax = states.filter(f=> f.realVal != maxP);\n    let winState = states[states.map(m=> m.realVal).indexOf(maxP)]\n    winState.other = notMax;\n    winState.offset = offset;\n    return winState;\n}\nexport function drawGroups(stateBins, scales){\n   \n    let height = 40;\n    let selectedTool = d3.select('#selected');\n    selectedTool.selectAll('*').remove();\n \n    let main = d3.select('#main');\n    main.style('padding-top', 0);\n\n    d3.select('#toolbar').append('text').text(stateBins[0].field)\n\n    let splitOnArray = [{'field':'None'}].concat(scales.filter(f=> (f.field != stateBins[0].field) && f.type === 'discrete'));\n    let dropOptions = dropDown(d3.select('#toolbar'), splitOnArray, 'Split On','show-drop-div-group');\n\n    dropOptions.on('click', (d, i, n)=> {\n        d3.select('#toolbar').append('text').text(d.field);\n        \n        if(d.type === 'discrete'){\n\n            let data = getLatestData();\n            let newBins = stateBins.map(state=> {\n                let newBinData = d.scales.map(sc=> {\n                    let field = sc.field;\n                    let name = sc.scaleName;\n                    let newData = state.data.filter(pa=> {\n                        let leaf = pa.filter(le=> le.leaf === true)[0];\n                        return leaf.attributes[field].winState === name;\n                    });\n                    return {'field': field, 'state': name, 'data': newData }\n                });\n                state.data = newBinData;\n                return state;\n            });\n\n            //////RENDERING NEED TO SEPARATE OUT/////\n           \n           let main = d3.select('#main');\n           main.selectAll('*').remove();\n           main.style('padding-top', '40px');\n           let firstGroupDiv = main.selectAll('div.first-group').data(newBins).join('div').classed('first-group', true);\n           \n           let firstGroupSvg = firstGroupDiv.append('svg');\n           firstGroupSvg.attr('height', s=> (s.data.length*270));\n           let firstGroup = firstGroupSvg.append('g');\n          \n           let firstLabel = firstGroup.append('text').text(f=> f.state).attr('transform', 'translate(10, 10)');\n\n           let secondGroup = firstGroup.selectAll('g.second-group').data(g=> {\n               let newGroups = g.data.map((m)=>{\n                   let newM = {};\n                   newM.first = [g.field, g.state];\n                   newM.second = [m.field, m.state];\n                   newM.data = m.data\n                   return newM\n               });\n               return newGroups}).join('g').classed('second-group', true);\n\n           secondGroup = secondGroup.filter(f=> f.data.length > 0);\n           secondGroup.attr('transform', (s, i)=> 'translate(30,'+(20 + (i * 270))+')');\n\n           secondGroup.each((s, i, n)=> {\n            let branchBar = drawBranchPointDistribution(s.data, d3.select(n[i]));\n            branchBar.select('rect').attr('x', -80).attr('fill','gray');\n            branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n            \n            branchBar.select('.leaf-label').append('text').text((t, i) =>': '+ t.data.length).attr('transform', 'translate(45, 0)');\n            branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n    \n            branchBar.select('line').attr('stroke', '#fff');\n            let groupLabels = d3.select(n[i]).append('g');\n\n            //groupLabels.\n            let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n            pathAdd.attr('transform', 'translate(-10, 15)');\n            pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n            pathAdd.append('text').text('+').attr('transform', 'translate(-5, 3)').attr('fill', 'gray');\n        \n            pathAdd.style('cursor', 'pointer');\n\n            pathAdd.on('click', ()=> {\n                let other = d3.selectAll(n).filter((f,j)=> j != i);\n                renderComparison(s, other.data(), d3.select('#selected'), scales);\n            });\n\n            let stateLabel = groupLabels.append('text').text((s, i)=> s.second[1]);\n            stateLabel.attr('transform', (d, i)=> 'translate(3, 20)');\n            stateLabel.attr('fill', '#fff');\n           });\n\n           let innerGroup = secondGroup.filter(f=> f.data.length > 0).append('g').classed('inner-wrap', true);\n           innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n       \n           let attWraps = innerGroup.selectAll('.att-wrapper').data((d)=> {\n               let atts = formatAttributeData(d.data, scales, null);\n               let attDataComb = atts[0].map((att, i)=> {\n                   let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n                   att[att.length - 1].offset = 0;\n                   let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n                   for(let index = 1; index < atts.length; index++ ){\n                       let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                       let last = atts[index][i].length - 1\n                       atts[index][i][last].offset = (index * 8);\n                       attribute.data.push({'species': species, 'paths': atts[index][i]});\n                   }\n                   return attribute;\n               });\n\n              let mappedDis = attDataComb.map(dis=> {\n                  dis.data = dis.data.map((spec, i)=> {\n                      spec.paths = spec.paths.map(m=> {\n                       if(dis.type === 'discrete'){\n                           let offset = 5 * i;\n                           let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                           return maxProb;\n                       }else{\n                           return m;\n                       }\n                   });\n                   return spec;\n                  });\n                  return dis;\n              });\n              return mappedDis;\n           }).join('g').classed('att-wrapper', true);\n\n           let innerWrapRect = attWraps.append('rect').attr('width', 800);\n            innerWrapRect.attr('height', height);\n            innerWrapRect.style('fill', '#fff');\n            innerWrapRect.style('stroke', 'gray');\n\n            attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n            wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n            svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n            let labels = attWraps.append('text')\n            .text(d=> d.label)\n            .style('text-anchor', 'end')\n            .style('font-size', 11)\n            labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n            let speciesGrp = attWraps.selectAll('g').data(d=> {\n                d.data = d.data.map(m=> {\n                    m.type = d.type;\n                    return m;\n                });\n                return d.data;\n            }).join('g').classed('species', true);\n\n            let lineGenD = d3.line()\n            .x(d=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                let distance = d.edgeMove;\n                return x(distance);\n                })\n            .y(d=> {\n                let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n                return y(d.realVal);\n            });\n\n            let lineGenC = d3.line()\n            .x(d=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                let distance = d.edgeMove;\n                return x(distance);\n            })\n            .y(d=> {\n                let y = d.yScale;\n                y.range([height-2, 1]);\n                return y(d.realVal) + 2;\n            });\n\n            let innerStatePaths = speciesGrp.append('path')\n            .attr(\"d\", d=> {\n                    return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n                })\n            .attr(\"class\", (d, i)=> {\n                    return d.species + \" inner-line\"})\n            .style('stroke-width', 0.7)\n            .style('fill', 'none')\n            .style('stroke', 'gray');\n\n            innerStatePaths.on('mouseover', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', true);\n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n            });\n\n            let disGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'discrete';\n            });\n\n            let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n            branchGrpDis.attr('transform', (d)=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                    let distance = x(d.edgeMove);\n                    return 'translate('+distance+', 0)';\n            });\n\n            let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n                let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n                return y(d.realVal);\n            }).attr('cx', 5);\n\n            bCirc.classed('win-state', true);\n\n            bCirc.attr('fill', (d, i, n)=> {\n                if(i === 0){\n                    return d.color;\n                }else if(i === n.length - 1){\n                    if(d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }else{\n                    if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }\n            });\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n          let distance = x(d.edgeMove);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n    branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', 10).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', 10).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     })\n     confiBars.style('opacity', 0.1);\n           \n           //drawGroups(stateBins, calculatedScales);\n    }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        selectedTool.select('#show-drop-div-group').classed('show', false);\n    });\n\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    svg.selectAll('*').remove();\n\n    svg.attr('height', (stateBins.length * (height + 20)));\n    svg.append('g').attr('transform', 'translate(500, 40)').append('text').text(stateBins[0].field)\n\n    let wrappers = svg.selectAll('.grouped').data(stateBins).join('g').classed('grouped', true);\n    wrappers.each((d, i, n)=> {\n        let branchBar = drawBranchPointDistribution(d.data, d3.select(n[i]));\n        branchBar.select('rect').attr('x', -80).attr('fill','gray');\n        branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n        \n        branchBar.select('.leaf-label').append('text').text((d, i) =>': '+ d.data.length).attr('transform', 'translate(45, 0)');\n        branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n\n        branchBar.select('line').attr('stroke', '#fff');\n    });\n\n    let groupLabels = wrappers.append('text').text((d, i)=> d.state);\n    groupLabels.attr('transform', (d, i)=> 'translate(15, 15)');\n    groupLabels.style('text-anchor', 'end');\n    groupLabels.attr('fill', '#fff');\n\n    let innerGroup = wrappers.append('g').classed('inner-wrap', true);\n    innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n    let attWraps = innerGroup.selectAll('.att-wrapper').data((d, i)=> {\n        let atts = formatAttributeData(d.data, scales, null);\n        let attDataComb = atts[0].map((att, i)=> {\n            let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < atts.length; index++ ){\n                let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                let last = atts[index][i].length - 1;\n                atts[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': atts[index][i]})\n            }\n            return attribute;\n        });\n  \n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n       return mappedDis;\n    }).join('g').classed('att-wrapper', true);\n\n    let innerWrapRect = attWraps.append('rect').attr('width', 800);\n    innerWrapRect.attr('height', height);\n    innerWrapRect.style('fill', '#fff');\n    innerWrapRect.style('stroke', 'gray');\n\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n    wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n    svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n    let labels = attWraps.append('text')\n    .text(d=> d.label)\n    .style('text-anchor', 'end')\n    .style('font-size', 11)\n    labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n    let speciesGrp = attWraps.selectAll('g').data(d=> {\n        d.data = d.data.map(m=> {\n            m.type = d.type;\n            return m;\n        });\n        return d.data;\n    }).join('g').classed('species', true);\n\n    let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n           return y(d.realVal);\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([height-2, 1]);\n           return y(d.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n        d3.select(n[i]).classed('selected', true);\n    }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).classed('selected', false);\n    });\n\n    let disGroup = speciesGrp.filter(sp=> {\n     return sp.type === 'discrete';\n     });\n\n    let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n            let distance = x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n     });\n\n    let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n         let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n         //return y(d.realVal) + d.offset;\n         return y(d.realVal);\n     }).attr('cx', 5);\n\n     bCirc.classed('win-state', true);\n\n     bCirc.attr('fill', (d, i, n)=> {\n        if(i === 0){\n            return d.color;\n        }else if(i === n.length - 1){\n            if(d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }\n        }else{\n            if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }\n        }\n     });\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n          let distance = x(d.edgeMove);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n     branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', 10).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', 10).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     })\n     confiBars.style('opacity', 0.1);\n}\nexport function drawDiscreteAtt(predictedAttrGrps, moveMetric, collapsed, bars){\n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n    discreteAtt.selectAll('*').remove();\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        let disct = d.map(m=> {\n            let test = (m.leaf == true) ? m.states.map(s=> {\n                s.move = m.move;\n                s.edgeMove = m.edgeMove;\n                s.color = m.color;\n                return s;\n            }) : m;\n            return test;\n        });\n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n            return disct.map(m=> m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance + 7;})\n    .y(d=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        return y(d.realVal);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", (d, i)=> d[0].species + \" inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;\n    });\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g');\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        if(d[0]){\n            let distance = (moveMetric === 'move') ? d[0].move : x(d[0].edgeMove);\n            return 'translate('+distance+', 0)';\n        }else{\n            let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('rect').attr('width', 20).attr('height', attributeHeight).attr('opacity', 0);\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n        /////AXIS ON HOVER////\n    attributeNodesDisc.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, attributeHeight]);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n        })\n\n    attributeNodesDisc.attr('class', (d, i, n)=> {\n        let path = d3.selectAll(n).data();\n        return path[path.length - 1].species;\n    }).classed('attribute-node-discrete', true);\n\n    if(bars === false){\n\n        let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n            \n            return d;\n        }).join('circle').classed('dots', true);\n        \n        stateDots.attr('cx', 10).attr('cy', (d)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n            return y(d.realVal);\n        }).attr('r', 2);\n        \n        stateDots.style('fill', (d, i, n)=> {\n           \n            /*\n            let speciesPath = d3.selectAll('.attribute-node-discrete.'+ d.species)//.filter(f=> f.type === 'discrete');\n           \n            let nodeArray = speciesPath.data().map(m=> {\n                return m.node ? m.node : m[0].node;\n            });\n            let index = nodeArray.indexOf(d.node);\n           \n            */\n            //return d.color\n            return 'gray';\n        });\n    \n        stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n/*\n        let maxDots = stateDots.filter((f, i, n)=> {\n           \n            return f.realVal === d3.max(d3.selectAll(n).data().map(m=> m.realVal));\n        });\n*/\n        \n\n        ////NEED TO ADD COLOR ON STATE CHANGE////\n    \n        stateDots.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n        ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n    \n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }else{\n        attributeNodesDisc.filter((att, i)=> {\n            return att[0] != undefined;}).append('rect').attr('height', attributeHeight).attr('width', 20).attr('fill', '#fff')\n        let stateBars = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dis-rect').data(d=> {\n            return d;\n        }).join('rect').classed('dis-rect', true);\n\n        stateBars.attr('width', 20).attr('height', (d, i)=> {\n         \n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            return y(d.realVal);\n        });\n\n        stateBars.attr('fill', (d, i)=> d.color);\n        stateBars.attr('opacity', '0.7');\n        stateBars.attr('stroke', '#fff');\n        stateBars.attr('transform', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            let probability = d3.selectAll(n).data().sort((a, b)=> b.realVal - a.realVal);\n            let chosenIn = probability.map(p=> p.state).indexOf(d.state);\n         \n            if(chosenIn === 0){\n                    return 'translate(0,0)';\n            }else{\n                ///need to make this a reduce function///\n                let valueAdd = 0;\n                    for(let step = 0; step < chosenIn; step++){\n                        valueAdd = valueAdd + probability[step].realVal;\n                    }\n                return 'translate(0,'+(y(valueAdd))+')';\n            }\n        });\n\n        stateBars.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n\n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }\n\n    return attributeNodesDisc;\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\n\nimport {dataMaster, nestedData} from './index';\nimport {filterMaster, removeFilter, addFilter} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport {getNested} from './pathCalc';\nimport { dropDown } from './buttonComponents';\n\n\nexport function buildTreeStructure(paths, edges){\n    let root = paths[0][0];\n    let nestedData = getNested(root, edges.rows);\n    return nestedData;\n}\n\nfunction updateBrush(treeBrush, scales){\n    \n    let sidebar = d3.select('#sidebar');\n    let toolbarDiv = d3.select('#toolbar');\n\n    let data = filterMaster.length === 0 ? dataMaster[0] : dataMaster[0];\n    let nodes = sidebar.select('svg').select('g').selectAll('.node');\n    let selectedNodes = nodes.filter(n=> (n.y > d3.event.selection[0][0]) && (n.y < d3.event.selection[1][0]) && (n.x > d3.event.selection[0][1]) && (n.x < d3.event.selection[1][1])).classed('selected', true);\n    let filterArray = selectedNodes.data().map(n=> n.data.node);\n    let test = treeFilter(data, filterArray);\n    let brushId = 'brush-'+ filterMaster.filter(f=> f.attributType === 'topology').length;\n    let filterOb = addFilter('data-filter', 'topology', brushId, treeFilter, [...data], [...test], null);\n\n    updateMainView(scales, 'edgeLength');\n   \n    ///DIMMING THE FILTERED OUT NODES//////\n\n    ////Class Tree Links////\n    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n    d3.selectAll('.link-not-there').classed('link-not-there', false);\n    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingLinks.classed('link-not-there', true);\n\n    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingNodes.classed('node-not-there', true);\n\n    ///END NODE DIMMING///////\n\n    let button = toolbarDiv.append('button').classed('btn btn-info', true);\n    let span = button.append('span').classed('badge badge-light', true);\n    span.text(test.length);\n    let label = button.append('h6').text('Tree Filter');\n\n    let xSpan = label.append('i').classed('close fas fa-times', true);\n    xSpan.on('click', async (d, i, n)=> {\n        removeFilter(brushId);\n        await updateMainView(scales, 'edgeLength');\n        d3.selectAll('.selected').classed('selected', false);\n        d3.selectAll('.link-not-there').classed('link-not-there', false);\n        d3.selectAll('.node-not-there').classed('node-not-there', false);\n        button.remove();\n        d3.select(this).call(treeBrush.move, null);\n        d3.select('.tree-brush').remove();\n    });\n}\n\nexport function renderTreeButtons(normedPaths, calculatedScales, sidebar){\n    ///SIDBAR STUFF\n    let treeButton = sidebar.append('button').text('Filter by Tree').classed('btn btn-outline-secondary', true);  \n   // let treeBrush = d3.brush().extent([[0, 0], [400, 600]]);\n   let treeBrush = d3.brush().extent([[0, 0], [400, 600]]).on('end', (d, i, n) => updateBrush(treeBrush, calculatedScales));\n    treeButton.on('click', ()=> {\n        let treeBrushG = sidebar.select('svg').append('g').classed('tree-brush', true).call(treeBrush);\n    });\n\n        ///SIDBAR STUFF\n    let treeViewButton = sidebar.append('button').text('Show Lengths').classed('btn btn-outline-secondary', true);  \n\n    treeViewButton.on('click', ()=> {\n  \n       sidebar.select('svg').remove();\n       if(treeViewButton.text() === 'Show Lengths'){\n            renderTree(sidebar, true, null);\n            treeViewButton.text('Hide Lengths');\n       }else{\n            renderTree(sidebar, false, null);\n            treeViewButton.text('Show Lengths');\n       }\n    });\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> optionArray.push(m))\n\n    let dropOptions = dropDown(sidebar, optionArray, 'See Values','show-drop-div-sidebar');\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            renderTree(sidebar, false, d);\n        }else if(d.type === 'continuous'){\n            renderTree(sidebar, false, null);\n        }else{\n            renderTree(sidebar, false, null);\n        }\n       sidebar.select('#show-drop-div-sidebar').classed('show', false);\n    });\n}\n\nfunction treeFilter(data, selectedNodes){\n    return data.filter(path=> {\n        let nodeNames = path.map(no=> no.node);\n        let booArray = nodeNames.map(id=> selectedNodes.indexOf(id) > -1);\n        return booArray.indexOf(true) > -1\n    });\n}\n\nexport function renderTree(sidebar, length, attrDraw){\n\n    if(attrDraw != null){\n        console.log('attDraw',attrDraw);\n    }\n    // set the dimensions and margins of the diagram\n    var margin = {top: 10, right: 90, bottom: 50, left: 20},\n    width = 400 - margin.left - margin.right,\n    height = 700 - margin.top - margin.bottom;\n\n// declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([height, width]);\n  \n    function addingEdgeLength(edge, data){\n        data.combEdge = data.edgeLength + edge;\n        if(data.children){\n            data.children.forEach(chil=> {\n                addingEdgeLength(data.combEdge, chil);\n            });\n        }\n    }\n    addingEdgeLength(0, nestedData[0])\n\n//  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData[0]);\n\n// maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let xScale = d3.scaleLinear().domain([0, 1]).range([0, width]).clamp(true);\n    sidebar.select('svg').remove();\n    var treeSvg = sidebar.append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom),\n    g = treeSvg.append(\"g\")\n    .attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// adds the links between the nodes\n    var link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\")\n    .attr(\"d\", function(d) {\n        if(length){\n            return \"M\" + xScale(d.data.combEdge) + \",\" + d.x\n            + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.x\n            + \" \" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.parent.x\n            + \" \" + xScale(d.parent.data.combEdge) + \",\" + d.parent.x;\n        }else{\n            return \"M\" + d.y + \",\" + d.x\n            + \"C\" + (d.y + d.parent.y) / 2 + \",\" + d.x\n            + \" \" + (d.y + d.parent.y) / 2 + \",\" + d.parent.x\n            + \" \" + d.parent.y + \",\" + d.parent.x;\n        }       \n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants())\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); })\n    .attr(\"transform\", function(d) { \n   \n        if(length){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + d.x + \")\"; \n        }else{\n            return \"translate(\" + d.y + \",\" + d.x + \")\"; \n        }\n    \n    //return \"translate(\" + d.y + \",\" + d.x + \")\"; \n});\n\n    // adds the circle to the node\n    node.append(\"circle\")\n    .attr(\"r\", 3);\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n        \n        attrDraw.stateColors.forEach(att=> {\n            let circ = leaves.filter(f=> {\n                return f.data.attributes[attrDraw.field].winState === att.state;\n            }).select('circle');\n            circ.attr('fill', att.color);\n            circ.attr('r', 4)\n            notleaves.selectAll('circle').attr('fill', 'gray');\n        });\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n    });\n\n    return node;\n/////END TREE STUFF\n///////////\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {drawPathsAndAttributes, drawDiscreteAtt, drawGroups} from './renderPathView';\nimport {toggleFilters, getLatestData} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport { collapsed } from '.';\nimport { dropDown } from './buttonComponents';\n\n\nexport function toolbarControl(toolbar, normedPaths, main, calculatedScales, moveMetric, pathView){\n\n    let viewButton = toolbar.append('button').attr('id', 'view-toggle').attr('attr' , 'button').attr('class', 'btn btn-outline-secondary');\n    viewButton.on('click', ()=> togglePathView(viewButton, calculatedScales, moveMetric));\n\n    if(pathView === 'paths'){\n        viewButton.text('View Summary');\n    }else if(pathView === 'summary'){\n        viewButton.text('View Paths');\n    }else{\n        console.error('pathView parameter not found');\n    }\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, main, moveMetric, calculatedScales));\n    ///LENGTH BUTTON CODE\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, main, calculatedScales));\n\n    let discreteViewButton = toolbar.append('button').attr('id', 'discrete-view');\n    discreteViewButton.attr('class', 'btn btn-outline-secondary').text('Switch to Discrete Bars');\n    discreteViewButton.attr('value', false);\n    discreteViewButton.on('click', ()=> {\n        let discretePredictedGroups = d3.selectAll('.predicated-attr-groups');\n        if(discreteViewButton.text() === 'Switch to Discrete Bars'){\n            discreteViewButton.text('Switch to Discrete Dots');\n            drawDiscreteAtt(discretePredictedGroups, moveMetric, collapsed, true);\n        }else{\n            discreteViewButton.text('Switch to Discrete Bars');\n            drawDiscreteAtt(discretePredictedGroups, moveMetric, collapsed, false);\n        }\n    });\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> {\n        if(m.type === 'discrete'){\n            optionArray.push(m);\n        }\n    });\n\n    let dropOptions = dropDown(toolbar, optionArray, 'Group By','show-drop-div-group');\n\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            let data = getLatestData();\n            let stateBins = d.scales.map(m=> {\n                return {'field': m.field, 'state': m.scaleName, 'data': []}});\n           \n            stateBins.map(state=> {\n               state.data = data.filter(paths=> {\n                    let node = paths.filter(no=> no.leaf === true);\n                        return node[0].attributes[state.field].winState === state.state;\n                });\n            });\n           d3.select('#main').selectAll('*').remove();\n           drawGroups(stateBins, calculatedScales);\n        }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        toolbar.select('#show-drop-div-group').classed('show', false);\n    });\n}\n\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, main, calculatedScales){\n\n    let data = getLatestData();\n   \n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(data, main, calculatedScales, 'edgeLength');\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n\n        drawPathsAndAttributes(data, main, calculatedScales, 'edgeLength');\n    }\n}\n\n/**\n * \n * @param {*} viewButton button that changes the actual view the text of the button determines what the view should change to \n * @param {*} normedPaths \n * @param {*} main \n * @param {*} calculatedScales \n */\nfunction togglePathView(viewButton, calculatedScales, moveMetric){\n\n    if(viewButton.text() === 'View Paths'){\n        viewButton.text('View Summary');\n    }else{\n        viewButton.text('View Paths');\n    }\n    updateMainView(calculatedScales, moveMetric);\n}\n\n\n\n\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {loadData} from './dataLoad';\nimport {calculateScales, matchLeaves, matchEdges, normPaths, filterKeeper} from './dataFormat';\nimport {allPaths, pullPath, getPath} from './pathCalc';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {toolbarControl, renderAttToggles} from './toolbarComponent';\nimport { updateMainView, initialViewLoad } from './viewControl';\n\nexport const dataMaster = [];\nexport const savedSelected = [];\nexport const collapsed = false;\nexport const nestedData = [];\n\nexport const colorKeeper = [\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n]\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nlet selectedPaths = wrap.select('#selected');\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar');\n\nloadData(d3.json, './public/data/anolis-edges.json', 'edge').then(async edges => {\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edgeLen = await loadData(d3.json, './public/data/anolis-edge-length.json', 'edge');\n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.V1);\n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.V2) == -1 );\n    let leafChar = await loadData(d3.json, './public/data/anolisLeafChar.json', '');\n    let leafChar2 = await loadData(d3.csv, './public/data/anolisDataNew.csv', '');\n    let labels = await loadData(d3.json, './public/data/anolis-labels.json', '');\n\n// console.log('new attribute data',leafChar, leafChar2)\n  //  console.log(Object.entries(leafChar2).filter(en=> en[0] != 'columns' && en[0] != 'type'));\n    let rows = Object.entries(leafChar2).filter(en=> en[0] != 'columns' && en[0] != 'type');\n    \n //   let leafChar = {'rows': rows.map(m=> m[1]), 'type': leafChar2.type, 'fields': leafChar2.columns};\n\n   // console.log(leafChar, leafCharNew);\n\n    ///MAKE A ESTIMATED SCALES THING\n    let calculatedAtt = {\n        'awesomeness' : await loadData(d3.json, './public/data/anolis-awesomeness-res.json', 'continuous'),\n        'island' : await loadData(d3.json, './public/data/anolis-island-res.json', 'discrete'),\n        'SVL' : await loadData(d3.json, './public/data/anolis-svl-res.json', 'continuous'),\n        'ecomorph': await loadData(d3.json, './public/data/anolis-ecomorph-res.json', 'discrete'),\n        'PCIII_padwidth_vs_tail': await loadData(d3.json, './public/data/padwidth-vs-tail-res.json', 'continuous'),\n    }\n\n    console.log('pad v tail', calculatedAtt['PCIII_padwidth_vs_tail'])\n\n    ////CALCULATE THE SCALES FOR EACH ATTRIBUTE////////\n    let calculatedScales = calculateScales(calculatedAtt, colorKeeper);\n\n    ///MATCH LEAF CHARACTERS AND LABELS TO LEAVES///\n    let matchedLeaves = matchLeaves(labels, leaves, leafChar, calculatedScales);\n\n    //MATCH CALC ATTRIBUTES TO EDGES///\n    let matchedEdges = matchEdges(edges, edgeLen, calculatedAtt, calculatedScales);\n\n    ///CALCULATES PATHS FROM THE DATA////\n    let paths = allPaths(matchedEdges, matchedLeaves, \"V1\", \"V2\");\n \n    let normedPaths = normPaths(paths, calculatedAtt, calculatedScales);\n    dataMaster.push(normedPaths);\n   \n    toolbarControl(toolbarDiv, normedPaths, main, calculatedScales, 'edgeLength', 'paths');\n    \n    let filterDiv = wrap.select('#filter-tab').classed('hidden', true);\n\n    ////////TREE RENDER IN SIDEBAR////////\n    nestedData.push(buildTreeStructure(paths, edges));\n    renderTreeButtons(normedPaths, calculatedScales, sidebar, false);\n    let tree = renderTree(sidebar, false, null);\n    \n    /// LOWER ATTRIBUTE VISUALIZATION ///\n    initialViewLoad(calculatedScales, 'edgeLength');\n});\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n/*\nloadData(d3.json, './public/data/geospiza_with_attributes.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    //console.log('pa',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/geospiza_loop_all_asr_features.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('pa RICH',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/anolis_rich_ASR_pad_vs_tail.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('anolis RICH',pathArray);\n});*/\n\n\n\n\n"],"sourceRoot":""}