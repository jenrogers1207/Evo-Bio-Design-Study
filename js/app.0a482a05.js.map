{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/multinetLoad.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/buttonComponents.js","webpack:///./src/scripts/renderPathView.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/cladeMaker.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/pairView.js","webpack:///./src/scripts/viewControl.js","webpack:///./src/scripts/compare.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","api","multinetApi","getGraphNames","workspace","graphs","allPaths","edgeArray","leafArray","source","target","map","le","getPath","leaf","pathKeeper","path","filter","ed","reverse","pullPath","pathArray","nodes","arrayOfArray","nameArray","depth","forEach","node","childArray","id","undefined","children","assign","flag","selectedPaths","comparisonKeeper","pathSelected","selectedPath","otherPaths","scales","selectedDiv","d3","main","selectAll","remove","style","drawPathsAndAttributes","commonNodes","pathData","selectedSpecies","flatMap","f","treeNodes","select","indexOf","classed","attrHide","filterMaster","type","attribute","attrFilter","sc","field","selectedToolTest","selectedTool","empty","append","sortByDistanceDiv","text","sortByDistanceButton","on","sortButton","attrKeys","attrSortWrap","radioDiv","join","radio","attr","svgTest","svg","branchFrequency","row","reduce","acc","curr","selectWrap","circleScale","range","domain","values","selectedGroups","addRemoveBubble","treeNode","treeLinks","this","string","label","charAt","toUpperCase","timelines","nodeGroups","x","edgeMove","hovers","nearest","attributeWrapper","attData","formatAttributeData","attributeGroups","renderAttributes","keys","attributes","drawContAtt","drawDiscreteAtt","sorted","sort","a","b","realVal","paths","high","highLeaves","low","lowLeaves","commonNodeStart","maxBranch","thresh","max","chil","parentBase","move","base","scaledParentMove","parentScale","xScale","level","getCommonNodes","pathBars","childNodeWrap","childNodes","curve","y","line","species","commonHover","concat","renderSelectedTopology","attWrap","ch","mappedDis","att","offset","index","last","dis","spec","states","winState","color","maxP","v","notMax","other","findMaxState","attGroups","wrapRect","speciesGrp","lineGenD","attributeHeight","lineGenC","yScale","branchGrpDis","sp","bCirc","otherCirc","tool","transition","duration","html","state","pageX","pageY","ticks","branchGrpCon","MeanRect","scale","min","confiBars","lowerCI95","upperCI95","dataMaster","renderDistibutions","renderSelectedView","commonNode","chosenPath","test","distance","pathIndex","console","error","sortOtherPaths","group","pathRemove","renderComparison","buttonGroupTest","buttonGroup","usedColors","groupColor","newColor","colorKeeper","find","compareButtonTest","compareButton","comparisonCombined","newAtt","com","atts","added","standard","variance","first","second","button","filteredComp","selectedTest","attWraps","normBins","Array","fill","internalNodes","leafNodes","bins","edges","top","mean","e","Math","sqrt","meanStandard","sigma2","upCon95","lowCon95","leaves","exit","attWrapsEnter","enter","merge","innerWrap","lineGen","pathGroups","missing","areaG","y0","y1","confGroups","conf","NaN","axisGroupTest","axisGroup","maxDiff","newScale","startBins","difArray","diffs","abs","clamp","diff","obsDistWrap","histogram","thresholds","newLeaves","xAxis","each","distGroups","groupLength","dropDown","div","optionArray","dropText","dropId","dropdiv","dropContent","options","raise","dimensions","rectWidth","rectHeight","collapsedHeight","getScales","nodeTooltipFlag","collapsed","pathWrapTest","pathWrap","pathAdd","notIt","maxTimeKeeper","combLength","nodeFilter","getLatestData","renderPaths","shownAttributes","checked","predictedAttrGrps","attribWrap","attrMove","selectedState","filterType","addFilterTag","addFilter","attributeType","updateMainView","nodeList","leafStateFilter","attrLabel","innerTimeline","step","change","height","innerPaths","continuousAtt","continuousPaths","attributeNodesCont","innerBars","rangeRect","colorScale","satScale","drawGroups","stateBins","splitOnArray","newBins","newBinData","scaleName","newData","pa","firstGroupSvg","firstGroup","secondGroup","g","newM","branchBar","drawBranchPointDistribution","groupLabels","stateLabel","innerGroup","innerWrapRect","wrappers","shiftWraps","xAxisShift","shiftCircles","leafWraps","totalVal","totalMean","newVal","groupMean","distcircles","dotVals","w","groupBy","totalArray","leafWrapsD","rects","groupedData","d3Array","width","ratio","drawLeaves","bars","discreteAtt","innerTimelineDis","statePath","disct","attributeNodesDisc","stateDots","endStateDot","stateBars","probability","chosenIn","valueAdd","toolbarDataControl","toolbar","graphList","chosenGraph","dataDrop","sidebar","toolbarButtonWrap","loadApp","clearMain","loader","changeDropValue","chosenCladesGroup","groups","display","document","getElementById","toolbarControl","calculatedScales","viewArray","dropUpdated","filterButton","log","filterDiv","normedPaths","moveMetric","selectWrapper","attButton","stateChange","attProps","selectedOption","optKeys","button1","button2","submit","fromState","classList","toState","discreteFilter","filterOb","continRanges","ranges","brushBars","xBrush","extent","selection","handle","invert","brushGroup","selections","_groups","__brush","predictedFilter","observedFilter","lastFilter","continuousFilter","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","queryFilter","toggleFilters","scrunchButton","toggleScrunch","discreteViewButton","discretePredictedGroups","dropOptions","no","attributeOptions","checkedAttributes","attoptions","cladeOptions","cladeKeeper","dropdivClade","buttonClade","dropContentClade","updateCladeDrop","li","names","binGroups","calculatedScalesKeeper","renderDistStructure","dropUl","cladesGroupKeeper","growSidebarRenderTree","attrDraw","cladeBool","traitColorDropDown","renderTreeButtons","renderTree","margin","right","bottom","left","lengthHeight","addingEdgeLength","nestedData","treenodes","root","size","treeSvg","updateCladeTree","assignPosition","array","stepDown","child","findDepth","link","descendants","combEdge","position","parent","notleaves","stateColors","includes","branchNodes","branchPoint","triangle","clade","uncollapseSub","collapseSub","lengthBool","renderCladeTree","nodeData","findCommonNode","path1","path2","className","common","subtreeFinder","nodeNames","labelTree","wrap","textInput","addClade","addCladeGroup","clades","buildTreeStructure","getNested","String","V1","renderCallback","reduce2DropArray","startArray","buttonWrap","phenoOptions","phenogramButton","drop","updateRanking","pairPaths","cladeButton","_children","positionArray","edge","edgeLength","uncollapse","pheno","treemap","groupedBool","sidebarTest","gTest","updateTree","treeData","getLeaves","ids","Set","Clade","from","collapseTree","branchCount","yAxis","pairs","weights","attKeys","p1","mappedPairs","drawSorted","top20","topPairSearch","weightScales","deltaMax","deltas","closeMax","closeAll","distMax","delta","close","getWeightScales","pickedPairs","newP","closeness","deltaRank","closenessRank","distanceRank","totalRank","brushes","brushData","pairColor","pairWraps","p2","scoreWrap","scoreGroups","score","scoreLabel","zero","pairGroupN","species1","species2","neighbors","start","speciesTest","speciesNames","labeledN","spec1N","spec2N","closest1","closest2","branchesN","pairGroup","branches","xAxisG","neighNodes","mouseG","mousePerLine","parentNode","dat","mouse","xDate","bisect","getElementsByClassName","beginning","end","getTotalLength","floor","pos","getPointAtLength","toFixed","topPairs","allPairs","matchKeeper","newPair","check","rankBins","axisLabels","bin","binRects","minMax","rankHistogram","view","disabled","rankDiv","defaultW","weightPicker","slider","slide","default","displayValue","num","rankingControl","generatePairs","removeFilter","filterId","dataFilters","filterIndex","testData","fun","filterFunction","newTestData","newFilterMaster","attType","filFunction","oldData","extra","ex","filterToolbar","formater","datum","nodeId","selectedNode","predicted","observed","numb","filterPred","st","filterObs","win","selectorDiv","selectId","dropDownWrapper","compareColors","light","dark","renderDistributionComparison","branchScale","divWrap","groupHeader","textDiv","branchPointSvg","groupBins","pointGroups","selectedClades","selectedNodes","testNodes","testLinks","pathsListOne","pathsListTwo","testNodesOne","testLinksOne","testNodesTwo","testLinksTwo","mapBins","combined","groupKey","leafData","stateKeys","binnedWrap","selected","sum","squareDim","predictedWrap","rootData","contRoot","newy","defaultBarColor","disRoot","rootStateGroups","maxVal","branchGroup","timeRange","discreteDist","discreteStateGroups","k","newOb","stateKey","discreteWidth","cladeStateGroups","probabilityTicks","jitterMove","arr","average","continDist","list","continBinGroups","maxCount","distrib","mirrorlineGen","gindex","brush","maxCounts","classLabel","brushedVal","otherBins","descendBins","groupDis","histo","continuousHistogram","oNode","oHisto","oDist","nodesFlat","notNodes","brushedNodes","selectedBranch","secondGrp","doesItExist","groupLabel","brushColors","classy","colorBool","observedWrap","predictedWidth","contOb","contBars","observedWidth","movex","xvalues","discOb","discBars","dRects","offSet","movey","xPoint","padding","newNormed","keysToHide","rootNodes","nodeSet","sortedBins","mapNorm","fData","attrib","binI","leafAttr","nodeArray","count","maxO","minO","xO","histogramO","rootNode","colors","entries","h","x1","x0","binWrap","nodeLengthArray","nodeDuplicateCheck","bPointScale","eMove","binsRects","axis","axGroup","drawGroupLabels","leafNames","fl","cladeLabel","mainDiv","compareTooltipFlag","filteredAttributes","stateBarsPredicted","random","newstate","maxBin","maxState","winStates","renderDiscretePredicted","highlightNodesMouseover","renderContinuousPredicted","brushedDist","otherDist","testH","notNodeNames","notNodeSelectedBranch","notTest","testtest","notTestTest","notNodeSecondGrp","loadData","readFunction","fileString","pair","verts","lastNode","p1Index","p2Index","binCount","binStep","one","two","valdiffs","calculateDelta","leaf1","leaf2","calculateCloseness","calculateNewScales","keyList","scaleCat","rootAttribute","calculatedAtt","rootAtt","combineLength","maxTime","filterArray","speciesLabel","catColor","savedSelected","attributeList","discreteTraitList","toolbarDiv","toolbarDataWrap","graphName","dataLoadAndFormat","then","centData","edgeFile","edgeLengthFile","leafCharFile","resFile","dataName","unique","self","leafChar","edgeLen","char","columns","rows","From","edgeSource","To","newRow","nodeLabels","matchedEdges","V2","calcLeafAtt","matchedLeaves","all","addedRoot","chosenClade","appLaunch"],"mappings":"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","file":"js/app.0a482a05.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([200,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { multinetApi } from \"multinet\";\n\n/* Multinet data importer */\n// Define local variables that will store the api url and the responses from the database\nconst api_root = \"https://multinet.app/api\";\n\nclass Multinet {\n    constructor(){\n        this.tables = {},\n        this.nodes = [],\n        this.links = [],\n        this.graph_structure = {},\n        this.api_root = api_root\n    }\n}\n\nconst api = multinetApi(api_root);\n\nexport async function getGraphNames(workspace){\n    return await api.graphs(workspace);\n}\n\nexport async function load_data(workspace, graph) {\n\n    let multinetOb = new Multinet();\n\n    // Fetch the names of all the node and edge tables \n    await load_tables(workspace, graph, multinetOb);\n\n    // Loop through each node tables and fetch the nodes to global variables\n    for (let node_table of multinetOb.tables.nodeTables) {\n        await load_nodes(workspace, node_table, multinetOb);\n    };\n\n    // Load the edge table (ONLY ONE BECAUSE OF ARANGO API LIMITATIONS) to a global variable\n    let edge_table = multinetOb.tables.edgeTable;\n    await load_links(workspace, edge_table, multinetOb);\n\n    // Set the graph structure\n    multinetOb.graph_structure = { \"nodes\": rename_node_vars(multinetOb.nodes), \"links\": rename_link_vars(multinetOb.links) }\n   \n    return JSON.parse(JSON.stringify(multinetOb.graph_structure))\n};\n\nasync function load_tables(workspace, graph, multinetOb) {\n    multinetOb.tables = await api.graph(workspace, graph);\n};\n\nasync function load_nodes(workspace, node_table, multinetOb) {\n    const table = await api.table(workspace, node_table, {\n      limit: 1000,\n    });\n    multinetOb.nodes = [].concat(multinetOb.nodes, table);\n};\n\nasync function load_links(workspace, edge_table, multinetOb) {\n    const table = await api.table(workspace, edge_table, {\n      limit: 1000,\n    });\n    multinetOb.links = [].concat(multinetOb.links, table)\n};\n\nfunction rename_link_vars(links) {\n    for (let row of links) {\n        row.id = row._id;\n        row.source = row._from;\n        row.target = row._to;\n\n        delete row._id;\n        delete row._from;\n        delete row._to;\n    };\n\n    return links;\n}\n\nfunction rename_node_vars(nodes) {\n    for (let row of nodes) {\n        row.id = row._id;\n\n        delete row._id;\n    };\n\n    return nodes;\n}\n","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n\nexport function getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function calculateMovingAverage(data, i) {\n\n    if (movingAverage === 0) {\n        return data[i][yValue];\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        sum += x;\n    }\n\n    return sum / count;\n};\n\nexport function calculateMovingStandardDeviation(data, i, avg) {\n\n    if (movingAverage === 0) {\n        return 0;\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        var dx = x - avg;\n        sum += (dx * dx);\n    }\n\n    var variance = sum / count;\n    return Math.sqrt(variance);\n};\n\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    \n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    \n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n\n\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n       // node.edgeLength = node.edge_data.weight;\n        if(notEmpty(node.children)){\n            pathArray.push(Object.assign({}, node));\n            pullPath([...pathArray], [...node.children], arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, Object.assign({},node)]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import * as d3 from \"d3\";\nimport { branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes } from './renderPathView';\nimport { formatAttributeData } from './dataFormat';\nimport { filterMaster } from './filterComponent';\nimport { dataMaster, collapsed, colorKeeper } from './index';\nimport { renderDistibutions } from \"./distributionView\";\n\nexport let selectedPaths = [];\nexport let comparisonKeeper = [];\n\nexport function pathSelected(selectedPath, otherPaths, scales) {\n\n    let selectedDiv = d3.select('div#selected');\n    let main = d3.select('div#main');\n    if (selectedPath === null) {\n\n        selectedPaths = [];\n\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, false);\n\n    } else {\n      \n        selectedPaths = selectedPaths.concat(selectedPath);\n        let commonNodes = renderSelectedView([...selectedPaths], [...otherPaths], selectedDiv, scales);\n        let sortedPaths = sortOtherPaths([...selectedPaths], [...otherPaths], [...commonNodes]);\n        \n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let pathGroups = drawPathsAndAttributes(sortedPaths.map(s => s.data), main, scales, false);\n\n        main.style('padding-top', '250px');\n    }\n}\nfunction getCommonNodes(paths){\n    let maxBranch = d3.max(paths.map(p => p.length));\n    let longestBranch = paths.filter(path => path.length === maxBranch)[0];\n    let startBranch = longestBranch.filter(f=> f.leaf != true);\n    let commonNodeStart = startBranch;\n    //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n    paths.map(path => {\n        commonNodeStart = [...path].filter(f => {\n            return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n    });\n\n    let children = paths.map(path => {\n        path = (path[0].leaf === true) ? path.reverse() : path;\n        let nodeIndex = path.map(p => p.node);\n        let thresh = nodeIndex.indexOf(commonNodeStart[commonNodeStart.length - 1].node);\n        let subset = path.filter((f, i) => i > thresh);\n        return subset;\n    });\n\n    commonNodeStart[commonNodeStart.length - 1].children = children.map((path, i) => {\n        let max = d3.max(path.map(p => p.edgeMove)) - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n        return path.map((chil, j, n) => {\n            chil.parentBase = commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.move = chil.edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.base = (j === 0) ? 0 : n[j - 1].edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            let parentScale = d3.scaleLinear().domain([0, 1]).range([0, 1000])\n            let scaledParentMove = parentScale(commonNodeStart[commonNodeStart.length - 1].edgeMove);\n            chil.xScale = d3.scaleLinear().domain([0, max]).range([0, (1000 - scaledParentMove)]);\n            chil.level = i;\n            return chil;\n        });\n    });\n\n    return commonNodeStart;\n}\nexport function sortOtherPaths(pathData, otherPaths, commonNode) {\n\n    if(pathData.length > 1){\n\n        if(commonNode != null){\n\n            let chosenPath = commonNode.reverse().map(m => m.node);\n            let rankedPaths = otherPaths.map(path => {\n                let step = 0;\n                let test = path.reverse().map((node, i) => {\n                    if (chosenPath.indexOf(node.node));\n                    return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n                }).filter(f => f.indexOf > -1);\n                let distance = (test[0].indexOf + test[0].pathIndex);\n                return { 'data': path.reverse(), 'distance': distance };\n            });\n            let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        \n            return sortedData;\n        }\n        console.error('multiple paths without common node');\n    }else{\n\n        let chosenPath = pathData[0].reverse().map(m => m.node);\n    \n        let rankedPaths = otherPaths.map(path => {\n            let step = 0;\n            let test = path.reverse().map((node, i) => {\n                if (chosenPath.indexOf(node.node));\n                return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n            }).filter(f => f.indexOf > -1);\n            let distance = (test[0].indexOf + test[0].pathIndex);\n            return { 'data': path.reverse(), 'distance': distance };\n        });\n        let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        return sortedData;\n    }\n\n}\nfunction renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency){\n\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', 'translate(0, 20)')\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data([commonNodeStart]).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n        pathBars.attr('height', (35 + (25 * commonNodeStart[commonNodeStart.length - 1].children.length)));\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(145, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', (d, i) => {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n                return x(d[d.length - 1].edgeMove)\n            })\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        nodeGroups.classed('common-node', true);\n\n        let childNodeWrap = nodeGroups.filter(c => c.children != undefined).selectAll('g.child').data(d => d.children).join('g').classed('child', true);\n\n        let childNodes = childNodeWrap.selectAll('g.node').data(d => d).join('g').classed('node', true)\n        childNodes.attr('transform', (d, i, n) => {\n            return 'translate(' + d.xScale(d.move) + ', ' + (d.level * 20) + ')';\n        });\n\n        childNodeWrap.append('path').attr('d', (d, i, n) => {\n            let pathArray = [{ 'x': 0, 'y': 0 }, { 'x': 0, 'y': i }];\n            d.map(m => {\n                pathArray.push({ 'x': m.xScale(m.move), 'y': m.level })\n            });\n            let line = d3.line()\n                .curve(d3.curveMonotoneY)\n                .x(function(d) {\n                    return d.x;\n                })\n                .y(d => (d.y * 20))\n            return line(pathArray);\n        }).attr('stoke-width', '2px').attr('fill', 'none').attr('stroke', 'gray');\n\n        childNodeWrap.on('mouseover', (d, i)=> {\n            let specArray = d.map(m=> m.species);\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let commonHover = [...commonNodeStart].map(c=> c.node).concat(d.map(n=> n.node));\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            treeLinks.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', (d, i)=> {\n            d3.selectAll('.hover').classed('hover', false);\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        let childCirc = childNodes.append('circle').attr('r', 7).attr('fill', 'red').attr('y', 5);\n\n        childCirc.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        childNodes.filter(f => f.leaf === true).append('text').text(d => d.label).attr('x', 9).attr('y', 4);\n        //selectWrap.attr('transform', 'translate('+(50+(20 *commonNodeStart[commonNodeStart.length - 1].children.length))+')')\n       \n\n}\nexport function addRemoveBubble(group, scales){\n\n    let pathRemove = group.append('g').classed('x-icon', true);\n    pathRemove.attr('transform', 'translate(15, 10)');\n    pathRemove.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathRemove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n    pathRemove.style('cursor', 'pointer');\n    pathRemove.on('click', (d, i, n) => {\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        pathSelected(null, dataMaster[0], scales);\n    });\n\n}\nexport function renderComparison(group, otherPaths, selectedDiv, scales){\n \n    let buttonGroupTest = selectedDiv.select('.button-wrap');\n    let buttonGroup = buttonGroupTest.empty() ? selectedDiv.append('div').classed('button-wrap', true) : buttonGroupTest;\n\n\n    \n    buttonGroup.style('display','inline-block').style('width', '900px').style('height', '50px');\n    let main = d3.select('div#main');\n    main.style('padding-top', '300px');\n\n    if(group != null){\n        let usedColors = comparisonKeeper.map(m=> m.groupColor);\n        let newColor = colorKeeper.find(c => usedColors.indexOf(c[0]) === -1);\n        group.groupColor = newColor[0];\n        comparisonKeeper.push(group);\n    }\n\n    if(comparisonKeeper.length > 1){\n        let compareButtonTest = d3.select('#toolbar').select('#compare-button');\n        let compareButton = compareButtonTest.empty() ? d3.select('#toolbar').append('button').text('Normal Mode').attr('id', 'compare-button').classed('btn btn-info', true) : compareButtonTest;\n        compareButton.on('click', ()=> {\n            compareButton.text() === \"Normal Mode\" ? compareButton.text('Compare Mode') : compareButton.text('Normal Mode');\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        });\n    }\n\n    let comparisonCombined = scales.map((sc, i)=> {\n        let newAtt = {'field': sc.field, 'type': sc.type, 'data': []}\n        comparisonKeeper.map((com, i)=> {\n            let atts = formatAttributeData(com.data, scales, [sc.field]);\n           \n            let added = atts.flatMap(att=> {\n                return att.map(a => {\n                    return a.map(m=> {\n                        let standard = m.leaf === true ? 0 : (m.upperCI95 - m.realVal) / 2;\n                        m.variance = standard * standard;\n                        return m;\n                    });\n                })\n            })\n\n            newAtt.data.push({'group': {'first': com.first, 'second': com.second, 'color': com.groupColor}, 'data': sc.type === 'continuous' ? added : atts.flatMap(a=> a)});\n        })\n        return newAtt;\n    });\n\n    let button = buttonGroup.selectAll('button').data(comparisonKeeper).join('button').classed('btn btn-info', true).style('background', d=> d.groupColor);\n    button.selectAll('span').data(t=> [t]).join('span').text(t=> {\n        return t.first ? `${t.first[1]} / ${t.second[1]}` : t.state;\n    }).append('span').text(t=> t.data.length).classed(\"badge badge-light\", true)\n    \n    let xOut = button.selectAll('i').data(d=> [d]).join('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    xOut.on('click', (d, i)=> {\n        let filteredComp = comparisonKeeper.filter(f=> f.groupColor != d.groupColor);\n        comparisonKeeper = filteredComp;\n        if(comparisonKeeper.length > 0){\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        }else{\n            selectedDiv.selectAll('*').remove();\n            selectedDiv.style('height', '0px');\n            main.style('padding-top', '0px');\n        }\n    });\n\n    let selectedTest = selectedDiv.select('.comparison-svg');\n    let selectedTool = selectedTest.empty() ? selectedDiv.append('svg').classed('comparison-svg', true) : selectedTest;\n    selectedDiv.style('height', '300px').style('width', '100%');\n    selectedTool.style('height', '300px');\n\n    let attWraps = selectedTool.selectAll('.att-wrapper').data(comparisonCombined.filter(f=> f.type === 'continuous').map((com)=>{\n       \n        let max = d3.max(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.upperCI95)))) + .2;\n        let min = d3.min(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.lowerCI95)))) - .2;\n        \n        com.data.map(c=> {\n            let binLength = 6;\n            //let max = scales.filter(f=> f.field === com.field)[0].max;\n           // let min = scales.filter(f=> f.field === com.field)[0].min;\n            let normBins = new Array(binLength).fill().map((m, i)=> {\n                let step = 1 / binLength;\n                let base = (i * step);\n                let top = ((i+ 1)* step);\n                return {'base': base, 'top': top, 'binI': i, 'max': max, 'min':min }\n            });\n\n            let internalNodes = c.data.map(path => path.filter(node=> node.leaf != true));\n            let leafNodes = c.data.flatMap(path => path.filter(node=> node.leaf === true));\n\n            c.bins = normBins.map((n, i, nodes)=> {\n                let edges = internalNodes.flatMap(path => path.filter(node=> {\n                    return node.edgeMove >= n.base && node.edgeMove <= n.top;\n                } ));\n                n.data = edges;\n                let mean = d3.mean(edges.map(e=> e.realVal));\n                n.mean = mean === undefined ? normBins[i-1].mean : mean;\n                let standard = Math.sqrt(d3.mean(edges.map(e=> e.variance)));\n                n.meanStandard = edges.length === 0 ? 0 : standard;\n                let sigma2 = standard * 2;\n                n.upCon95 = mean === undefined ? normBins[i-1].upCon95 : mean + sigma2;\n                n.lowCon95 = mean === undefined ? normBins[i-1].lowCon95 : mean - sigma2;\n                return n;\n            });\n            c.leaves = leafNodes;\n           \n            return c;\n        })\n        \n        return com;\n    }));\n    attWraps.exit().remove();\n    let attWrapsEnter = attWraps.enter().append('g').classed('att-wrapper', true);\n\n    let attLabels = attWrapsEnter.append('text').text(d=> d.field).style('text-anchor', 'end')\n                    .style('font-size', '11px').attr('transform', 'translate(120, 35)');\n\n    attWraps = attWrapsEnter.merge(attWraps);\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+(10+(i * 70))+')');\n\n    let innerWrap = attWraps.selectAll('g.inner-group').data(d=> [d]).join('g').classed('inner-group', true);\n    innerWrap.attr('transform', 'translate(150, 0)');\n    let wrapRect = innerWrap.selectAll('rect.outline-rect').data(d=> [d]).join('rect').classed('outline-rect', true)\n                    .attr('width', 800).attr('height', 60).attr('fill', '#fff').attr('stroke', 'gray');\n    \n    if(d3.select('#compare-button').empty() || d3.select('#compare-button').text() === \"Normal Mode\"){\n            let lineGen = d3.line()\n            .x((d, i)=> {\n                let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n                return x(i);\n            })\n            .y(d=> {\n            let y = d3.scaleLinear().domain([d.min, d.max])\n                y.range([60, 1]);\n                return y(d.mean);\n    });\n\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> d.data).join('g').classed('path-groups', true);\n    pathGroups.selectAll('*').remove();\n    let paths = pathGroups.append('path').attr('d', d=> { \n        let scale = d.bins[0].data[0].yScale\n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.mean === undefined){\n                b.mean = d.bins[i-1].mean;\n                d.missing = true;\n            }\n           \n            b.yScale = d3.scaleLinear().domain([b.min, b.max]).range([60, 1])\n            return b;\n        });\n        return lineGen(d.bins);\n    }).classed('path', true);\n\n    var areaG = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i)=> {\n        let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n        return x(i);\n    })\n    .y0(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.lowCon95);\n    })\n    .y1(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.upCon95); \n    });\n\n    let confGroups = innerWrap.selectAll('g.conf-groups').data(d=> d.data).join('g').classed('conf-groups', true);\n    confGroups.selectAll('*').remove();\n    let conf = confGroups.append('path').attr('d', d=> { \n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.upCon95 === NaN){\n                b.upCon95 = d.bins[i-1].upCon95;\n                d.missing = true;\n            }\n            if(b.lowCon95 === NaN){\n                b.lowCon95 = d.bins[i-1].lowCon95;\n                d.missing = true;\n            }\n\n            return b;\n        });\n        return areaG(d.bins);\n    }).classed('path', true);\n\n    paths.style('fill', 'none');\n    paths.style('stroke', d=> d.group.color);\n    paths.style('stroke-width', '2px');\n\n    conf.style('fill', d=> d.group.color);\n    conf.style('opacity', 0.15);\n\n    let yAxisG = innerWrap.append('g').classed('y-axis', true);\n\n    innerWrap.on('mousemove', function(d, i) {\n     \n        let scale = d3.scaleLinear().domain([d.data[0].bins[0].min, d.data[0].bins[0].max]).range([1, 60]);\n        let axisGroupTest = d3.select(this).select('.y-axis');\n        let axisGroup = axisGroupTest.empty() ? d3.select(this).append('g').classed('y-axis', true) : axisGroupTest;\n        \n        if(d3.select('#compare-button').empty() || d3.select('#compare-button').text()==='Normal Mode'){\n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)')\n            axisGroup.call(d3.axisLeft(scale).ticks(5));\n        }else{\n            let pathD = d3.select(this).select('.path-groups').selectAll('path');\n            let maxDiff = pathD.data().map(d=> d[0].maxDiff)[0];\n            \n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)');\n            let newScale = d3.scaleLinear().domain([maxDiff, 0]).range([0, 60]);\n            axisGroup.call(d3.axisLeft(newScale).ticks(5));\n        }\n\n    \n    }).on('mouseleave', function(){\n        let axisGroup = d3.select(this).select('.y-axis');\n        axisGroup.remove();\n    });\n    \n}else{\n\n    innerWrap.selectAll('.path-groups').remove();\n    innerWrap.selectAll('g.conf-groups').remove();\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> {\n        let startBins = d.data[0].bins;\n        let difArray = [];\n        for(let i = 1; i < d.data.length; i ++){\n            let diffs = []\n            d.data[i].bins.map((b, j)=>{\n                if(b.mean === undefined){\n                    b.mean = d.data[i].bins[j-1].mean;\n                }\n                if(startBins[j].mean === undefined){\n                    startBins[j].mean = startBins[j-1].mean;\n                }\n                let maxDiff = d.data[0].bins[0].max - d.data[0].bins[0].min;\n                diffs.push({'diff':Math.abs(startBins[j].mean - b.mean), 'maxDiff': maxDiff});\n            });\n            difArray.push(diffs);\n        }\n        return difArray;\n    }).join('g').classed('path-groups', true);\n\n    let lineGen = d3.line()\n        .x((d, i)=> {\n            let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n            return x(i);\n        })\n        .y(d=> {\n            let y = d3.scaleLinear().domain([0, d.maxDiff]).clamp(true);\n            y.range([60, 0]);\n            return y(d.diff);\n        });\n\n    let paths = pathGroups.append('path').attr('d', d=> { \n        return lineGen(d);\n    });\n\n    paths.style('fill', 'none');\n    paths.style('stroke', 'black');\n    paths.style('stroke-width', '2px');\n}\n\n/////////////////////////\nlet obsDistWrap = attWraps.selectAll('.observed-dist-wrap').data(d=> {\n  \n        let max = d3.max(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n        let min = d3.min(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n\n        let x = d3.scaleLinear().domain([min, max]).range([0, 200]);\n    \n        let histogram = d3.histogram()\n        .value(function(d) { return d.realVal; })  \n        .domain(x.domain())  \n        .thresholds(x.ticks(10)); \n        \n        let leafData = d.data.map(m=> {\n            let newLeaves = [...m.leaves].map(leaf => {\n                leaf.x = x;\n                leaf.group = m.group;\n                return leaf;\n            });\n            return {'binData':histogram(m.leaves), 'data': newLeaves, 'group': m.group, 'xScale': x};\n        });\n        return [{'data':leafData, 'xScale': x}];\n    }).join('g').classed('observed-dist-wrap', true);\n\n    obsDistWrap.attr('transform', 'translate(970, 0)');\n  \n    let xAxis = obsDistWrap.selectAll('g.axis-x').data(d=> [d]).join('g').classed('axis-x', true);\n    xAxis.attr('transform', 'translate(0, 50)')\n    xAxis.each((d, i, nodes)=> {\n        d3.select(nodes[i]).call(d3.axisBottom(d.xScale).ticks(5))\n    });\n\n    let distGroups = obsDistWrap.selectAll('.observed-group').data(d=> {\n        return d.data.map((m, i, n)=> {\n            m.index = i;\n            m.groupLength = n.length;\n            return m;\n        });\n    }).join('g').classed('observed-group', true);\n\n    let lines = distGroups.selectAll('.line').data(d => {\n            let mean = d3.mean(d.data.map(r=> r.realVal))\n            let vals = {'mean': mean, 'group':d.group, 'x':d.xScale}\n            return [vals];\n    }).join('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.mean)-1.5)+',0)')\n    .attr('height', 50).attr('width', 3).attr('fill', d=> d.group.color).style('opacity', '0.4')\n\n    let circWrap = distGroups.selectAll('.circ-wrap').data((d, i)=> [d]).join('g').classed('circ-wrap', true).attr('transform', (d, i, n)=> {\n        let move = d3.scaleLinear().domain([0, d.groupLength]).range([0, 60]);\n        return 'translate(0,'+(move(d.index+0.5))+')'});\n\n    let distCirc = circWrap.selectAll('circle.disDots').data(d=> d.data).join('circle').attr('r', 3)\n    .attr('cx', (d, i) => {\n        return d.x(d.realVal);\n    }).attr('cy', (d, i, n)=> {\n        return 0;\n    }).attr('fill', d=> d.group.color);\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales) {\n\n    let attributeHeight = 50;\n\n    let selectedSpecies = pathData.flatMap(p => p.filter(f => f.leaf === true).map(n => n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node => selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n    ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f => f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f => f.type === 'hide-attribute').map(m => m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc => {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m => m.field) : null;\n\n    ////IF THE SELECTED DIV IS THERE ALREADY USE THAT/////\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    ///////////////////////\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', () => sortPaths(sortByDistanceButton));\n\n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m => m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n    let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n    let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d => d).attr('id', (d, i) => 'radio-' + i).classed(\"form-check-input\", true);\n    radioDiv.append('label').text(d => d).property('for', (d, i) => 'radio-' + i).classed(\"form-check-label\", true);\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty() ? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    svg.selectAll('*').remove();\n\n    let branchFrequency = pathData.flatMap(row => row.flatMap(f => f.node)).reduce(function(acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n            acc[curr] = 1;\n        } else {\n            acc[curr] += 1;\n        }\n        return acc;\n    }, {});\n\n    ///RENDERING SELECTED PATHS////\n    if (pathData.length === 1) {\n\n        /////////////////////////////////////////////////\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', (d, i) => 'translate(0,20)');\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        selectedGroups.on('mouseover', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => {\n                return d.map(m => m.node).indexOf(f.data.node) > -1;\n            }).classed('hover', true);\n            treeLinks.filter(f => d.map(m => m.node).indexOf(f.data.node) > -1).classed('hover', true);\n            return d3.select(this).classed('hover', true);\n        }).on('mouseout', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n            let treeLinks = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n            return d3.select(this).classed('hover', false);\n        });\n\n        let speciesTitle = selectedGroups.append('text').text(d => {\n            let string = d.filter(f => f.leaf === true)[0].label;\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        });\n\n        speciesTitle.attr('x', 25).attr('y', 15);\n\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(150, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', 1000)\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        circle.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        let speciesNodeLabel = nodeGroups.filter(f => f.label != undefined).append('text').text(d => {\n            let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n            return string;\n        }).attr('x', 10).attr('y', 5);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(0,' + (i * 60) + ')');\n\n        let nodes = selectedGroups.select('.time-line').selectAll('.node');\n        nodes.on('mouseover', (d, i) => {\n\n            let nearest = otherPaths.filter(path => {\n                let nodearray = path.flatMap(f => f.node);\n                return nodearray.indexOf(d.node) > -1;\n            });\n\n            let nearestA = nearest[0];\n            let nearestB = nearest[1];\n           \n        });\n\n        //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(10,' + (i * ((attributeHeight + 5) * (Object.keys(d[1].attributes).length + 1))) + ')');\n\n        drawContAtt(attributeGroups);\n        drawDiscreteAtt(attributeGroups, scales, false, false);\n\n        //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attributeWrapper.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n      \n        return pathData;\n\n    } else if(pathData.length > 1 && pathData.length < 5) {\n       \n        let commonNodeStart = getCommonNodes(pathData);\n        renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency);\n\n        /////END PATH RENDER///////\n        let attWrap = svg.append('g').classed('attribute-wrapper', true);\n        let attributeData = commonNodeStart[commonNodeStart.length - 1].children.map(ch => {\n            return [...commonNodeStart].concat(ch);\n        });\n\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attDataComb = attData[0].map((att, i)=> {\n            let species = pathData[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < attData.length; index++ ){\n                let species = pathData[index].filter(f=> f.leaf === true)[0].label;\n                let last = attData[index][i].length - 1\n                attData[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': attData[index][i]})\n            }\n            return attribute;\n        });\n\n        function findMaxState(states, offset){\n            let maxP = d3.max(states.map(v=> v.realVal));\n            let notMax = states.filter(f=> f.realVal != maxP);\n            let winState = states[states.map(m=> m.realVal).indexOf(maxP)]\n            winState.other = notMax;\n            winState.offset = offset;\n    \n            return winState;\n        }\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n\n       let attGroups = attWrap.selectAll('g').data(mappedDis).join('g').classed('attr', true);\n       attGroups.attr('transform', (d, i) => 'translate(145,' + (i * (attributeHeight + 10)) + ')');\n\n       attGroups.append('text')\n        .text(d=> d.label)\n        .style('text-anchor', 'end')\n        .style('font-size', 11)\n        .attr('transform', 'translate(0,'+(attributeHeight/2)+')');\n\n       let wrapRect = attGroups.append('rect').attr('width', 1010);\n       wrapRect.attr('height', attributeHeight);\n       wrapRect.style('fill', '#fff');\n       wrapRect.style('stroke', 'gray');\n       wrapRect.style('opacity', 0.5);\n\n       attGroups.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n     \n       let speciesGrp = attGroups.selectAll('g').data(d=> {\n            d.data = d.data.map(m=> {\n                m.type = d.type;\n                return m;\n            });\n            return d.data;\n        }).join('g').classed('species', true);\n\n       let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n           return y(d.realVal) + d.offset;\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([attributeHeight-2, 1]);\n           return y(d.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n           d3.select(n[i]).classed('selected', true);\n       }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).classed('selected', false);\n       });\n\n       let disGroup = speciesGrp.filter(sp=> {\n        return sp.type === 'discrete';\n        });\n\n       let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n       branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        });\n\n        let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 5, 2]);\n            return y(d.realVal) + d.offset;\n        }).attr('cx', 5);\n\n        bCirc.attr('fill', (d, i)=> d.color);\n\n        let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n        otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n                return y(c.realVal);\n            }).attr('fill', (c)=> c.color).style('opacity', 0.1);\n\n        otherCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n\n        bCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n        \n        /////AXIS ON HOVER////\n        branchGrpDis.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let conGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'continuous';\n        });\n\n        let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n        branchGrpCon.attr('transform', (d)=> {\n         let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n             let distance = x(d.edgeMove);\n             return 'translate('+distance+', 0)';\n         });\n\n         /////AXIS ON HOVER////\n        branchGrpCon.on('mouseover', (d, i, n)=> {\n            let y = d.yScale;\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let MeanRect = branchGrpCon.append('rect');\n   \n        MeanRect.attr('width', 10).attr('height', 3);\n        MeanRect.attr('y', (d, i) => {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0])\n            return y(d.realVal);\n        });\n\n        let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n        confiBars.attr('width', 10).attr('height', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.lowerCI95) - y(d.upperCI95);\n        });\n\n        confiBars.attr('y', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.upperCI95);\n        })\n        confiBars.style('opacity', 0.1);\n\n        //tranforming elements\n        svg.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(0, 60)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n\n\n    }else{\n       \n        /////////\n        //getting common node\n        ///\n\n        let maxBranch = d3.max(pathData.map(p => p.length));\n        let longestBranch = pathData.filter(path => path.length === maxBranch)[0];\n        let startBranch = longestBranch.filter(f=> f.leaf != true);\n        let commonNodeStart = startBranch;\n        //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n        pathData.map(path => {\n            commonNodeStart = [...path].filter(f => {\n                return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n        });\n\n        svg.remove();\n        let remove = selectedTool.append('g').classed('x-icon', true);\n        remove.attr('transform', 'translate(15, 10)');\n        remove.append('circle').attr('r', 7).attr('fill', '#fff');\n        remove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n        remove.style('cursor', 'pointer');\n        remove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales);\n        });        \n\n        /////////\n        renderDistibutions(pathData, selectedDiv, scales);\n        selectedDiv.style('height', '550px');\n\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n    }\n    \n}\n\nfunction sortPaths(sortButton) {\n    if (sortButton.text() === 'Sort Most to Least') {\n        sortButton.text('Sort Least to Most');\n    } else {\n        sortButton.text('Sort Most to Least');\n    }\n}","import * as d3 from \"d3\";\n\nexport function dropDown(div, optionArray, dropText, dropId){\n    let dropdiv = div.append('div').classed(`dropdown ${dropId}`, true);\n    dropdiv.style('display', 'inline-block')\n    let button = dropdiv.append('button').classed('btn dropbtn btn-secondary dropdown-toggle', true).text(dropText);\n    let dropContent = dropdiv.append('div').attr('id', dropId).classed('dropdown-content', true);\n    dropContent.append('a').text('text').attr('font-size', 11);\n    let options = dropContent.selectAll('a').data(optionArray).join('a').text(d=> d.field);\n\n    options.on('click', (d, i, n)=> dropContent.classed('show', false));\n\n    button.on('click', (d, i, n)=> {\n        if(dropContent.classed('show')){\n            dropContent.classed('show', false);\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n    options.raise()\n    return options;\n}\n\nexport function updateDropdown(optionArray, dropId){\n    d3.select(`#${dropId}`).selectAll('a').data(optionArray).join('a').text(d=> d.field);\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport * as d3Array from 'd3-array'\nimport {pathSelected, renderComparison} from './selectedPaths';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport {filterMaster, nodeFilter, getLatestData, leafStateFilter, getScales} from './filterComponent';\nimport { drawBranchPointDistribution } from './distributionView';\nimport { dropDown } from './buttonComponents';\nimport { groupedView } from './viewControl';\n\nconst dimensions = {\n    rectWidth: 15,\n    rectHeight: 40,\n    collapsedHeight: 20,\n}\n\nexport function drawPathsAndAttributes(pathData, main){\n\n    let scales = getScales();\n\n    let nodeTooltipFlag = true;\n\n    let collapsed = d3.select('#scrunch').attr('value');\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(pathData, main);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n  \n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n    let attData = formatAttributeData(pathData, scales, shownAttributes);\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (shownAttributes.length + 1))) +')');\n    \n    let cGroups = drawContAtt(predictedAttrGrps, collapsed);\n    let dGroups = drawDiscreteAtt(predictedAttrGrps, collapsed, false);\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, pathData, (shownAttributes.length * attributeHeight));\n\n    let leafStates = d3.selectAll('.discrete-leaf');\n    leafStates.on('click', (d, i)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#state-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.winState);\n            d3.select(\"#state-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-state\").on('click', ()=> {\n                leafStateFilter(d, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-state\").on('click', ()=> {\n                let data = getLatestData();\n                let test = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState === d.winState;\n                });\n\n                let notIt = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState != d.winState;\n                });\n            \n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test, notIt, scales);\n\n            });\n\n        }});\n\n    return pathGroups;\n\n}\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 25)');\n        ///////////////////////////////////\n}\nexport function renderPaths(pathData, main){\n\n    let scales = getScales();\n\n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    \n    let nodeTooltipFlag = false;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n    let circleScale = d3.scaleLog().range([6, 12]).domain([1, d3.max(Object.values(branchFrequency))]);\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.attr('y', -8);\n\n    //////////\n    ///Selecting species\n    /////////\n    let pathAdd = pathGroups.append('g').classed(\"fas fa-search-plus\", true);\n    pathAdd.attr('transform', 'translate(15, 10)');\n    pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathAdd.append('text').text('+').attr('transform', 'translate(-5, 5)');\n    pathAdd.style('cursor', 'pointer');\n\n    pathAdd.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected([d], notIt.data(), scales);\n        }\n    });\n\n    /////////\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       let string = d.filter(f=> f.leaf === true)[0].node;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 25).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', 1000)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> {\n        return d}).join('g').attr('class', (d, i, n)=> {\n            return d3.select(n[n.length - 1]).data()[0].node + \" node\";\n        });\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 10)';});\n\n    nodeGroups.on('click', (d, i, n)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#branch-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.node);\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-node\").on('click', ()=> {\n                nodeFilter(d.node, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-node\").on('click', ()=> {\n                let data = getLatestData();\n                let test = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) > -1;\n                });\n                let notIt = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) === -1;\n                });\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n                pathSelected(test.data(), notIt.data(), scales);\n            });\n        }\n    });\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n}\nexport function renderAttributes(attributeWrapper, data, collapsed){\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> {\n        return data[i]}).join('g');\n    predictedAttrGrps.classed('predicated-attr-groups', true);\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n\n    let attrLabel = predictedAttrGrps.append('text').text(d=> {\n        return d[d.length - 1].label ? d[d.length - 1].label : d[d.length - 1].attrLabel\n    });\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    return predictedAttrGrps;\n}\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 1 : 18;\n        p.change = test;\n    })\n}\nasync function continuousPaths(innerTimeline, collapsed){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? dimensions.collapsedHeight : dimensions.rectHeight;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n        let y = d.scales.yScale;\n        y.range([height, 0]);\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.values.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> d[0].color);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\nexport function drawContAtt(predictedAttrGrps, collapsed){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return (d[d.length - 1] != undefined) ? d[d.length - 1].type === 'continuous' : d.type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? dimensions.collapsedHeight : dimensions.rectHeight;\n\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, collapsed);\n ////////\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n    // let innerRect = innerBars.append('rect').classed('attribute-inner-bar', true);\n    // innerRect.attr('height', attributeHeight).attr('width', dimensions.rectWidth);\n\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n       \n        let y = d.scales.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.values.lowerCI95) - y(d.values.upperCI95);\n        let barHeight = (collapsed === 'true') ? dimensions.collapsedHeight : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.scales.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(d.values.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.values.realVal);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.values.realVal);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', dimensions.rectWidth).attr('height', 4)\n        .attr('transform', (d, i)=> {\n            let y = d.scales.yScale;\n            y.range([attributeHeight, 0]);\n            return 'translate(0, '+ y(d.values.realVal) +')';})\n        .attr('fill', d=> d.color).classed('val-bar', true);\n    }\n\n    /////AXIS ON HOVER////\n    innerBars.on('mouseover', (d, i, n)=> {\n        let y = d.scales.yScale;\n        y.range([0, attributeHeight]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n        let f = d3.format(\".3f\");\n        tool.html('mean: '+f(d.values.realVal) +\"</br>\"+\"</br>\"+ 'upperCI: '+ f(d.values.upperCI95) +\"</br>\"+\"</br>\"+ 'lowerCI: '+ f(d.values.lowerCI95))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        tool.style('height', 'auto');\n       \n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('g.y-axis')\n        d3.select(n[i]).select('g.y-axis').remove();\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    return attributeNodesCont;\n   \n}\nexport function findMaxState(states, offset){\n    let maxP = d3.max(states.map(v=> v.values.realVal));\n    let notMax = states.filter(f=> f.values.realVal != maxP);\n    let winState = states[states.map(m=> m.values.realVal).indexOf(maxP)]\n    winState.other = notMax;\n    winState.offset = offset;\n    return winState;\n}\n    //BEGIN TEST\nfunction drawLeaves(attWraps, groupBy){\n    //THIS IS HARD CODED AND SHOULD NOT BE\n\n    let numSpecies = 100;\n    let height = 40;\n    //CONTINUOUS \n    let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap-first.continuous').data(d=> {\n            let totalVal = attWraps.data().filter(f=> f.label === d.label).map(m=> m.data);\n            let totalArray = totalVal.flatMap(p=> p.flatMap(f=> f.paths[f.paths.length - 1].realVal));\n            let max = d3.max(totalArray);\n            let min = d3.min(totalArray);\n            let totalMean = d3.mean(totalArray);\n        \n            let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n            let newVal = d.data.map((m, i)=> {\n                m.index = i;\n                return {'value': m.paths[m.paths.length - 1].values.realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n            });\n            let groupMean = d3.mean(newVal.map(v=> v.value));\n            return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n        }).join('g').classed('observe-wrap-first continuous', true);\n        \n        leafWraps.attr('transform', 'translate(850, 0)');\n        \n        let xAxis = leafWraps.append('g').classed('axis-x', true);\n        xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n        xAxis.each((d, i, nodes)=> {\n            d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n        });\n        \n        let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n        \n        let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n        \n        let distCircGroupOut = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n        let distcirclesOut = distCircGroupOut.selectAll('circle').data(d=> d.dotVals).join('circle');\n        distcirclesOut.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n        //DISCRETE//\n        let leafWrapsD = attWraps.filter(f=> f.type === 'discrete').selectAll('g.observe-wrap-first.discrete').data(d=> {\n          return [d];\n        }).join('g').classed('observe-wrap-first discrete', true);\n\n        let rects = leafWrapsD.filter(f=> {\n            return f.label != groupBy;\n        }).selectAll('rect').data(d=> {\n            let groupedData = d3Array.groups(d.data.map(m=> m.paths[m.paths.length - 1]), d=> d.state);\n            groupedData.sort((a, b)=> b[1].length - a[1].length)\n            return groupedData;\n        }).join('rect').attr('height', 15).attr('width', (d, i, n)=>{\n            let scale = d3.scaleLinear().domain([0, d3.sum(d3.selectAll(n).data().map(m=> m[1].length))])\n            .range([5, 170]);\n            d.width = scale(d[1].length);\n            return scale(d[1].length);\n        });\n\n        rects.attr('x', (d, i, n)=> {\n            if(i === 0){ return 0}\n            else {\n                d3.selectAll(n).filter((f, j)=> j< i);\n                let move = d3.sum(d3.selectAll(n).filter((f, j)=> j< i).data().map(m=> m.width));\n                return move;}\n        }).attr('y', 12)\n\n        rects.attr('fill', d=> d[1][0].color);\n\n        rects.on('mouseover', (d, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            \n            tool.html(d[0] + \"</br>\" + d[1].length)\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY + 20) + \"px\");\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 0.3);\n          \n        }).on('mouseout', (s, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 1)\n        })\n\n        leafWrapsD.attr('transform', 'translate(850, 0)');\n\n        let ratio = leafWrapsD.filter(f=> f.label === groupBy)\n            .selectAll('text').data(d=> [d]).join('text').text(d=> {\n                let paths = d.data[d.data.length - 1].paths;\n                return `${paths[paths.length - 1].state}: ${d.data.length} / ${numSpecies}`\n            });\n        ratio.style('text-anchor', 'middle')\n        ratio.style('font-size', '12px')\n        ratio.attr('x', 90).attr('y', 25)\n        \n    }\nexport function drawGroups(stateBins, scales){\n    \n    let groupedBool = d3.select('#show-drop-div-group').attr('value', 'grouped');\n    \n    let height = 40;\n    let selectedTool = d3.select('#selected');\n    selectedTool.selectAll('*').remove();\n \n    let main = d3.select('#main');\n    main.style('padding-top', 0);\n\n    d3.select('#toolbar').append('text').text(stateBins[0].field)\n\n    let splitOnArray = [{'field':'None'}].concat(scales.filter(f=> (f.field != stateBins[0].field) && f.type === 'discrete'));\n    let dropOptions = dropDown(d3.select('#toolbar'), splitOnArray, 'Split On','show-drop-div-group');\n\n    ////THIS SPLITS THE DATA////\n    dropOptions.on('click', (d, i, n)=> {\n        d3.select('#toolbar').append('text').text(d.field);\n        \n        if(d.type === 'discrete'){\n            let newBins = stateBins.map(state=> {\n                let newBinData = d.scales.map(sc=> {\n                    let field = sc.field;\n                    let name = sc.scaleName;\n                    let newData = state.data.filter(pa=> {\n                        let leaf = pa.filter(le=> le.leaf === true)[0];\n                        return leaf.attributes[field].winState === name;\n                    });\n                    return {'field': field, 'state': name, 'data': newData }\n                });\n                state.data = newBinData;\n                return state;\n            });\n\n            //////RENDERING NEED TO SEPARATE OUT/////\n           \n           let main = d3.select('#main');\n           main.selectAll('*').remove();\n           main.style('padding-top', '40px');\n           let firstGroupDiv = main.selectAll('div.first-group').data(newBins).join('div').classed('first-group', true);\n           \n           let firstGroupSvg = firstGroupDiv.append('svg');\n           firstGroupSvg.attr('height', s=> (s.data.length*270));\n           let firstGroup = firstGroupSvg.append('g');\n          \n           let firstLabel = firstGroup.append('text').text(f=> f.state).attr('transform', 'translate(10, 10)');\n\n           let secondGroup = firstGroup.selectAll('g.second-group').data(g=> {\n               let newGroups = g.data.map((m)=>{\n                   let newM = {};\n                   newM.first = [g.field, g.state];\n                   newM.second = [m.field, m.state];\n                   newM.data = m.data\n                   newM.leaves = m.data.flatMap(path=> path.filter(f=> f.leaf === true));\n                   return newM\n               });\n               return newGroups}).join('g').classed('second-group', true);\n\n           secondGroup = secondGroup.filter(f=> f.data.length > 0);\n           secondGroup.attr('transform', (s, i)=> 'translate(30,'+(20 + (i * 270))+')');\n\n           secondGroup.each((s, i, n)=> {\n            let branchBar = drawBranchPointDistribution(s.data, d3.select(n[i]));\n            branchBar.select('rect').attr('x', -80).attr('fill','gray');\n            branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n            \n            branchBar.select('.leaf-label').append('text').text((t, i) =>': '+ t.data.length).attr('transform', 'translate(45, 0)');\n            branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n    \n            branchBar.select('line').attr('stroke', '#fff');\n\n            let groupLabels = d3.select(n[i]).append('g');\n\n            //groupLabels.\n            let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n            pathAdd.attr('transform', 'translate(-10, 15)');\n            pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n            pathAdd.append('text').text('+').attr('transform', 'translate(-5, 3)').attr('fill', 'gray');\n        \n            pathAdd.style('cursor', 'pointer');\n\n            pathAdd.on('click', ()=> {\n                let other = d3.selectAll(n).filter((f,j)=> j != i);\n                renderComparison(s, other.data(), d3.select('#selected'), scales);\n            });\n\n            let stateLabel = groupLabels.append('text').text((s, i)=> s.second[1]);\n            stateLabel.attr('transform', (d, i)=> 'translate(3, 20)');\n            stateLabel.attr('fill', '#fff');\n           });\n\n           let innerGroup = secondGroup.filter(f=> f.data.length > 0).append('g').classed('inner-wrap', true);\n           innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n       \n           let attWraps = innerGroup.selectAll('.att-wrapper').data((d)=> {\n               let atts = formatAttributeData(d.data, scales, null);\n             \n               let attDataComb = atts[0].map((att, i)=> {\n                  \n                   let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n\n                   att[att.length - 1].offset = 0;\n                   let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n                   for(let index = 1; index < atts.length; index++ ){\n                       let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                       let last = atts[index][i].length - 1\n                       atts[index][i][last].offset = (index * 8);\n                       attribute.data.push({'species': species, 'paths': atts[index][i]});\n                   }\n                   \n                   return attribute;\n               });\n\n              let mappedDis = attDataComb.map(dis=> {\n                  dis.data = dis.data.map((spec, i)=> {\n                      spec.paths = spec.paths.map(m=> {\n                            if(dis.type === 'discrete'){\n                                let offset = 5 * i;\n                                let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                                return maxProb;\n                            }else{\n                                return m;\n                            }\n                        });\n                   return spec;\n                  });\n        \n                  dis.leaves = dis.data.flatMap(f=> f.paths.filter(p=> p.leaf === true));\n                  return dis;\n              });\n              return mappedDis;\n           }).join('g').classed('att-wrapper', true);\n\n           let innerWrapRect = attWraps.append('rect').attr('width', 800);\n\n            innerWrapRect.attr('height', height);\n            innerWrapRect.style('fill', '#fff');\n            innerWrapRect.style('stroke', 'gray');\n\n            attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n            wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n            svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n            let labels = attWraps.append('text')\n            .text(d=> d.label)\n            .style('text-anchor', 'end')\n            .style('font-size', 11)\n            labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n////WORKING ON STATE SHIFT VIEW///////\n            let shiftWraps = attWraps.filter(f=> f.type === 'discrete').selectAll('g.shift-wrap').data(d=> {\n       \n                let test = d.data.flatMap(m=> m.paths.filter((f, i)=> {\n                    if(i===0) return (i === 0);\n                    if(i > 0) return (m.paths[i-1].state != f.state)\n                    if(i < m.paths.length - 1) return (m.paths[i+1].state != f.state);\n                }));\n             \n                return [test];\n            }).join('g').classed('shift-wrap', true);\n\n            shiftWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxisShift = shiftWraps.append('g').classed('axis-x', true);\n            xAxisShift.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxisShift.each((d, i, nodes)=> {\n                let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 200]);\n                d3.select(nodes[i]).call(d3.axisBottom(x).ticks(5));\n            });\n\n            let circGroupShift = shiftWraps.append('g').attr('transform', 'translate(0, 20)');\n\n            let shiftCircles = circGroupShift.selectAll('circle.shift').data(d=> d).join('circle').classed('shift', true);\n            shiftCircles.attr('r', 4).attr('cx', (d, i)=> {\n                let x = d3.scaleLinear().domain([0,maxTimeKeeper[0]]).range([0, 200]);\n                return x(d.combLength)\n            });\n            shiftCircles.attr('fill', d=> d.color).style('opacity', 0.4);\n\n//////DRAW OBSERVED DISTRIBUTIONS/////\n            let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap').data(d=> {\n                let totalVal = attWraps.data().filter(f=> f.label === d.label).flatMap(m=> m.leaves.map(l=> l.realVal));\n                let max = d3.max(totalVal);\n                let min = d3.min(totalVal);\n                let totalMean = d3.mean(totalVal);\n\n                let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n                let newVal = d.leaves.map((m, i)=> {\n                    m.index = i;\n                    return {'value': m.realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n                });\n                let groupMean = d3.mean(newVal.map(v=> v.value));\n                return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n            }).join('g').classed('observe-wrap', true);\n\n            leafWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxis = leafWraps.append('g').classed('axis-x', true);\n            xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxis.each((d, i, nodes)=> {\n                d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n            });\n\n            let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n\n            let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n\n            let distCircGroup = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n            let distcircles = distCircGroup.selectAll('circle').data(d=> d.dotVals).join('circle');\n            distcircles.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n            distcircles.on('mouseover', (d, i, n)=> {\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n           \n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n\n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n\n            ////DRAW SPECIES GROUPS IN THE ATTRIBUTES\n\n            let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n                d.data = d.data.map(m=> {\n                    m.type = d.type;\n                    return m;\n                });\n                return d.data;\n            }).join('g').classed('species', true);\n\n            let lineGenD = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                    })\n                .y(d=> {\n                    let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n                    return y(d.realVal);\n                });\n\n            let lineGenC = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                })\n                .y(d=> {\n                    let y = d.scales.yScale;\n                    y.range([height-2, 1]);\n                    return y(d.values.realVal) + 2;\n                });\n\n            let innerStatePaths = speciesGrp.append('path')\n                .attr(\"d\", d=> {\n                        return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n                    })\n                .attr(\"class\", (d, i)=> {\n                        return d.species + \" inner-line\"})\n                .style('stroke-width', 0.7)\n                .style('fill', 'none')\n                .style('stroke', 'gray');\n\n            innerStatePaths.on('mouseover', (d, i, n)=> {\n               \n                d3.select(n[i]).classed('selected', true);\n                distcircles.filter(f=> f.species === d.species).classed('selected', true).style('opacity', 1);\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n                \n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n            let disGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'discrete';\n            });\n\n            let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n            branchGrpDis.attr('transform', (d)=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                    let distance = x(d.combLength);\n                    return 'translate('+distance+', 0)';\n            });\n\n            let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n                let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n                return y(d.realVal);\n            }).attr('cx', 5);\n\n            bCirc.classed('win-state', true);\n\n            bCirc.attr('fill', (d, i, n)=> {\n                if(i === 0){\n                    return d.color;\n                }else if(i === n.length - 1){\n                    if(d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }else{\n                    if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }\n            });\n\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n    branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     });\n     confiBars.style('opacity', 0.1);\n           \n           //drawGroups(stateBins, scales);\n    }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        selectedTool.select('#show-drop-div-group').classed('show', false);\n    });\n    /////END SPLIT VIEW//////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    svg.selectAll('*').remove();\n\n    svg.attr('height', (stateBins.length * (height + 20)));\n    svg.append('g').attr('transform', 'translate(500, 40)').append('text').text(stateBins[0].field)\n\n    let wrappers = svg.selectAll('.grouped').data(stateBins).join('g').classed('grouped', true);\n    wrappers.each((d, i, n)=> {\n        let branchBar = drawBranchPointDistribution(d.data, d3.select(n[i]));\n        branchBar.select('rect').attr('x', -80).attr('fill','gray');\n        branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n        \n        branchBar.select('.leaf-label').append('text').text((d, i) =>': '+ d.data.length).attr('transform', 'translate(45, 0)');\n        branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n\n        branchBar.select('line').attr('stroke', '#fff');\n    });\n\n    let groupLabels = wrappers.append('g');\n   \n\n     //groupLabels.\n     let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n     pathAdd.attr('transform', 'translate(20, -5)');\n     pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n     pathAdd.append('text').text('+').attr('transform', 'translate(5, 3)').attr('fill', 'gray');\n \n     pathAdd.style('cursor', 'pointer');\n\n     pathAdd.on('click', (d, i, n)=> {\n         let other = d3.selectAll(n).filter((f,j)=> j != i);\n         renderComparison(d, other.data(), d3.select('#selected'), scales);\n     });\n\n     groupLabels.append('text').text((d, i)=> d.state);\n     groupLabels.attr('transform', (d, i)=> 'translate(40, 16)');\n     groupLabels.style('text-anchor', 'end');\n     groupLabels.attr('fill', '#fff');\n\n    let innerGroup = wrappers.append('g').classed('inner-wrap', true);\n    innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n    let attWraps = innerGroup.selectAll('.att-wrapper').data((d, i)=> {\n        let atts = formatAttributeData(d.data, scales, null);\n\n       \n        let attDataComb = atts[0].map((att, i)=> {\n            let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < atts.length; index++ ){\n                let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                let last = atts[index][i].length - 1;\n                atts[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': atts[index][i]})\n            }\n            return attribute;\n        });\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n       return mappedDis;\n    }).join('g').classed('att-wrapper', true);\n\n    let innerWrapRect = attWraps.append('rect').attr('width', 800);\n    innerWrapRect.attr('height', height);\n    innerWrapRect.style('fill', '#fff');\n    innerWrapRect.style('stroke', 'gray');\n\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n    wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n    \n    svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n       //END EXPERIMENT\n    drawLeaves(attWraps, stateBins[0].field);\n\n    let labels = attWraps.append('text')\n    .text(d=> d.label)\n    .style('text-anchor', 'end')\n    .style('font-size', 11)\n    labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n    let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n        d.data = d.data.map(m=> {\n            m.type = d.type;\n            return m;\n        });\n        return d.data;\n    }).join('g').classed('species', true);\n\n    let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n           return y(d.values.realVal);\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([height-2, 1]);\n           return y(d.values.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n        d3.select(n[i]).classed('selected', true);\n    }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).classed('selected', false);\n    });\n\n    let disGroup = speciesGrp.filter(sp=> {\n     return sp.type === 'discrete';\n     });\n\n    let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n     });\n\n    let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n         let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n         //return y(d.realVal) + d.offset;\n         return y(d.values.realVal);\n     }).attr('cx', 5);\n\n     bCirc.classed('win-state', true);\n\n     bCirc.attr('fill', (d, i, n)=> {\n        if(i === 0 || i === n.length - 1){\n            return d.color;\n            /*\n        }else if(i === n.length - 1){\n            if(d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }*/\n        }else{\n            if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }\n        }\n     });\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n     branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     })\n     confiBars.style('opacity', 0.1);\n\n     /////HIGHLIGHTING NODES IN A TREE ON HOVER//////\n     d3.selectAll('.att-wrapper').selectAll('.branch').on('mouseover', (d, i, n)=> {\n         let treeNode  = d3.select('#sidebar').selectAll('.node');\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', true);\n      \n    }).on('mouseout', (d, i, n)=> {\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', false);\n    })\n     \n}\nexport function drawDiscreteAtt(predictedAttrGrps, collapsed, bars){\n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n   // discreteAtt.selectAll('*').remove();\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        \n        // let disct = d.map(m=> {\n        //     console.log('m', d, m)\n        //     let test = (m.leaf == true) ? m.states.map(s=> {\n        //         s.combLength = m.combLength;\n        //         s.color = m.color;\n        //         return s;\n        //     }) : m;\n        //     return test;\n        // });\n        let disct = d;\n       \n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n             return disct.map(m=> m.leaf ? m : m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return distance + 7;})\n    .y(d=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        return d.value ? y(d.value) : y(1);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", (d, i)=> d[0].species + \" inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;\n    });\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g');\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        if(d[0]){\n           // let distance = (moveMetric === 'move') ? d[0].move : x(d[0].combLength);\n           let distance = x(d[0].combLength);\n            return 'translate('+distance+', 0)';\n        }else{\n           // let distance = (moveMetric === 'move') ? d.move : x(d.combLength);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('rect').attr('width', dimensions.rectWidth).attr('height', attributeHeight).attr('opacity', 0);\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n        /////AXIS ON HOVER////\n    attributeNodesDisc.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, attributeHeight]);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n        })\n\n    attributeNodesDisc.attr('class', (d, i, n)=> {\n        let path = d3.selectAll(n).data();\n        return path[path.length - 1].species;\n    }).classed('attribute-node-discrete', true);\n\n    if(bars === false){\n\n        let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n            \n            return d;\n        }).join('circle').classed('dots', true);\n        \n        stateDots.attr('cx', 10).attr('cy', (d)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n            return d.realVal? y(d.realVal) : y(d.value);\n        }).attr('r', 2);\n        \n        stateDots.style('fill', (d, i, n)=> {\n           \n            /*\n            let speciesPath = d3.selectAll('.attribute-node-discrete.'+ d.species)//.filter(f=> f.type === 'discrete');\n           \n            let nodeArray = speciesPath.data().map(m=> {\n                return m.node ? m.node : m[0].node;\n            });\n            let index = nodeArray.indexOf(d.node);\n           \n            */\n            //return d.color\n            return 'gray';\n        });\n    \n        stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n/*\n        let maxDots = stateDots.filter((f, i, n)=> {\n           \n            return f.realVal === d3.max(d3.selectAll(n).data().map(m=> m.realVal));\n        });\n*/\n        \n\n        ////NEED TO ADD COLOR ON STATE CHANGE////\n    \n        stateDots.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n        ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n    \n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }else{\n        attributeNodesDisc.filter((att, i)=> {\n            return att[0] != undefined;}).append('rect').attr('height', attributeHeight).attr('width', dimensions.rectWidth).attr('fill', '#fff')\n        let stateBars = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dis-rect').data(d=> {\n            return d;\n        }).join('rect').classed('dis-rect', true);\n\n        stateBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         \n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            return y(d.realVal);\n        });\n\n        stateBars.attr('fill', (d, i)=> d.color);\n        stateBars.attr('opacity', '0.7');\n        stateBars.attr('stroke', '#fff');\n        stateBars.attr('transform', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            let probability = d3.selectAll(n).data().sort((a, b)=> b.realVal - a.realVal);\n            let chosenIn = probability.map(p=> p.state).indexOf(d.state);\n         \n            if(chosenIn === 0){\n                    return 'translate(0,0)';\n            }else{\n                ///need to make this a reduce function///\n                let valueAdd = 0;\n                    for(let step = 0; step < chosenIn; step++){\n                        valueAdd = valueAdd + probability[step].realVal;\n                    }\n                return 'translate(0,'+(y(valueAdd))+')';\n            }\n        });\n\n        stateBars.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n\n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }\n\n    return attributeNodesDisc;\n}\n\n","import '../styles/index.scss';\n\nimport * as d3 from \"d3\";\nimport {dataMaster, calculatedScalesKeeper} from './index';\nimport { updateMainView } from './viewControl';\n\nexport let filterMaster = [];\n\nexport function removeFilter(filterId, scales){\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n    let filterIndex = dataFilters.map(f=> f.filterId).indexOf(filterId);\n\n    if(filterIndex != dataFilters.length - 1){\n   \n        let baseData = filterIndex === 0? dataMaster[0] : dataFilters[filterIndex - 1].data;\n    \n        let testData = [...baseData];\n\n        let filterToolbar = d3.select(\"#toolbar\");\n\n        let badges = filterToolbar.selectAll('.filter-tag').remove();\n  \n        for(let i = filterIndex + 1; i < dataFilters.length; i ++){\n       \n            let fun = dataFilters[i].filterFunction;\n            if(dataFilters[i].attributeType === 'continuous'){\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].predictedFilter, dataFilters[i].observedFilter);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'c-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }else{//discrete\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].fromState, dataFilters[i].toState);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'd-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }\n        }\n    }\n    let newFilterMaster = filterMaster.filter(f=> f.filterId != filterId);\n\n    filterMaster = newFilterMaster;\n}\n\nexport function addFilter(filterType, attType, filterId, filFunction, oldData, newData, extra){\n    let filterOb = {'filterType': filterType, 'attributeType': attType, 'filterId': filterId, 'filterFunction':filFunction, 'before-data': oldData, 'data': newData}\n    if(extra != null){\n        extra.forEach(ex=> {\n            filterOb[ex[0]] = ex[1];\n        });\n    }\n    filterMaster.push(filterOb);\n    return filterOb;\n}\n\nexport function getLatestData(){\n    return filterMaster.length > 0 ? filterMaster[filterMaster.length - 1].data : dataMaster[dataMaster.length-1]; \n}\n\nexport function getScales(){\n    return calculatedScalesKeeper[calculatedScalesKeeper.length - 1];\n}\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, main, scales){\n    console.log(filterButton, main, scales)\n\n    let filterDiv = d3.select('#filter-tab');\n    let data = getLatestData();\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        //move metric is 'edgeLength'\n\n        //renderAttToggles(filterDiv, data, scales);\n        stateFilter(filterDiv, filterButton, data, main, scales);\n        queryFilter(filterDiv, filterButton, data, main, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\nfunction addFilterTag(data, scales){\n\n    let filterToolbar = d3.select('#toolbar');\n\n    if(data.attributeType === 'continuous'){\n\n        let formater = d3.format(\".2s\");\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        d3.select(button).datum(data);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        let label = button.append('h6').text(data.selectedOption + \"  Predicted: \"+ formater(data.predictedFilter[0]) + \"-\" + formater(data.predictedFilter[1]) + \" Observed: \" + formater(data.observedFilter[0]) + \"-\" + formater(data.observedFilter[1]));\n        let xSpan = label.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> data.attribute != f.attribute);\n            ////YOU NEED TO CHANGE THIS TO REMOVE FILTER FUNCTION\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'discrete'){\n     \n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(data.state[0]);\n        button.append('i').classed('fas fa-arrow-right', true);\n        button.append('h6').text(data.state[1] + '  ');\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'branch'){\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(' At Branch: ' + data.nodeId);\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }\n    \n}\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n              \n                    //let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n                    let data = getLatestData();\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filId = 'd-'+filterMaster.filter(f=> f.attributeType === 'discrete').length;\n                    let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n                    updateMainView('Summary View');\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR////\n                    addFilterTag(filterOb, scales);\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    let filId = 'c-'+filterMaster.filter(f=> f.attributeType === 'continuous').length;\n                    let filterOb = addFilter('data-filter', 'continuous', filId, continuousFilter, [...data], [...test], [['selectedOption', selectedOption], ['predictedFilter', predictedFilter], ['observedFilter', observedFilter]]);\n\n                    updateMainView('Summary View');\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    addFilterTag(filterOb, scales);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\nexport function nodeFilter(selectedNode, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path.map(node => node.node).indexOf(selectedNode) > -1;\n    });\n\n    let filId = 'b-'+filterMaster.filter(f=> f.attributeType === 'branch').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'branch', filId, nodeFilter, [...data], [...test], [['nodeId', selectedNode]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\nexport function leafStateFilter(selectedState, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path[path.length - 1].attributes[selectedState.label].winState === selectedState.winState;\n    });\n\n    let filId = 'l-'+filterMaster.filter(f=> f.attributeType === 'leaf').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'leaf', filId, nodeFilter, [...data], [...test], [['leafState', [selectedState.label, selectedState.winState]]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n}\nfunction discreteFilter(data, selectedOption, fromState, toState){\n    if(selectedOption != undefined){\n        return data.filter(path=> {\n            let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n                let states = node.attributes[selectedOption].states;\n                if(fromState === 'Any'){\n                    return true;\n                }else{\n                    return states.filter(st=> st.state === fromState).length > 0 && states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n                }\n            });\n            let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n            let win = node.attributes[selectedOption].winState;\n            if(toState === 'Any'){\n                return true;\n            }else{\n                return win === toState;\n            }\n            });\n            return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n        });\n    }\n}\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, scales){\n\n    let moveMetric = 'edgeLength';\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n         \n             updateMainView('Summary View');\n\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                updateMainView('Summary View');\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, scales){\n\n    console.log(normedPaths, scales.map(m=> m.field))\n\n    ////NEED TO GET RID OF TOGGLE SVG\n   // let keys = Object.keys(normedPaths[0][0].attributes);\n   let keys = scales.map(m=> m.field);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths], 'data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n    \n        updateMainView(\"Summary View\");\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {drawPathsAndAttributes, drawDiscreteAtt, drawGroups} from './renderPathView';\nimport {toggleFilters, getLatestData} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport { collapsed, calculatedScalesKeeper, workspace, loadApp } from '.';\nimport { dropDown } from './buttonComponents';\nimport { cladesGroupKeeper, chosenCladesGroup, cladeKeeper } from './cladeMaker';\nimport { binGroups, renderDistStructure } from './distributionView';\n\n\nexport function findBrushedNodes(){\n    let brushes = d3.select('#toolbar').selectAll('.brush-span');\n    let brushData =  [];\n    brushes.each(e => brushData.push(e));\n    let nodes = brushData.flatMap(m=> m.nodes);\n    return nodes;\n}\nexport function toolbarDataControl(toolbar, graphList, chosenGraph){\n\n    let dataDrop = dropDown(toolbar, graphList, chosenGraph.text, 'change-data');\n    d3.select('.dropdown.change-data').select('button').node().value = chosenGraph.field;\n    dataDrop.on('click', (d, i, n)=> {\n        d3.select('.dropdown.change-data').select('button').node().value = d.field;\n        d3.select('.dropdown.change-data').select('button').text(d.text);\n        d3.select('#change-data').classed('show', false);\n        let main = d3.select('#main');\n        let sidebar = d3.select('#sidebar');\n        let toolbarDiv = d3.select('#toolbar');\n        let toolbarButtonWrap = toolbarDiv.select('.toolbar-button-wrap');\n\n        main.selectAll('*').remove();\n        sidebar.selectAll('*').remove();\n        toolbarButtonWrap.selectAll('*').remove();\n\n        loadApp(workspace, d.field);\n\n    });\n\n}\nasync function dropUpdated(d){\n    let loader = await clearMain();\n    await changeDropValue(d);\n    await updateMainView(d.field, chosenCladesGroup[chosenCladesGroup.length - 1].groups);\n    loader.style.display = \"none\";\n}\nfunction changeDropValue(d){\n    d3.select('.dropdown.change-view').select('button').node().value = d.field;\n    d3.select('.dropdown.change-view').select('button').text(d.field);\n    return d;\n}\nexport function clearMain(){\n    d3.select('#main').selectAll('*').remove();\n    d3.select('#change-view').classed('show', false);\n    document.getElementById(\"loader\").style.display = \"block\";\n    return document.getElementById(\"loader\");\n}\nexport function toolbarControl(toolbar, main, calculatedScales){\n\n    let viewArray = [{'field':'Summary View'},{'field':'Path View'},{'field':'Pair View'}];\n    let viewDrop = dropDown(toolbar, viewArray, viewArray[0].field, 'change-view');\n\n    viewDrop.on('click', (d)=> dropUpdated(d));\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, main, calculatedScales));\n    ///LENGTH BUTTON CODE\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, main, calculatedScales));\n\n    let discreteViewButton = toolbar.append('button').attr('id', 'discrete-view');\n    discreteViewButton.attr('class', 'btn btn-outline-secondary').text('Switch to Discrete Bars');\n    discreteViewButton.attr('value', false);\n    \n    discreteViewButton.on('click', ()=> {\n        let discretePredictedGroups = d3.selectAll('.predicated-attr-groups');\n        if(discreteViewButton.text() === 'Switch to Discrete Bars'){\n            discreteViewButton.text('Switch to Discrete Dots');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, true);\n        }else{\n            discreteViewButton.text('Switch to Discrete Bars');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, false);\n        }\n    });\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> {\n        if(m.type === 'discrete'){\n            optionArray.push(m);\n        }\n    });\n\n    let dropOptions = dropDown(toolbar, optionArray, 'Group By', 'show-drop-div-group');\n    toolbar.select('#show-drop-div-group').attr('value', 'ungrouped');\n\n    d3.select('.dropdown.show-drop-div-group').select('button').style('display', 'none')\n\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            let data = getLatestData();\n            let stateBins = d.scales.map(m=> {\n                return {'field': m.field, 'state': m.scaleName, 'data': []}});\n           \n            stateBins.map(state=> {\n               state.data = data.filter(paths=> {\n                    let node = paths.filter(no=> no.leaf === true);\n                        return node[0].attributes[state.field].winState === state.state;\n                });\n            });\n           d3.select('#main').selectAll('*').remove();\n           drawGroups(stateBins, calculatedScales);\n        }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        toolbar.select('#show-drop-div-group').classed('show', false);\n    });\n\n    /////ATTRIBUTE DROP DOWN\n    let attributeOptions = calculatedScales.map(m=> m.field).filter(f=> f != \"Clade\");\n    let checkedAttributes = attributeOptions.length > 11 ? attributeOptions.slice(0, 8) : attributeOptions;\n\n    let dropdiv = toolbar.append('div').classed(`dropdown attribute-show`, true);\n    dropdiv.style('display', 'inline-block');\n    let button = dropdiv.append('button').classed('btn dropbtn btn-secondary dropdown-toggle', true).text('Shown Attributes');\n    let dropContent = dropdiv.append('div').attr('id', 'attribute-show').classed('dropdown-content', true);\n    let dropUl = dropContent.append('ul');\n    \n    let attoptions = dropUl.selectAll('li').data(attributeOptions).join('li')\n    let checkBox = attoptions.append('input').attr('type', 'checkbox');\n    attoptions.append('text').text(d=> ` ${d}`);\n\n    let checkedDefault = attoptions.filter(f=> checkedAttributes.indexOf(f) > -1).select('input');\n    checkedDefault.each((d, i, n) => n[i].checked = true);\n\n    button.on('click', async(d, i, n)=> {\n        if(dropContent.classed('show')){\n\n            console.log('d', d);\n\n\n            let loader = await clearMain();\n            // await changeDropValue(d);\n            // await updateMainView(d.field, chosenCladesGroup[chosenCladesGroup.length - 1].groups);\n            \n\n            dropContent.classed('show', false);\n            await updateMainView('Summary View', chosenCladesGroup[chosenCladesGroup.length - 1].groups);\n            loader.style.display = \"none\";\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n\n    // /////CLADE VIEW////\n    // let cladePickerDrop = dropDown(toolbar, cladesGroupKeeper, `Clades Shown: ${cladesGroupKeeper[0].field}`, 'change-clade');\n    // d3.select('#change-clade').selectAll('a').on('click', (d, i, n)=> {\n    //     d3.select('.dropdown.change-clade').select('button').text(`Clades Shown: ${d.field}`)\n    //     chosenCladesGroup.push(d)\n    //     updateMainView('Summary View', d.groups);\n    // });\n    // if(cladesGroupKeeper.length === 0){\n    //     d3.select('.dropdown.change-clade').select('button').text(d.field);\n    // }\n\n    /////ATTRIBUTE DROP DOWN\n    let cladeOptions = cladeKeeper;\n   // let checkedClades = attributeOptions.length > 11 ? attributeOptions.slice(0, 2) : attributeOptions;\n\n    let dropdivClade = toolbar.append('div').classed(`dropdown clade-show`, true);\n    dropdivClade.style('display', 'inline-block')\n    let buttonClade = dropdivClade.append('button').classed('btn dropbtn btn-secondary dropdown-toggle', true).text('Shown Clades');\n\n    let dropContentClade = dropdivClade.append('div').attr('id', 'clade-show').classed('dropdown-content', true);\n    let dropUlClade = dropContentClade.append('ul');\n\n    let options = updateCladeDrop(dropUlClade, cladeOptions);\n\n    buttonClade.on('click', (d, i, n)=> {\n        if(dropContentClade.classed('show')){\n            dropContentClade.classed('show', false);\n           \n            let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n                return li[j].checked === true});\n            \n            let groups = test.data().map((m=> {\n                let names = m.nodes.map(path => path[path.length - 1].node);\n                let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n                \n                let group = binGroups(data, m.field, calculatedScalesKeeper[0], 8);\n                return {'label': m.field, 'paths': data, 'groupBins': group};\n           }));\n\n           d3.select('#summary-view').remove();\n           renderDistStructure(d3.select('#main'), groups);  \n\n        }else{\n            dropContentClade.classed('show', true);\n        }\n    });\n}\n\nexport function updateCladeDrop(dropUl, cladeOptions){\n\n    let options = dropUl.selectAll('li').data(cladeOptions).join('li');\n    let checkBox = options.selectAll('input').data(d=> [d]).join('input').attr('type', 'checkbox');\n    options.selectAll('text').data(d=> [d]).join('text').text(d=> ` ${d.field}`);\n    \n    if(cladeOptions.length < 1){\n        d3.select('.dropdown.clade-show').select('button').classed('hidden', true);\n    }else{\n        d3.select('.dropdown.clade-show').select('button').classed('hidden', false);\n    }\n\n    return options;\n    \n    // let checkedDefault = options.filter(f=> checkedAttributes.indexOf(f) > -1).select('input');\n}\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, main, calculatedScales){\n\n    let data = getLatestData();\n   \n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }\n}","import {dataMaster, nestedData, calculatedScalesKeeper} from './index';\nimport { updateDropdown } from './buttonComponents';\nimport * as d3 from \"d3\";\nimport { addingEdgeLength, assignPosition, renderTree, renderTreeButtons, traitColorDropDown } from './sidebarComponent';\nimport { maxTimeKeeper } from './dataFormat';\nimport { getLatestData, getScales } from './filterComponent';\nimport { renderDistStructure, binGroups } from './distributionView';\nimport { updateMainView } from './viewControl';\nimport { pullPath } from './pathCalc';\nimport { updateCladeDrop } from './toolbarComponent';\n\nexport const cladesGroupKeeper = []\nexport const chosenCladesGroup = []\nexport const cladeKeeper = []\n\n\n\nexport function growSidebarRenderTree(attrDraw){\n\n    let sidebar = d3.select('#sidebar');\n    let cladeBool = null;\n\n    sidebar.classed('clade-view', true);\n    d3.select('#main').classed('clade-view', true);\n\n    sidebar.select('.tree-svg').remove();\n    sidebar.select('.button-wrap').selectAll('*').remove();\n\n    traitColorDropDown(getScales(), sidebar.select('.button-wrap'), growSidebarRenderTree);\n\n    let x = sidebar.select('.button-wrap').append('div')\n    .style('position', 'absolute')\n    .style('right', '5px')\n    .style('top', '18px')\n    .append('i')\n    .classed('close fas fa-times', true)\n    .style('padding-right', '10px');\n\n    x.on('click', ()=> {\n     \n        sidebar.classed('clade-view', false);\n        d3.select('#main').classed('clade-view', false);\n\n        sidebar.selectAll('*').remove();\n\n        ////REDRAW SIDEBAR\n        renderTreeButtons(getLatestData(), sidebar, false);\n        renderTree(sidebar, null, false);\n\n    });\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 400,\n        height : (getLatestData().length * 7),\n        lengthHeight: 500,\n    }\n   \n    renderCladeTree(sidebar, null, dimensions);\n\n    let leaf = sidebar.select('.tree-svg').selectAll('.node--leaf');\n    let nodes = sidebar.select('.tree-svg').selectAll('.node');\n    let link = sidebar.select('.tree-svg').selectAll('.link');\n\n    let nodeData = getLatestData();\n  \n    function  findCommonNode(path1, path2, className){\n\n        let common = path1.filter(f=> path2.map(m=> m.node).indexOf(f.node) > -1);\n        let subtreeFinder = [nestedData[0]];\n        let commonNodeMark = nodes.filter(f=> f.data.node === common[common.length - 1].node);\n      \n        common.map(m=> m.node).map((m, i)=> {\n            if(i > 0){\n                let child = subtreeFinder[subtreeFinder.length - 1].children.filter(f=> {\n                    return f.node === m})[0];\n                subtreeFinder.push(child)\n            }\n        })\n\n        let paths = pullPath([subtreeFinder[subtreeFinder.length - 1]], subtreeFinder[subtreeFinder.length - 1].children, [], [], 0);\n        \n        let nodeNames = paths.flatMap(path => path.map(p=> p.node))\n        nodes.filter(f=> nodeNames.indexOf(f.data.node) > -1).select('circle').classed(className, true);//.attr('fill', 'orange');\n        link.filter(f=> nodeNames.filter((n)=> n != common[common.length - 1].node).indexOf(f.data.node) > -1).classed(className, true);//.style('stroke', 'orange');\n\n        return paths;\n\n    }\n   \n    labelTree(leaf);\n\n    if(attrDraw != null){\n       // let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = nodes.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaf.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaf.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        nodes.selectAll('circle').attr('fill', 'gray');\n    }\n\n    leaf.on('click', (d, i, n)=> {\n   \n        d3.select(n[i]).select('circle').attr('fill', 'orange').attr('r', '5');\n        if(cladeBool === null){\n            cladeBool = d;\n        }else{\n            let dat1 = nodeData.filter(f=> f[f.length-1].node === cladeBool.data.node)[0];\n            let dat2 = nodeData.filter(f=> f[f.length-1].node === d.data.node)[0];\n            let paths = findCommonNode(dat1, dat2, 'selected');\n\n            let wrap = sidebar.select('.button-wrap').append('form').classed(\"form-inline\", true)\n            .append('div').classed(\"form-group\", true).style('width', '300px');\n            \n            let textInput = wrap.append('input').attr('type', 'text')\n            .classed('form-control', true)\n            .attr('placeholder', 'Clade Name');\n\n            let button = wrap.append('div').classed('input-group-append', true).append('button').attr('type', 'button').classed('btn btn-outline-secondary', true);\n            button.text('Add Clade');\n            \n            button.on('click', ()=> {\n                let name = textInput.node().value != \"\" ? textInput.node().value : `Clade-${cladeKeeper.length}`\n                addClade(name, paths);\n                growSidebarRenderTree(null);\n                let ul = d3.select('div#clade-show').selectAll('ul');\n                updateCladeDrop(ul, cladeKeeper);\n            });\n            cladeBool = null;\n        }\n    });\n    leaf.on('mouseover', (d, i, n)=> {\n        if(cladeBool!=null){\n            let dat1 = nodeData.filter(f=> f[f.length-1].node === cladeBool.data.node)[0];\n            let dat2 = nodeData.filter(f=> f[f.length-1].node === d.data.node)[0];\n            findCommonNode(dat1, dat2, 'selected-hover');\n        }\n\n    }).on('mouseout', ()=> {\n        sidebar.selectAll('.selected-hover').classed('selected-hover', false);\n    });\n\n   sidebar.select('.tree-svg').classed('clade-view', true).append('g').classed('overlay-brush', true);\n\n}\n\nexport function addClade(name, nodes){\n    cladeKeeper.push({field: name, nodes: nodes})\n}\n\nexport function addCladeGroup(name, clades, nodes){\n    cladesGroupKeeper.push({field: name, names: clades, groups:nodes});\n    return {field: name, names: clades, groups:nodes};\n}\n\nexport function removeCladeGroup(clades){\n    cladeKeeper = cladeKeeper.filter(f=> f.groupKey != clades.groupKey);\n}\n\n\nfunction createNewCladeGroup(div, scales){\n    let cladeNames = [];\n    let clades = [];\n    d3.selectAll('.clade-name').each((e, i, n)=> {\n       cladeNames.push(n[i].value);\n       let rectTest = d3.select(`.rect-${i + 1}`).node().getBoundingClientRect();\n       let nodes = div.select('.tree-svg.clade-view').selectAll('.node--leaf').filter((f, j, node)=> {\n           let circPos = node[j].getBoundingClientRect();\n           return circPos.y >= rectTest.y-4 && circPos.y <= ((rectTest.y + rectTest.height) - 4);\n       })\n       nodes.select('circle').attr('fill', 'red');\n       clades.push({'clade': n[i].value , 'nodes': nodes.data().map(m=> m.data)});\n    });\n \n    let groupName = d3.select('.group-name').node().value;\n    let chosenGroup = addCladeGroup(groupName, cladeNames, clades);\n    updateDropdown(cladesGroupKeeper, 'change-clade');\n    let groups = groupDataByClade(scales, getLatestData(), chosenGroup);\n\n    d3.select('.dropdown.change-clade').select('button').text(`Clades Shown: ${chosenGroup.field}`);\n\n    updateMainView('Summary View', groups);\n    renderTree(d3.select('#sidebar'), null, true, false);\n}\n\n// function cladeToolbar(div, scales){\n\n//     let toolBar = div.append('div').classed('clade-toolbar', true);\n//     let textInput = toolBar.append('input')\n//     .classed('group-name', true)\n//     .attr('type', 'text')\n//     .attr('value', 'Name Your Group');\n  \n//     let addCladeGroupButton = toolBar.append('button').text('Add Clade Group');\n//     addCladeGroupButton.on('click', ()=> createNewCladeGroup(div, scales));\n\n//     let inputGroup = toolBar.append('div').classed('input-group input-number-group', true);\n//     let minusButton = inputGroup.append('button').text('-');\n   \n//     let numberText = inputGroup.append('input')\n//         .attr('value', 3)\n//         .attr('min', 0)\n//         .attr('max', 10)\n//         .attr('type', 'number')\n//         .classed('input-number', true);\n\n//     let plusButton = inputGroup.append('button').text('+');\n\n//     let nameWrap = inputGroup.append('div').classed('name-input-wrap', true);\n//     minusButton.on('click', ()=> {\n//         let num = numberText.attr('value');\n//         numberText.attr('value', +num - 1);\n//         addTextInputForGroups(+numberText.attr('value'), nameWrap);\n//     });\n\n//     plusButton.on('click', ()=> {\n//         let num = numberText.attr('value');\n//         numberText.attr('value', +num + 1);\n//         addTextInputForGroups(+numberText.attr('value'), nameWrap);\n//     });\n\n//     addTextInputForGroups(+numberText.attr('value'), nameWrap);\n\n//     function addTextInputForGroups(index, nameWrap){\n       \n//         nameWrap.selectAll('*').remove();\n//         d3.selectAll('.overlay-brush').selectAll('rect').remove();\n//         for(let ind = 0; ind < index; ind = ind + 1){\n//             nameWrap.append('input')\n//             .classed('clade-name', true)\n//             .attr('value', `Group ${ind+1}`)\n//             .attr('type', 'text');\n\n//             let rectGroup = d3.select('.overlay-brush').append('g').classed(`group-${ind}`, true)\n\n//             let rect = rectGroup.append('rect')\n//             .classed(`rect-${ind + 1}`, true)\n//             .attr('height', 100)\n//             .attr('width', 910)\n//             .attr('opacity', 0.3)\n//             .attr('transform',  (d, i, n)=> `translate(${0},${((800 / index) * ind)})`);\n\n//             let rectSizer = rectGroup.append('rect').attr('class', `handle-${ind}`)\n//             .attr('width', 700)\n//             .attr('height', 20)\n//             .attr('y', rect.node().getBoundingClientRect().y + 20)\n//             .attr('opacity', 0)\n//             .call(d3.drag()\n//             .on('drag', function(){\n//                 let dragPos = d3.mouse(this);\n//                 let dragY = d3.event.y\n//                 d3.select(this).attr('y', dragPos[1]);\n//                 let height = +d3.select(`.rect-${ind + 1}`).attr('height')\n//                 let rectY = d3.select(`.rect-${ind + 1}`).node().getBoundingClientRect().bottom;\n//                 d3.select(`.rect-${ind + 1}`).attr('height', height + (dragY-rectY) + 70);\n//             }));\n            \n//             rect.call(d3.drag().on('drag', function(){\n//                 let dragPos = d3.mouse(this);\n//                 let dragY = d3.event.y\n//                 d3.select(this).attr('y', dragPos[1]);\n//                 let rectH = d3.select(`.rect-${ind + 1}`).node().getBoundingClientRect().height;\n//                 d3.select(`.handle-${ind}`).attr('y', dragY + (rectH - 20));\n//             }))\n//         }\n//     }\n// }\n\nfunction labelTree(nodes){\n    nodes.append('text')\n    .text(d=> d.data.node)\n    .attr('font-size', 9)\n    .attr('x', 4)\n    .attr('y', 2);\n}\n\nexport async function createCladeView(div, scales){\n    drawTreeForGroups(div);\n    cladeToolbar(div, scales);\n}\n\nexport function renderCladeTree(sidebar, att, dimensions){\n\n     addingEdgeLength(0, nestedData[0]);\n    \n    let treeFun = data => {\n        const root = d3.hierarchy(data);\n        return d3.tree().size([dimensions.width, dimensions.height])(root);\n      }\n\n    let treenodes = treeFun(nestedData[0]);\n\n    let treeSvg = sidebar.append(\"svg\").classed('tree-svg', true);\n    let g = treeSvg.append(\"g\").classed('tree-g', true);\n   \n    ////Break this out into other nodes////\n    updateCladeTree(treenodes, dimensions, treeSvg, g, att, true);\n    \n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n    return array;\n}\n\nexport function updateCladeTree(treenodes, dimensions, treeSvg, g, attrDraw, length){\n    \n    assignPosition(treenodes, 0);\n\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + (dimensions.height / 1.5));\n\n    findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, getLatestData().length])\n    g.attr('transform', `translate(30, ${dimensions.height / 1.9})`);\n\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n           return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n           + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n           + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n           + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n        .data(treenodes.descendants(), d => d.data.node)\n        .join(\"g\")\n        .attr(\"class\", function(d) { \n        return \"node\" + \n        (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n        .duration(500)\n        .attr(\"transform\", function(d) { \n                return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n        });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)//f.data.attributes[attrDraw.field].winState === att.state;\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    })\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateCladeTree(treenodes, dimensions, treeSvg, treeSvg.select('g'), attrDraw, lengthBool);\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n    return node;\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\n\nimport {dataMaster, nestedData, collapsed} from './index';\nimport {getScales} from './filterComponent';\nimport {getNested} from './pathCalc';\nimport { dropDown } from './buttonComponents';\nimport { updateRanking } from './pairView';\nimport { pairPaths, maxTimeKeeper } from './dataFormat';\nimport { cladesGroupKeeper, chosenCladesGroup, growSidebarRenderTree } from './cladeMaker';\n\n\nexport function buildTreeStructure(paths, edges){\n   \n    let root = paths[0][0];\n    let nestedData = getNested(root, edges);\n    return nestedData;\n}\n\nexport function traitColorDropDown(scales, sidebar, renderCallback){\n\n    let optionArray  = reduce2DropArray(scales);\n\n    let dropOptions = dropDown(sidebar, optionArray, `Color By Trait`,'show-drop-div-sidebar');\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            renderCallback(d, true, false)\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`)\n        }else if(d.type === 'continuous'){\n            renderCallback(d, true, false)\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`);\n        }else{\n             renderCallback(null, true, false)\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Color By Value`);\n        }\n    sidebar.select('#show-drop-div-sidebar').classed('show', false);\n    });\n\n}\n\nexport function reduce2DropArray(startArray){\n    return  startArray.reduce(function(array, scale){\n        array.push(scale);\n        return array; \n    }, [{'field':'None'}]); \n}\n\nexport function renderTreeButtons(normedPaths){\n\n    let scales = getScales();\n    let sidebar = d3.select('#sidebar');\n\n    ///SIDBAR STUFF\n    let buttonWrap = sidebar.append('div').classed('button-wrap', true);\n   \n    traitColorDropDown(scales, buttonWrap, renderTree);\n    buttonWrap.select('button').style('font-size', '12px');\n    let phenoOptions = reduce2DropArray(scales.filter(f=> f.type != 'discrete'));\n \n      ///BUTTON FOR PHENOGRAM VIEW. MAYBE MOVE THIS TO SIDEBAR\n    let phenogramButton = d3.select('#sidebar').select('.button-wrap').append('button').text('View Phenogram').style('font-size', '12px');\n    phenogramButton.classed('btn btn-outline-secondary', true).attr('id', 'view-pheno'); \n    phenogramButton.on('click', ()=> {\n          if(phenogramButton.text() === 'View Phenogram'){\n            if(d3.select('.attr-drop.dropdown').select('button').empty()){\n                let drop = dropDown(d3.select('#toolbar'), phenoOptions, `Trait: ${phenoOptions[1].field}`, 'attr-drop');\n                d3.select('.attr-drop.dropdown').select('button').attr('value', phenoOptions[1].field);\n                d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Color By Value`);\n                drop.on('click', (d, i, n)=> {\n                    if(d3.select('.dropdown.change-view').select('button').node().value === \"View Pairs\"){\n                        updateRanking(pairPaths(normedPaths), d.field);\n                    }\n                    renderTree(true, d.field);\n                    d3.select('.attr-drop.dropdown').select('button').text(`Trait: ${d.field}`);\n                    d3.select('.attr-drop.dropdown').select('button').attr('value')\n                    d3.select('.attr-drop.dropdown').select('button').attr('value', d.field);\n                    d3.select('#attr-drop').classed('show', false);\n                });\n                renderTree(null, true, d3.select('.attr-drop.dropdown').select('button').attr('value'))\n              }else{\n                renderTree(null, true, d3.select('.attr-drop.dropdown').select('button').attr('value'))\n              }\n              phenogramButton.text('View Phylogeny');\n          }else{\n            ////ADD THE HIDE BUTTON HERE \n            let view = d3.select('.dropdown.change-view').select('button').text();\n           \n            if(view != \"Pair View\"){\n                d3.select('.dropdown.attr-drop').remove();\n            }\n            renderTree(null, true, false);\n            phenogramButton.text('View Phenogram');\n\n          }\n    })\n\n    let cladeButton = buttonWrap.append('button').attr('id', 'clade-maker');\n    cladeButton.attr('class', 'btn btn-outline-secondary').text('Clade View').style('font-size', '12px');\n    cladeButton.on('click', ()=> growSidebarRenderTree(null));\n}\n\nfunction uncollapseSub(d){\n    d.children = d._children;\n    d._children = null;\n    if(d.children){\n        d.children.map(c=> uncollapseSub(c));\n    }    \n}\n\nfunction collapseSub(d){\n    if(d.children) {\n        d._children = d.children\n        d._children.forEach(collapseSub)\n        d.children = null\n    }  \n}\n\nfunction collapseTree(treeData){\n\n    let leaves = getLeaves(treeData, []);\n\n    return stepDown(treeData);\n\n    function stepDown(node){\n        let leaves = getLeaves(node, []);\n        \n        let ids = new Set(leaves.map(m=> m.data.attributes.Clade.values.Clade));\n        if(ids.size > 1){\n            node.children.map(n=> stepDown(n))\n        }else{\n            node.branchPoint = true;\n            node.clade = Array.from(ids)[0]\n            collapseSub(node);\n            return node;\n        }\n        return node;\n    }\n    \n    function getLeaves(node, array){\n        if(node.children != undefined ){\n            node.children.map(n=> getLeaves(n, array))\n        }else{\n            array.push(node);\n        };\n        return array;\n    }\n}\n\nexport function assignPosition(node, position) {\n    if (node.children === undefined || node.children === null){\n        \n        position = position + 1.5;\n        node.position = position;\n        return position;\n    }else{\n        let positionArray = []\n        node.children.forEach((child) => {\n            position = assignPosition(child, position);\n            positionArray.push(position);\n        });\n        node.options = positionArray;\n        node.position = d3.max(positionArray);\n        return position;\n    }\n}\n\nexport function addingEdgeLength(edge, data){\n    data.combEdge = data.edgeLength + edge;\n    if(data.children){\n        data.children.forEach(chil=> {\n            addingEdgeLength(data.combEdge, chil);\n        });\n    }\n}\n\nexport function renderTree(att, uncollapse, pheno){\n\n    let sidebar = d3.select('#sidebar');\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 260,\n        height : 520,\n        lengthHeight: 800,\n    }\n\n    let lengthBool = true;\n\n    // declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([dimensions.height, dimensions.width]);\n\n    addingEdgeLength(0, nestedData[0]);\n    \n    //  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData[0]);\n\n    // maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let groupedBool = d3.select('#show-drop-div-group').attr('value');\n\n    let sidebarTest = sidebar.select('svg');\n    let treeSvg = sidebarTest.empty() ? sidebar.append(\"svg\") : sidebarTest;\n    treeSvg.classed('tree-svg', true);\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + dimensions.margin.top + dimensions.margin.bottom);\n\n    let gTest = treeSvg.select('g.tree-g');\n    let g = gTest.empty() ? treeSvg.append(\"g\").classed('tree-g', true) : gTest;\n    g.attr(\"transform\",\n      \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\");\n\n    if(groupedBool === \"ungrouped\" && uncollapse === false){\n        if((cladesGroupKeeper.length > 0) && (chosenCladesGroup[chosenCladesGroup.length - 1].field != 'Clade Attribute)')){\n            let newNodes = collapseTree(treenodes);\n            updateTree(newNodes, dimensions, treeSvg, g, att, pheno);\n        }else{\n            updateTree(treenodes, dimensions, treeSvg, g, att, pheno);\n        }\n        \n    }else{\n        ////Break this out into other nodes////\n        updateTree(treenodes, dimensions, treeSvg, g, att, pheno);\n    }\n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n    return array;\n}\n\nexport function updateTree(treenodes, dimensions, treeSvg, g, attrDraw, pheno){\n\n    let length = true;\n    let uncollapse = true;\n\n    d3.select('.pheno-y-axis').remove();\n    d3.select('.pheno-x-axis').remove();\n    \n    assignPosition(treenodes, 0);\n\n    let branchCount = findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, 1])\n\n   \n    g.attr('transform', 'translate(20, 265)');\n    treeSvg.attr('height', 800);\n    yScale.range([500, 0]).domain([0, branchCount.length])\n    xScale.range([0, dimensions.width + 10]);\n\n    if(pheno){\n        treeSvg.attr('height', 800);\n        xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain())\n        yScale.domain([0, maxTimeKeeper[0]]).range([0, 500])\n    }\n\n    // adds the links between the nodes\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n        if((length && pheno === undefined) || (length && pheno === false)){\n           return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n           + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n           + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n           + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n        }else{\n            return \"M\" + xScale(d.data.attributes[pheno].values.realVal) + \",\" + yScale(d.data.combEdge)\n            + \" \" + xScale(d.parent.data.attributes[pheno].values.realVal) + \",\" + yScale(d.parent.data.combEdge);\n        }       \n    });\n\n    if(pheno){\n        \n        link.style('opacity', 0.3);\n        g.attr('transform', 'translate(30, 50)');\n\n        let x = xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain()).range([0, (dimensions.width+20)]);\n        let xAxis = d3.axisBottom(x);\n        g.append('g').classed('pheno-x-axis', true).call(xAxis).attr('transform', 'translate(0, 510)').select('path').attr('stroke-width', 0);\n\n        let y = d3.scaleLinear().domain([0,maxTimeKeeper[0]]).range([0, dimensions.height -20]);\n        let yAxis = d3.axisLeft(y);\n        g.append('g').classed('pheno-y-axis', true).call(yAxis).attr('transform', 'translate(0, 2)').select('path').attr('stroke-width', 0);;\n    }\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants(), d => d.data.node)\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n    .duration(500)\n    .attr(\"transform\", function(d) { \n        if(length && pheno === undefined || pheno === false){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n        }else{\n\n           return \"translate(\" + (xScale(d.data.attributes[pheno].values.realVal) - 5) + \",\" + yScale(d.data.combEdge) + \")\"; \n        }\n    });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)//f.data.attributes[attrDraw.field].winState === att.state;\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n\n        console.log('d in sidebar', d)\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    })\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateTree(treenodes, dimensions, treeSvg, g, attrDraw, lengthBool, uncollapse);\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n\n    if(uncollapse){\n       \n        // let groups = chosenCladesGroup[chosenCladesGroup.length - 1];\n        \n        // let groupGroup = treeSvg.selectAll('.clade-rects')\n        // .data(groups.groups)\n        // .join('g')\n        // .attr('class', d=> d.label)\n        // .classed('clade-rects', true)\n    \n        // let rect = groupGroup.append('rect');\n        // rect.attr('width', 20);\n        // rect.attr('height', (d, i)=> {\n        //     return d.paths.length * 6;\n        // });\n        // groupGroup.each((d, i, node)=> {\n       \n        //     let first = d.paths.map(m=> m[m.length-1].node);\n        //     let test = treeSvg.selectAll('.node--leaf').filter((f)=> {\n        //         return first.indexOf(f.data.node) > -1});\n        //     let leafSort = test.data().sort((a, b)=> {\n        //         return a.x - b.x;\n        //     });\n        //     console.log(leafSort[0].data.node)\n\n        //     let chosenNode = test.filter(f=> {\n        //         return f.data.node === leafSort[leafSort.length - 1].data.node;\n        //     });\n\n        //     console.log(chosenNode.data())\n     \n        //     d3.select(node[i]).attr('transform', `translate(300, ${yScale(leafSort[0].position)})`)\n        // })\n\n    }\n\n    return node;\n}","import { pairPaths, maxTimeKeeper } from \"./dataFormat\";\nimport { dropDown } from \"./buttonComponents\";\nimport * as d3 from \"d3\";\nimport * as slide from 'd3-simple-slider';\nimport { renderTree } from \"./sidebarComponent\";\nimport { speciesTest, dataMaster } from \".\";\nimport { findBrushedNodes } from \"./toolbarComponent\";\nimport { getScales } from \"./filterComponent\";\nimport { allPaths } from \"./pathCalc\";\n\nexport function rankingControl(data){\n    let rankDiv = d3.select('#pair-rank').classed('hidden', false);\n    rankDiv.selectAll('*').remove();\n\n    let defaultW = [1, 1, 1];\n  \n    let weightPicker = rankDiv\n      .append('svg')\n      .attr('width', 800)\n      .attr('height', 100)\n      .append('g')\n      .attr('transform', 'translate(10,10)');\n\n     weightPicker\n    .append(\"svg:image\")\n    .attr('width', 200)\n    .attr('height', 140)\n    .attr('y', -50)\n    .attr(\"xlink:href\", \"./public/mini-diagram.gif\");\n\n    weightPicker.append('text').text('Distance').attr('font-size', 10).attr('x', 85).attr('y', 60);\n    weightPicker.append('text').text('Delta').attr('font-size', 10).attr('x', 66).attr('y', 20);\n    weightPicker.append('text').text('Closeness').attr('font-size', 10).attr('x', 195).attr('y', 22);\n\n    let labels = ['Distance', 'Delta', 'Closeness'];\n\n    weightPicker.selectAll('text.labels').data(labels).join('text').classed('labels', true)\n    .text(d=> d)\n    .attr('y', 10)\n    .attr('x', (d, i)=> (300+(260 * i)));\n\n    defaultW.forEach((color, i) => {\n      var slider = slide\n        .sliderBottom()\n        .min(-1)\n        .max(1)\n        .step(.1)\n        .width(210)\n        .default(defaultW[i])\n        .displayValue(false)\n        .fill('#7FB3D5')\n        .on('end', num => {\n          defaultW[i] = num;\n          let mappedPairs = updateRanking(pairPaths(data), d3.select('.attr-drop.dropdown').select('button').attr('value'), defaultW);\n       \n          drawSorted(mappedPairs.top20, d3.select('.attr-drop.dropdown').select('button').attr('value'));\n          topPairSearch(mappedPairs.top20, mappedPairs.pairs, d3.select('.attr-drop.dropdown').select('button').attr('value'), defaultW);\n        });\n  \n      weightPicker\n        .append('g')\n        .attr('transform', `translate(${300+(260 * i)}, 20)`)\n        .call(slider);\n\n      weightPicker.selectAll('.tick')\n        .filter(f=> f < 0).select('text')\n        .attr('fill', 'red')\n        .attr('opacity', 0.6);\n    });\n}\nexport async function generatePairs(data){\n\n        let pairs = await pairPaths(data);\n     \n        let weights = [1, 1, 1];\n\n        let attKeys = d3.entries(pairs[0].p1[0].attributes)\n                    .filter(f=> f.value.type === 'continuous')\n                    .map(m=> {\n                        return {'field': m.key, 'value': m.key }\n                    });\n        \n        let drop = d3.select('.attr-drop.dropdown')\n          .selectAll('a').empty() ? dropDown(d3.select('#toolbar'), attKeys, `Trait: ${attKeys[1].field}`, 'attr-drop') : d3.select('.attr-drop.dropdown').selectAll('a');\n        \n        d3.select('.attr-drop.dropdown').select('button').attr('value', attKeys[1].field);\n\n        drop.on('click', (d, i, n)=> {\n\n          let mappedPairs = updateRanking(pairPaths(data), d.field, weights);\n       \n          drawSorted(mappedPairs.top20, d.field);\n          topPairSearch(mappedPairs.top20, mappedPairs.pairs, d.field, weights);\n\n           // renderTree(d3.select('#sidebar'), null, true, d.field);\n          d3.select('.attr-drop.dropdown').select('button').attr('value', d.field);\n          d3.select('.attr-drop.dropdown').select('button').text(`Trait: ${d.field}`);\n          d3.select('#attr-drop').classed('show', false);\n        });\n\n        let mappedPairs = updateRanking([...pairs], attKeys[0].field, weights);\n       \n        drawSorted(mappedPairs.top20, attKeys[0].field);\n        topPairSearch(mappedPairs.top20, mappedPairs.pairs, attKeys[0].field, weights);\n}\n\nfunction getWeightScales(pairs, field){\n \n  let deltaMax = d3.max([...pairs].map(m=> m.deltas.filter(f=> f.key === field)[0]).map(m=> m.value));\n  let closeMax = d3.max([...pairs].map(m=> m.closeAll.filter(f=> f.key === field)[0]).map(m=> m.value));\n  let distMax = d3.max([...pairs].map(d=> d.distance));\n  let deltaScale = d3.scaleLinear().domain([0, deltaMax]).range([0, 1]);\n  let closeScale = d3.scaleLinear().domain([closeMax, 0]).range([0, 1]);\n  let distScale = d3.scaleLinear().domain([0, distMax]).range([0, 1]);\n  return {delta: deltaScale, close:closeScale, distance: distScale};\n}\n\nexport function updateRanking(pairs, field, weights){\n\n \n    \n    let weightScales = getWeightScales(pairs, field);\n\n    let pickedPairs = [...pairs].map(p=> {\n        let newP = Object.assign({}, p);\n        \n        newP.delta = p.deltas.filter(d=> d.key === field)[0];\n        newP.closeness = p.closeAll.filter(d=> d.key === field)[0];\n        newP.deltaRank = weightScales.delta(newP.delta.value);\n        newP.closenessRank = weightScales.close(newP.closeness.value);\n        newP.distanceRank = weightScales.distance(p.distance);\n        newP.totalRank = (weights[0] * newP.distanceRank) + (weights[1] * newP.deltaRank) + (weights[2] * newP.closenessRank);\n        return newP;\n    });\n\n    let sortedPairs = pickedPairs.sort((a, b)=> b.totalRank - a.totalRank).slice(0, 20);\n\n    return {top20: sortedPairs, 'pairs': pickedPairs};\n}\n\nfunction drawSorted(pairs, field){\n\n  let pairColor = ['#FF5733', '#129BF5'];\n  let nodes = findBrushedNodes();\n\n  d3.select('#main').selectAll('*').remove();\n   \n  let width = 600;\n  let height = 100;\n  let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, width]);\n    \n  let svg = d3.select('#main').append('svg');\n  svg.attr('height', pairs.length * (height * 1.9))\n  let wrap = svg.append('g');\n  wrap.attr('transform', 'translate(20, 120)')\n  let pairWraps = wrap.selectAll('g.pair-wrap').data(pairs).join('g').classed('pair-wrap', true);\n  pairWraps.attr('transform', (d, i)=> `translate(50,${i*(height * 1.8)})`);\n  pairWraps.append('rect')\n    .attr('width', (d, i)=> {\n    return width - xScale(d.common.combLength);\n  })\n    .attr('height', height)\n    .attr('x', d=> xScale(d.common.combLength))\n    .attr('stroke-width', 1).attr('stroke', 'black')\n    .attr('fill', '#fff');\n\n    pairWraps.append('text').text((d, i)=> {\n        return `${d.p1[d.p1.length - 1].node} + ${d.p2[d.p2.length - 1].node}`\n    }).attr('y', -10);\n\n    let scoreWrap = pairWraps.append('g').classed('score-wrap', true);\n    let scoreGroups = scoreWrap.selectAll('g.score').data((d, i)=> {\n        return [\n         {label: 'Distance', value: d.distance, score: d.distanceRank}, \n         {label: 'Delta', value: d.delta.value, score: d.deltaRank},\n         {label: 'Closeness', value: d.closeness.value, score: d.closenessRank}\n        ];\n    }).join('g').classed('score', true);\n\n    let scoreLabel = scoreWrap.append('g').attr('transform', `translate(650, 10)`);\n    scoreLabel.append('rect').attr('width', 200).attr('height', 40).attr('fill', 'gray').attr('y', 45).attr('opacity', .1)\n    scoreLabel.append('text').text('Score').attr('y', 20).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Value').attr('y', 40).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreLabel.append('text').text('Total Score').attr('y', 60).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Rank').attr('y', 80).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreGroups.attr('transform', (d, i, n)=> {\n       return  i === 0 ? `translate(${(670)},0)` : \n       `translate(${(660+(d3.sum(d3.selectAll(n).filter((f, j)=> i > j).data().map(m=> m.label.length * 6)))+ (i*30))},0)`;\n    });\n\n    var zero = d3.format(\".3n\");\n    scoreGroups.append('text').text((d, i)=>  d.label).style('font-size', 10).attr('y', 10);;\n    scoreGroups.append('text').text((d, i)=> zero(d.score)).style('font-size', 10).attr('y', 30);\n    scoreGroups.append('text').text((d, i)=> zero(d.value)).style('font-size', 10).attr('y', 50);\n\n    scoreLabel.append('text').text((d, i, n)=> zero(d.closenessRank + d.distanceRank + d.deltaRank)).style('font-size', 10).attr('y', 60).attr('x', 115);\n    scoreLabel.append('text').text((d, i)=> i+1).style('font-size', 10).attr('y', 80).attr('x', 115);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, width]);\n       let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n        let y = d.attributes[field].scales.yScale;\n        y.range([height, 0]);\n        return y(d.attributes[field].values.realVal);\n    });\n\n    //BEGIN EXPERIOMENTING////]\n\n    let pairGroupN = pairWraps.selectAll('g.pair-neighbor').data((d, i, n)=> {\n      let species1 = d.p1.map(n=> n.node);\n      let species2 = d.p2.map(n=> n.node);\n      let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n\n      let neighbors = labels.flatMap(m=> {\n          let start = speciesTest[0].indexOf(m);\n          let ne = speciesTest[0].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n          return ne;\n      });\n      \n      let speciesNames = [species1[species1.length-1], species2[species2.length-1]];\n\n      ////EXPERIMENTING WITH NODES////\n      let neighPaths = dataMaster[0].filter(f=> \n        (neighbors.indexOf(f[f.length - 1].node)) > -1 && (speciesNames.indexOf(f[f.length - 1].node) === -1));\n  \n      let labeledN = [...neighPaths].map(path=> {\n        let name = path[path.length - 1].node;\n        return path.map(p=> {\n          p.name = name;\n          return p\n        })\n      });\n  \n      let spec1N = labeledN.map(m => m.filter(f=> species1.indexOf(f.node) > -1));\n      let spec2N = labeledN.map(m => m.filter(f=> species2.indexOf(f.node) > -1));\n  \n      let closest1 = spec1N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n  \n      let closest2 = spec2N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n  \n      let wholeClosest1 = labeledN.filter(f=> f[f.length-1].node === closest1[closest1.length - 1].name)[0];\n      let wholeClosest2 = labeledN.filter(f=> f[f.length-1].node === closest2[closest2.length - 1].name)[0];\n     \n      return [wholeClosest1, wholeClosest2];\n\n    }).join('g').classed('pair-neighbor', true).attr('opacity', 0);\n\n      let innerPathsN = pairGroupN.append('path')\n      .attr(\"d\", lineGen)\n      .attr(\"class\", \"inner-line-n\")\n      .attr('fill', 'none')\n      .attr('stroke-width', 1)\n      .style('stroke', 'rgba(160, 141, 184, .9)');\n     \n      let branchesN = pairGroupN.selectAll('g.branch-n').data(d=> d).join('g').classed('branch-n', true);\n      branchesN.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n      branchesN.filter(f=> f.leaf != true).append('rect').attr('width', 10).attr('height', (d)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n      }).attr('fill', 'rgba(160, 141, 184, .2)').attr('y', (d, i)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.upperCI95);\n      });\n  \n      branchesN.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n          return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n      }).attr('opacity', 0.5);\n\n      branchesN.filter((b, i, n)=> {\n        return i === (n.length - 1);\n      }).append('text').text(d=> d.node)\n        .attr('fill', 'rgba(160, 141, 184, 1)')\n        .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return (y(d.attributes[field].values.realVal) - 4);\n        }).attr('x', 3).style('font-size', 10);\n\n////////////////////////////END EXPERIMENT///////\n\n    let pairGroup = pairWraps.selectAll('g.pair').data(d=> [d.p1, d.p2]).join('g').classed('pair', true);\n\n    let innerPaths = pairGroup.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d, i)=> pairColor[i])\n   // .style('stroke', 'rgb(165, 185, 198)');\n\n   let brushedPaths = innerPaths.filter(f=> {\n    let nodeTest = f.filter(n=> nodes.map(m=> m.node).indexOf(n.node) > -1)\n    return nodeTest.length > 0}).style('stroke', '#64B5F6').style('stroke-width', '5px');\n\n    let branches = pairGroup.selectAll('g.branch').data(d=> d).join('g').classed('branch', true);\n    branches.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n    branches.filter(f=> f.leaf != true).append('rect')\n    .classed('range', true)\n    .attr('width', 10)\n    .attr('height', (d)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n    }).attr('fill', 'rgba(165, 185, 198, .5)')\n    .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.upperCI95);\n    });\n\n    let chosenNodes = branches.filter(f=> {\n      return nodes.map(m=> m.node).indexOf(f.node) > -1\n    }).selectAll('rect.range').attr('fill', '#64B5F6')\n\n    branches.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n        return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n    });\n\n    pairWraps.append('rect').attr('width', (d, i)=> {\n        return xScale(d.common.combLength)})\n        .attr('height', height)\n        .attr('fill', '#fff').style('opacity', 0.7);\n        let yAxisG = pairWraps.append('g').classed('y-axis', true);\n        let xAxisG = pairWraps.append('g').classed('x-axis', true);\n        xAxisG.call(d3.axisBottom(xScale).ticks(10));\n        xAxisG.attr('transform', `translate(0, ${height})`)\n\n    pairWraps.on('mouseover', (d, i, n)=> {\n       \n        let species1 = d.p1.map(n=> n.node);\n        let species2 = d.p2.map(n=> n.node);\n        let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n        let neighbors = labels.flatMap(m=> {\n            let start = speciesTest[0].indexOf(m);\n            let ne = speciesTest[0].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n            return ne;\n        });\n        \n        let neighNodes = []//dataMaster[0].filter(f=> neighbors.indexOf(f[f.length -1].node) > -1).flatMap(m=> m.map(f=> f.node))\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        let pairNode1 = treeNode.filter(f=> {\n            return species1.indexOf(f.data.node) > -1;\n        }).classed('hover one', true);\n\n        let pairNode2 = treeNode.filter(f=> {\n          return species2.indexOf(f.data.node) > -1;\n      }).classed('hover two', true);\n\n        treeLinks.filter(f=> species1.indexOf(f.data.node) > -1).classed('hover one', true);\n        treeLinks.filter(f=> species2.indexOf(f.data.node) > -1).classed('hover two', true);\n       // treeNode.filter(f=> neighNodes.indexOf(f.data.node) > -1).classed('hover-neighbor', true);\n        //Hiding Others\n        treeNode.filter(f=> (neighNodes.indexOf(f.data.node) === -1) && (species1.concat(species2).indexOf(f.data.node) === -1)).classed('hover-not', true);\n        //Coloring Neighbors\n       // treeLinks.filter(f=> neighNodes.indexOf(f.data.node) > -1).classed('hover-neighbor', true);\n        //Hiding Others\n        treeLinks.filter(f=> (neighNodes.indexOf(f.data.node) === -1) && (species1.concat(species2).indexOf(f.data.node) === -1)).classed('hover-not', true);\n        \n        let speciesNames = [species1[species1.length-1], species2[species2.length-1]]\n      \n        return d3.select(this).classed('hover', true);\n    })\n    .on('mouseleave', (d, i, n)=>{\n\n      d3.select(n[i]).selectAll('.pair-neighbor').attr('opacity', 0);\n\n        let treeNode  = d3.select('#sidebar').selectAll('.node')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n        return d3.select(n[i]).classed('hover', false);\n    });\n\n    let axisGroup = pairWraps.append('g').classed('y-axis', true);\n  \n    axisGroup.each((d, i, n)=> {\n        let scale = d.p1[0].attributes[field].scales.yScale;\n        d3.select(n[i]).call(d3.axisLeft(scale).ticks(5));\n    });\n\n  let mouseG = pairWraps.append(\"g\")\n    .attr(\"class\", \"mouse-over-effects\");\n\n  mouseG.append(\"path\") // this is the black vertical line to follow mouse\n    .attr(\"class\", \"mouse-line\")\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"1px\")\n    .style(\"opacity\", \"0\");\n\n   var mousePerLine = mouseG.selectAll('.mouse-per-line')\n   .data((d, i)=> {\n\n    return [d.p1, d.p2]})\n   .join(\"g\")\n   .attr(\"class\", \"mouse-per-line\");\n\nmousePerLine.append(\"circle\")\n   .attr(\"r\", 7)\n   .style(\"stroke\", function(d) {\n     return 'red';\n   })\n   .style(\"fill\", \"none\")\n   .style(\"stroke-width\", \"1px\")\n   .style(\"opacity\", \"0\");\n\nmousePerLine.append(\"text\").attr('class', 'value')\n   .attr(\"transform\", \"translate(10,3)\");\n\nmousePerLine.append(\"text\").attr('class', 'species')\n   .attr(\"transform\", \"translate(10,3)\");\n\nmouseG.append('svg:rect') // append a rect to catch mouse movements on canvas\n      .attr('width', width) // can't catch mouse events on a g element\n      .attr('height', height)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .on('mouseout', function() { // on mouse out hide line, circles and text\n        d3.selectAll(\".mouse-line\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"0\");\n      })\n      .on('mouseover', (d, i, n)=> { // on mouse in show line, circles and text\n        d3.select(n[i].parentNode).selectAll('.mouse-line')\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"1\");\n\n          \n      })\n      .on('mousemove', (dat, i, n)=> { // mouse moving over canvas\n        var mouse = d3.mouse(n[i]);\n       \n        d3.select(n[i].parentNode).select('.mouse-line')\n          .attr(\"d\", function() {\n            var d = \"M\" + mouse[0] + \",\" + height;\n            d += \" \" + mouse[0] + \",\" + 0;\n            return d;\n          });\n       \n          d3.select(n[i].parentNode).selectAll('.mouse-per-line')\n          .attr(\"transform\", function(d, j, node) {\n         \n            var xDate = xScale.invert(mouse[0]),\n                bisect = d3.bisector(function(d) { return d.edgeLength; }).right,\n                idx = bisect(d.values, xDate);\n            \n            let line = n[i].parentNode.parentNode.getElementsByClassName('inner-line');\n          \n            var beginning = 0,\n                end = line[j].getTotalLength(),\n                target = null\n\n            while (true){\n               target = Math.floor((beginning + end) / 2);\n               var pos = line[j].getPointAtLength(target);\n              if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n                  break;\n              }\n              if (pos.x > mouse[0])      end = target;\n              else if (pos.x < mouse[0]) beginning = target;\n              else break; //position found\n            }\n            let y = dat.p1[0].attributes[field].scales.yScale;\n          \n            d3.select(node[j]).select('text.value')\n              .text(y.invert(pos.y).toFixed(2))\n              .style('font-size', 11)\n              .attr('y', ()=> {\n                  return j === 0 ? 10 : -10;\n                });\n\n            d3.select(node[j]).select('text.species')\n                .text(d[d.length-1].node)\n                .style('font-size', 11)\n                .attr('y', ()=> {\n                    return j === 0 ? 19 : -19;\n                  });\n              \n            return \"translate(\" + mouse[0] + \",\" + pos.y +\")\";\n          });\n      });\n\n\n   \n}\n\nfunction topPairSearch(topPairs, allPairs, field, weights){\n\n  let matchKeeper = [];\n  let nameArray = topPairs.map(m=> m.key);\n  let otherFields = getScales()\n    .filter(f=> f.field != field && f.type === 'continuous')\n    .map(m=> m.field);\n\n  otherFields.map(m => {\n  \n    let mappedPairs = updateRanking([...allPairs], m, weights);\n\n    let test = mappedPairs.top20.map((m, i)=> {\n      let newPair = m.key\n      if(nameArray.indexOf(m.key) > -1){\n      \n        let check = matchKeeper.map(m=> m.key);\n        if(check.indexOf(newPair) > -1){\n          let index = check.indexOf(newPair);\n          matchKeeper[index].value.push([newPair, i+1, m]);\n        }else{\n          matchKeeper.push({key: newPair, value: [[newPair, i+1, m]]})\n        }\n      }\n    });\n  });\n\n  rankHistogram(matchKeeper);\n\n  // matchKeeper.map((m, i)=> {\n   \n  //   let group = d3.selectAll('.pair-wrap').filter(f=> {\n  //     return (m.key === f.key);\n  //   }).append('g').classed('other-rank', true);\n\n  //   let rankSet = [...new Set(m.value.map(v=> v[1]).sort())]\n  //   let groupedRanks = rankSet.map(f=> {\n  //     let ranked = m.value.filter(va=> va[1]===f);\n  //     return {rank:f, value:ranked}\n  //   }).sort((a, b)=> a.rank - b.rank);\n\n  //   group.attr('transform', 'translate(860, 0)');\n  //   group.append('rect').attr('width', 300).attr('height', groupedRanks.length * 20).attr('opacity', 0.1);\n  //   let textGrp = group.selectAll('g.text-group').data(groupedRanks).join('g').classed('text-group', true);\n\n  //   let text = textGrp.append('text').text(d=> {\n  //     let traits = d.value.map(v=>v[2].delta.key).join(', ');\n  //     return `Ranking: ${d.rank} Traits: ${traits},  `});\n  //   text.style('font-size', '10px');\n  //   text.attr('transform', (d, i)=> `translate(20, ${(i*20)+11})`);\n  // });\n}\n\nfunction rankHistogram(matchKeeper){\n\n  let size = 25;\n  let height = 12;\n\n  let rankBins = [[1,3], [4,6], [7,9], [10, 12], [13, 15], [16, 18], [19, 21]];\n  let axisLabels = ['1-3', '4-6', '7-9', '10-12', '13-15', '16-18', '19-21'];\n\n  let newArray = matchKeeper.map(m=> {\n    let bins = rankBins.map(r=> {\n      return {bin:r, values: m.value.filter(f=> f[1] >= r[0] && f[1] <= r[1])}\n    });\n    return {key:m.key, 'bins':bins}\n  });\n\n  newArray.map(m=> {\n\n    let group = d3.selectAll('.pair-wrap').filter(f=> {\n          return (m.key === f.key);\n        }).append('g').classed('other-rank', true);\n\n    group.attr('transform', 'translate(880, 0)');\n\n    group.append('text')\n    .text('Ranked Top 20 in Other Traits')\n    .style('font-size', 11)\n    .style('text-anchor', 'middle')\n    .attr('transform', `translate(${(rankBins.length * (size+2))/2},0)`);\n\n    group.append('g')\n    .call(d3.axisBottom(d3.scaleBand().domain(axisLabels).range([0, rankBins.length * (size+2)])))\n    .attr('transform', 'translate(0, 92)');\n\n    let binGroups = group.selectAll('g.bin').data(m.bins).join('g').classed('bin', true);\n    binGroups.attr('transform', (d, i)=> `translate(${i*(size+2)}, ${80})`);\n\n    let binRects = binGroups.selectAll('rect').data(d=>d.values.sort((a, b)=> a[1]-b[1])).join('rect');\n    binRects.attr('width', size)\n    .attr('height', size/2)\n    .attr('transform', (d, i)=> `translate(0, ${-1*(i*((size/2)+1))})`);\n\n    binRects.attr('opacity', (d, i, n)=> {\n      let minMax = rankBins.filter(r=> d[1]<= r[1] && d[1] >= r[0])[0];\n      let scale = d3.scaleLinear().domain([minMax[0], minMax[1]]).range([.8, .2])\n      return scale(d[1])})\n\n    binRects.on('mouseover', (r,i)=>{\n      let tool = d3.select('#tooltip');\n      tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n      \n      let f = d3.format(\".3f\");\n        \n      tool.html(`${r[2].delta.key} : ${f(r[2].totalRank)} </br> Ranking: ${r[1]}`)\n          .style(\"left\", (d3.event.pageX - 40) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n          \n      tool.style('height', 'auto');\n      tool.style('width', '150px');\n\n    }).on('mouseout', ()=> {\n      let tool = d3.select('#tooltip').style('opacity', 0);\n    });\n  });\n\n}","import * as d3 from \"d3\";\nimport { renderDistibutions, groupDistributions, renderDistStructure, binGroups } from './distributionView';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport { getLatestData } from \"./filterComponent\";\nimport { generatePairs, rankingControl } from \"./pairView\";\nimport { drawTreeForGroups, createCladeView, chosenCladesGroup } from \"./cladeMaker\";\nimport { calculatedScalesKeeper } from \".\";\n\nexport let groupedView = false;\n\nexport function updateMainView(d, groups){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n    let view = d3.select('#view-pheno').empty()? null : d3.select('#view-pheno').text();\n   \n    if(d != 'Pair View' && view === 'View Phenogram'){\n        d3.select('.dropdown.attr-drop').remove();\n    }\n  \n    if(d === 'Path View' || d === null){\n        d3.select('#pair-rank').classed('hidden', true);\n        drawPathsAndAttributes(data, main);\n\n        document.getElementById(\"scrunch\").disabled = false;\n        document.getElementById(\"discrete-view\").disabled = false;\n\n        d3.select('#scrunch').classed('hidden', false);\n        d3.select('#discrete-view').classed('hidden', false);\n\n    }else if(d === 'Summary View'){\n\n        d3.select('#pair-rank').classed('hidden', true);\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n        groups ? renderDistStructure(main, groups) : renderDistStructure(main, data);\n       \n    }else if(d === 'Pair View'){\n        rankingControl(data);\n        generatePairs(data);\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n    }else{\n        console.error('field not found');\n    }\n\n    return main;\n}\nexport function initialViewLoad(scales, dataName){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(data.length > 50){\n\n        // rankingControl(data);\n        // generatePairs(data);\n\n        // document.getElementById(\"scrunch\").disabled = true;\n        // document.getElementById(\"discrete-view\").disabled = true;\n\n        // d3.select('#scrunch').classed('hidden', true);\n        // d3.select('#discrete-view').classed('hidden', true);\n\n        renderDistStructure(main, chosenCladesGroup[chosenCladesGroup.length - 1].groups)\n            .then(()=>  document.getElementById(\"loader\").style.display = \"none\");\n\n        \n        d3.select('#view-toggle').text('View Paths');\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n    }else{\n        drawPathsAndAttributes(data, main);\n        d3.select('#view-toggle').text('View Summary');\n\n        document.getElementById(\"scrunch\").disabled = false;\n        document.getElementById(\"discrete-view\").disabled = false;\n\n        d3.select('#scrunch').classed('hidden', false);\n        d3.select('#discrete-view').classed('hidden', false);\n      \n    }\n\n}\n\n","\nimport '../styles/index.scss';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster, getLatestData, getScales} from './filterComponent';\nimport { calculatedScalesKeeper } from '.';\nimport { drawBranchPointDistribution, dimensions, defaultBarColor, mirrorlineGen, lineGen, selectedClades, binGroups, renderDistStructure } from './distributionView';\nimport { renderTree } from './sidebarComponent';\n\nconst compareColors = [{light: '#F8C471', dark: '#F39C12'}, {light: '#A3E4D7', dark: '#17A589'}]\n\n\nexport function renderDistributionComparison(div, data, branchScale){\n  \n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n  \n    let divWrap = div.append('div').attr('id', 'compare-wrap');\n\n    let groupHeader = divWrap.append('div').classed('compare-header', true).style('margin', 'auto');\n\n    let textDiv = groupHeader.append('div').attr('height', 50).attr('width', 200).style('margin-left', '460px');\n    let branchPointSvg  = groupHeader.append('svg');\n\n    let pointData = {paths: data[0].paths.concat(data[1].paths), groupBins: data[0].groupBins};\n    let branchBar = drawBranchPointDistribution(pointData, branchPointSvg);\n    branchBar.attr('transform', 'translate(-30, 10)');\n\n    //'#DCD4D4'\n\n    branchBar.selectAll('rect.bin').attr('stroke', '#fff').attr('stroke-width', '3px');\n    let pointGroups = branchBar.selectAll('g.branch-points');\n  \n    let xOut = groupHeader.append('div')\n    .style('position', 'absolute')\n    .style('left', '5px')\n    .style('top', '65px')\n    .append('i')\n    .classed('close fas fa-times', true)\n    .style('padding-left', '10px');\n    \n    xOut.on('click', (d, i, n)=> {\n        divWrap.remove();\n        selectedClades.push(new Array());\n       \n        let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n            return li[j].checked === true});\n\n        let groups = test.data().map((m=> {\n            let names = m.nodes.map(path => path[path.length - 1].node);\n            let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n                \n            let group = binGroups(data, m.field, calculatedScalesKeeper[0], 8);\n            return {'label': m.field, 'paths': data, 'groupBins': group};\n        }));\n      \n        d3.select('#summary-view').remove();\n        renderDistStructure(d3.select('#main'), groups);  \n       \n        d3.select('#sidebar').selectAll('.node').remove();\n        d3.select('#sidebar').selectAll('.link').remove();\n\n        renderTree(null, true, false);\n       \n    });\n\n    if(data.length > 1){\n//ADD THIS BACK IN//\n\n        d3.select('#toolbar').selectAll('.brush-span').remove();\n       \n        let selectedNodes = Array.from(new Set(data.flatMap(f=> f.paths).flatMap(p=> p.map(m=> m.node))));\n   \n        let testNodes = d3.select('#sidebar').selectAll('.node').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n        let testLinks = d3.select('#sidebar').selectAll('.link').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n\n        testNodes.attr('opacity', 0.3)\n        testLinks.attr('opacity', 0.3)\n\n        let pathsListOne = Array.from(new Set(data[0].paths.flatMap(p=> p.map(m=> m.node))));\n        let pathsListTwo = Array.from(new Set(data[1].paths.flatMap(p=> p.map(m=> m.node))));\n\n        let testNodesOne = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n        let testLinksOne = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n\n        testNodesOne.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[0].dark)\n        testLinksOne.attr('opacity', .8).style('stroke', compareColors[0].dark)\n\n        let testNodesTwo = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n        let testLinksTwo = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n\n        testNodesTwo.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[1].dark)\n        testLinksTwo.attr('opacity', .8).style('stroke', compareColors[1].dark)\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-left', true)\n        .style('margin-right', '10px');\n\n        data.forEach((d, i)=> {\n        textDiv.append('span')\n            .text(d.label)\n            .classed('badge badge-secondary', true)\n            .style('padding', '5px')\n            .style('margin-bottom', '7px')\n            .style('background', compareColors[i].light)\n        });\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-right', true)\n        .style('margin-left', '10px');\n        \n    }\n    let svg = divWrap.append('svg').attr('class', 'compare-svg').style('padding-top', '50px');\n\n    ////COMBINEDATA///\n    if(data.length > 1){\n       \n        let startBins = data[0].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let mapBins = data[1].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let combined = startBins.map((d, i, n)=> {\n         \n            d.branches = [...d.branches].map((b, j)=> {\n                \n                b.bins = [{key:data[0].label, value: b.bins, index:0},\n                          {key:data[1].label, value: mapBins[i].branches[j].bins, index:1}\n                         ];\n             \n                b.data = [{key: data[0].label, \n                            value: b.data.map(m=>{\n                                    m.groupKey = data[0].label;\n                                    m.index = 0;\n                                    return m;\n                                    }), \n                            index: 0},\n                        \n                        { key: data[1].label, \n                            value : mapBins[i].branches[j].data.map(m=> {\n                                    m.groupKey = data[1].label;\n                                    m.index = 1;\n                                    return m;\n                            }), \n                         index: 1 }];\n\n                return b;\n            });\n          \n           if(d.type === 'continuous'){\n\n            d.leafData.data = [{key: data[0].label, \n                value: d.leafData.data.map(m=>{\n                        m.groupKey = data[0].label;\n                        m.index = 0;\n                        return m;\n                        }), \n                index: 0},\n            \n            { key: data[1].label, \n                value : mapBins[i].leafData.data.map(m=> {\n                        m.groupKey = data[1].label;\n                        m.index = 1;\n                        return m;\n                }), \n             index: 1 }];\n\n             d.leafData.bins = [{key:data[0].label, value: d.leafData.bins, index:0},\n                                {key:data[1].label, value: mapBins[i].leafData.bins, index:1}\n                                ];\n           }else{\n\n            d.leafData.data = [{key: data[0].label, \n                value: d.leafData.data.map(m=>{\n                        m.groupKey = data[0].label;\n                        m.index = 0;\n                        return m;\n                        }), \n                index: 0},\n            \n            { key: data[1].label, \n                value : mapBins[i].leafData.data.map(m=> {\n                        m.groupKey = data[1].label;\n                        m.index = 1;\n                        return m;\n                }), \n             index: 1 }];\n\n             d.leafData.bins = [\n                {key:data[0].label, keys: d.stateKeys, value: d.leafData.bins, index:0},\n                {key:data[1].label, keys: d.stateKeys, value: mapBins[i].leafData.bins, index:1}\n                ];\n           }\n          \n            return d;\n        });\n\n        let wrap = svg.append('g').attr('class', 'group-wrap').attr('transform', 'translate(30, 10)');\n        let binnedWrap = wrap.selectAll('.attr-wrap').data(combined).join('g').classed('attr-wrap', true);\n        svg.attr('height', (combined.length * (dimensions.height + 5)));\n        \n        binnedWrap.attr('transform', (d, i, n)=>  {\n            if(i === 0){\n                    return 'translate(0,0)';\n            }else{\n                let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                d.sum = sum;\n                return `translate(0, ${sum})`;\n            }\n        });\n\n        let label = binnedWrap.append('text')\n            .text(d=> d.key);\n    \n        label.filter(f=> f.type === 'continuous')\n            .attr('y', 40)\n            .attr('x', 80)\n            .style('text-anchor', 'end')\n            .style('font-size', 11);\n    \n        label.filter(f=> f.type === 'discrete')\n            .attr('y', (d, i)=> 3)\n            .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n            .style('text-anchor', 'middle')\n            .style('font-size', 11)\n            .attr('transform', 'rotate(-90)');\n\n        /////FROM DISCRETE DRAW\n\n        let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n        predictedWrap.attr('transform', 'translate(25, 0)');\n        predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n        //ROOT RENDERING\n        let root = predictedWrap.selectAll('g.root').data(d=> {\n            return [d.rootData]}).join('g').classed('root', true);\n        root.attr('transform', `translate(60,0)`);\n\n        let contRoot = root.filter(f=> f.type === \"continuous\");\n        contRoot.append('rect')\n            .attr('height', dimensions.height)\n            .attr('width', 12)\n            .attr('fill', '#fff')\n            .style('stroke-width', '0.5px')\n            .style('stroke', 'black')\n    \n        let rootRange = contRoot.append('rect')\n            .attr('width', 12)\n            .attr('height', d=> {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return newy(d.values.lowerCI95) - newy(+d.values.upperCI95)\n            }).attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return 'translate(0,'+newy(+d.values.upperCI95)+')'\n            }).style('opacity', 0.5)//.attr('fill', \"rgba(133, 193, 233)\")\n            .attr('fill', defaultBarColor);\n    \n        let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n        \n        rootAv.attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([dimensions.height, 0]);\n                let mean = +d.values.realVal;\n                return 'translate(0,'+newy(mean)+')';\n        }).attr('fill', '#004573');\n    \n           // Discrete Root\n        let disRoot = root.filter(f=> f.type === \"discrete\");\n        let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n            return d.bins}).join('g').classed('root-state-groups', true);\n    \n        rootStateGroups.append('text')\n            .text((d, i)=> d.color.state)\n            .attr('y', 10)\n            .attr('x', -3)\n            .style('font-size', 10)\n            .style('text-anchor', 'end');\n    \n        rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n        rootStateGroups.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim)\n            .attr('fill', '#fff').attr('opacity', 1);\n    \n        let rootRects = rootStateGroups.append('rect')\n            .classed('color-rect', true)\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim);\n    \n        rootRects.attr('fill', (d, i)=> {\n                return `rgba(89, 91, 101, ${d.state[0].value})`;\n            }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n    \n        let winStateRoot = disRoot.selectAll('g.root-state-groups')\n            .filter((f, j, n)=>{\n                let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n                return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n            }).classed('win', true);\n    \n        winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            });\n\n        ////BRANCHES\n        let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n           \n            return d.branches}).join('g').classed('branch-bin', true);\n    \n        branchGroup.attr('transform', (d, i, n)=> {\n            let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0\n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n           \n            let move = d.type === 'continuous'? 100 : 70;\n                return 'translate('+(move + (branchScale(i)) + x(step)) +', 0)'});\n\n        let discreteDist = branchGroup.filter(f=> f.type === 'discrete').append('g');\n\n        discreteDist.attr('transform', 'translate(5, 0)');\n\n        let discreteWidth = 85;\n\n        let discreteStateGroups = discreteDist.selectAll('g.group')\n            .data(d=> {\n                let keys = d.bins[0].value.map(m=> m.color.state);\n            \n                let bins = keys.map(k=> {\n                    let newOb = {};\n                    newOb.stateKey = k;\n                    \n                    newOb.bins = d.bins.map((m, i)=> {\n                        let clade = {}\n                        clade.index = i;\n                        clade.value = m.value.filter(f=> f.color.state === k)[0];\n                        clade.key = m.key;\n                        return clade;\n                    });\n                    return newOb;\n                });\n              \n                return bins;\n            })\n            .join('g')\n            .classed('group', true)\n            .attr('transform', (d, i)=> { \n                let move = d.index === 0 ? (-40 - (dimensions.squareDim/2)) : (dimensions.squareDim/2);\n                return `translate(${move}, 0)`});\n\n        let binRects = discreteStateGroups.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', discreteWidth)\n            .attr('stroke', 'black')\n            .attr('fill', '#fff')\n            .attr('opacity', 0.3);\n            \n            discreteStateGroups.attr('transform', (d, i)=> `translate(0, ${4+(i*(dimensions.squareDim+2))})`);\n\n            discreteStateGroups.append('text')\n            .text('1')\n            .attr('transform', `translate(${discreteWidth + 2},10)`)\n            .style('font-size', '10px')\n            .style('opacity', 0.6);\n        \n            discreteStateGroups.append('text')\n            .text('0')\n            .attr('transform', `translate(-7,10)`)\n            .style('font-size', '10px')\n            .style('opacity', 0.6);\n\n            let cladeStateGroups = discreteStateGroups.selectAll('.clade-dis').data(d=> {\n                return d.bins}).join('g').classed('clade-dis', true);\n\n\n            //////\n            function randomizer(){\n                var min= -.03; \n                var max= .03;  \n                var random = Math.random() * (+max - +min) + +min; \n                return random;\n            }\n        \n\n            let probabilityTicks = cladeStateGroups\n            .selectAll('.prob-tick')\n            .data((d, i, n)=> {\n                \n                let form = d3.format(\".3f\");\n                console.log('compare d', d)\n                let jitterMove = [...new Set(d.value.state.map(m=> +form(m.value)))].map(m=> {\n                    console.log('m', m, d.value.state)\n                    let arrayTest = d.value.state\n                    .filter(f=> +form(f.value) === m)\n                    .map(arr=> {\n                        console.log(arr)\n                        arr.index = d.index;\n                      //  arr.y = Math.random();\n                      //  arr.x = randomizer();\n                        return arr;\n                    });\n                    return arrayTest;\n                })\n\n                console.log(jitterMove)\n                return jitterMove.flatMap(j=> j);\n               \n\n            }).join('circle').classed('prob-tick', true)\n        \n            probabilityTicks\n                .attr('r', 2)\n                .attr('opacity', 0.4)\n                .attr('fill', (d)=> {\n                    return compareColors[d.index].light;\n                });\n        \n            probabilityTicks.attr('transform', (d, i, n)=> {\n                console.log('d in prob', d)\n                let scale = d3.scaleLinear().domain([0, 1]).range([2, (discreteWidth - 2)]).clamp(true);\n                \n                let yScale = d3.scaleLinear().domain([0, 1]).range([2, dimensions.squareDim - 2])\n                return `translate(${scale(d.value + d.x)},${yScale(d.y)})`;\n             });\n\n\n            let averageTick = cladeStateGroups\n                    .selectAll('.av-tick').data(d=> {\n                        return [{value: d.value.state[0].average, color: d.value.color.color, index: d.index}];\n                    }).join('rect').classed('av-tick', true)\n                    .attr('width', 2).attr('height', dimensions.squareDim)\n                    .attr('fill', d=> {\n                        return compareColors[d.index].dark})\n                    .attr('transform', (d, i, n)=> {\n                        let scale = d3.scaleLinear().domain([0, 1]).range([0, (discreteWidth - 2)]);\n                        return `translate(${scale(d.value)}, 0)`});\n\n            averageTick.on('mouseover', (d, i, n)=> {\n                \n                    let tool = d3.select('#tooltip');\n                    tool.transition()\n                        .duration(200)\n                        .style(\"opacity\", .9);\n                    \n                    let f = d3.format(\".3f\");\n                    tool.html(`Average: ${f(d.value)}`)\n                        .style(\"left\", (d3.event.pageX - 40) + \"px\")\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            \n                    tool.style('height', 'auto');\n            \n                }).on('mouseout', ()=>{\n                    let tool = d3.select('#tooltip');\n                    tool.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n                });\n            \n            probabilityTicks.on('mouseover', (d, i, n)=> {\n                \n                    let tool = d3.select('#tooltip');\n            \n                    tool.transition()\n                        .duration(200)\n                        .style(\"opacity\", .9);\n                    \n                    let f = d3.format(\".3f\");\n                    \n                    tool.html(`${d.state} : ${f(d.value)}`)\n                        .style(\"left\", (d3.event.pageX - 40) + \"px\")\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            \n                    tool.style('height', 'auto');\n            \n                }).on('mouseout', ()=>{\n                    let tool = d3.select('#tooltip');\n                    tool.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n                });\n \n\n    //         //END\n\n    //     //////PREDICTED CONTINUOUS\n\n    //       //CONTIN PREDICTED\n        let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n        continDist.on('mouseover', (d, i, node)=> {\n            let newData = d.data;\n            let list = newData[0].value.concat(newData[1].value).map(m=> m.node);\n            let selected = pointGroups.filter(p=> {\n                return list.indexOf(p.node) > -1}).classed('selected', true);\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n            let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n            let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        }).on('mouseout', (d, i, node)=> {\n            d3.selectAll(\".branch-points.selected\").classed('selected', false);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            d3.select(node[i]).select('.y-axis').remove();\n        });\n\n        let continBinGroups = continDist.selectAll('g.group').data(d=> {\n            return d.bins;\n        }).join('g').attr('class', d=> `g-${d.index} group`)//.classed('group', true);\n\n        continBinGroups.each((d, i, nodes)=> {\n            d.maxCount = d3.sum(d.value.map(m=> m.length));\n            d.value.maxCount = d3.sum(d.value.map(m=> m.length));\n            let distrib = d3.select(nodes[i])\n                .selectAll('g')\n                .data([d.value.map(v=> {\n                    v.maxCount = d3.sum(d.value.map(m=> m.length))\n                    v.index = d.index;\n                    return v;\n                })])\n                .join('g')\n                .classed('distribution', true);\n            distrib.attr('transform', (d,i,n)=> {\n                if(d[0].index === 0){\n                    return 'translate(0, 0) rotate(90)'\n                }else{\n                    return 'translate(11, '+dimensions.height+') rotate(-90)'\n                }\n               });\n            let path = distrib.append('path').attr('d', d.index === 0 ? mirrorlineGen : lineGen);\n            path.attr(\"fill\", (v, i, n)=> {\n                return defaultBarColor})\n            .attr('opacity', 0.4)\n            .style('stroke', compareColors[d.index].dark);\n        });\n\n        let contRect = continBinGroups.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 10)\n        .style('fill', '#fff')\n        .style('stroke', 'gray');\n\n    let rangeRectWrap = continDist.selectAll('g.range-wrap').data(d=> {\n        return d.data;\n    }).join('g').classed('range-wrap', true);\n    \n    let rangeRect = rangeRectWrap.selectAll('rect.range').data((d,i)=> {\n        let newData = d.value.map(m=> {\n            m.range = d.range;\n            m.gindex = i;\n            return m;\n        })\n        return newData;\n    }).join('rect').classed('range', true);\n\n    let avRect = continDist.selectAll('rect.av-rect').data(d=> d.data)\n        .join('rect').classed('av-rect', true).attr('width', 10).attr('height', (d, i)=> {\n        if(d.value != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n    \n    avRect.attr('transform', (d, i) => {\n        if(d.value != undefined){\n            let newy = d.value[0].scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = d3.mean(d.value.map(m=> +m.values.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', (d)=>compareColors[d.index].dark);\n\n     //////START BRANCH EXPERIMENT\n     let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n     brush.on('end', brushedComparison);\n\n     continDist.append(\"g\")\n     .classed('continuous-branch-brush', true)\n     .attr(\"class\", \"brush\")\n     .call(brush);\n\n     //////BRUSH FOR COMPARISON/////\n\n     function brushedComparison(){\n\n        let data = d3.select(this.parentNode).data()[0]\n\n        let maxCounts = data.bins.map(m => m.maxCount);\n       \n        var s = d3.event.selection;\n        var zero = d3.format(\".3n\");\n    \n        let index = d3.select('#toolbar').selectAll('.brush-span').size();\n        let classLabel = index === 0 ? 'one' : 'two';\n    \n        if(s != null){\n            let treeTest = d3.select('#sidebar').selectAll('.node').filter(f=> {\n                return f.data.leaf === true});\n    \n            \n            let y = d3.scaleLinear().domain([data.domain[0], data.domain[1]]).range([0, dimensions.height])\n            let attribute = data.key;\n            let brushedVal = [y.invert(s[1]), y.invert(s[0])];\n    \n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n            let nodes = data.data.map(m=> m.value.filter(f=> {\n                return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n            }));\n\n\n            let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n\n            let descendBins = continDist.filter(f=> {\n                return (f.index > data.index) && (f.key === data.key)});\n                \n    \n            nodes.forEach((n, i)=> {\n               \n                if(n.length > 0){\n                    let test = d3.select(this.parentNode).select(`.g-${i}`)\n                    let groupDis = test.append('g').classed('distribution-too', true);\n                    \n                    let histo = continuousHistogram(n)\n                    histo.maxCount = maxCounts[i];\n\n                    let names = n.map(m=> m.node);\n                   \n                    groupDis\n                    .data([histo]);\n\n                    groupDis.append('path')\n                    .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                    .style('stroke', compareColors[i].dark)\n                    .style('fill', compareColors[i].light)\n                    .style('fill-opacity', 0.8);\n\n                    groupDis.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n                    let otherDis = otherBins\n                    .select(`.g-${i}`).each((o, j, oNode)=> {\n                        let oHisto = continuousHistogram(o.data.filter(f=> f.index === i)[0].value.filter(f=> names.indexOf(f.node) > -1));\n                        oHisto.maxCount = o.bins[i].maxCount;\n                        let oDist = d3.select(oNode[j]).append('g').classed('distribution-too', true);\n                        oDist.data([oHisto])\n                        .append('path')\n                        .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                        .style('stroke', compareColors[i].dark)\n                        .style('fill', compareColors[i].light)\n                        .style('fill-opacity', 0.8);\n                        oDist.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n                    });\n\n                    let otherDesDis = descendBins\n                    .select(`.g-${i}`).each((o, j, oNode)=> {\n\n                        let oHisto = continuousHistogram(o.data.filter(f=> f.index === i)[0].value\n                                    .filter(f=> (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1])));\n                        oHisto.maxCount = o.bins[i].maxCount;\n\n                        let oDist = d3.select(oNode[j]).append('g').classed('distribution-too', true);\n                        oDist.data([oHisto])\n                        .append('path')\n                        .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                        .style('stroke', compareColors[i].dark)\n                        .style('fill', compareColors[i].light)\n                        .style('fill-opacity', 0.8);\n                        oDist.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n\n                    });\n                  \n                }\n            });\n\n             let nodesFlat = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n            }));\n\n           \n            let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n            }));\n    \n            let selectedNodes = brushedNodes(nodesFlat, notNodes, data, brushedVal, classLabel);\n            let selectedBranch = selectedNodes[0];\n            let secondGrp = selectedNodes[1];\n            let antiSelected = selectedNodes[2];\n            let antiSecond = selectedNodes[3];\n    \n            if(index < 2){\n                let doesItExist = d3.select('#toolbar').selectAll('.brush-span').filter((f, i, n)=> {\n                    return d3.select(n[i]).attr('value') == `${data.bins.groupLabel}-${data.key}`;\n                });\n    \n                if(doesItExist.size() === 0){\n    \n                    d3.select(this).select('.selection')\n                    .style('fill', `${brushColors[index][0]}`)\n                    .attr('stroke', `${brushColors[index][0]}`)\n                    .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                    .attr('stroke', brushColors[index][1])\n                    .attr('stroke-width', 2);\n    \n                    let badge = d3.select('#toolbar')\n                        .append('span')\n                        .attr('class', classLabel)\n                        .attr('id', classLabel)\n                        .classed('brush-span', true)\n                        .classed(`${data.bins.groupLabel}`, true)\n                        .classed('badge badge-secondary', true)\n                        .style('background', brushColors[index][0])\n                        .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                        .datum({brush:this, nodes: nodes})\n                        .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n    \n                    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        let classy = index === 0 ? 'one' : 'two';\n                        \n                        d3.select(d.brush).call(brush.move, null);\n                        d3.select(n[i].parentNode).remove();\n                        d3.select(d.brush).select('.overlay').attr('stroke-width', 0);\n                        descendBins.selectAll('.distribution-too').remove();\n                        otherBins.selectAll('.distribution-too').remove();\n                        d3.select(d.brush.parentNode).selectAll('.distribution-too').remove();\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed-second', false);\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed', false);\n                    });\n    \n                }else{\n\n                    doesItExist.text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                    let xOut = doesItExist.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                        d3.select(n[i].parentNode).remove();\n                    });\n                   \n                    d3.select(doesItExist.datum()).call(brush.move, null);\n                    d3.select(doesItExist.datum()).select('.overlay').attr('stroke-width', 0)\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll(`${data.bins.groupLabel}`)\n                        .selectAll('.second-branch')\n                        .classed('second-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.selected-branch')\n                        .classed('selected-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-second')\n                        .classed('anti-brushed-second', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-branch')\n                        .classed('anti-brushed-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n    \n                    let label = doesItExist.attr('id');\n    \n                    index = label === 'one' ? 0 : 1;\n    \n                    d3.select(this).select('.selection')\n                        .style('fill', `${brushColors[index][0]}`)\n                        .attr('stroke', `${brushColors[index][0]}`)\n                        .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                        .attr('stroke', brushColors[index][1])\n                        .attr('stroke-width', 2);\n\n                        let nodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n                        }))\n                       \n                        let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n                        }));\n\n                        doesItExist.datum({brush: this, nodes: nodes})\n    \n                        brushedNodes(nodes, notNodes, data, brushedVal, label);\n                    \n                }\n    \n            }else{\n    \n                d3.select('#toolbar').selectAll('.brush-span').filter((f, i)=> i === 0).remove();\n    \n                let classLabel = colorBool === 0 ? 'one': 'two';\n    \n                d3.select('#toolbar')\n                    .append('span')\n                    .attr('class', )\n                    .classed('brush-span', true)\n                    .classed('badge badge-secondary', true)\n                    .style('background', brushColors[colorBool][0])\n                    .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                    .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n\n                colorBool === 0 ? colorBool = 1 : colorBool = 0;\n                secondGrp.classed(classLabel, true);\n                selectedBranch.classed(classLabel, true);\n            }\n    \n        }else{\n            d3.selectAll(`.${data.key}.brushed-branch`).classed('brushed-branch', false);\n            d3.selectAll(`.${data.key}.brushed-second`).classed('brushed-second', false);\n        }\n     }\n    \n\n    ///OBSERVED/////\n    let observedWrap = binnedWrap.append('g').classed('observed', true);\n    observedWrap.attr('transform', (d, i, n)=> {\n        return 'translate('+ (dimensions.predictedWidth + 150) +', 0)'});\n\n    ////OBSERVED CONTIUOUS/////\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n    contOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, -15)`);\n\n    let compContGroups = contOb.selectAll('g.cont-groups').data(d=> d.leafData.bins).join('g').classed('cont-groups', true);\n\n    let contBars = compContGroups.selectAll('g.ob-bars').data(d=> {\n        let value = d.value.map(m=> {\n            m.index = d.index;\n            return m;\n        });\n        return value}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(dimensions.height - dimensions.margin), 0])\n        return y(Object.keys(d).length - 2)\n    })\n    .attr('fill', d=> compareColors[d.index].light).attr('fill-opacity', .4);\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let y = d3.scaleLinear()\n            .domain([0, Object.keys(d).length])\n            .range([(dimensions.height - dimensions.margin), 0]);\n\n     let movey = dimensions.height - y(Object.keys(d).length - 2);\n     return 'translate('+(movex * i)+', '+movey+')'});\n\n contOb.each((d, i, nodes)=> {\n\n     let xvalues = d.leafData.data[0].value.map(m=> {\n         return +m.values.realVal});\n     let x = d3.scaleLinear()\n         .domain([d3.min(xvalues), d3.max(xvalues)])\n         .range([0, dimensions.observedWidth]);\n\n     let y = d3.scaleLinear()\n         .domain([0, d3.max(d.leafData.bins[0].value.map(b=> Object.keys(b).length)) - 2])\n         .range([(dimensions.height - dimensions.margin), 0]);\n     \n     d3.select(nodes[i])\n         .append('g')\n         .classed('x-axis', true)\n         .call(d3.axisBottom(x))\n         .attr('transform', 'translate(0, '+dimensions.height+')')\n\n     d3.select(nodes[i]).append('g')\n         .classed('y-axis', true)\n         .call(d3.axisLeft(y).ticks(4))\n         .attr('transform', 'translate(0, '+dimensions.margin+')');\n\n         d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n         d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n\n         d3.select(nodes[i])\n         .append('g')\n         .classed('x-axis-label', true)\n         .append('text').text('Frequency')\n         .attr('transform', `translate(-20, ${dimensions.height- 10}) rotate(-90)`)\n         .style('font-size', '10px');\n });\n \n        ////Observed Discrete////\n        let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n        discOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, 5)`);\n\n        let compDisGroups = discOb.selectAll('g.dis-groups').data(d=> d.leafData.bins).join('g').classed('dis-groups', true);\n\n        let discBars = compDisGroups.selectAll('g.ob-bars').data(d=> {\n            return d.keys.map((key, i)=>{\n                return {state: key, data: d.value[i], max: d3.sum(d.value[i].map(b=> b.length)), index: d.index}\n            });\n        }).join('g').classed('ob-bars', true);\n        let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n            let width = dimensions.observedWidth / n.length;\n            return width/2;\n        }).attr('height', (d, i, n)=> {\n           \n            let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10): 0;\n            let y = d3.scaleLinear().domain([0, d.max]).range([0, (height)])\n            return y(d.data.length);\n        }).attr('fill', (d, i) => {\n            return d.data[0] != undefined ? d.data[0].color : '#fff';\n        }).attr('opacity', 0.3);\n\n        discBars.attr('transform', (d, i, n)=> {\n            let movex = dimensions.observedWidth / n.length;\n            let offSet = movex / 2\n            let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10) : 0;\n            let y = d3.scaleLinear().domain([0, d.max]).range([0, (height-5)])\n            let movey = (height-2) - y(d.data.length);\n            let finalMove = d.index === 0 ? 'translate('+(movex * i)+', '+movey+')' : 'translate('+(offSet+(movex * i))+', '+movey+')';\n            return finalMove;\n        })\n\n        dRects.on('mouseover', (d, i, n)=> {\n            let state = d3.select('g.'+d[0].label).selectAll('g.state');\n            state.filter(f=> {\n                return f[0].state === d[0].winState}).attr('opacity', 0.8);\n            state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n            d3.select(n[i]).attr('opacity', 0.9);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).attr('opacity', 0.3);\n            let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n        });\n\n        discOb.each((d, i, nodes)=> {\n                \n                let xPoint = d3.scalePoint().domain(d.stateKeys).range([0, dimensions.observedWidth]).padding(.6)\n                let height = d.stateKeys ? (d.stateKeys.length * dimensions.squareDim - 10) : 0;\n                let y = d3.scaleLinear().domain([0, d.leafData.data.length]).range([(height), 0]);\n                d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4))//.attr('transform', 'translate(0, '+height+')');\n                d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n\n                d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n                d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n        });\n\n\n\n    }\n\n}","import '../styles/index.scss';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster, getLatestData, getScales} from './filterComponent';\nimport { pullPath, calculateMovingAverage } from './pathCalc';\nimport { renderTree } from './sidebarComponent';\nimport {renderDistributionComparison} from './compare';\n\nexport const dimensions = {\n    height: 80,\n    observedWidth : 200,\n    predictedWidth : 900,\n    margin : 20,\n    squareDim : 15,\n    timeRange: 895\n}\n\nexport const brushColors = [\n    ['#64B5F6', '#F39C12'],\n    ['#6A1B9A', '#FDD835'],\n]\n\nexport const defaultBarColor = '#baaaaa'//#DCD4D4';\n\nexport let colorBool = 0;\nexport const selectedClades = [[]];\n\nexport function groupDistributions(pathData, mainDiv, groupAttr){\n\n    let scales = getScales();\n\n    let groupKeys = scales.filter(f=> f.field === groupAttr)[0].scales.map(s=> s.scaleName)\n  \n    let branchBinCount = d3.median(pathData.map(m=> m.length)) - d3.min(pathData.map(m=> m.length))\n   \n    let pathGroups = groupKeys.map(group => {\n        let paths = pathData.filter(path => {\n            return group.includes(path[path.length - 1].attributes[groupAttr].values[groupAttr]);\n        });\n\n        let groupBins = binGroups(paths, group, scales, branchBinCount);\n        return {'label': group, 'paths': paths, 'groupBins': groupBins}\n    });\n\n    renderDistStructure(mainDiv, pathGroups);\n}\nexport function binGroups(pathData, groupLabel, scales, branchCount){\n\n    console.log('pathhsss',pathData, scales)\n\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n    \n    let keys = scales.map(s=> s.field).filter(f=> attrHide.indexOf(f) === -1);\n\n    let newNormed = [...pathData];\n    let keysToHide = attrHide.length > 0 ? scales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    formatAttributeData(newNormed, scales, keysToHide);\n  \n    let max = maxTimeKeeper[0]\n\n    let normBins = new Array(branchCount)\n        .fill().map((m, i)=> {\n            let step = max / branchCount;\n            let base = (i * step);\n            let top = ((i + 1)* step);\n            return {'base': base, 'top': top, 'binI': i , 'step':step}\n        });\n\n    let internalNodes = newNormed.map(path => path.filter(node=> (node.leaf != true) && (node.root != true)));\n    let leafNodes = newNormed.flatMap(path => path.filter(node=> node.leaf === true));\n    let rootNodes = newNormed.flatMap(path => path.filter(node=> node.root === true));\n\n    normBins.map((n, i)=> {\n       \n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n            return node.combLength > n.base && node.combLength <= n.top;\n        } ));\n\n        let nodeSet = [...new Set(edges.map(e=> e.node))].map(m=> edges.filter(f=> f.node === m)[0]);\n\n        n.data = nodeSet.map(m=> {\n            m.range = [...new Set(edges.map(e=> e.node))].length;\n            return m;\n        });\n\n        return n;\n    });\n\n    let sortedBins = keys.map(key=> {\n        let scale = scales.filter(f=> f.field === key)[0];\n    \n        let mapNorm = normBins.map(bin => {\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    let attrib = d.attributes[key];\n                    attrib.node = d.node;\n                    return attrib;\n                })\n            }else{\n                bin.fData = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        });\n       \n        let leafAttr = leafNodes.map(m=> m.attributes[key]);\n        let leafData = {'data': leafAttr};\n   \n        if(scale.type === 'continuous'){\n            let x = d3.scaleLinear().domain([scale.min, scale.max]).range([0, dimensions.height]);\n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.values.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n  \n            mapNorm.map((n, i, nodeArray)=> {\n                n.type = scale.type;\n                n.bins = histogram(n.data);\n                n.domain = [scale.max, scale.min];\n                n.bins.count = branchCount;\n                n.bins.groupLabel = groupLabel;\n\n                if(d3.mean(n.bins.map(m=> m.length)) === 0){\n                    if(i === 0){\n                        n.bins = histogram(rootNodes.map(m=> m.attributes[key]));\n                        n.data = rootNodes.map(m=> m.attributes[key]);\n                        n.bins.count = branchCount;\n                    }else{\n                        n.bins = nodeArray[i-1].bins;\n                        n.data = nodeArray[i-1].data;\n                    }\n                }\n                return n;\n            });\n\n            //Histogram for observed////\n            let maxO = d3.max(leafAttr.flatMap(v=> +v.values.realVal));\n            let minO = d3.min(leafAttr.flatMap(v=> +v.values.realVal));\n            let xO = d3.scaleLinear().domain([minO, maxO]).range([0, dimensions.height]);\n\n            let histogramO = d3.histogram()\n            .value(function(d) { \n                return +d.values.realVal; })  \n            .domain(xO.domain())  \n            .thresholds(xO.ticks(20)); \n\n            leafData.bins = histogramO(leafAttr);\n      \n            let newK = {'key': key, \n                    'branches': [...mapNorm], \n                    'type': scale.type, \n                    'leafData': leafData, \n                    'rootData': rootNodes.map(m=> m.attributes[key])[0]}\n   \n            return newK;\n\n        }else{\n            //HANDLING DISCRETE//\n            let states = leafAttr[0].scales.scales;\n            let stateKeys = states[0].state? states.map(s=> s.state) : states.map(s=> s.scaleName);\n          \n            let rootNode = rootNodes[0].attributes[key]\n            rootNode.bins = d3.entries(rootNodes[0].attributes[key].values).map(m=> {       \n                let states = [{'state': m.key, 'value':m.value}];\n                return {state: states, branchCount:branchCount, color : scale.stateColors.filter(f=> f.state === m.key)[0], max:80};\n               });\n            \n            mapNorm.bins = null;\n            leafData.bins = states.map(s=> {\n                return leafAttr.filter(f=> s.scaleName.includes(f.states.state))});\n   \n            let y = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n\n            let histogram = d3.histogram()\n                .value(function(d) { return d.value; })  \n                .domain(y.domain())  \n                .thresholds(y.ticks(10)); \n  \n            mapNorm.map((n, i, nodeArray)=> {\n                let colors = scale.stateColors;\n                n.bins = stateKeys.map(state=> {\n                    let test = n.data.flatMap(m=> Object.entries(m.values).filter(f=> f[0] === state))\n                    .map(m=> {\n                        return {'state': m[0], 'value':m[1]};\n                    });\n                    \n                    return {state: test, branchCount:branchCount, histogram: histogram(test), color : colors.filter(f=> f.state === state)[0], max:80};\n                });\n                //IF WE DONT HAVE ANY BRANCHES< WE ASSUME THAT THEY ARE THE SAME AS THE PREVIOUS\n                if(n.bins[0].state.length === 0){\n                    if(i === 0){\n                        n.bins = d3.entries(rootNode.values).map(m=> {\n                            let histo = histogram([+m.value]).map(h=>{\n                                if(m.value <= h.x1 && m.value >= h.x0){\n                                    h.push(+m.value);\n                                }\n                                return h;\n                             });\n                             let states = [{'state': m.key, 'value':m.value}];\n                             return {state: states, branchCount:branchCount, histogram: histo, color:colors.filter(f=> f.state === m.key)[0], max:80};\n                            });\n                        \n                    }else{\n                        n.bins = nodeArray[i-1].bins;\n                    }\n                }\n\n                n.type = scale.type;\n                return n;\n            });\n\n            let newK = {'key': key, \n                        'branches': [...mapNorm], \n                        'type': scale.type, \n                        'leafData': leafData, \n                        'rootData': rootNodes.map(m=> m.attributes[key])[0],\n                        'stateKeys': stateKeys,\n                        'maxCount': d3.max(mapNorm.map(n=> n.data.length)),\n                    }\n            return newK;\n        }\n    });\n\n    sortedBins.group = groupLabel;\n    sortedBins.branchCount = branchCount;\n    sortedBins.keys = keys;\n    return sortedBins;\n}\nexport function drawBranchPointDistribution(data, svg){\n\n    let branchBar = svg.append('g').classed('branch-bar', true);\n    branchBar.attr('transform', 'translate(150, 0)')\n\n    branchBar.append('rect').classed('point-dis-rect', true)\n        .attr('height', 25)\n        .attr('x', -10)\n        .attr('y', -10)\n       .attr('fill', 'none');\n\n    let binWrap = branchBar.append('g').attr('transform', 'translate(115, -10)');\n\n    branchBar.append('line')\n        .attr('y1', 2)\n        .attr('y2', 2)\n        .attr('x1', '100')\n        .attr('x2', dimensions.predictedWidth)\n        .attr('stroke', 'gray')\n        .attr('stroke-width', .25);\n\n    branchBar.append('text').text('Root').attr('transform', 'translate(80, 7)');\n    let leafLabel = branchBar.append('g').classed('leaf-label', true).attr('transform', `translate(${dimensions.predictedWidth + 200}, 7)`);\n    leafLabel.append('text').text('Leaves');\n\n    let nodeLengthArray = [];\n    let nodeDuplicateCheck = [];\n\n    data.paths.map(path=> {\n        path.filter(n=> n.leaf != true).map(node=> {\n            if(nodeDuplicateCheck.indexOf(node.node) == -1){\n                nodeDuplicateCheck.push(node.node);\n                nodeLengthArray.push({'node': node.node, 'eMove': node.combLength });\n            }\n        })\n    });\n\n    let bPointScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n    let pointGroups = branchBar.selectAll('g.branch-points').data(nodeLengthArray)\n        .join('g').attr('class', (d, i)=> d.node).classed('branch-points', true);\n\n    pointGroups.attr('transform', (d, i) => {\n        return `translate(${(115 + bPointScale(d.eMove))}, 0)`});\n    pointGroups.append('circle').attr('r', 5).attr('fill', '#fff').attr('opacity', 0.5);\n\n    let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n    \n    let binsRects = binWrap\n        .selectAll('rect.bin')\n        .data(data.groupBins[0].branches.map(m=> m.range))\n        .join('rect')\n        .classed('bin', true);\n\n    binsRects.attr('width', (d, i, n)=> {\n        return x(d[1]) - x(d[0]);\n    }).attr('height', 20);\n\n    binsRects.attr('transform', (d, i, n)=> {\n        let step = x(d[1]) - x(d[0]);\n        return `translate(${step*i},0)`});\n\n    binsRects.attr('fill', 'gray').attr('stroke-width', 2).attr('stroke', 'white');\n\n    let axis = d3.axisBottom(x);\n    let axGroup = branchBar.append('g').call(axis);\n    axGroup.attr('transform', 'translate(113, 10)');\n    axGroup.select('path').attr('stroke-width', 0);\n\n    return branchBar;\n}\nexport function drawGroupLabels(pathData, svg, groupLabel){\n\n    let leafNames = pathData[0].leafData.data.map(m=> m.node);\n    let nodeNames = getLatestData().filter(f=> leafNames.indexOf(f[f.length - 1].node) > -1).flatMap(fl=> fl.map(m=> m.node));\n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n    let cladeLabel = svg.append('g').classed('clade-label', true).attr('transform', 'translate(10, 0)');\n    cladeLabel.append('rect')\n        .attr('width', 50)\n        .attr('height', (pathData.keys.length * (dimensions.height+ 15)))\n        .attr('fill', 'gray')\n        .style('opacity', 0.2)\n        .on('mouseover', (d, i)=>{\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f=> {\n                return nodeNames.indexOf(f.data.node) > -1;\n            }).classed('hover clade', true);\n        \n        treeLinks.filter(f=> {\n            return nodeNames.indexOf(f.data.node) > -1;\n        }).classed('hover clade', true);\n\n        let species = d.paths.map(m=> m[m.length - 1].label);\n        }).on('mouseout', (d, i)=> {\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.classed('hover clade', false);\n            treeLinks.classed('hover clade', false);\n        });\n\n    cladeLabel.append('text').text(d=> d.label)\n    .style('text-anchor', 'middle')\n    .attr('transform', `translate(23, ${(shownAttributes.length * (dimensions.height+ 15)/2)}), rotate(-90)`);\n\n    return cladeLabel;\n}\n/**\n * \n * @param {*} mainDiv \n * @param {*} pathGroups \n */\nexport async function renderDistStructure(mainDiv, pathGroups){\n\n    let compareTooltipFlag = false;\n   \n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n   \n    let groupWrap = mainDiv.append('div').attr('id', 'summary-view');\n    let groupDivs = groupWrap.selectAll('.group-div').data(pathGroups).join('div').classed('group-div', true);\n\n    groupDivs.each((d, i, node)=> {\n\n       let filteredAttributes = d.groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n\n        let group = d3.select(node[i]);\n        group.classed(d.label, true);\n        group.style('text-align', 'center');\n        group.append('text').text(d.label);\n        group.append('text').text(` : ${d.paths.length} Paths` );\n\n        //////Starting something new/////\n        let svg = group.append('svg');\n        svg.attr('class', 'main-summary-view');\n        svg.attr('id', `${d.label}-svg`);\n        svg.attr('height', (shownAttributes.length * (dimensions.height + 5))+ 50);\n    \n        let branchBar = drawBranchPointDistribution(d, svg);\n        branchBar.attr('transform', 'translate(55, 10)');\n    \n        let branchScale = d3.scaleLinear().domain([0, d.groupBins.branchCount]).range([0, dimensions.timeRange]);\n        let pointGroups = branchBar.selectAll('g.branch-points');\n      \n        let wrap = svg.append('g').classed('summary-wrapper', true);\n        wrap.attr('transform', 'translate(70, 50)');\n    \n        let binnedWrap = wrap.selectAll('.attr-wrap').data(filteredAttributes).join('g').attr('class', d=> d.key + ' attr-wrap');\n    \n        binnedWrap.attr('transform', (d, i, n)=>  {\n                if(i === 0){\n                    return 'translate(0,0)';\n                }else{\n                    let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                    let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                    d.sum = sum;\n                    return `translate(0, ${sum})`;\n                }\n        });\n\n        let label = binnedWrap.append('text')\n        .text(d=> d.key);\n\n        label.filter(f=> f.type === 'continuous')\n        .attr('y', 40)\n        .attr('x', 80)\n        .style('text-anchor', 'end')\n        .style('font-size', 11);\n\n        label.filter(f=> f.type === 'discrete')\n        .attr('y', (d, i)=> 3)\n        .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n        .style('text-anchor', 'middle')\n        .style('font-size', 11)\n        .attr('transform', 'rotate(-90)');\n    \n        let groupLabelBars = drawGroupLabels(d.groupBins, svg, d.label);\n        groupLabelBars.on('click', (d, i, n)=> {\n            if(compareTooltipFlag){\n                compareTooltipFlag = false;\n                d3.select(\"#compare-tooltip\").classed(\"hidden\", true);\n            }else{\n                compareTooltipFlag = true;\n                d3.select(\"#compare-tooltip\")\n                    .style(\"left\", (d3.event.pageX) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\")\n                    .select(\"#value\")\n                    .text(d.node);\n\n                d3.select(\"#compare-tooltip\").classed(\"hidden\", false);\n                d3.select('#select-for-compare').on('click', ()=> {\n\n                    compareTooltipFlag = false;\n                    d3.select(\"#compare-tooltip\").classed(\"hidden\", true);\n                    d3.select(n[i]).select('rect').attr('fill', '#F5B041');\n\n                    selectedClades[selectedClades.length - 1].push(Object.assign({},d));\n                    if(selectedClades[selectedClades.length - 1].length > 1){\n                        mainDiv.selectAll('*').remove();\n                        mainDiv.select('#compare-wrap').remove();\n                        \n                        renderDistributionComparison(mainDiv, selectedClades[selectedClades.length - 1], branchScale);\n                    }\n                });\n            }\n        });\n           \n        return renderDistibutions(binnedWrap, branchScale, pointGroups);\n    });\n}\n\n/**\n * \n * @param {*} binnedWrap \n * @param {*} branchScale \n * @param {*} pointGroups \n */\n\nexport function renderDistibutions(binnedWrap, branchScale, pointGroups){\n\n    let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n    predictedWrap.attr('transform', 'translate(35, 0)');\n    predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n    //ROOT RENDERING\n    let root = predictedWrap.selectAll('g.root').data(d=> {\n        return [d.rootData]}).join('g').classed('root', true);\n    root.attr('transform', `translate(50,0)`);\n\n    let contRoot = root.filter(f=> f.type === \"continuous\");\n    contRoot.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 12)\n        .attr('fill', '#fff')\n        .style('stroke-width', '0.5px')\n        .style('stroke', 'black');\n\n    let rootRange = contRoot.append('rect')\n        .attr('width', 12)\n        .attr('height', d=> {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            return newy(d.values.lowerCI95) - newy(+d.values.upperCI95);\n        }).attr('transform', (d, i) => {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            return 'translate(0,'+newy(+d.values.upperCI95)+')';\n        }).style('opacity', 0.5).attr('fill', defaultBarColor);\n\n    let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n    \n    rootAv.attr('transform', (d, i) => {\n        let newy = d.scales.yScale;\n        newy.range([dimensions.height, 0]);\n        let mean = +d.values.realVal;\n        return 'translate(0,'+newy(mean)+')';\n    }).attr('fill', '#004573');\n\n    // Discrete Root\n    let disRoot = root.filter(f=> f.type === \"discrete\");\n    let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n        return d.bins}).join('g').classed('root-state-groups', true);\n\n    rootStateGroups.append('text')\n        .text((d, i)=> d.color.state)\n        .attr('y', 10)\n        .attr('x', -3)\n        .style('font-size', 10)\n        .style('text-anchor', 'end');\n\n    rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n\n    rootStateGroups.append('rect')\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim)\n        .attr('fill', '#fff').attr('opacity', 1);\n\n    let rootRects = rootStateGroups.append('rect')\n        .classed('color-rect', true)\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim);\n\n    rootRects.attr('fill', (d, i)=> {\n            return `rgba(89, 91, 101, ${d.state[0].value})`;\n        }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n\n    let winStateRoot = disRoot.selectAll('g.root-state-groups')\n        .filter((f, j, n)=>{\n            let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n            return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n        }).classed('win', true);\n\n    winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n            return c.color.color;\n        }).attr('opacity', (c)=>{\n            let sum = d3.sum(c.state.flatMap(s=> s.value));\n            return sum/c.state.length;\n        });\n\n    /////BRANCHES\n    let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n        return d.branches}).join('g').classed('branch-bin', true);\n\n    branchGroup.filter(f=> f.type === 'continuous').attr('transform', (d, i, n)=> {\n        let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0;\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n            return 'translate('+(90 + (branchScale(i)) + x(step)) +', 0)'});\n\n    let discreteDist = branchGroup.filter(f=> f.type === 'discrete');\n    \n    /**\n     * Discrete Predicted Render and Events\n     */\n    renderDiscretePredicted(discreteDist);\n\n    discreteDist.attr('transform', (d, i, n)=> {\n        let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0;\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n            return 'translate('+(44 + (branchScale(i)) + x(step)) +', 0)'});\n\n    discreteDist.on('mouseover', (d, i, node)=> {\n       highlightNodesMouseover(d, i, node, pointGroups);\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    //CONTIN PREDICTED\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    continDist.on('mouseover', (d, i, node)=> {\n        highlightNodesMouseover(d, i, node, pointGroups);\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    renderContinuousPredicted(continDist);\n\n     //////START BRANCH EXPERIMENT\n     let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n     brush.on('end', brushed);\n\n     continDist.append(\"g\")\n     .classed('continuous-branch-brush', true)\n     .attr(\"class\", \"brush\")\n     .call(brush);\n \n     function brushed(){\n\n        let data = d3.select(this.parentNode).data()[0]\n        var s = d3.event.selection;\n        var zero = d3.format(\".3n\");\n\n        let index = d3.select('#toolbar').selectAll('.brush-span').size();\n        let classLabel = index === 0 ? 'one' : 'two';\n    \n        if(s != null){\n            let treeTest = d3.select('#sidebar').selectAll('.node').filter(f=> {\n                return f.data.leaf === true});\n    \n            if(treeTest.empty()){\n                renderTree(d3.select('#sidebar'), null, true);\n            }\n\n            let y = d3.scaleLinear().domain([data.domain[0], data.domain[1]]).range([0, dimensions.height])\n           \n            let attribute = data.key;\n            let brushedVal = [y.invert(s[1]), y.invert(s[0])];\n    \n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n            let nodes = data.data.filter(f=> {\n                return (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1]);\n            });\n           \n            let test = continuousHistogram(nodes);\n\n            test.maxCount = d3.sum(data.bins.map(m=> m.length));\n\n            //////EXPERIMENTING WITH BRUSH DRAW DISTRIBUTIONS////\n            let brushedDist = d3.select(this.parentNode)\n                .selectAll('g.distribution-too')\n                .data([test])\n                .join('g')\n                .classed('distribution-too', true);\n\n            brushedDist.attr('transform', 'translate(0, 0) rotate(90)');\n            let path = brushedDist.append('path').attr('d', mirrorlineGen);\n            path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n\n            let nodeNames = nodes.map(m=> m.node);\n\n            let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n            otherBins.each((b, i, n)=> {\n                \n                let test = continuousHistogram(b.data.filter(f=> nodeNames.indexOf(f.node) > -1) );\n               \n                test.maxCount = d3.sum(b.bins.map(m=> m.length));\n              \n                let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n                .data([test])\n                .join('g')\n                .classed('distribution-too', true);\n\n                otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n                let path = otherDist.append('path').attr('d', mirrorlineGen);\n                path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n    \n            });\n\n            let descendBins = continDist.filter(f=> {\n                return (f.index > data.index) && (f.key === data.key)});\n\n            descendBins.each((b, i, n)=> {\n\n                let test = b.data.filter(f=> {\n                    return (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1]);\n                    });\n\n                 let testH = continuousHistogram(test);\n               \n                 testH.maxCount = d3.sum(b.bins.map(m=> m.length));\n              \n                let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n                .data([testH])\n                .join('g')\n                .classed('distribution-too', true);\n\n                otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n                let path = otherDist.append('path').attr('d', mirrorlineGen);\n                path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n\n            })\n          \n            ////END DISTRIBUTION///\n           \n            let notNodes = data.data.filter(f=> {\n                return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n            });\n\n            let selectedNodes = brushedNodes(nodes, notNodes, data, brushedVal, classLabel);\n            let selectedBranch = selectedNodes[0];\n            let secondGrp = selectedNodes[1];\n            let antiSelected = selectedNodes[2];\n            let antiSecond = selectedNodes[3];\n    \n            if(index < 2){\n    \n                let doesItExist = d3.select('#toolbar').selectAll('.brush-span').filter((f, i, n)=> {\n                    return d3.select(n[i]).attr('value') == `${data.bins.groupLabel}-${data.key}`;\n                });\n    \n                if(doesItExist.size() === 0){\n    \n                    d3.select(this).select('.selection')\n                    .style('fill', `${brushColors[index][0]}`)\n                    .attr('stroke', `${brushColors[index][0]}`)\n                    .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                    .attr('stroke', brushColors[index][1])\n                    .attr('stroke-width', 2);\n    \n                    let badge = d3.select('#toolbar')\n                        .append('span')\n                        .attr('class', classLabel)\n                        .attr('id', classLabel)\n                        .classed('brush-span', true)\n                        .classed(`${data.bins.groupLabel}`, true)\n                        .classed('badge badge-secondary', true)\n                        .style('background', brushColors[index][0])\n                        .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                        .datum({brush:this, nodes: nodes})\n                        .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n    \n                    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                       \n                        let classy = index === 0 ? 'one' : 'two';\n                        d3.select(d.brush).call(brush.move, null);\n                        d3.select(n[i].parentNode).remove();\n                        d3.select(d.brush).select('.overlay').attr('stroke-width', 0);\n                        descendBins.selectAll('.distribution-too').remove();\n                        otherBins.selectAll('.distribution-too').remove();\n                        d3.select(d.brush.parentNode).select('.distribution-too').remove();\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed-second', false);\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed', false);\n                    });\n    \n                }else{\n    \n                    doesItExist.text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                    let xOut = doesItExist.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                        d3.select(n[i].parentNode).remove();\n                    });\n                   \n                    d3.select(doesItExist.datum().brush).call(brush.move, null);\n                    d3.select(doesItExist.datum().brush).select('.overlay').attr('stroke-width', 0)\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll(`${data.bins.groupLabel}`)\n                        .selectAll('.second-branch')\n                        .classed('second-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.selected-branch')\n                        .classed('selected-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-second')\n                        .classed('anti-brushed-second', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-branch')\n                        .classed('anti-brushed-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    let label = doesItExist.attr('id');\n    \n                    index = label === 'one' ? 0 : 1;\n    \n                    d3.select(this).select('.selection')\n                        .style('fill', `${brushColors[index][0]}`)\n                        .attr('stroke', `${brushColors[index][0]}`)\n                        .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                        .attr('stroke', brushColors[index][1])\n                        .attr('stroke-width', 2);\n\n                    let nodes = data.data.filter(f=> {\n                        return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n                    });\n                    let notNodes = data.data.filter(f=> {\n                        return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n                    });\n                    doesItExist.datum({brush:this, nodes: nodes})\n                    brushedNodes(nodes, notNodes, data, brushedVal, label);\n                    \n                }\n    \n            }else{\n    \n                d3.select('#toolbar').selectAll('.brush-span').filter((f, i)=> i === 0).remove();\n    \n                let classLabel = colorBool === 0 ? 'one': 'two';\n    \n                d3.select('#toolbar')\n                    .append('span')\n                    .attr('class', )\n                    .classed('brush-span', true)\n                    .classed('badge badge-secondary', true)\n                    .style('background', brushColors[colorBool][0])\n                    .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                    .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                colorBool === 0 ? colorBool = 1 : colorBool = 0;\n                secondGrp.classed(classLabel, true);\n                selectedBranch.classed(classLabel, true);\n            }\n    \n        }else{\n            d3.selectAll(`.${data.key}.brushed-branch`).classed('brushed-branch', false);\n            d3.selectAll(`.${data.key}.brushed-second`).classed('brushed-second', false);\n        }\n     }\n\n     ///OBSERVED/////\n     let observedWrap = binnedWrap.append('g').classed('observed', true);\n     observedWrap.attr('transform', (d, i, n)=> {\n         return 'translate('+ (dimensions.predictedWidth + 150) +', 0)'});\n\n    ////OBSERVED CONTIUOUS/////\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n    contOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, -15)`);\n\n    let contBars = contOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(dimensions.height - dimensions.margin), 0])\n        return y(Object.keys(d).length - 2)\n    })\n    .attr('fill', defaultBarColor).attr('fill-opacity', .5);\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let y = d3.scaleLinear()\n            .domain([0, Object.keys(d).length])\n            .range([(dimensions.height - dimensions.margin), 0]);\n\n        let movey = dimensions.height - y(Object.keys(d).length - 2);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    contOb.each((d, i, nodes)=> {\n\n        let xvalues = d.leafData.data.map(m=> {\n            return +m.values.realVal});\n        let x = d3.scaleLinear()\n            .domain([d3.min(xvalues), d3.max(xvalues)])\n            .range([0, dimensions.observedWidth]);\n\n        let y = d3.scaleLinear()\n            .domain([0, d3.max(d.leafData.bins.map(b=> Object.keys(b).length)) - 2])\n            .range([(dimensions.height - dimensions.margin), 0]);\n        \n        d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis', true)\n            .call(d3.axisBottom(x))\n            .attr('transform', 'translate(0, '+dimensions.height+')')\n\n        d3.select(nodes[i]).append('g')\n            .classed('y-axis', true)\n            .call(d3.axisLeft(y).ticks(4))\n            .attr('transform', 'translate(0, '+dimensions.margin+')');\n\n            d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n            d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n\n            d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis-label', true)\n            .append('text').text('Frequency')\n            .attr('transform', `translate(-20, ${dimensions.height- 10}) rotate(-90)`)\n            .style('font-size', '10px');\n    });\n    \n    ////Observed Discrete////\n    let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n    discOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, 5)`)\n    let discBars = discOb.selectAll('g.ob-bars').data(d=> {\n        return d.stateKeys.map((key, i)=>{\n            return {state: key, data: d.leafData.bins[i], max: d3.sum(d.leafData.bins.map(b=> b.length))}\n        });\n    }).join('g').classed('ob-bars', true);\n    let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10): 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height)])\n        return y(d.data.length);\n    }).attr('fill', (d, i) => {\n        return d.data[0] != undefined ? d.data[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    discBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10) : 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height-5)])\n        let movey = (height-5) - y(d.data.length);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    dRects.on('mouseover', (d, i, n)=> {\n        let state = d3.select('g.'+d[0].label).selectAll('g.state');\n        state.filter(f=> {\n            return f[0].state === d[0].winState}).attr('opacity', 0.8);\n        state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n        d3.select(n[i]).attr('opacity', 0.9);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).attr('opacity', 0.3);\n        let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n    });\n\n    discOb.each((d, i, nodes)=> {\n           \n        let xPoint = d3.scalePoint().domain(d.stateKeys).range([0, dimensions.observedWidth]).padding(.6)\n        let height = d.stateKeys ? (d.stateKeys.length * dimensions.squareDim - 10) : 0;\n        let y = d3.scaleLinear().domain([0, d.leafData.data.length]).range([(height), 0]);\n        d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4))//.attr('transform', 'translate(0, '+height+')');\n        d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n\n        d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n        d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n    });\n\n}\n\nfunction brushedNodes(nodes, notNodes, data, brushedVal, classLabel){\n   \n    let nodeNames = nodes.map(m=> m.node);\n    let notNodeNames = notNodes.map(m=> m.node);\n\n    let timeNodes = d3.extent(nodes.map(m=> m.combLength));\n    let treeNode = d3.select('#sidebar').selectAll('.node');\n\n    let selectedBranch = treeNode.filter(f=> {\n        return nodeNames.indexOf(f.data.node) > -1;\n    }).classed('brushed-branch', true);\n\n    let notNodeSelectedBranch = treeNode.filter(f=> notNodeNames.indexOf(f.data.node) > -1).classed('anti-brushed', true);\n\n    let test = pullPath([], selectedBranch.data(), [], [], 0);\n    let notTest = pullPath([], notNodeSelectedBranch.data(), [], [], 0);\n\n    let testtest = test.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values.realVal >= brushedVal[0] && f.data.attributes[data.key].values.realVal <= brushedVal[1];\n    }).map(m=> m.data.node);\n\n    let notTestTest = notTest.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values.realVal < brushedVal[0] || f.data.attributes[data.key].values.realVal > brushedVal[1];\n    }).map(m=> m.data.node);\n    \n    let secondGrp = treeNode.filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n    let secondLinks = d3.select('#sidebar').selectAll('.link')\n        .filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n    \n    selectedBranch.classed(`${data.key}`, true).classed(classLabel, true).classed('brushed-branch', true);\n   \n    let notNodeSecondGrp = treeNode\n        .filter(f=> (notNodeNames.indexOf(f.data.node) === -1 )&& (notTestTest.indexOf(f.data.node) > -1))\n        .classed('anti-brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n\n    let secondAntiLinks = d3.select('#sidebar').selectAll('.link')\n            .filter((f, j)=> (notNodeNames.indexOf(f.data.node) === -1)&&(notTestTest.indexOf(f.data.node) > -1));\n    secondAntiLinks.classed('anti-brushed-second', true).classed(`${data.key}`, true).classed(classLabel, true);\n    notNodeSelectedBranch.classed('anti-brushed', true).classed(classLabel, true).classed(classLabel, true);\n\n    return [selectedBranch, secondGrp, notNodeSelectedBranch, notNodeSecondGrp];\n}\n\nfunction continuousHistogram(data){\n    \n    let x = data[0].yScale;\n    let histogram = d3.histogram()\n            .value(function(d) { return d.values.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n\n    return histogram(data);\n}\n\nexport const mirrorlineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([n.length - 1, 0]).range([0, dimensions.height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = n.maxCount ? n.maxCount : d.maxCount;\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        \n        return x(dat); \n});\n\nexport const lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, n.length - 1]).range([0, dimensions.height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = d.maxCount? d.maxCount : d3.sum(n.map(m=> m.length))\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        return x(dat); \n    });\n\nfunction renderDiscretePredicted(discreteDist){\n            /////////EXPERIMENT////////\n    let stateBarsPredicted = discreteDist.selectAll('g.histo-bars')\n        .data(d=> {\n            let bins = d.bins.map(m=> {\n                m.index = d.index;\n                return m\n            });\n            return bins}).join('g')\n        .classed('histo-bars', true);\n\n    //stateBarsPredicted.attr('transform', (d, i)=> `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`);\n    stateBarsPredicted.attr('transform', (d, i, n)=> {\n        return `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`});\n\n    let discreteWidth = 85;\n\n    let binRects = stateBarsPredicted.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', discreteWidth)\n            .attr('stroke', 'black')\n            .style('stroke-width', 0.5)\n            .attr('fill', '#fff')\n            .attr('opacity', 0.3);\n\n    stateBarsPredicted.append('text')\n        .text('1')\n        .attr('transform', `translate(${discreteWidth + 2},10)`)\n        .style('font-size', '10px')\n        .style('opacity', 0.6);\n\n    stateBarsPredicted.append('text')\n        .text('0')\n        .attr('transform', `translate(-7,10)`)\n        .style('font-size', '10px')\n        .style('opacity', 0.6);\n\n    function randomizer(){\n        var min= -.03; \n        var max= .03;  \n        var random = Math.random() * (+max - +min) + +min; \n        return random;\n    }\n\n\n    let probabilityTicks = stateBarsPredicted\n    .selectAll('.prob-tick')\n    .data((d, i, n)=> {\n        \n        let form = d3.format(\".3f\");\n\n        let jitterMove = [...new Set(d.state.map(m=> +form(m.value)))].map(m=> {\n            let arrayTest = d.state\n            .filter(f=> +form(f.value) === m)\n            .map(arr=> {\n                arr.y = Math.random();\n                arr.x = randomizer();\n                return arr;\n            });\n            return arrayTest;\n        })\n       \n        let state = d.state.map(m=> {\n          \n            let newstate = m;\n            newstate.average = d3.mean(d.histogram.flatMap(m=> m.map(v=> +v.value)));\n            newstate.color = d.color.color;\n            return newstate;\n        });\n        state.color = d.color.color;\n        state.average = d3.mean(d.histogram.flatMap(m=> m.map(v=> +v.value)));\n        return state;\n    }).join('circle').classed('prob-tick', true)\n\n    probabilityTicks\n        .attr('r', 2)\n        .attr('opacity', 0.4)\n        .attr('fill', 'gray');\n\n    probabilityTicks.attr('transform', (d, i, n)=> {\n        let scale = d3.scaleLinear().domain([0, 1]).range([2, (discreteWidth - 2)]).clamp(true);\n    \n    let yScale = d3.scaleLinear().domain([0, 1]).range([2, dimensions.squareDim - 2])\n    return `translate(${scale(d.value + d.x)},${yScale(d.y)})`});\n\n    let averageTick = stateBarsPredicted\n        .selectAll('.av-tick').data(d=> {\n            return [{value: d.state[0].average, color: d.color.color}];\n        }).join('rect').classed('av-tick', true)\n        .attr('width', 1).attr('height', dimensions.squareDim)\n        .attr('fill', d=> d.color)\n        .attr('transform', (d, i, n)=> {\n            let scale = d3.scaleLinear().domain([0, 1]).range([0, (discreteWidth - 2)]);\n            return `translate(${scale(d.value)}, 0)`});\n\n    averageTick.on('mouseover', (d, i, n)=> {\n    \n        let tool = d3.select('#tooltip');\n\n        tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n        \n        let f = d3.format(\".3f\");\n        \n        tool.html(`Average: ${f(d.value)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n        tool.style('height', 'auto');\n\n    }).on('mouseout', ()=>{\n        let tool = d3.select('#tooltip');\n        tool.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    });\n\n    probabilityTicks.on('mouseover', (d, i, n)=> {\n    \n        let tool = d3.select('#tooltip');\n\n        tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n        \n        let f = d3.format(\".3f\");\n        \n        tool.html(`${d.state} : ${f(d.value)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n        tool.style('height', 'auto');\n\n    }).on('mouseout', ()=>{\n        let tool = d3.select('#tooltip');\n        tool.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    });\n\n    /////////END XPERIMENT////////\n\n    let stateBinsPredicted = discreteDist.selectAll('g.state-bins')\n        .data(d=> d.bins).join('g')\n        .classed('state-bins', true);\n\n    stateBinsPredicted.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n\n    discreteDist.each((d, i, node)=>{\n        let maxBin = 0;\n        let maxState = null;\n        d.bins.map(m=> {\n            if(d3.sum(m.state.flatMap(s=> s.value)) > maxBin){\n                maxBin = d3.sum(m.state.flatMap(s=> s.value));\n                maxState = m.color.state;\n            }\n        });\n\n        let winStates = d3.select(node[i]).selectAll('g.state-bins')\n            .filter((f, j, n)=>{\n                return f.color.state === maxState;\n            }).classed('win', true);\n\n        let winStateTicks = d3.select(node[i]).selectAll('g.histo-bars')\n            .filter((f, j, n)=>{\n                return f.color.state === maxState;\n            }).classed('win', true);\n        \n        winStates.select('rect.state-rect').attr('fill', (c)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            });\n    // winStateTicks.selectAll('rect.prob-tick').attr('fill', (c)=> c.color);\n        \n    });\n}\n\nfunction renderContinuousPredicted(continDist){\n\n    continDist.each((d, i, nodes)=> {\n        let distrib = d3.select(nodes[i])\n            .selectAll('g')\n            .data([d.bins])\n            .join('g')\n            .classed('distribution', true);\n\n        distrib.attr('transform', 'translate(11, '+dimensions.height+') rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", defaultBarColor).attr('fill-opacity', .4)//.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', defaultBarColor);\n    });\n\n    let contRect = continDist.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 10)\n        .style('fill', 'none')\n        .style('stroke', 'gray');\n\n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        })\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.scales.yScale != undefined){\n            let newy = d.scales.yScale;\n            newy.range([80, 0]);\n            return newy(d.values.lowerCI95) - newy(d.values.upperCI95)\n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n        let newy = d.scales.yScale;\n        newy.range([80, 0]);\n        return 'translate(0,'+newy(d.values.upperCI95)+')'\n    });\n\n    //rangeRect.attr('fill', \"rgba(133, 193, 233, .05)\");\n    rangeRect.attr('fill', defaultBarColor).attr('opacity', 0.5)\n\n    let avRect = continDist.append('rect').attr('width', 10).attr('height', (d, i)=> {\n        if(d.data[0] != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n\n    avRect.attr('transform', (d, i) => {\n        if(d.data[0] != undefined){\n            let newy = d.data[0].scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = d3.mean(d.data.map(m=> +m.values.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', '#004573');\n}\n\nfunction highlightNodesMouseover(d, i, node, pointGroups){\n    let list = d.data.map(m=> m.node);\n    let selected = pointGroups.filter(p=> {\n        return list.indexOf(p.node) > -1}).classed('selected', true);\n    let treeNode  = d3.select('#sidebar').selectAll('.node');\n    let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n    if(d.type === 'continuous'){\n        let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n        let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n    }\n    \n}\n\n","import * as d3 from \"d3\";\nimport { load_data } from \"./multinetLoad\";\nimport { discreteTraitList, colorKeeper, calculatedScalesKeeper, dataMaster, nestedData, speciesTest } from \".\";\nimport { allPaths } from \"./pathCalc\";\nimport { binGroups } from \"./distributionView\";\nimport { addCladeGroup, chosenCladesGroup, addClade } from \"./cladeMaker\";\nimport { buildTreeStructure } from \"./sidebarComponent\";\n\nexport const maxTimeKeeper = [];\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\nfunction generatePairs(pathData){\n    return pathData.flatMap((path, i)=> {\n        let pairs = pathData.filter((f, j)=> j != i);\n        let paired =  pairs.map((p)=> {\n            return {'p1': path, 'p2': p}\n        });\n        return paired.map(m=> {\n            \n            let key = [m.p1[m.p1.length - 1].node, m.p2[m.p2.length - 1].node].sort();\n            m.key = key.join(',');\n            let distance = getDistance(m);\n            m.distance = distance;\n            m.deltas = calculateDelta(m, distance);\n            m.closeAll = calculateCloseness(m, distance);\n           \n            return m;\n        });\n    });\n}\n\nexport function pairPaths(pathData){\n\n    let allPairs = generatePairs(pathData);\n    let pairSet = [...new Set(allPairs.map(m=> m.key))];\n    return pairSet.map(k=> {\n        let index = allPairs.map(m=> m.key).indexOf(k);\n        return allPairs[index];\n    });\n}\n\nfunction getDistance(pair){\n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n    pair.common = pair.p1[p1Index]\n\n    return d3.sum(p1.map(m=> m.edgeLength)) + d3.sum(p2.map(m=> m.edgeLength));\n}\n\nfunction calculateDelta(pair, distance){\n   \n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n \n    let range = maxTimeKeeper[0] - p1[0].combLength;\n    let binCount = d3.max([p1.length, p2.length])\n    let binStep = range / binCount;\n   \n    let bins = [...new Array(binCount-1)].map((d, i)=> {\n        return {'bottom': p1[0].combLength + (i*binStep), 'top': p1[0].combLength + ((i+1)*binStep) }\n    })\n   \n    bins = bins.map((d, i)=> {\n        let one = p1.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        let two = p2.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        d.one = one;\n        d.two = two;\n        return d;\n    });\n\n    bins = bins.map((b, i)=> {\n        if(b.one.length === 0){\n            b.one = bins[i-1].one;\n        }\n        if(b.two.length === 0){\n            b.two = bins[i-1].two;\n        }\n\n        return b;\n    })\n    \n    let attributes = d3.entries(p1[0].attributes)\n                    .filter(f => f.value.type === 'continuous')\n                    .map(m=> {\n                        let name = m.key;\n                        let valdiffs = bins.map((b, i)=> {\n                            return Math.abs(b.one[0].attributes[name].values.realVal - b.two[0].attributes[name].values.realVal);\n                        });\n                        m.value = d3.max(valdiffs) / distance;\n                        return m;\n                    });\n\nreturn attributes;\n\n}\n\nfunction calculateCloseness(pair, distance){\n let leaf1 = pair.p1.filter(p=> p.leaf === true)[0].attributes;\n let leaf2 = pair.p2.filter(p=> p.leaf === true)[0].attributes;\n\n let closeness = d3.entries(leaf1).filter(f=> f.value.type === 'continuous').map(m=> {\n     m.value = Math.abs(m.value.values.realVal - leaf2[m.key].values.realVal) / distance;\n     return m\n });\n\n return closeness;\n}\n\nexport function calculateNewScales(attributes, keyList, colorKeeper){\n\n    return keyList.map((d, i)=> {\n\n        let attData = attributes.flatMap(f=> f[d]);\n        let color = colorKeeper[i] != undefined ? colorKeeper[i][0] : colorKeeper[0][0];\n       \n        if(attData[0].type == 'continuous'){\n            \n            let max = d3.max(attData.flatMap(m=> m.values.upperCI95));\n            let min = d3.min(attData.flatMap(m=> m.values.lowerCI95));\n            let mean = d3.mean(attData.flatMap(m=> m.values.realVal));\n\n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([color, '#f23929']).domain([min, max]),\n                'catColor': color,\n            };\n        }else{\n            let scaleCat = d3.keys(attData[0].values);\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, j)=> {\n                    return {'state': sc, 'color': colorKeeper[j][0]};\n                }),\n                'catColor': color,\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            \n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n            \n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n        leaf.label = mappedLeafLabels[i];\n\n        //let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n      \n        let leafCharIndex = leafChar.rows[0][\"\"] ? leafChar.rows.map(m=> m[\"\"]) : leafChar.rows.map(m=> m[\"species\"]);\n  \n        leaf.node = leaf.V2;\n        let keys = calculatedScales.map(m=> m.field);\n        let attr = {};\n         \n        let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n        keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                    // return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                     return {'state': state, realVal: value};\n                 });\n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 //attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n                 attr[k] = {'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n\n         leaf.clade = chosenOne.clade;\n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                   // res.scaleVal = scale(res.estimate);\n                   // res.scaledLow = scale(res.lowerCI95);\n                    //res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                       // return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                        return {'state': s.scaleName, realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\nexport function rootAttribute(paths, calculatedAtt, calculatedScales){\n\n    let rootAtt = calculatedAtt.filter(f=> f.node === paths[0][0].node)[0];\n\n    Object.keys(rootAtt).filter(f=> f != 'node').map(att=> {\n        rootAtt[att].scales = calculatedScales.filter(f=> f.field === att)[0];\n    });\n\n    return paths.map((p, i)=> {\n        p[0].attributes = rootAtt;\n        p[0].root = true;\n        return p\n    });\n\n};\nexport function combineLength(paths){\n\n    let maxTime = paths.map(path=> d3.sum(path.map(p=> p.edgeLength)))[0];\n    maxTimeKeeper.push(maxTime);\n    return paths.map(path=> {\n        return path.map((node, i, n)=> {\n            node.maxTime = maxTime;\n            node.combLength = d3.sum(n.filter((f, j)=> i >= j).map(m=> m.edgeLength));\n            return node;\n        })\n    })\n\n}\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(pathData, scales, filterArray){\n\n    let keys = (filterArray == null)? Object.keys(pathData[0][0].attributes).filter(f=> f != 'node' && f != 'leaf' && f != 'length' && f != 'root' && f != 'key'): filterArray;\n   \n    let newData = pathData.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                let speciesLabel = path[path.length - 1].node;\n                \n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].species = speciesLabel;\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.combineLength;\n                    m.attributes[key].combLength = m.combLength;\n                    m.attributes[key].node = m.node;\n                    m.attributes[key].edgeMove = m.edgeLength;\n                    m.attributes[key].edgeLength = m.edgeLength;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = m.attributes[key].scales.yScale;\n                    m.attributes[key].satScale = m.attributes[key].scales.satScale;\n                    m.attributes[key].colorScale = m.attributes[key].scales.colorScale;\n                    if(m.leaf){\n                        m.attributes[key].leaf = m.leaf;\n                    }\n                    m.attributes[key].leaf = m.leaf;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf === true){\n                        let states = d3.entries(m.attributes[key].values);\n                     \n                        m.attributes[key].leaf = m.leaf;\n                        let state = m.attributes[key];\n                        state.states = {field: key, state: m.attributes[key].values[key]}\n                        state.species = speciesLabel;\n                        state.winState = m.attributes[key].values[key] ?  m.attributes[key].values[key] : d3.entries(m.attributes[key].values);\n                        state.color = m.attributes[key].scales.stateColors.filter(f=> {\n                            return f.state.includes(state.winState)})[0].color;\n\n                        \n                        state.move = m.combLength;\n                        state.combLength = m.combLength;\n                        state.node = m.node;\n                        state.edgeMove = m.edgeLength;\n                        state.edgeLength = m.edgeLength;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : d3.entries(m.attributes[key].values);//.filter(f => f.state != undefined);\n\n                        return states.map((st, j)=> {\n                            st.state = st.key;\n                            st.value = st.value;\n                            \n                            st.color = m.attributes[key].scales.stateColors.filter(f=> f.state === st.key)[0];\n                           \n                            st.move = m.combLength;\n                            st.combLength = m.combLength;\n                            st.node = m.node;\n                            st.edgeMove = m.edgeLength;\n                            st.edgeLength = m.edgeLength;\n                            st.attrLabel = key;\n                            st.species = speciesLabel;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}\n\nexport async function dataLoadAndFormatMultinet(workspace, graphName){\n\n    let dataName = graphName;\n\n    let data = await load_data(workspace, graphName);\n\n   \n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let attributeList = [];\n\n    let edges = data.links;\n    let internal = data.nodes.filter(f=> f.id.includes('internal'));\n    let leaves = data.nodes.filter(f=> f.id.includes('leaf'));\n\n    let notAttributeList = [\"id\", \"label\", \"_key\", \"_rev\", \"key\", \"length\"];\n\n    ///Creating attribute list to add estimated values in //\n    d3.keys(leaves[0]).filter(f=> notAttributeList.indexOf(f) === -1).forEach((d, i)=> {\n\n        if(discreteTraitList.indexOf(d) > -1){\n            attributeList.push({field: d, type: 'discrete'});\n        }else{\n            attributeList.push({field: d, type:'continuous'});\n        }\n\n    });\n\n    let calculatedAtt = internal.map((row, i)=> {\n\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                   \n                    if(m.key.includes('upperCI')){\n                        values.upperCI95 = +m.value;\n                    }else if(m.key.includes('lowerCI')){\n                        values.lowerCI95 = +m.value;\n                    }else{\n                        values.realVal = +m.value;\n                    }\n                }else{\n                     values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.label;\n        newRow.key = row.id;\n        newRow.length = +row.length;\n        newRow.leaf = false;\n        return newRow;\n    });\n\n    let calcLeafAtt = leaves.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                    values.realVal = +m.value;\n                }else{\n                    values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.label;\n        newRow.label = row.label;\n        newRow.length = +row.length;\n        newRow.key = row.id;\n        newRow.leaf = true;\n        return newRow;\n    });\n\n    let calculatedScales = calculateNewScales(calculatedAtt, attributeList.map(m=> m.field), colorKeeper);\n\n    let matchedEdges = edges.map((edge, i)=> {\n\n        let attrib = edge.target.includes(\"internal\") ? calculatedAtt.filter(f=> f.key === edge.target)[0] : calcLeafAtt.filter(f=> f.key === edge.target)[0];\n        let fromNode = edge.source.includes(\"internal\") ? calculatedAtt.filter(f=> f.key === edge.source)[0] : calcLeafAtt.filter(f=> f.key === edge.source)[0];\n\n        if(attrib){\n           \n            Object.keys(attrib).filter(f=> (f != 'node') && (f != 'label') && (f != 'length') && (f != 'leaf') && (f != 'key')).map((att, i)=>{\n                let scales = calculatedScales.filter(f=> f.field=== att)[0];\n                attrib[att].scales = scales;\n                return att;\n            })\n        }\n        let newEdge = {\n            V1: fromNode.node,\n            V2: attrib.node,\n            node: attrib.node,\n            leaf: attrib.leaf,\n            edgeLength: +attrib.length,\n            attributes: attrib ? attrib : null\n        }\n        return newEdge;\n    });\n\n    let paths = allPaths(matchedEdges, matchedEdges.filter(f=> f.leaf === true), \"V1\", \"V2\")\n        .map((path, i)=> {\n            let root = path[0];\n            let attrib = calculatedAtt.filter(f=> f.node === root.node)[0];\n            if(attrib){\n               \n                Object.keys(attrib).filter(f=> (f != 'node') && (f != 'label') && (f != 'length') && (f != 'leaf') && (f != 'key')).map((att, i)=>{\n                    let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                    attrib[att].scales = scales;\n                    return att;\n                })\n            }\n            let rooted = {\n                V1: null,\n                V2: attrib.node,\n                node: attrib.node,\n                leaf: attrib.leaf,\n                root: true,\n                edgeLength: 0,\n                attributes: attrib ? attrib : null\n            }\n            path[0] = rooted;\n            return path;\n        });\n\n    let normedPaths = combineLength(paths);\n\n    let group = binGroups(normedPaths, dataName, calculatedScales, 8);\n    let chosenClade = addCladeGroup(`All ${dataName}`, ['Whole Set'], [{'label': `All ${dataName}`, 'paths': normedPaths, 'groupBins': group}]);\n    chosenCladesGroup.push(chosenClade)    \n    \n    addClade(`All ${dataName}`, normedPaths);\n\n    calculatedScalesKeeper.push(calculatedScales);\n    dataMaster.push(normedPaths);\n    nestedData.push(buildTreeStructure(normedPaths, matchedEdges));\n    speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.node));\n\n    return [normedPaths, calculatedScales];\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {calculateNewScales, rootAttribute, combineLength, dataLoadAndFormatMultinet, loadData} from './dataFormat';\nimport {allPaths} from './pathCalc';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {toolbarControl, toolbarDataControl} from './toolbarComponent';\nimport { initialViewLoad } from './viewControl';\nimport { addCladeGroup, chosenCladesGroup, addClade} from './cladeMaker';\nimport { binGroups } from './distributionView';\nimport { getGraphNames } from './multinetLoad';\n\n\nexport const dataMaster = [];\nexport const savedSelected = [];\nexport const collapsed = false;\nexport const nestedData = [];\nexport const speciesTest = [];\nexport const calculatedScalesKeeper = [];\n\nexport const colorKeeper = [\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n]\n\nexport const attributeList = [];\nexport let discreteTraitList = ['Clade', 'Group', 'island/mainland'];\n\nexport const workspace = 'evo-bio';\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nwrap.select('#selected').classed('hidden', true);\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar');\nlet toolbarDataWrap = toolbarDiv.append('div').classed('toolbar-data-button', true);\nlet toolbarButtonWrap = toolbarDiv.append('div').classed('toolbar-button-wrap', true);\nwrap.select('#filter-tab').classed('hidden', true);\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n\n////DATA LOADING////\n\nappLaunch();\n\n// async function appLaunch(){\n\n//    // let graphList = await getGraphNames(workspace);\n//     // graphList = graphList.map(name=> {\n//     //     return {field: name, text: `Data: ${name}`}\n//     // })\n//    let graphList = ['Anolis', 'Anolis']\n//    // toolbarDataControl(toolbarDataWrap, graphList, graphList[1]);\n//    toolbarDataControl(toolbarDataWrap, graphList, graphList[0]);\n   \n//     //loadApp(workspace, graphList[0].field);\n//     loadApp(null, null);\n\n// }\n\nasync function appLaunch(){\n\n    let graphList = await getGraphNames(workspace);\n    graphList = graphList.map(name=> {\n        return {field: name, text: `Data: ${name}`}\n    })\n   toolbarDataControl(toolbarDataWrap, graphList, graphList[0]);\n    loadApp(workspace, graphList[0].field);\n}\n\nexport async function loadApp(workspace, graphName){\n\n    dataLoadAndFormat('anolis-edges.json', 'anolis-edge-lengths.json', 'anolis-leaf-data.csv', 'anolis-res.json', 'Anolis').then(centData=> {\n    //dataLoadAndFormatMultinet(workspace, graphName).then(centData=> {\n\n        console.log('cent',centData)\n    \n        toolbarControl(toolbarButtonWrap, main, centData[1]);\n        d3.select('#clade-show').selectAll('li').select('input').node().checked = true\n       \n        renderTree(null, true, false);\n        renderTreeButtons(centData[0], false);\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        initialViewLoad(centData[1]);\n    });\n}\n\nasync function dataLoadAndFormat(edgeFile, edgeLengthFile, leafCharFile, resFile, dataName){\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edges = await loadData(d3.json, `./public/data/${edgeFile}`, 'edge');\n    let leafChar = await loadData(d3.csv, `./public/data/${leafCharFile}`, '');\n    let edgeLen = await loadData(d3.json, `./public/data/${edgeLengthFile}`, 'edge');\n    let char = await loadData(d3.json, `./public/data/${resFile}`, '');\n\n    ///Creating attribute list to add estimated values in //\n\n    leafChar.columns.filter(f=> f != 'species').forEach((d, i)=> {\n\n        if(discreteTraitList.indexOf(d) > -1){\n            attributeList.push({field: d, type: 'discrete'});\n        }else{\n            attributeList.push({field: d, type:'continuous'});\n        }\n\n    });\n\n    edges.rows = edges.rows.filter(f=> f.From != \"\").map((edge, i)=> {\n        edge.edgeLength = edgeLen.rows[i].x;\n        return edge;\n    });  \n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.From);\n   \n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.To) == -1 );\n\n    let calculatedAtt = char.rows.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                   \n                    if(m.key.includes('upperCI')){\n                        values.upperCI95 = m.value;\n                    }else if(m.key.includes('lowerCI')){\n                        values.lowerCI95 = m.value;\n                    }else{\n                        values.realVal = m.value;\n                    }\n                }else{\n                     values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.nodeLabels;\n        return newRow;\n    });\n\n  \n    let calculatedScales = calculateNewScales(calculatedAtt, attributeList.map(m=> m.field), colorKeeper);\n\n    let matchedEdges = edges.rows.map((edge, i)=> {\n        let attrib = calculatedAtt.filter(f=> f.node === edge.To)[0]\n        if(attrib){\n            Object.keys(attrib).filter(f=> f != 'node').map((att, i)=>{\n                \n                let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                attrib[att].scales = scales;\n                return att;\n                \n            })\n        }\n        let newEdge = {\n            V1: edge.From,\n            V2: edge.To,\n            node: edge.To,\n            edgeLength: edge.edgeLength,\n            attributes: attrib ? attrib : null\n        }\n        return newEdge;\n    });\n\n\n    let calcLeafAtt = leafChar.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                    values.realVal = m.value;\n                }else{\n                    values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.species;\n        newRow.label = row.species;\n        \n        return newRow;\n    })\n\n\n    let matchedLeaves = leaves.map((leaf, i)=>{\n        let attrib = calcLeafAtt.filter(f=> f.node === leaf.To)[0]\n        if(attrib){\n            Object.keys(attrib).map((att, i)=>{\n                if(att!='node' && att != 'label'){\n                    let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                    attrib[att].scales = scales;\n                    return att;\n                }\n            });\n        }\n        let newEdge = {\n            V1: leaf.From,\n            V2: leaf.To,\n            node: leaf.To,\n            edgeLength: leaf.edgeLength,\n            attributes: attrib ? attrib : null,\n            group: null,\n            leaf: true\n        }\n        return newEdge;\n    });\n\n    let all = matchedEdges.filter(f=> f.attributes != null);\n\n    let paths = allPaths(all, matchedLeaves, \"V1\", \"V2\");\n    \n    let addedRoot = rootAttribute(paths, calculatedAtt, calculatedScales);\n\n    let normedPaths = combineLength(addedRoot);\n\n    let group = binGroups(normedPaths, dataName, calculatedScales, 8);\n    let chosenClade = addCladeGroup(`All ${dataName}`, ['Whole Set'], [{'label': `All ${dataName}`, 'paths': normedPaths, 'groupBins': group}]);\n    chosenCladesGroup.push(chosenClade)    \n    \n    addClade(`All ${dataName}`, normedPaths);\n\n    calculatedScalesKeeper.push(calculatedScales);\n    dataMaster.push(normedPaths);\n    nestedData.push(buildTreeStructure(normedPaths, all.concat(matchedLeaves)));\n    speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.node));\n\n    return [normedPaths, calculatedScales];\n}\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}