{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/dataLoad.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/viewControl.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/buttonComponents.js","webpack:///./src/scripts/renderPathView.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/pairView.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","loadData","_x","_x2","_x3","_loadData","this","arguments","_callee","readFunction","fileString","type","regeneratorRuntime","wrap","_context","prev","next","sent","String","abrupt","stop","pairPaths","pathData","flatMap","path","filter","f","map","p1","p2","pair","verts","test","lastNode","p1Index","p2Index","distance","node","indexOf","common","d3","edgeLength","deltas","range","edgeMove","binCount","binStep","bins","_toConsumableArray","Array","bottom","top","one","two","b","attributes","valdiffs","Math","abs","realVal","calculateDelta","closeness","leaf1","leaf","leaf2","calculateCloseness","calculateScales","calculatedAtt","colorKeeper","keys","max","rows","upperCI95","min","lowerCI95","field","yScale","domain","clamp","satScale","colorScale","catColor","scaleCat","fields","stateColors","sc","state","color","scales","scaleName","matchLeaves","labels","leaves","leafChar","calculatedScales","mappedLeafLabels","x","label","leafCharIndex","V2","attr","chosenOne","forEach","k","scaleOb","states","clade","matchEdges","edges","edgeLen","edge","attrKeys","index","res","estimate","undefined","row","normPaths","paths","att","root","nodeLabels","scale","rootAttr","console","error","maxBranch","xScale","leafIndex","prevStep","assign","step","move","formatAttributeData","filterArray","speciesLabel","species","winState","attrLabel","st","allPaths","edgeArray","leafArray","source","target","le","getPath","pathKeeper","ed","reverse","drawBranchPointDistribution","svg","branchBar","append","classed","text","nodeLengthArray","nodeDuplicateCheck","eMove","bPointScale","pointGroups","selectAll","join","renderDistibutions","mainDiv","attrHide","filterMaster","attribute","newNormed","distributionView_toConsumableArray","keysToHide","medBranchLength","normBins","fill","base","binI","internalNodes","leafNodes","rootNodes","sortedBins","mapNorm","bin","fData","leafAttr","leafData","histogram","thresholds","ticks","maxO","v","minO","xO","histogramO","branches","rootData","colors","chosen","average","stDev","stUp","stDown","stat","branchScale","binnedWrap","style","predictedWrap","contRoot","newy","sort","a","height","concat","on","tool","transition","duration","html","pageX","pageY","branchGroup","continDist","list","y","select","remove","lineGen","curve","y0","y1","dat","each","nodes","distrib","rangeRect","discreteDist","combEdge","discreteBinWrap","stateGroups","predictedWidth","lineGenD","observedWrap","contOb","contBars","xvalues","discOb","discBars","dRects","xPoint","padding","updateMainView","moveMetric","main","getLatestData","document","getElementById","disabled","drawPathsAndAttributes","initialViewLoad","pathGroups","from","Set","group","groupDistributions","removeFilter","filterId","dataFilters","filterType","filterIndex","testData","filterComponent_toConsumableArray","dataMaster","fun","filterFunction","attributeType","newTestData","selectedOption","predictedFilter","observedFilter","addFilterTag","fromState","toState","newFilterMaster","addFilter","attType","filFunction","oldData","newData","extra","filterOb","before-data","ex","toggleFilters","filterButton","filterDiv","normedPaths","presentFilters","noShow","wrapper","labelGroups","toggle","shownToggs","togg","circle","toggleCircle","newKeys","hideKeys","newFilMaster","renderAttToggles","selectWrapper","attButton","stateChange","attProps","options","optionArray","optKeys","button1","button2","submit","classList","discreteFilter","filId","treeLinks","treeNode","nodeList","missingLinks","missingNodes","continRanges","ranges","brushBars","wrapperRect","xBrush","extent","selection","handle","invert","brushGroup","selections","_groups","__brush","lastFilter","continuousFilter","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","filterToolbar","button","span","xSpan","queryFilter","formater","datum","nodeId","nodeFilter","selectedNode","predicted","observed","numb","filterPred","filterObs","win","selectorDiv","selectId","dropDownWrapper","selectedPaths","comparisonKeeper","pathSelected","selectedPath","otherPaths","selectedDiv","selectedPaths_toConsumableArray","commonNodes","selectedSpecies","treeNodes","attrFilter","selectedToolTest","selectedTool","empty","sortByDistanceDiv","sortByDistanceButton","sortButton","attrSortWrap","radioDiv","radio","svgTest","branchFrequency","reduce","acc","curr","selectWrap","circleScale","values","selectedGroups","pathBars","addRemoveBubble","speciesTitle","string","charAt","toUpperCase","timelines","nodeGroups","hovers","nearest","nodearray","attributeWrapper","attData","attributeGroups","renderAttributes","drawContAtt","drawDiscreteAtt","sorted","high","leafOther","highLeaves","low","lowLeaves","same","commonNodeStart","children","nodeIndex","thresh","subset","chil","parentBase","scaledParentMove","parentScale","level","getCommonNodes","childNodeWrap","childNodes","pathArray","line","commonHover","renderSelectedTopology","attWrap","ch","attDataComb","offset","last","mappedDis","dis","spec","maxProb","maxP","notMax","other","findMaxState","attGroups","wrapRect","speciesGrp","attributeHeight","lineGenC","innerStatePaths","disGroup","sp","branchGrpDis","bCirc","otherCirc","conGroup","branchGrpCon","MeanRect","confiBars","longestBranch","startBranch","renderSelectedView","commonNode","chosenPath","rankedPaths","pathIndex","sortedData","sortOtherPaths","pathRemove","renderComparison","buttonGroupTest","buttonGroup","usedColors","groupColor","newColor","find","compareButtonTest","compareButton","comparisonCombined","newAtt","com","atts","added","standard","variance","first","second","filteredComp","selectedTest","attWraps","mean","e","sqrt","meanStandard","sigma2","upCon95","lowCon95","exit","attWrapsEnter","enter","merge","innerWrap","missing","areaG","confGroups","conf","NaN","_this","axisGroupTest","axisGroup","maxDiff","newScale","startBins","difArray","_loop","diffs","diff","obsDistWrap","newLeaves","binData","xAxis","distGroups","groupLength","dropDown","div","dropText","dropId","dropdiv","dropContent","nodeTooltipFlag","collapsed","pathWrapTest","pathWrap","pathAdd","notIt","renderPaths","attKeys","attrMove","predictedAttrGrps","attribWrap","sizeAndMove","selectedState","leafStateFilter","innerTimeline","innerPaths","change","continuousAtt","continuousPaths","attributeNodesCont","innerBars","drawGroups","stateBins","splitOnArray","newBins","newBinData","pa","firstGroupSvg","firstGroup","secondGroup","g","newM","groupLabels","stateLabel","innerGroup","innerWrapRect","wrappers","shiftWraps","xAxisShift","shiftCircles","leafWraps","totalVal","totalMean","newVal","groupMean","dotVals","distcircles","w","groupBy","totalArray","leafWrapsD","rects","groupedData","d3Array","width","ratio","drawLeaves","bars","discreteAtt","innerTimelineDis","statePath","disct","attributeNodesDisc","stateDots","endStateDot","stateBars","probability","chosenIn","valueAdd","buildTreeStructure","getNested","V1","updateBrush","treeBrush","sidebar","toolbarDiv","treeFilter","brushId","attributType","sidebarComponent_toConsumableArray","_ref","mark","renderTreeButtons","treeButton","renderTree","treeViewButton","selectedNodes","no","id","collapseSub","_children","uncollapse","pheno","dimensions","margin","right","left","treemap","size","addingEdgeLength","nestedData","log","treenodes","groupedBool","lengthBool","sidebarTest","treeSvg","gTest","updateTree","treeData","getLeaves","stepDown","ids","branchPoint","array","collapseTree","attrDraw","assignPosition","position","positionArray","child","branchCount","findDepth","link","descendants","parent","notleaves","circ","branchNodes","triangle","uncollapseSub","raise","updateRanking","pairs","deltaMax","pairView_toConsumableArray","closeMax","distMax","deltaScale","closeScale","distScale","sortedPairs","delta","deltaRank","closenessRank","distanceRank","totalRank","pairWraps","pairGroup","xAxisG","neighbors","start","speciesTest","ne","neighNodes","_this2","pathD","drawSorted","toolbarControl","toolbar","pathView","viewButton","togglePathView","pairButton","phenogramButton","generatePairs","scrunchButton","toggleScrunch","discreteViewButton","discretePredictedGroups","dropOptions","savedSelected","then","edgeSource","leafChar2","matchedLeaves","matchedEdges","unique","self","entries","en","t0","t1","t2","t3","t4","awesomeness","island","SVL","ecomorph","PCIII_padwidth_vs_tail"],"mappings":"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","file":"js/app.fa95ade7.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([141,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as d3 from 'd3';\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\n\n","import * as d3 from \"d3\";\n\n\nexport function pairPaths(pathData){\n\n    return pathData.flatMap((path, i)=> {\n        let pairs = pathData.filter((f, j)=> j != i);\n        let paired =  pairs.map((p)=> {\n            return {'p1': path, 'p2': p}\n        });\n        return paired.map(m=> {\n            m.distance = getDistance(m);\n            m.deltas = calculateDelta(m);\n            m.closeness = calculateCloseness(m);\n            return m;\n        })\n    })\n}\n\nfunction getDistance(pair){\n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n    pair.common = pair.p1[p1Index]\n\n    return d3.sum(p1.map(m=> m.edgeLength)) + d3.sum(p2.map(m=> m.edgeLength));\n}\n\nfunction calculateDelta(pair){\n   \n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n    let range = 1 - p1[0].edgeMove;\n    let binCount = d3.max([p1.length, p2.length])\n    let binStep = range / binCount;\n   \n    let bins = [...new Array(binCount-1)].map((d, i)=> {\n        return {'bottom': p1[0].edgeMove + (i*binStep), 'top': p1[0].edgeMove + ((i+1)*binStep) }\n    })\n   \n    bins = bins.map((d, i)=> {\n        let one = p1.filter(f=> (f.edgeMove <= d.top) && (f.edgeMove >= d.bottom))\n        let two = p2.filter(f=> (f.edgeMove <= d.top) && (f.edgeMove >= d.bottom))\n        d.one = one;\n        d.two = two;\n        return d;\n    });\n\n    bins = bins.map((b, i)=> {\n        if(b.one.length === 0){\n            b.one = bins[i-1].one;\n        }\n        if(b.two.length === 0){\n            b.two = bins[i-1].two;\n        }\n\n        return b;\n    })\n    \n    let attributes = d3.entries(p1[0].attributes)\n                    .filter(f => f.value.type === 'continuous')\n                    .map(m=> {\n                        let name = m.key;\n                        let valdiffs = bins.map((b, i)=> {\n                            return Math.abs(b.one[0].attributes[name].realVal - b.two[0].attributes[name].realVal);\n                        });\n                        m.value = d3.max(valdiffs)\n                        return m;\n                    });\n\n    return attributes;\n}\n\nfunction calculateCloseness(pair){\n\n let leaf1 = pair.p1.filter(p=> p.leaf === true)[0].attributes;\n let leaf2 = pair.p2.filter(p=> p.leaf === true)[0].attributes;\n \n return d3.entries(leaf1).filter(f=> f.value.type === 'continuous').map(m=> {\n     m.value = Math.abs(m.value.realVal - leaf2[m.key].realVal);\n     \n     return m\n });\n}\n\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n            \n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n        leaf.label = mappedLeafLabels[i];\n\n        //let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n      \n        let leafCharIndex = leafChar.rows[0][\"\"] ? leafChar.rows.map(m=> m[\"\"]) : leafChar.rows.map(m=> m[\"species\"]);\n  \n        leaf.node = leaf.V2;\n        let keys = calculatedScales.map(m=> m.field);\n        let attr = {};\n         \n        let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n        keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                    // return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                     return {'state': state, realVal: value};\n                 });\n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 //attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n                 attr[k] = {'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n\n         leaf.clade = chosenOne.clade;\n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                   // res.scaleVal = scale(res.estimate);\n                   // res.scaledLow = scale(res.lowerCI95);\n                    //res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                       // return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                        return {'state': s.scaleName, realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\n\nexport function normPaths(paths, calculatedAtt, calculatedScales){\n    paths.forEach((p, i)=> {\n        p[0].attributes = {};\n        Object.keys(calculatedAtt).map(att=> { \n            if(calculatedAtt[att].type == 'continuous'){\n                let root = calculatedAtt[att].rows.filter(f=> (f.nodeLabels == p[0].node) || (f.nodeLabels == ('node ' + p[0].node)))[0];\n                p[0].attributes[att] = {};\n                \n                let scale = calculatedScales.filter(f=> f.field == att)[0].yScale;\n            \n                p[0].attributes[att].realVal = root.estimate;\n                p[0].attributes[att].upperCI95 = root.upperCI95;\n                p[0].attributes[att].lowerCI95 = root.lowerCI95;\n                p[0].attributes[att].scale = scale;\n                p[0].attributes[att].type = 'continuous';\n            }else if(calculatedAtt[att].type == 'discrete'){\n                let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n                let scales = calculatedScales.filter(f=> f.field == att)[0].scales;\n                let rootAttr = scales.map(s=> {\n                    //return {'state': s.scaleName,  scaleVal: s.yScale(root[s.scaleName]), realVal: root[s.scaleName]};\n                    return {'state': s.scaleName, realVal: root[s.scaleName]};\n                });\n                p[0].attributes[att] = {'states':rootAttr, 'type': 'discrete'};\n               \n            }else{\n                console.error('type not found');\n            }\n        });\n    });\n    \n    let maxBranch = d3.max(paths.map(r=> r.length));\n\n    //SCALES for X, Y /////\n    let xScale = d3.scaleLinear().range([0, 1000]).clamp(true);\n \n    let normedPaths = paths.map((p, i)=> {\n        p.xScale = xScale.domain([0, maxBranch - 1]);\n     \n        let leafIndex = p.length - 1;\n        let lengths = p.map(l=> l.edgeLength);\n        let prevStep = 0;\n        return p.map((m, j)=> {\n            let node = Object.assign({}, m);\n            //INTEGRATE THE DISTNACES HERE WHEN THEY WORK\n            let step = node.edgeLength + prevStep;\n            node.edgeMove = (j < leafIndex) ? step : 1;\n            prevStep = prevStep + node.edgeLength;\n         \n            node.move = (j < leafIndex) ? p.xScale(j) : p.xScale(maxBranch - 1);\n        \n            return node;\n        });\n    });\n\n    return normedPaths;\n}\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(pathData, scales, filterArray){\n\n    let keys = (filterArray == null)? Object.keys(pathData[0][0].attributes): filterArray;\n   \n    let newData = pathData.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                let speciesLabel = path[path.length - 1].label;\n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].species = speciesLabel;\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.move;\n                    m.attributes[key].node = m.node;\n                    m.attributes[key].edgeMove = m.edgeMove;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = scales.filter(s=> s.field === key)[0].yScale;\n                    m.attributes[key].satScale = scales.filter(s=> s.field === key)[0].satScale;\n                    m.attributes[key].colorScale = scales.filter(s=> s.field === key)[0].colorScale;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf){\n                        let state = m.attributes[key];\n                        state.species = speciesLabel;\n                        state.winState = m.attributes[key].states.filter(f=> f.realVal === 1)[0].state;\n                        state.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === state.winState)[0].color;\n                        state.move = m.move;\n                        state.node = m.node;\n                        state.edgeMove = m.edgeMove;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : m.attributes[key];//.filter(f => f.state != undefined);\n                        return states.map((st, j)=> {\n                            st.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === st.state)[0].color;\n                            st.move = m.move;\n                            st.node = m.node;\n                            st.edgeMove = m.edgeMove;\n                            st.attrLabel = key;\n                            st.species = speciesLabel;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n\nexport function getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function calculateMovingAverage(data, i) {\n\n    if (movingAverage === 0) {\n        return data[i][yValue];\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        sum += x;\n    }\n\n    return sum / count;\n};\n\nexport function calculateMovingStandardDeviation(data, i, avg) {\n\n    if (movingAverage === 0) {\n        return 0;\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        var dx = x - avg;\n        sum += (dx * dx);\n    }\n\n    var variance = sum / count;\n    return Math.sqrt(variance);\n};\n\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n        if(notEmpty(node.children)){\n            pathArray.push(node);\n            pullPath([...pathArray], node.children, arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node_data['node name']);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, node]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import '../styles/index.scss';\nimport {formatAttributeData} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\nimport * as d3Array from 'd3-array'\n\nexport function drawBranchPointDistribution(data, svg){\n\n    let branchBar = svg.append('g').classed('branch-bar', true).attr('transform', 'translate(10, 10)');\n    branchBar.append('rect').classed('point-dis-rect', true).attr('height', 25).attr('x', -10).attr('y', -10).attr('fill', '#fff');\n\n    branchBar.append('line').attr('y1', 2).attr('y2', 2).attr('x1', '100').attr('x2', 890).attr('stroke', 'gray').attr('stroke-width', .25)\n    branchBar.append('text').text('Root').attr('transform', 'translate(70, 7)');\n    let leafLabel = branchBar.append('g').classed('leaf-label', true).attr('transform', 'translate(950, 7)');\n    leafLabel.append('text').text('Leaves');\n\n    let nodeLengthArray = [];\n    let nodeDuplicateCheck = []\n\n    data.map(path=> {\n        path.filter(n=> n.leaf != true).map(node=> {\n            if(nodeDuplicateCheck.indexOf(node.node) == -1){\n                nodeDuplicateCheck.push(node.node);\n                nodeLengthArray.push({'node': node.node, 'eMove': node.edgeMove });\n            }\n        })\n    });\n\n    let bPointScale = d3.scaleLinear().domain([0, 1]).range([0, 795]);\n    let pointGroups = branchBar.selectAll('g.branch-points').data(nodeLengthArray).join('g').attr('class', (d, i)=> d.node).classed('branch-points', true);\n    pointGroups.attr('transform', (d, i) => 'translate('+(105 + bPointScale(d.eMove))+', 0)');\n    pointGroups.append('circle').attr('r', 5).attr('fill', \"rgba(123, 141, 153, 0.5)\");\n\n    return branchBar;\n}\n\nexport function groupDistributions(pathData, mainDiv, scales){\n\n\n    let clades = Array.from(new Set(pathData.map(path=> path.filter(f=> f.leaf === true)[0].clade === \"\" ? \"Anolis\" : \"Norops\")));\n \n    let pathGroups = clades.map(clade => {\n        let group = pathData.filter(path => {\n         path[path.length - 1].clade === \"Norops\" ? path[path.length - 1].clade = \"Norops\" : path[path.length - 1].clade = \"Anolis\" ; \n         return path[path.length - 1].clade === clade});\n        return {'label': clade, 'paths': group }\n    });\n \n    let groupDivs = mainDiv.selectAll('.group-div').data(pathGroups).join('div').classed('group-div', true);\n\n    groupDivs.each((d, i, n)=> {\n        let group = d3.select(n[i]);\n        group.style('text-align', 'center');\n        group.append('text').text(d.label);\n        group.append('text').text(\" Shown:\" + d.paths.length);\n        renderDistibutions(d.paths, d3.select(n[i]), scales);\n    });\n\n    \n}\n\nexport function renderDistibutions(pathData, mainDiv, scales){\n    \n    let observedWidth = 200;\n    let predictedWidth = 800;\n    let height = 90;\n    let margin = 20;\n\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n    let keys = Object.keys(pathData[0][0].attributes).filter(f=> attrHide.indexOf(f) === -1);\n    let newNormed = [...pathData];\n    let keysToHide = attrHide.length > 0 ? scales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    formatAttributeData(newNormed, scales, keysToHide);\n\n    let maxBranch = d3.max(newNormed.map(p=> p.length)) - 1;\n    let medBranchLength = d3.median(newNormed.map(p=> p.length));\n/*\n    let normBins = new Array(medBranchLength).fill().map((m, i)=> {\n        let step = 1 / medBranchLength;\n        let base = (i * step);\n        let top = ((i + 1)* step);\n        return {'base': base, 'top': top, 'binI': i }\n    });*/\n\n    let normBins = new Array(medBranchLength).fill().map((m, i)=> {\n  \n            let step = 1 / medBranchLength;\n            let base = (i * step);\n            let top = ((i + 1)* step);\n            return {'base': base, 'top': top, 'binI': i }\n        \n       \n    });\n\n    let internalNodes = newNormed.map(path => path.filter(node=> node.leaf != true));\n    //let internalNodes = newNormed.map(path => path.filter(node=> node.leaf != true && node.root != true));\n    let leafNodes = newNormed.flatMap(path => path.filter(node=> node.leaf === true));\n    let rootNodes = newNormed.flatMap(path => path.filter(node=> node.root === true));\n\n    normBins.map((n, i)=> {\n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n          \n                return node.edgeMove > n.base && node.edgeMove <= n.top;\n            \n        } ));\n        n.data = edges;\n        return n;\n    });\n\n\n    let sortedBins = keys.map(key=> {\n        let scale = scales.filter(f=> f.field === key)[0];\n        let mapNorm = normBins.map(bin => {\n\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    return d.attributes[key];\n                })\n            }else{\n                bin.fData = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        });\n       \n        let leafAttr = leafNodes.map(m=> m.attributes[key]);\n        let leafData = {'data': leafAttr}\n   \n        if(scale.type === 'continuous'){\n         \n           // let max = d3.max(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n           // let min = d3.min(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n           \n            let x = d3.scaleLinear().domain([scale.min, scale.max]).range([0, height]);\n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n  \n            mapNorm.forEach(n=> {\n                n.type = scale.type;\n                n.bins = histogram(n.data);\n                n.domain = [scale.max, scale.min];\n                return n;\n            });\n\n            //Histogram for observed////\n            let maxO = d3.max(leafAttr.flatMap(v=> v.realVal));\n            let minO = d3.min(leafAttr.flatMap(v=> v.realVal));\n            let xO = d3.scaleLinear().domain([minO, maxO]).range([0, height])\n\n            let histogramO = d3.histogram()\n            .value(function(d) { return d.realVal; })  \n            .domain(xO.domain())  \n            .thresholds(xO.ticks(20)); \n\n            leafData.bins = histogramO(leafAttr);\n\n            let newK = {'key': key, 'branches': [...mapNorm], 'type': scale.type, 'leafData': leafData, 'rootData': rootNodes.map(m=> m.attributes[key])[0]}\n            return newK;\n\n        }else{\n\n            let states = leafAttr[0].states;\n            mapNorm.bins = null\n            leafData.bins = states.map(s=> leafAttr.filter(f=> f.winState === s.state));\n            let x = d3.scaleLinear().domain([0, 1]).range([0, height]);\n            \n            mapNorm.map(n=> {\n                n.type = scale.type;\n                let colors = scale.stateColors;\n                n.bins = states.map(state=> {\n                    let color = colors.filter(f=> f.state === state.state);\n                  \n                    let chosen = n.data.flatMap(m=> m.states.filter(f=> f.state === state.state)).map(v=> v.realVal);\n                    let average = d3.mean(chosen);\n                    let stDev = d3.deviation(chosen);\n                    return {'state': state.state, 'average': average, 'stDev': stDev, 'stUp': average + stDev, 'stDown': average - stDev, 'color': color[0].color, 'range': n.range }\n                });\n                \n                return n;\n            });\n            let test = states.map(stat=> {\n                let key = stat.state;\n                return mapNorm.flatMap(m=> {\n                    return m.bins.filter(f=> f.state === key);\n                });\n            });\n            let newK = {'key': key, 'branches': [...mapNorm], 'type': scale.type, 'leafData': leafData, 'states': test, 'rootData': rootNodes.map(m=> m.attributes[key])[0]}\n            return newK;\n        }\n    });\n\n    ///////RENDERING//////////\n    \n    let branchScale = d3.scaleLinear().domain([0, medBranchLength]).range([0, 760]);\n\n    //let dataCount = mainDiv.append('div').classed('species-count', true);\n    //dataCount.append('text').text(\"Shown: \"+ pathData.length + \" /\"+ dataMaster[0].length);\n\n    let svg = mainDiv.append('svg');\n    svg.attr('id', 'main-summary-view');\n    svg.attr('height', (keys.length * (height + 25)));\n\n    let branchBar = drawBranchPointDistribution(newNormed, svg);\n    let pointGroups = branchBar.selectAll('g.branch-points');\n  \n    let wrap = svg.append('g').classed('summary-wrapper', true);\n    wrap.attr('transform', 'translate(10, 50)');\n\n    let binnedWrap = wrap.selectAll('.attr-wrap').data(sortedBins).join('g').attr('class', d=> d.key + ' attr-wrap');\n    binnedWrap.attr('transform', (d, i)=>  'translate(0,'+(i * (height + 5))+')');\n    \n    let label = binnedWrap.append('text').text(d=> d.key).attr('y', 40).attr('x', 80).style('text-anchor', 'end');\n\n    let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n    predictedWrap.attr('transform', 'translate(25, 0)')\n\n    let root = predictedWrap.selectAll('g.root').data(d=> {\n        return [d.rootData]}).join('g').classed('root', true);\n    \n        root.attr('transform', `translate(60,0)`);\n\n    let contRoot = root.filter(f=> f.type === \"continuous\");\n    \n    contRoot.append('rect').attr('height', 90).attr('width', 12).attr('fill', '#fff').style('stroke-width', '0.5px').style('stroke', 'black')//.attr('x', 70);\n\n    let rootRange = contRoot.append('rect')\n        .attr('width', 12)\n        .attr('height', d=> {\n            let newy = d.yScale;\n            newy.range([80, 0]);\n            return newy(d.lowerCI95) - newy(d.upperCI95)\n        }).attr('transform', (d, i) => {\n            let newy = d.yScale;\n            newy.range([80, 0]);\n            return 'translate(0,'+newy(d.upperCI95)+')'\n        }).style('opacity', 0.5).attr('fill', \"rgba(133, 193, 233)\");\n\n        let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n    \n        rootAv.attr('transform', (d, i) => {\n                let newy = d.yScale;\n                newy.range([height, 0]);\n                let mean = d.realVal;\n                return 'translate(0,'+newy(mean)+')';\n      \n        }).attr('fill', '#004573');\n\n        let disRoot = root.filter(f=> f.type === \"discrete\");\n\n        let disRects = disRoot.selectAll('rect.dist').data(d=> {\n            let sorted = d.states.sort((a, b)=> a.realVal - b.realVal);\n            return sorted;\n        }).join('rect').classed('dist', true).attr('width', 12).attr('height', (d)=>{\n            let scale = d3.scaleLinear().domain([0, 1.0]).range([0, 80]).clamp(true);\n            d.height = scale(d.realVal);\n            return scale(d.realVal);\n        })\n        .attr('transform', (d, i, n) => {\n            let move = d3.selectAll(n).filter((f, j)=> j < i).data().map(m=> m.height);\n            return `translate(0, ${2 + d3.sum(move) * 1.2})`})\n        .attr('fill', d=> d.color).style('opacity', 0.9)\n\n        disRects.on('mouseover', (d, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n        \n\n    let pathGroup = predictedWrap.append('g').classed('path-wrapper', true);\n\n    //let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> d.branches).join('g').classed('branch-bin', true);\n\n    let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n        return d.branches}).join('g').classed('branch-bin', true);\n    branchGroup.attr('transform', (d, i)=> 'translate('+(100 + branchScale(i))+', 0)');\n\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    continDist.on('mouseover', (d, i, node)=> {\n        let list = d.data.map(m=> m.nodeLabels);\n        let selected = pointGroups.filter(p=> list.indexOf(p.node) > -1).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > 0).classed('selected-branch', true);\n        let y = d3.scaleLinear().domain(d.domain).range([0, height])\n        let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    var lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, n.length - 1]).range([0, height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1(d=> {\n        let dat = Object.keys(d).length - 1\n        let x = d3.scaleLinear().domain([0, 50]).range([0, 80]).clamp(true);\n        return x(dat); \n    });\n\n    continDist.each((d, i, nodes)=> {\n        let distrib = d3.select(nodes[i]).selectAll('g').data([d.bins]).join('g').classed('distribution', true);\n        distrib.attr('transform', 'translate(11, '+height+') rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', \"rgba(133, 193, 233, .9)\");\n    });\n\n    let contRect = continDist.append('rect').attr('height', height).attr('width', 10).style('fill', 'none').style('stroke', 'gray');\n\n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        })\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.yScale != undefined){\n            let newy = d.yScale;\n            newy.range([80, 0]);\n            return newy(d.lowerCI95) - newy(d.upperCI95)\n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n        let newy = d.yScale;\n        newy.range([80, 0]);\n        return 'translate(0,'+newy(d.upperCI95)+')'\n    });\n\n    rangeRect.attr('fill', \"rgba(133, 193, 233, .05)\");\n\n    let avRect = continDist.append('rect').attr('width', 10).attr('height', (d, i)=> {\n        if(d.data[0] != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n\n    avRect.attr('transform', (d, i) => {\n        if(d.data[0] != undefined){\n            let newy = d.data[0].yScale;\n            newy.range([height, 0]);\n            let mean = d3.mean(d.data.map(m=> m.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', '#004573');\n\n    let discreteDist = branchGroup.filter(f=> f.type === 'discrete');\n    let discreteLine = discreteDist.append('line').attr('x0', 2).attr('x1', 2).attr('y0', 0).attr('y1', height).attr('stroke', 'gray').attr('stroke-width', 0.5);\n    let hoverRect = discreteDist.append('rect').attr('height', height).attr('width', 10).attr('opacity', 0);\n    discreteDist.on('mouseover', (d, i, n)=> {\n        let y = d3.scaleLinear().domain([1, 0]).range([0, height]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        let selected = pointGroups.filter(f=> f.eMove >= d.range[0] && f.eMove < d.range[1]).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n      \n        treeNode.filter(node=> node.data.combEdge >= d.range[0] && node.data.combEdge < d.range[1]).classed('selected-branch', true);\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('.y-axis').remove();\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n    })\n\n    let discreteBinWrap = predictedWrap.filter(f=> f.type === 'discrete');\n    let stateGroups = discreteBinWrap.selectAll('.path-wrapper').selectAll('g.state').data(d=> d.states).join('g').classed('state', true);\n    discreteBinWrap.append('line').attr('x1', 100).attr('x2', 900).attr('y1', 48).attr('y2', 48).attr('stroke-width', 0.3).attr('stroke', 'black')\n    stateGroups.append('path').attr('d', (p, i)=> {\n        var lineGenD = d3.area()\n        .curve(d3.curveCardinal)\n        .x((d, i)=> {\n            let y = d3.scaleLinear().domain([0, 9]).range([0, predictedWidth + 100]);\n            return y(i); \n        })\n        .y0(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.stDown);\n        })\n        .y1(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.stUp); \n        });\n        return lineGenD(p);\n\n    }).attr('transform', 'translate(100, 10)').attr('fill', (d, i)=> {\n        return d[0] ? d[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    stateGroups.append('path').attr('d', (p, i)=> {\n        var lineGen = d3.line()\n        .curve(d3.curveCardinal)\n        .x((d, i)=> {\n            let y = d3.scaleLinear().domain([0, 9]).range([0, predictedWidth + 100]);\n            return y(i); \n        })\n        .y(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.average); \n        });\n        return lineGen(p);\n\n    }).attr('transform', 'translate(100, 10)').attr('fill', 'none').attr('stroke', (d, i)=> {\n        return d[0] ? d[0].color : '#fff';\n    });\n\n    ////OBSERVED CONTIUOUS/////\n\n    let observedWrap = binnedWrap.append('g').classed('observed', true);\n    observedWrap.attr('transform', 'translate('+ (predictedWidth + 150) +', 0)')\n\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n\n    let contBars = contOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(height - margin), 0])\n        return y(Object.keys(d).length - 2)\n    }).attr('fill', 'rgba(133, 193, 233, .5)');\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(height - margin), 0])\n        let movey = height - y(Object.keys(d).length - 2);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    contOb.each((d, i, nodes)=> {\n        let xvalues = d.leafData.data.map(m=> m.realVal);\n        let x = d3.scaleLinear().domain([d3.min(xvalues), d3.max(xvalues)]).range([0, observedWidth])\n        let y = d3.scaleLinear().domain([0, d3.max(d.leafData.bins.map(b=> Object.keys(b).length)) - 2]).range([(height - margin), 0]);\n        d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(x)).attr('transform', 'translate(0, '+height+')');\n        d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4)).attr('transform', 'translate(0, '+margin+')');\n    });\n    \n////Observed Discrete////\n    let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n    let discBars = discOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n    let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n        let width = observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, 100]).range([(height -margin), 0])\n        return y(d.length)\n    }).attr('fill', (d, i) => {\n        return d[0] != undefined ? d[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    discBars.attr('transform', (d, i, n)=> {\n        let movex = observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, 100]).range([(height - margin), 0])\n        let movey = (height) - y(d.length);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    dRects.on('mouseover', (d, i, n)=> {\n        let state = d3.select('g.'+d[0].label).selectAll('g.state');\n        state.filter(f=> f[0].state === d[0].winState).attr('opacity', 0.8);\n        state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n        d3.select(n[i]).attr('opacity', 0.9);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).attr('opacity', 0.3);\n        let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n    })\n\n    discOb.each((d, i, nodes)=> {\n            let labels = d.leafData.bins.map(b=> {\n                return b[0] != undefined ? b[0].winState : '';\n                })\n            let xPoint = d3.scalePoint().domain(labels).range([0, observedWidth]).padding(.6)\n            let y = d3.scaleLinear().domain([0, 100]).range([(height - margin), 0]);\n            d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5)).attr('transform', 'translate(0, '+margin+')');\n            d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n    });\n\n\n}\n","import * as d3 from \"d3\";\nimport { renderDistibutions, groupDistributions } from './distributionView';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport { getLatestData } from \"./filterComponent\";\n\nexport let groupedView = false;\n\nexport function updateMainView(scales, moveMetric){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(d3.select('#view-toggle').text() === 'View Paths'){\n        renderDistibutions(data, main, scales, moveMetric);\n        document.getElementById(\"scrunch\").disabled = true;\n    }else{\n        drawPathsAndAttributes(data, main, scales, moveMetric);\n        document.getElementById(\"scrunch\").disabled = false;\n    }\n\n}\n\nexport function initialViewLoad(scales, moveMetric){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(data.length > 50){\n        //renderDistibutions(data, main, scales, moveMetric);\n        groupDistributions(data, main, scales, moveMetric);\n        d3.select('#view-toggle').text('View Paths');\n        document.getElementById(\"scrunch\").disabled = true;\n    }else{\n        drawPathsAndAttributes(data, main, scales, moveMetric);\n        d3.select('#view-toggle').text('View Summary');\n        document.getElementById(\"scrunch\").disabled = false;\n    }\n\n}","import '../styles/index.scss';\n\nimport * as d3 from \"d3\";\nimport {dataMaster} from './index';\nimport { updateMainView } from './viewControl';\n\nexport let filterMaster = [];\n\nexport function removeFilter(filterId, scales){\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n    let filterIndex = dataFilters.map(f=> f.filterId).indexOf(filterId);\n\n    if(filterIndex != dataFilters.length - 1){\n   \n        let baseData = filterIndex === 0? dataMaster[0] : dataFilters[filterIndex - 1].data;\n    \n        let testData = [...baseData];\n\n        let filterToolbar = d3.select(\"#toolbar\");\n\n        let badges = filterToolbar.selectAll('.filter-tag').remove();\n  \n        for(let i = filterIndex + 1; i < dataFilters.length; i ++){\n       \n            let fun = dataFilters[i].filterFunction;\n            if(dataFilters[i].attributeType === 'continuous'){\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].predictedFilter, dataFilters[i].observedFilter);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'c-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }else{//discrete\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].fromState, dataFilters[i].toState);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'd-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }\n        }\n    }\n    let newFilterMaster = filterMaster.filter(f=> f.filterId != filterId);\n\n    filterMaster = newFilterMaster;\n}\n\nexport function addFilter(filterType, attType, filterId, filFunction, oldData, newData, extra){\n    let filterOb = {'filterType': filterType, 'attributeType': attType, 'filterId': filterId, 'filterFunction':filFunction, 'before-data': oldData, 'data': newData}\n    if(extra != null){\n        extra.forEach(ex=> {\n            filterOb[ex[0]] = ex[1];\n        });\n    }\n    filterMaster.push(filterOb);\n    return filterOb;\n}\n\nexport function getLatestData(){\n    let data = filterMaster.length > 0 ? filterMaster[filterMaster.length - 1].data : dataMaster[0];\n    return data;\n}\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, main, moveMetric, scales){\n\n    let filterDiv = d3.select('#filter-tab');\n    let data = getLatestData();\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        renderAttToggles(filterDiv, data, main, scales, 'edgeLength');\n        stateFilter(filterDiv, filterButton, data, main, moveMetric, scales);\n        queryFilter(filterDiv, filterButton, data, main, moveMetric, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\n\nfunction addFilterTag(data, scales){\n\n    let filterToolbar = d3.select('#toolbar');\n\n    if(data.attributeType === 'continuous'){\n\n        let formater = d3.format(\".2s\");\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        d3.select(button).datum(data);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        let label = button.append('h6').text(data.selectedOption + \"  Predicted: \"+ formater(data.predictedFilter[0]) + \"-\" + formater(data.predictedFilter[1]) + \" Observed: \" + formater(data.observedFilter[0]) + \"-\" + formater(data.observedFilter[1]));\n        let xSpan = label.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> data.attribute != f.attribute);\n            ////YOU NEED TO CHANGE THIS TO REMOVE FILTER FUNCTION\n            removeFilter(data.filterId, scales);\n            updateMainView(scales, 'edgeLength')\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'discrete'){\n     \n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(data.state[0]);\n        button.append('i').classed('fas fa-arrow-right', true);\n        button.append('h6').text(data.state[1] + '  ');\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView(scales, 'edgeLength')\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'branch'){\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(' At Branch: ' + data.nodeId);\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView(scales, 'edgeLength')\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }\n    \n}\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n              \n                    //let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n                    let data = getLatestData();\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filId = 'd-'+filterMaster.filter(f=> f.attributeType === 'discrete').length;\n                    let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n                    updateMainView(scales, moveMetric);\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR////\n                    addFilterTag(filterOb, scales);\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    let filId = 'c-'+filterMaster.filter(f=> f.attributeType === 'continuous').length;\n                    let filterOb = addFilter('data-filter', 'continuous', filId, continuousFilter, [...data], [...test], [['selectedOption', selectedOption], ['predictedFilter', predictedFilter], ['observedFilter', observedFilter]]);\n\n                    updateMainView(scales, moveMetric);\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    addFilterTag(filterOb, scales);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\nexport function nodeFilter(selectedNode, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path.map(node => node.node).indexOf(selectedNode) > -1;\n    });\n\n    let filId = 'b-'+filterMaster.filter(f=> f.attributeType === 'branch').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'branch', filId, nodeFilter, [...data], [...test], [['nodeId', selectedNode]])\n    addFilterTag(filterOb, scales);\n    updateMainView(scales, 'edgeLength');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\nexport function leafStateFilter(selectedState, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path[path.length - 1].attributes[selectedState.label].winState === selectedState.winState;\n    });\n\n    let filId = 'l-'+filterMaster.filter(f=> f.attributeType === 'leaf').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'leaf', filId, nodeFilter, [...data], [...test], [['leafState', [selectedState.label, selectedState.winState]]])\n    addFilterTag(filterOb, scales);\n    updateMainView(scales, 'edgeLength');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n}\nfunction discreteFilter(data, selectedOption, fromState, toState){\n    if(selectedOption != undefined){\n        return data.filter(path=> {\n            let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n                let states = node.attributes[selectedOption].states;\n                if(fromState === 'Any'){\n                    return true;\n                }else{\n                    return states.filter(st=> st.state === fromState).length > 0 && states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n                }\n            });\n            let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n            let win = node.attributes[selectedOption].winState;\n            if(toState === 'Any'){\n                return true;\n            }else{\n                return win === toState;\n            }\n            });\n            return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n        });\n    }\n}\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n         \n            updateMainView(scales, moveMetric);\n\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                updateMainView(scales, moveMetric);\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, main, scales, moveMetric){\n\n    ////NEED TO GET RID OF TOGGLE SVG\n    let keys = Object.keys(normedPaths[0][0].attributes);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n   \n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths], 'data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n        updateMainView(scales, moveMetric)\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import * as d3 from \"d3\";\nimport { branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes } from './renderPathView';\nimport { formatAttributeData } from './dataFormat';\nimport { filterMaster } from './filterComponent';\nimport { dataMaster, collapsed, colorKeeper } from './index';\nimport { renderDistibutions } from \"./distributionView\";\n\nexport let selectedPaths = [];\nexport let comparisonKeeper = [];\n\nexport function pathSelected(selectedPath, otherPaths, scales) {\n\n    let selectedDiv = d3.select('div#selected');\n    let main = d3.select('div#main');\n    if (selectedPath === null) {\n\n        selectedPaths = [];\n\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, false);\n\n    } else {\n      \n        selectedPaths = selectedPaths.concat(selectedPath);\n        let commonNodes = renderSelectedView([...selectedPaths], [...otherPaths], selectedDiv, scales);\n        let sortedPaths = sortOtherPaths([...selectedPaths], [...otherPaths], [...commonNodes]);\n        \n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let pathGroups = drawPathsAndAttributes(sortedPaths.map(s => s.data), main, scales, false);\n\n        main.style('padding-top', '250px');\n    }\n}\nfunction getCommonNodes(paths){\n    let maxBranch = d3.max(paths.map(p => p.length));\n    let longestBranch = paths.filter(path => path.length === maxBranch)[0];\n    let startBranch = longestBranch.filter(f=> f.leaf != true);\n    let commonNodeStart = startBranch;\n    //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n    paths.map(path => {\n        commonNodeStart = [...path].filter(f => {\n            return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n    });\n\n    let children = paths.map(path => {\n        path = (path[0].leaf === true) ? path.reverse() : path;\n        let nodeIndex = path.map(p => p.node);\n        let thresh = nodeIndex.indexOf(commonNodeStart[commonNodeStart.length - 1].node);\n        let subset = path.filter((f, i) => i > thresh);\n        return subset;\n    });\n\n    commonNodeStart[commonNodeStart.length - 1].children = children.map((path, i) => {\n        let max = d3.max(path.map(p => p.edgeMove)) - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n        return path.map((chil, j, n) => {\n            chil.parentBase = commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.move = chil.edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.base = (j === 0) ? 0 : n[j - 1].edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            let parentScale = d3.scaleLinear().domain([0, 1]).range([0, 1000])\n            let scaledParentMove = parentScale(commonNodeStart[commonNodeStart.length - 1].edgeMove);\n            chil.xScale = d3.scaleLinear().domain([0, max]).range([0, (1000 - scaledParentMove)]);\n            chil.level = i;\n            return chil;\n        });\n    });\n\n    return commonNodeStart;\n}\nexport function sortOtherPaths(pathData, otherPaths, commonNode) {\n\n    if(pathData.length > 1){\n\n        if(commonNode != null){\n\n            let chosenPath = commonNode.reverse().map(m => m.node);\n            let rankedPaths = otherPaths.map(path => {\n                let step = 0;\n                let test = path.reverse().map((node, i) => {\n                    if (chosenPath.indexOf(node.node));\n                    return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n                }).filter(f => f.indexOf > -1);\n                let distance = (test[0].indexOf + test[0].pathIndex);\n                return { 'data': path.reverse(), 'distance': distance };\n            });\n            let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        \n            return sortedData;\n        }\n        console.error('multiple paths without common node');\n    }else{\n\n        let chosenPath = pathData[0].reverse().map(m => m.node);\n    \n        let rankedPaths = otherPaths.map(path => {\n            let step = 0;\n            let test = path.reverse().map((node, i) => {\n                if (chosenPath.indexOf(node.node));\n                return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n            }).filter(f => f.indexOf > -1);\n            let distance = (test[0].indexOf + test[0].pathIndex);\n            return { 'data': path.reverse(), 'distance': distance };\n        });\n        let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        return sortedData;\n    }\n\n}\nfunction renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency){\n\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', 'translate(0, 20)')\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data([commonNodeStart]).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n        pathBars.attr('height', (35 + (25 * commonNodeStart[commonNodeStart.length - 1].children.length)));\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(145, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', (d, i) => {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n                return x(d[d.length - 1].edgeMove)\n            })\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        nodeGroups.classed('common-node', true);\n\n        let childNodeWrap = nodeGroups.filter(c => c.children != undefined).selectAll('g.child').data(d => d.children).join('g').classed('child', true);\n\n        let childNodes = childNodeWrap.selectAll('g.node').data(d => d).join('g').classed('node', true)\n        childNodes.attr('transform', (d, i, n) => {\n            return 'translate(' + d.xScale(d.move) + ', ' + (d.level * 20) + ')';\n        });\n\n        childNodeWrap.append('path').attr('d', (d, i, n) => {\n            let pathArray = [{ 'x': 0, 'y': 0 }, { 'x': 0, 'y': i }];\n            d.map(m => {\n                pathArray.push({ 'x': m.xScale(m.move), 'y': m.level })\n            });\n            let line = d3.line()\n                .curve(d3.curveMonotoneY)\n                .x(function(d) {\n                    return d.x;\n                })\n                .y(d => (d.y * 20))\n            return line(pathArray);\n        }).attr('stoke-width', '2px').attr('fill', 'none').attr('stroke', 'gray');\n\n        childNodeWrap.on('mouseover', (d, i)=> {\n            let specArray = d.map(m=> m.species);\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let commonHover = [...commonNodeStart].map(c=> c.node).concat(d.map(n=> n.node));\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            treeLinks.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', (d, i)=> {\n            d3.selectAll('.hover').classed('hover', false);\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        let childCirc = childNodes.append('circle').attr('r', 7).attr('fill', 'red').attr('y', 5);\n\n        childCirc.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        childNodes.filter(f => f.leaf === true).append('text').text(d => d.label).attr('x', 9).attr('y', 4);\n        //selectWrap.attr('transform', 'translate('+(50+(20 *commonNodeStart[commonNodeStart.length - 1].children.length))+')')\n       \n\n}\nexport function addRemoveBubble(group, scales){\n\n    let pathRemove = group.append('g').classed('x-icon', true);\n    pathRemove.attr('transform', 'translate(15, 10)');\n    pathRemove.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathRemove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n    pathRemove.style('cursor', 'pointer');\n    pathRemove.on('click', (d, i, n) => {\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        pathSelected(null, dataMaster[0], scales);\n    });\n\n}\nexport function renderComparison(group, otherPaths, selectedDiv, scales){\n \n    let buttonGroupTest = selectedDiv.select('.button-wrap');\n    let buttonGroup = buttonGroupTest.empty() ? selectedDiv.append('div').classed('button-wrap', true) : buttonGroupTest;\n\n\n    \n    buttonGroup.style('display','inline-block').style('width', '900px').style('height', '50px');\n    let main = d3.select('div#main');\n    main.style('padding-top', '300px');\n\n    if(group != null){\n        let usedColors = comparisonKeeper.map(m=> m.groupColor);\n        let newColor = colorKeeper.find(c => usedColors.indexOf(c[0]) === -1);\n        group.groupColor = newColor[0];\n        comparisonKeeper.push(group);\n    }\n\n    if(comparisonKeeper.length > 1){\n        let compareButtonTest = d3.select('#toolbar').select('#compare-button');\n        let compareButton = compareButtonTest.empty() ? d3.select('#toolbar').append('button').text('Normal Mode').attr('id', 'compare-button').classed('btn btn-info', true) : compareButtonTest;\n        compareButton.on('click', ()=> {\n            compareButton.text() === \"Normal Mode\" ? compareButton.text('Compare Mode') : compareButton.text('Normal Mode');\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        });\n    }\n\n    let comparisonCombined = scales.map((sc, i)=> {\n        let newAtt = {'field': sc.field, 'type': sc.type, 'data': []}\n        comparisonKeeper.map((com, i)=> {\n            let atts = formatAttributeData(com.data, scales, [sc.field]);\n           \n            let added = atts.flatMap(att=> {\n                return att.map(a => {\n                    return a.map(m=> {\n                        let standard = m.leaf === true ? 0 : (m.upperCI95 - m.realVal) / 2;\n                        m.variance = standard * standard;\n                        return m;\n                    });\n                })\n            })\n\n            newAtt.data.push({'group': {'first': com.first, 'second': com.second, 'color': com.groupColor}, 'data': sc.type === 'continuous' ? added : atts.flatMap(a=> a)});\n        })\n        return newAtt;\n    });\n\n    let button = buttonGroup.selectAll('button').data(comparisonKeeper).join('button').classed('btn btn-info', true).style('background', d=> d.groupColor);\n    button.selectAll('span').data(t=> [t]).join('span').text(t=> {\n        return t.first ? `${t.first[1]} / ${t.second[1]}` : t.state;\n    }).append('span').text(t=> t.data.length).classed(\"badge badge-light\", true)\n    \n    let xOut = button.selectAll('i').data(d=> [d]).join('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    xOut.on('click', (d, i)=> {\n        let filteredComp = comparisonKeeper.filter(f=> f.groupColor != d.groupColor);\n        comparisonKeeper = filteredComp;\n        if(comparisonKeeper.length > 0){\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        }else{\n            selectedDiv.selectAll('*').remove();\n            selectedDiv.style('height', '0px');\n            main.style('padding-top', '0px');\n        }\n    });\n\n    let selectedTest = selectedDiv.select('.comparison-svg');\n    let selectedTool = selectedTest.empty() ? selectedDiv.append('svg').classed('comparison-svg', true) : selectedTest;\n    selectedDiv.style('height', '300px').style('width', '100%');\n    selectedTool.style('height', '300px');\n\n    let attWraps = selectedTool.selectAll('.att-wrapper').data(comparisonCombined.filter(f=> f.type === 'continuous').map((com)=>{\n       \n        let max = d3.max(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.upperCI95)))) + .2;\n        let min = d3.min(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.lowerCI95)))) - .2;\n        \n        com.data.map(c=> {\n            let binLength = 6;\n            //let max = scales.filter(f=> f.field === com.field)[0].max;\n           // let min = scales.filter(f=> f.field === com.field)[0].min;\n            let normBins = new Array(binLength).fill().map((m, i)=> {\n                let step = 1 / binLength;\n                let base = (i * step);\n                let top = ((i+ 1)* step);\n                return {'base': base, 'top': top, 'binI': i, 'max': max, 'min':min }\n            });\n\n            let internalNodes = c.data.map(path => path.filter(node=> node.leaf != true));\n            let leafNodes = c.data.flatMap(path => path.filter(node=> node.leaf === true));\n\n            c.bins = normBins.map((n, i, nodes)=> {\n                let edges = internalNodes.flatMap(path => path.filter(node=> {\n                    return node.edgeMove >= n.base && node.edgeMove <= n.top;\n                } ));\n                n.data = edges;\n                let mean = d3.mean(edges.map(e=> e.realVal));\n                n.mean = mean === undefined ? normBins[i-1].mean : mean;\n                let standard = Math.sqrt(d3.mean(edges.map(e=> e.variance)));\n                n.meanStandard = edges.length === 0 ? 0 : standard;\n                let sigma2 = standard * 2;\n                n.upCon95 = mean === undefined ? normBins[i-1].upCon95 : mean + sigma2;\n                n.lowCon95 = mean === undefined ? normBins[i-1].lowCon95 : mean - sigma2;\n                return n;\n            });\n            c.leaves = leafNodes;\n           \n            return c;\n        })\n        \n        return com;\n    }));\n    attWraps.exit().remove();\n    let attWrapsEnter = attWraps.enter().append('g').classed('att-wrapper', true);\n\n    let attLabels = attWrapsEnter.append('text').text(d=> d.field).style('text-anchor', 'end')\n                    .style('font-size', '11px').attr('transform', 'translate(120, 35)');\n\n    attWraps = attWrapsEnter.merge(attWraps);\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+(10+(i * 70))+')');\n\n    let innerWrap = attWraps.selectAll('g.inner-group').data(d=> [d]).join('g').classed('inner-group', true);\n    innerWrap.attr('transform', 'translate(150, 0)');\n    let wrapRect = innerWrap.selectAll('rect.outline-rect').data(d=> [d]).join('rect').classed('outline-rect', true)\n                    .attr('width', 800).attr('height', 60).attr('fill', '#fff').attr('stroke', 'gray');\n    \n    if(d3.select('#compare-button').empty() || d3.select('#compare-button').text() === \"Normal Mode\"){\n            let lineGen = d3.line()\n            .x((d, i)=> {\n                let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n                return x(i);\n            })\n            .y(d=> {\n            let y = d3.scaleLinear().domain([d.min, d.max])\n                y.range([60, 1]);\n                return y(d.mean);\n    });\n\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> d.data).join('g').classed('path-groups', true);\n    pathGroups.selectAll('*').remove();\n    let paths = pathGroups.append('path').attr('d', d=> { \n        let scale = d.bins[0].data[0].yScale\n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.mean === undefined){\n                b.mean = d.bins[i-1].mean;\n                d.missing = true;\n            }\n           \n            b.yScale = d3.scaleLinear().domain([b.min, b.max]).range([60, 1])\n            return b;\n        });\n        return lineGen(d.bins);\n    }).classed('path', true);\n\n    var areaG = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i)=> {\n        let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n        return x(i);\n    })\n    .y0(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.lowCon95);\n    })\n    .y1(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.upCon95); \n    });\n\n    let confGroups = innerWrap.selectAll('g.conf-groups').data(d=> d.data).join('g').classed('conf-groups', true);\n    confGroups.selectAll('*').remove();\n    let conf = confGroups.append('path').attr('d', d=> { \n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.upCon95 === NaN){\n                b.upCon95 = d.bins[i-1].upCon95;\n                d.missing = true;\n            }\n            if(b.lowCon95 === NaN){\n                b.lowCon95 = d.bins[i-1].lowCon95;\n                d.missing = true;\n            }\n\n            return b;\n        });\n        return areaG(d.bins);\n    }).classed('path', true);\n\n    paths.style('fill', 'none');\n    paths.style('stroke', d=> d.group.color);\n    paths.style('stroke-width', '2px');\n\n    conf.style('fill', d=> d.group.color);\n    conf.style('opacity', 0.15);\n\n    let yAxisG = innerWrap.append('g').classed('y-axis', true);\n\n    innerWrap.on('mousemove', function(d, i) {\n     \n        let scale = d3.scaleLinear().domain([d.data[0].bins[0].min, d.data[0].bins[0].max]).range([1, 60]);\n        let axisGroupTest = d3.select(this).select('.y-axis');\n        let axisGroup = axisGroupTest.empty() ? d3.select(this).append('g').classed('y-axis', true) : axisGroupTest;\n        \n        if(d3.select('#compare-button').empty() || d3.select('#compare-button').text()==='Normal Mode'){\n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)')\n            axisGroup.call(d3.axisLeft(scale).ticks(5));\n        }else{\n            let pathD = d3.select(this).select('.path-groups').selectAll('path');\n            let maxDiff = pathD.data().map(d=> d[0].maxDiff)[0];\n            \n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)');\n            let newScale = d3.scaleLinear().domain([maxDiff, 0]).range([0, 60]);\n            axisGroup.call(d3.axisLeft(newScale).ticks(5));\n        }\n\n    \n    }).on('mouseleave', function(){\n        let axisGroup = d3.select(this).select('.y-axis');\n        axisGroup.remove();\n    });\n    \n}else{\n\n    innerWrap.selectAll('.path-groups').remove();\n    innerWrap.selectAll('g.conf-groups').remove();\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> {\n        let startBins = d.data[0].bins;\n        let difArray = [];\n        for(let i = 1; i < d.data.length; i ++){\n            let diffs = []\n            d.data[i].bins.map((b, j)=>{\n                if(b.mean === undefined){\n                    b.mean = d.data[i].bins[j-1].mean;\n                }\n                if(startBins[j].mean === undefined){\n                    startBins[j].mean = startBins[j-1].mean;\n                }\n                let maxDiff = d.data[0].bins[0].max - d.data[0].bins[0].min;\n                diffs.push({'diff':Math.abs(startBins[j].mean - b.mean), 'maxDiff': maxDiff});\n            });\n            difArray.push(diffs);\n        }\n        return difArray;\n    }).join('g').classed('path-groups', true);\n\n    let lineGen = d3.line()\n        .x((d, i)=> {\n            let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n            return x(i);\n        })\n        .y(d=> {\n            let y = d3.scaleLinear().domain([0, d.maxDiff]).clamp(true);\n            y.range([60, 0]);\n            return y(d.diff);\n        });\n\n    let paths = pathGroups.append('path').attr('d', d=> { \n        return lineGen(d);\n    });\n\n    paths.style('fill', 'none');\n    paths.style('stroke', 'black');\n    paths.style('stroke-width', '2px');\n}\n\n/////////////////////////\nlet obsDistWrap = attWraps.selectAll('.observed-dist-wrap').data(d=> {\n  \n        let max = d3.max(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n        let min = d3.min(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n\n        let x = d3.scaleLinear().domain([min, max]).range([0, 200]);\n    \n        let histogram = d3.histogram()\n        .value(function(d) { return d.realVal; })  \n        .domain(x.domain())  \n        .thresholds(x.ticks(10)); \n        \n        let leafData = d.data.map(m=> {\n            let newLeaves = [...m.leaves].map(leaf => {\n                leaf.x = x;\n                leaf.group = m.group;\n                return leaf;\n            });\n            return {'binData':histogram(m.leaves), 'data': newLeaves, 'group': m.group, 'xScale': x};\n        });\n        return [{'data':leafData, 'xScale': x}];\n    }).join('g').classed('observed-dist-wrap', true);\n\n    obsDistWrap.attr('transform', 'translate(970, 0)');\n  \n    let xAxis = obsDistWrap.selectAll('g.axis-x').data(d=> [d]).join('g').classed('axis-x', true);\n    xAxis.attr('transform', 'translate(0, 50)')\n    xAxis.each((d, i, nodes)=> {\n        d3.select(nodes[i]).call(d3.axisBottom(d.xScale).ticks(5))\n    });\n\n    let distGroups = obsDistWrap.selectAll('.observed-group').data(d=> {\n        return d.data.map((m, i, n)=> {\n            m.index = i;\n            m.groupLength = n.length;\n            return m;\n        });\n    }).join('g').classed('observed-group', true);\n\n    let lines = distGroups.selectAll('.line').data(d => {\n            let mean = d3.mean(d.data.map(r=> r.realVal))\n            let vals = {'mean': mean, 'group':d.group, 'x':d.xScale}\n            return [vals];\n    }).join('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.mean)-1.5)+',0)')\n    .attr('height', 50).attr('width', 3).attr('fill', d=> d.group.color).style('opacity', '0.4')\n\n    let circWrap = distGroups.selectAll('.circ-wrap').data((d, i)=> [d]).join('g').classed('circ-wrap', true).attr('transform', (d, i, n)=> {\n        let move = d3.scaleLinear().domain([0, d.groupLength]).range([0, 60]);\n        return 'translate(0,'+(move(d.index+0.5))+')'});\n\n    let distCirc = circWrap.selectAll('circle.disDots').data(d=> d.data).join('circle').attr('r', 3)\n    .attr('cx', (d, i) => {\n        return d.x(d.realVal);\n    }).attr('cy', (d, i, n)=> {\n        return 0;\n    }).attr('fill', d=> d.group.color);\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales) {\n\n    let attributeHeight = 50;\n\n    let selectedSpecies = pathData.flatMap(p => p.filter(f => f.leaf === true).map(n => n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node => selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n    ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f => f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f => f.type === 'hide-attribute').map(m => m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc => {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m => m.field) : null;\n\n    ////IF THE SELECTED DIV IS THERE ALREADY USE THAT/////\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    ///////////////////////\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', () => sortPaths(sortByDistanceButton));\n\n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m => m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n    let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n    let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d => d).attr('id', (d, i) => 'radio-' + i).classed(\"form-check-input\", true);\n    radioDiv.append('label').text(d => d).property('for', (d, i) => 'radio-' + i).classed(\"form-check-label\", true);\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty() ? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    svg.selectAll('*').remove();\n\n    let branchFrequency = pathData.flatMap(row => row.flatMap(f => f.node)).reduce(function(acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n            acc[curr] = 1;\n        } else {\n            acc[curr] += 1;\n        }\n        return acc;\n    }, {});\n\n    ///RENDERING SELECTED PATHS////\n    if (pathData.length === 1) {\n\n        /////////////////////////////////////////////////\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', (d, i) => 'translate(0,20)');\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        selectedGroups.on('mouseover', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => {\n                return d.map(m => m.node).indexOf(f.data.node) > -1;\n            }).classed('hover', true);\n            treeLinks.filter(f => d.map(m => m.node).indexOf(f.data.node) > -1).classed('hover', true);\n            return d3.select(this).classed('hover', true);\n        }).on('mouseout', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n            let treeLinks = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n            return d3.select(this).classed('hover', false);\n        });\n\n        let speciesTitle = selectedGroups.append('text').text(d => {\n            let string = d.filter(f => f.leaf === true)[0].label;\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        });\n\n        speciesTitle.attr('x', 25).attr('y', 15);\n\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(150, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', 1000)\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        circle.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        let speciesNodeLabel = nodeGroups.filter(f => f.label != undefined).append('text').text(d => {\n            let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n            return string;\n        }).attr('x', 10).attr('y', 5);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(0,' + (i * 60) + ')');\n\n        let nodes = selectedGroups.select('.time-line').selectAll('.node');\n        nodes.on('mouseover', (d, i) => {\n\n            let nearest = otherPaths.filter(path => {\n                let nodearray = path.flatMap(f => f.node);\n                return nodearray.indexOf(d.node) > -1;\n            });\n\n            let nearestA = nearest[0];\n            let nearestB = nearest[1];\n           \n        });\n\n        //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(10,' + (i * ((attributeHeight + 5) * (Object.keys(d[1].attributes).length + 1))) + ')');\n\n        drawContAtt(attributeGroups);\n        drawDiscreteAtt(attributeGroups, scales, false, false);\n\n        //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attributeWrapper.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n      \n        return pathData;\n\n    } else if(pathData.length > 1 && pathData.length < 5) {\n       \n        let commonNodeStart = getCommonNodes(pathData);\n        renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency);\n\n        /////END PATH RENDER///////\n        let attWrap = svg.append('g').classed('attribute-wrapper', true);\n        let attributeData = commonNodeStart[commonNodeStart.length - 1].children.map(ch => {\n            return [...commonNodeStart].concat(ch);\n        });\n\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attDataComb = attData[0].map((att, i)=> {\n            let species = pathData[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < attData.length; index++ ){\n                let species = pathData[index].filter(f=> f.leaf === true)[0].label;\n                let last = attData[index][i].length - 1\n                attData[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': attData[index][i]})\n            }\n            return attribute;\n        });\n\n        function findMaxState(states, offset){\n            let maxP = d3.max(states.map(v=> v.realVal));\n            let notMax = states.filter(f=> f.realVal != maxP);\n            let winState = states[states.map(m=> m.realVal).indexOf(maxP)]\n            winState.other = notMax;\n            winState.offset = offset;\n    \n            return winState;\n        }\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n\n       let attGroups = attWrap.selectAll('g').data(mappedDis).join('g').classed('attr', true);\n       attGroups.attr('transform', (d, i) => 'translate(145,' + (i * (attributeHeight + 10)) + ')');\n\n       attGroups.append('text')\n        .text(d=> d.label)\n        .style('text-anchor', 'end')\n        .style('font-size', 11)\n        .attr('transform', 'translate(0,'+(attributeHeight/2)+')');\n\n       let wrapRect = attGroups.append('rect').attr('width', 1010);\n       wrapRect.attr('height', attributeHeight);\n       wrapRect.style('fill', '#fff');\n       wrapRect.style('stroke', 'gray');\n       wrapRect.style('opacity', 0.5);\n\n       attGroups.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n     \n       let speciesGrp = attGroups.selectAll('g').data(d=> {\n            d.data = d.data.map(m=> {\n                m.type = d.type;\n                return m;\n            });\n            return d.data;\n        }).join('g').classed('species', true);\n\n       let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n           return y(d.realVal) + d.offset;\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([attributeHeight-2, 1]);\n           return y(d.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n           d3.select(n[i]).classed('selected', true);\n       }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).classed('selected', false);\n       });\n\n       let disGroup = speciesGrp.filter(sp=> {\n        return sp.type === 'discrete';\n        });\n\n       let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n       branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        });\n\n        let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 5, 2]);\n            return y(d.realVal) + d.offset;\n        }).attr('cx', 5);\n\n        bCirc.attr('fill', (d, i)=> d.color);\n\n        let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n        otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n                return y(c.realVal);\n            }).attr('fill', (c)=> c.color).style('opacity', 0.1);\n\n        otherCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n\n        bCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n        \n        /////AXIS ON HOVER////\n        branchGrpDis.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let conGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'continuous';\n        });\n\n        let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n        branchGrpCon.attr('transform', (d)=> {\n         let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n             let distance = x(d.edgeMove);\n             return 'translate('+distance+', 0)';\n         });\n\n         /////AXIS ON HOVER////\n        branchGrpCon.on('mouseover', (d, i, n)=> {\n            let y = d.yScale;\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let MeanRect = branchGrpCon.append('rect');\n   \n        MeanRect.attr('width', 10).attr('height', 3);\n        MeanRect.attr('y', (d, i) => {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0])\n            return y(d.realVal);\n        });\n\n        let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n        confiBars.attr('width', 10).attr('height', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.lowerCI95) - y(d.upperCI95);\n        });\n\n        confiBars.attr('y', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.upperCI95);\n        })\n        confiBars.style('opacity', 0.1);\n\n        //tranforming elements\n        svg.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(0, 60)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n\n\n    }else{\n       \n        /////////\n        //getting common node\n        ///\n\n        let maxBranch = d3.max(pathData.map(p => p.length));\n        let longestBranch = pathData.filter(path => path.length === maxBranch)[0];\n        let startBranch = longestBranch.filter(f=> f.leaf != true);\n        let commonNodeStart = startBranch;\n        //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n        pathData.map(path => {\n            commonNodeStart = [...path].filter(f => {\n                return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n        });\n\n        svg.remove();\n        let remove = selectedTool.append('g').classed('x-icon', true);\n        remove.attr('transform', 'translate(15, 10)');\n        remove.append('circle').attr('r', 7).attr('fill', '#fff');\n        remove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n        remove.style('cursor', 'pointer');\n        remove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales);\n        });        \n\n        /////////\n        renderDistibutions(pathData, selectedDiv, scales);\n        selectedDiv.style('height', '550px');\n\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n    }\n    \n}\n\nfunction sortPaths(sortButton) {\n    if (sortButton.text() === 'Sort Most to Least') {\n        sortButton.text('Sort Least to Most');\n    } else {\n        sortButton.text('Sort Most to Least');\n    }\n}","export function dropDown(div, optionArray, dropText, dropId){\n    let dropdiv = div.append('div').classed(`dropdown ${dropId}`, true);\n    dropdiv.style('display', 'inline-block')\n    let button = dropdiv.append('button').classed('btn dropbtn btn-secondary', true).text(dropText);\n    let dropContent = dropdiv.append('div').attr('id', dropId).classed('dropdown-content', true);\n    dropContent.append('a').text('text');\n    let options = dropContent.selectAll('a').data(optionArray).join('a').text(d=> d.field);\n\n    button.on('click', (d, i, n)=> {\n        if(dropContent.classed('show')){\n            dropContent.classed('show', false);\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n\n    return options;\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport * as d3Array from 'd3-array'\nimport { colorKeeper } from './index';\nimport {pathSelected, renderComparison} from './selectedPaths';\nimport {formatAttributeData} from './dataFormat';\nimport {filterMaster, nodeFilter, getLatestData, leafStateFilter} from './filterComponent';\nimport { drawBranchPointDistribution } from './distributionView';\nimport { dropDown } from './buttonComponents';\nimport { groupedView } from './viewControl';\n\nexport function drawPathsAndAttributes(pathData, main, calculatedScales){\n\n    let nodeTooltipFlag = true;\n\n    let collapsed = d3.select('#scrunch').attr('value');\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(pathData, main, calculatedScales);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n\n    let attKeys = attrHide.length > 0 ? calculatedScales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    let attData = formatAttributeData(pathData, calculatedScales, attKeys);\n\n    let attrMove = attKeys === null ? calculatedScales.length : attKeys.length;\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, calculatedScales, null, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (attrMove + 1))) +')');\n    \n    let cGroups = drawContAtt(predictedAttrGrps, collapsed);\n    let dGroups = drawDiscreteAtt(predictedAttrGrps, collapsed, false);\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, pathData, (attrMove * attributeHeight));\n\n    let leafStates = d3.selectAll('.discrete-leaf');\n    leafStates.on('click', (d, i)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#state-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.winState);\n            d3.select(\"#state-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-state\").on('click', ()=> {\n                \n                leafStateFilter(d, calculatedScales);\n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n            });\n\n            d3.select(\"#select-by-state\").on('click', ()=> {\n                let data = getLatestData();\n                let test = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState === d.winState;\n                });\n\n                let notIt = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState != d.winState;\n                });\n            \n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test, notIt, calculatedScales);\n\n            });\n\n        }});\n\n    return pathGroups;\n\n}\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 25)');\n        ///////////////////////////////////\n}\nexport function renderPaths(pathData, main, scales){\n    \n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    \n    let nodeTooltipFlag = false;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n    \n    let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.attr('y', -8);\n\n    //////////\n    ///Selecting species\n    /////////\n    let pathAdd = pathGroups.append('g').classed(\"fas fa-search-plus\", true);\n    pathAdd.attr('transform', 'translate(15, 10)');\n    pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathAdd.append('text').text('+').attr('transform', 'translate(-5, 5)');\n    pathAdd.style('cursor', 'pointer');\n\n    pathAdd.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected([d], notIt.data(), scales);\n        }\n    });\n\n    /////////\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       let string = d.filter(f=> f.leaf === true)[0].label;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 25).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', 1000)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> {\n        return d}).join('g').attr('class', (d, i, n)=> {\n            return d3.select(n[n.length - 1]).data()[0].label + \" node\";\n        });\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n       // let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        let distance = x(d.edgeMove);\n        return 'translate('+ distance +', 10)';});\n\n    nodeGroups.on('click', (d, i, n)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#branch-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.node);\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-node\").on('click', ()=> {\n                nodeFilter(d.node, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-node\").on('click', ()=> {\n                let data = getLatestData();\n                let test = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) > -1;\n                });\n                let notIt = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) === -1;\n                });\n\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n                pathSelected(test.data(), notIt.data(), scales);\n            });\n        }\n    });\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n}\nexport function renderAttributes(attributeWrapper, data, scales, filterArray, collapsed){\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> data[i]).join('g');\n    predictedAttrGrps.classed('predicated-attr-groups', true);\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n\n    let attrLabel = predictedAttrGrps.append('text').text(d=> d[d.length - 1].label);\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    return predictedAttrGrps;\n}\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 1 : 18;\n        p.change = test;\n    })\n}\nasync function continuousPaths(innerTimeline, collapsed){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? 20 : 45;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n       // let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n       let distance = x(d.edgeMove);\n        return distance; })\n    .y(d=> {\n        let y = d.yScale;\n        y.range([height, 0]);\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> d[0].color);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\nexport function drawContAtt(predictedAttrGrps, collapsed){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return (d[d.length - 1] != undefined) ? d[d.length - 1].type === 'continuous' : d.type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? 20 : 45;\n\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, collapsed);\n ////////\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n    let innerRect = innerBars.append('rect').classed('attribute-inner-bar', true);\n    innerRect.attr('height', attributeHeight);\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n       // let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n       let distance = x(d.edgeMove);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', 20).attr('height', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.lowerCI95) - y(d.upperCI95);\n        let barHeight = (collapsed === 'true') ? 20 : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(d.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.realVal);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.realVal);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', 20).attr('height', 5)\n        .attr('transform', (d, i)=> {\n            let y = d.yScale;\n            y.range([attributeHeight, 0]);\n            return 'translate(0, '+ y(d.realVal) +')';})\n        .attr('fill', d=> d.color).classed('val-bar', true);\n    }\n\n    /////AXIS ON HOVER////\n    innerBars.on('mouseover', (d, i, n)=> {\n        let y = d.yScale;\n        y.range([0, attributeHeight]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n        let f = d3.format(\".3f\");\n        tool.html('mean: '+f(d.realVal) +\"</br>\"+\"</br>\"+ 'upperCI: '+ f(d.upperCI95) +\"</br>\"+\"</br>\"+ 'lowerCI: '+ f(d.lowerCI95))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        tool.style('height', 'auto');\n       \n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('g.y-axis')\n        d3.select(n[i]).select('g.y-axis').remove();\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    return attributeNodesCont;\n   \n}\nexport function findMaxState(states, offset){\n    let maxP = d3.max(states.map(v=> v.realVal));\n    let notMax = states.filter(f=> f.realVal != maxP);\n    let winState = states[states.map(m=> m.realVal).indexOf(maxP)]\n    winState.other = notMax;\n    winState.offset = offset;\n    return winState;\n}\n    //BEGIN TEST\nfunction drawLeaves(attWraps, groupBy){\n    //THIS IS HARD CODED AND SHOULD NOT BE\n\n    let numSpecies = 100;\n    let height = 40;\n    //CONTINUOUS \n    let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap-first.continuous').data(d=> {\n            let totalVal = attWraps.data().filter(f=> f.label === d.label).map(m=> m.data);\n            let totalArray = totalVal.flatMap(p=> p.flatMap(f=> f.paths[f.paths.length - 1].realVal));\n            let max = d3.max(totalArray);\n            let min = d3.min(totalArray);\n            let totalMean = d3.mean(totalArray);\n        \n            let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n            let newVal = d.data.map((m, i)=> {\n                m.index = i;\n                return {'value': m.paths[m.paths.length - 1].realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n            });\n            let groupMean = d3.mean(newVal.map(v=> v.value));\n            return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n        }).join('g').classed('observe-wrap-first continuous', true);\n        \n        leafWraps.attr('transform', 'translate(850, 0)');\n        \n        let xAxis = leafWraps.append('g').classed('axis-x', true);\n        xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n        xAxis.each((d, i, nodes)=> {\n            d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n        });\n        \n        let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n        \n        let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n        \n        let distCircGroupOut = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n        let distcirclesOut = distCircGroupOut.selectAll('circle').data(d=> d.dotVals).join('circle');\n        distcirclesOut.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n        //DISCRETE//\n        let leafWrapsD = attWraps.filter(f=> f.type === 'discrete').selectAll('g.observe-wrap-first.discrete').data(d=> {\n          return [d];\n        }).join('g').classed('observe-wrap-first discrete', true);\n\n        let rects = leafWrapsD.filter(f=> {\n            return f.label != groupBy;\n        }).selectAll('rect').data(d=> {\n            let groupedData = d3Array.groups(d.data.map(m=> m.paths[m.paths.length - 1]), d=> d.state);\n            groupedData.sort((a, b)=> b[1].length - a[1].length)\n            return groupedData;\n        }).join('rect').attr('height', 15).attr('width', (d, i, n)=>{\n            let scale = d3.scaleLinear().domain([0, d3.sum(d3.selectAll(n).data().map(m=> m[1].length))])\n            .range([5, 170]);\n            d.width = scale(d[1].length);\n            return scale(d[1].length);\n        });\n\n        rects.attr('x', (d, i, n)=> {\n            if(i === 0){ return 0}\n            else {\n                d3.selectAll(n).filter((f, j)=> j< i);\n                let move = d3.sum(d3.selectAll(n).filter((f, j)=> j< i).data().map(m=> m.width));\n                return move;}\n        }).attr('y', 12)\n\n        rects.attr('fill', d=> d[1][0].color);\n\n        rects.on('mouseover', (d, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            \n            tool.html(d[0] + \"</br>\" + d[1].length)\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY + 20) + \"px\");\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 0.3);\n          \n        }).on('mouseout', (s, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 1)\n        })\n\n        leafWrapsD.attr('transform', 'translate(850, 0)');\n\n        let ratio = leafWrapsD.filter(f=> f.label === groupBy)\n            .selectAll('text').data(d=> [d]).join('text').text(d=> {\n                let paths = d.data[d.data.length - 1].paths;\n                return `${paths[paths.length - 1].state}: ${d.data.length} / ${numSpecies}`\n            });\n        ratio.style('text-anchor', 'middle')\n        ratio.style('font-size', '12px')\n        ratio.attr('x', 90).attr('y', 25)\n        \n    }\nexport function drawGroups(stateBins, scales){\n    \n    let groupedBool = d3.select('#show-drop-div-group').attr('value', 'grouped');\n    \n    let height = 40;\n    let selectedTool = d3.select('#selected');\n    selectedTool.selectAll('*').remove();\n \n    let main = d3.select('#main');\n    main.style('padding-top', 0);\n\n    d3.select('#toolbar').append('text').text(stateBins[0].field)\n\n    let splitOnArray = [{'field':'None'}].concat(scales.filter(f=> (f.field != stateBins[0].field) && f.type === 'discrete'));\n    let dropOptions = dropDown(d3.select('#toolbar'), splitOnArray, 'Split On','show-drop-div-group');\n\n    ////THIS SPLITS THE DATA////\n    dropOptions.on('click', (d, i, n)=> {\n        d3.select('#toolbar').append('text').text(d.field);\n        \n        if(d.type === 'discrete'){\n            let newBins = stateBins.map(state=> {\n                let newBinData = d.scales.map(sc=> {\n                    let field = sc.field;\n                    let name = sc.scaleName;\n                    let newData = state.data.filter(pa=> {\n                        let leaf = pa.filter(le=> le.leaf === true)[0];\n                        return leaf.attributes[field].winState === name;\n                    });\n                    return {'field': field, 'state': name, 'data': newData }\n                });\n                state.data = newBinData;\n                return state;\n            });\n\n            //////RENDERING NEED TO SEPARATE OUT/////\n           \n           let main = d3.select('#main');\n           main.selectAll('*').remove();\n           main.style('padding-top', '40px');\n           let firstGroupDiv = main.selectAll('div.first-group').data(newBins).join('div').classed('first-group', true);\n           \n           let firstGroupSvg = firstGroupDiv.append('svg');\n           firstGroupSvg.attr('height', s=> (s.data.length*270));\n           let firstGroup = firstGroupSvg.append('g');\n          \n           let firstLabel = firstGroup.append('text').text(f=> f.state).attr('transform', 'translate(10, 10)');\n\n           let secondGroup = firstGroup.selectAll('g.second-group').data(g=> {\n               let newGroups = g.data.map((m)=>{\n                   let newM = {};\n                   newM.first = [g.field, g.state];\n                   newM.second = [m.field, m.state];\n                   newM.data = m.data\n                   newM.leaves = m.data.flatMap(path=> path.filter(f=> f.leaf === true));\n                   return newM\n               });\n               return newGroups}).join('g').classed('second-group', true);\n\n           secondGroup = secondGroup.filter(f=> f.data.length > 0);\n           secondGroup.attr('transform', (s, i)=> 'translate(30,'+(20 + (i * 270))+')');\n\n           secondGroup.each((s, i, n)=> {\n            let branchBar = drawBranchPointDistribution(s.data, d3.select(n[i]));\n            branchBar.select('rect').attr('x', -80).attr('fill','gray');\n            branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n            \n            branchBar.select('.leaf-label').append('text').text((t, i) =>': '+ t.data.length).attr('transform', 'translate(45, 0)');\n            branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n    \n            branchBar.select('line').attr('stroke', '#fff');\n\n            let groupLabels = d3.select(n[i]).append('g');\n\n            //groupLabels.\n            let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n            pathAdd.attr('transform', 'translate(-10, 15)');\n            pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n            pathAdd.append('text').text('+').attr('transform', 'translate(-5, 3)').attr('fill', 'gray');\n        \n            pathAdd.style('cursor', 'pointer');\n\n            pathAdd.on('click', ()=> {\n                let other = d3.selectAll(n).filter((f,j)=> j != i);\n                renderComparison(s, other.data(), d3.select('#selected'), scales);\n            });\n\n            let stateLabel = groupLabels.append('text').text((s, i)=> s.second[1]);\n            stateLabel.attr('transform', (d, i)=> 'translate(3, 20)');\n            stateLabel.attr('fill', '#fff');\n           });\n\n           let innerGroup = secondGroup.filter(f=> f.data.length > 0).append('g').classed('inner-wrap', true);\n           innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n       \n           let attWraps = innerGroup.selectAll('.att-wrapper').data((d)=> {\n               let atts = formatAttributeData(d.data, scales, null);\n             \n               let attDataComb = atts[0].map((att, i)=> {\n                  \n                   let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n\n                   att[att.length - 1].offset = 0;\n                   let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n                   for(let index = 1; index < atts.length; index++ ){\n                       let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                       let last = atts[index][i].length - 1\n                       atts[index][i][last].offset = (index * 8);\n                       attribute.data.push({'species': species, 'paths': atts[index][i]});\n                   }\n                   \n                   return attribute;\n               });\n\n              let mappedDis = attDataComb.map(dis=> {\n                  dis.data = dis.data.map((spec, i)=> {\n                      spec.paths = spec.paths.map(m=> {\n                            if(dis.type === 'discrete'){\n                                let offset = 5 * i;\n                                let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                                return maxProb;\n                            }else{\n                                return m;\n                            }\n                        });\n                   return spec;\n                  });\n        \n                  dis.leaves = dis.data.flatMap(f=> f.paths.filter(p=> p.leaf === true));\n                  return dis;\n              });\n              return mappedDis;\n           }).join('g').classed('att-wrapper', true);\n\n           let innerWrapRect = attWraps.append('rect').attr('width', 800);\n\n            innerWrapRect.attr('height', height);\n            innerWrapRect.style('fill', '#fff');\n            innerWrapRect.style('stroke', 'gray');\n\n            attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n            wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n            svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n            let labels = attWraps.append('text')\n            .text(d=> d.label)\n            .style('text-anchor', 'end')\n            .style('font-size', 11)\n            labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n////WORKING ON STATE SHIFT VIEW///////\n            let shiftWraps = attWraps.filter(f=> f.type === 'discrete').selectAll('g.shift-wrap').data(d=> {\n       \n                let test = d.data.flatMap(m=> m.paths.filter((f, i)=> {\n                    if(i===0) return (i === 0);\n                    if(i > 0) return (m.paths[i-1].state != f.state)\n                    if(i < m.paths.length - 1) return (m.paths[i+1].state != f.state);\n                }));\n             \n                return [test];\n            }).join('g').classed('shift-wrap', true);\n\n            shiftWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxisShift = shiftWraps.append('g').classed('axis-x', true);\n            xAxisShift.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxisShift.each((d, i, nodes)=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 200]);\n                d3.select(nodes[i]).call(d3.axisBottom(x).ticks(5));\n            });\n\n            let circGroupShift = shiftWraps.append('g').attr('transform', 'translate(0, 20)');\n\n            let shiftCircles = circGroupShift.selectAll('circle.shift').data(d=> d).join('circle').classed('shift', true);\n            shiftCircles.attr('r', 4).attr('cx', (d, i)=> {\n                let x = d3.scaleLinear().domain([0,1]).range([0, 200]);\n                return x(d.edgeMove)\n            });\n            shiftCircles.attr('fill', d=> d.color).style('opacity', 0.4);\n\n//////DRAW OBSERVED DISTRIBUTIONS/////\n            let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap').data(d=> {\n                let totalVal = attWraps.data().filter(f=> f.label === d.label).flatMap(m=> m.leaves.map(l=> l.realVal));\n                let max = d3.max(totalVal);\n                let min = d3.min(totalVal);\n                let totalMean = d3.mean(totalVal);\n\n                let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n                let newVal = d.leaves.map((m, i)=> {\n                    m.index = i;\n                    return {'value': m.realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n                });\n                let groupMean = d3.mean(newVal.map(v=> v.value));\n                return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n            }).join('g').classed('observe-wrap', true);\n\n            leafWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxis = leafWraps.append('g').classed('axis-x', true);\n            xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxis.each((d, i, nodes)=> {\n                d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n            });\n\n            let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n\n            let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n\n            let distCircGroup = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n            let distcircles = distCircGroup.selectAll('circle').data(d=> d.dotVals).join('circle');\n            distcircles.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n            distcircles.on('mouseover', (d, i, n)=> {\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n           \n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n\n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n\n            ////DRAW SPECIES GROUPS IN THE ATTRIBUTES\n\n            let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n                d.data = d.data.map(m=> {\n                    m.type = d.type;\n                    return m;\n                });\n                return d.data;\n            }).join('g').classed('species', true);\n\n            let lineGenD = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                    let distance = d.edgeMove;\n                    return x(distance);\n                    })\n                .y(d=> {\n                    let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n                    return y(d.realVal);\n                });\n\n            let lineGenC = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                    let distance = d.edgeMove;\n                    return x(distance);\n                })\n                .y(d=> {\n                    let y = d.yScale;\n                    y.range([height-2, 1]);\n                    return y(d.realVal) + 2;\n                });\n\n            let innerStatePaths = speciesGrp.append('path')\n            .attr(\"d\", d=> {\n                    return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n                })\n            .attr(\"class\", (d, i)=> {\n                    return d.species + \" inner-line\"})\n            .style('stroke-width', 0.7)\n            .style('fill', 'none')\n            .style('stroke', 'gray');\n\n            innerStatePaths.on('mouseover', (d, i, n)=> {\n               \n                d3.select(n[i]).classed('selected', true);\n                distcircles.filter(f=> f.species === d.species).classed('selected', true).style('opacity', 1);\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n                \n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n            let disGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'discrete';\n            });\n\n            let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n            branchGrpDis.attr('transform', (d)=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                    let distance = x(d.edgeMove);\n                    return 'translate('+distance+', 0)';\n            });\n\n            let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n                let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n                return y(d.realVal);\n            }).attr('cx', 5);\n\n            bCirc.classed('win-state', true);\n\n            bCirc.attr('fill', (d, i, n)=> {\n                if(i === 0){\n                    return d.color;\n                }else if(i === n.length - 1){\n                    if(d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }else{\n                    if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }\n            });\n\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n          let distance = x(d.edgeMove);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n    branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', 10).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', 10).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     });\n     confiBars.style('opacity', 0.1);\n           \n           //drawGroups(stateBins, calculatedScales);\n    }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        selectedTool.select('#show-drop-div-group').classed('show', false);\n    });\n    /////END SPLIT VIEW//////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    svg.selectAll('*').remove();\n\n    svg.attr('height', (stateBins.length * (height + 20)));\n    svg.append('g').attr('transform', 'translate(500, 40)').append('text').text(stateBins[0].field)\n\n    let wrappers = svg.selectAll('.grouped').data(stateBins).join('g').classed('grouped', true);\n    wrappers.each((d, i, n)=> {\n        let branchBar = drawBranchPointDistribution(d.data, d3.select(n[i]));\n        branchBar.select('rect').attr('x', -80).attr('fill','gray');\n        branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n        \n        branchBar.select('.leaf-label').append('text').text((d, i) =>': '+ d.data.length).attr('transform', 'translate(45, 0)');\n        branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n\n        branchBar.select('line').attr('stroke', '#fff');\n    });\n\n    let groupLabels = wrappers.append('g');\n   \n\n     //groupLabels.\n     let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n     pathAdd.attr('transform', 'translate(20, -5)');\n     pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n     pathAdd.append('text').text('+').attr('transform', 'translate(5, 3)').attr('fill', 'gray');\n \n     pathAdd.style('cursor', 'pointer');\n\n     pathAdd.on('click', (d, i, n)=> {\n         let other = d3.selectAll(n).filter((f,j)=> j != i);\n         renderComparison(d, other.data(), d3.select('#selected'), scales);\n     });\n\n     groupLabels.append('text').text((d, i)=> d.state);\n     groupLabels.attr('transform', (d, i)=> 'translate(40, 16)');\n     groupLabels.style('text-anchor', 'end');\n     groupLabels.attr('fill', '#fff');\n\n    let innerGroup = wrappers.append('g').classed('inner-wrap', true);\n    innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n    let attWraps = innerGroup.selectAll('.att-wrapper').data((d, i)=> {\n        let atts = formatAttributeData(d.data, scales, null);\n        let attDataComb = atts[0].map((att, i)=> {\n            let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < atts.length; index++ ){\n                let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                let last = atts[index][i].length - 1;\n                atts[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': atts[index][i]})\n            }\n            return attribute;\n        });\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n       return mappedDis;\n    }).join('g').classed('att-wrapper', true);\n\n    let innerWrapRect = attWraps.append('rect').attr('width', 800);\n    innerWrapRect.attr('height', height);\n    innerWrapRect.style('fill', '#fff');\n    innerWrapRect.style('stroke', 'gray');\n\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n    wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n    \n    svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n       //END EXPERIMENT\n    drawLeaves(attWraps, stateBins[0].field);\n\n    let labels = attWraps.append('text')\n    .text(d=> d.label)\n    .style('text-anchor', 'end')\n    .style('font-size', 11)\n    labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n    let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n        d.data = d.data.map(m=> {\n            m.type = d.type;\n            return m;\n        });\n        return d.data;\n    }).join('g').classed('species', true);\n\n    let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n           return y(d.realVal);\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([height-2, 1]);\n           return y(d.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n        d3.select(n[i]).classed('selected', true);\n    }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).classed('selected', false);\n    });\n\n    let disGroup = speciesGrp.filter(sp=> {\n     return sp.type === 'discrete';\n     });\n\n    let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n            let distance = x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n     });\n\n    let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n         let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n         //return y(d.realVal) + d.offset;\n         return y(d.realVal);\n     }).attr('cx', 5);\n\n     bCirc.classed('win-state', true);\n\n     bCirc.attr('fill', (d, i, n)=> {\n        if(i === 0 || i === n.length - 1){\n            return d.color;\n            /*\n        }else if(i === n.length - 1){\n            if(d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }*/\n        }else{\n            if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }\n        }\n     });\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n          let distance = x(d.edgeMove);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n     branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', 10).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', 10).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     })\n     confiBars.style('opacity', 0.1);\n\n     /////HIGHLIGHTING NODES IN A TREE ON HOVER//////\n     d3.selectAll('.att-wrapper').selectAll('.branch').on('mouseover', (d, i, n)=> {\n         let treeNode  = d3.select('#sidebar').selectAll('.node');\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', true);\n      \n    }).on('mouseout', (d, i, n)=> {\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', false);\n    })\n     \n}\nexport function drawDiscreteAtt(predictedAttrGrps, collapsed, bars){\n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n    discreteAtt.selectAll('*').remove();\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        let disct = d.map(m=> {\n            let test = (m.leaf == true) ? m.states.map(s=> {\n                s.move = m.move;\n                s.edgeMove = m.edgeMove;\n                s.color = m.color;\n                return s;\n            }) : m;\n            return test;\n        });\n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n            return disct.map(m=> m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        //let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        let distance = x(d.edgeMove);\n        return distance + 7;})\n    .y(d=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        return y(d.realVal);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", (d, i)=> d[0].species + \" inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;\n    });\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g');\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        if(d[0]){\n           // let distance = (moveMetric === 'move') ? d[0].move : x(d[0].edgeMove);\n           let distance = x(d[0].edgeMove);\n            return 'translate('+distance+', 0)';\n        }else{\n           // let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n            let distance = x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('rect').attr('width', 20).attr('height', attributeHeight).attr('opacity', 0);\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n        /////AXIS ON HOVER////\n    attributeNodesDisc.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, attributeHeight]);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n        })\n\n    attributeNodesDisc.attr('class', (d, i, n)=> {\n        let path = d3.selectAll(n).data();\n        return path[path.length - 1].species;\n    }).classed('attribute-node-discrete', true);\n\n    if(bars === false){\n\n        let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n            \n            return d;\n        }).join('circle').classed('dots', true);\n        \n        stateDots.attr('cx', 10).attr('cy', (d)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n            return y(d.realVal);\n        }).attr('r', 2);\n        \n        stateDots.style('fill', (d, i, n)=> {\n           \n            /*\n            let speciesPath = d3.selectAll('.attribute-node-discrete.'+ d.species)//.filter(f=> f.type === 'discrete');\n           \n            let nodeArray = speciesPath.data().map(m=> {\n                return m.node ? m.node : m[0].node;\n            });\n            let index = nodeArray.indexOf(d.node);\n           \n            */\n            //return d.color\n            return 'gray';\n        });\n    \n        stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n/*\n        let maxDots = stateDots.filter((f, i, n)=> {\n           \n            return f.realVal === d3.max(d3.selectAll(n).data().map(m=> m.realVal));\n        });\n*/\n        \n\n        ////NEED TO ADD COLOR ON STATE CHANGE////\n    \n        stateDots.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n        ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n    \n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }else{\n        attributeNodesDisc.filter((att, i)=> {\n            return att[0] != undefined;}).append('rect').attr('height', attributeHeight).attr('width', 20).attr('fill', '#fff')\n        let stateBars = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dis-rect').data(d=> {\n            return d;\n        }).join('rect').classed('dis-rect', true);\n\n        stateBars.attr('width', 20).attr('height', (d, i)=> {\n         \n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            return y(d.realVal);\n        });\n\n        stateBars.attr('fill', (d, i)=> d.color);\n        stateBars.attr('opacity', '0.7');\n        stateBars.attr('stroke', '#fff');\n        stateBars.attr('transform', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            let probability = d3.selectAll(n).data().sort((a, b)=> b.realVal - a.realVal);\n            let chosenIn = probability.map(p=> p.state).indexOf(d.state);\n         \n            if(chosenIn === 0){\n                    return 'translate(0,0)';\n            }else{\n                ///need to make this a reduce function///\n                let valueAdd = 0;\n                    for(let step = 0; step < chosenIn; step++){\n                        valueAdd = valueAdd + probability[step].realVal;\n                    }\n                return 'translate(0,'+(y(valueAdd))+')';\n            }\n        });\n\n        stateBars.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n\n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }\n\n    return attributeNodesDisc;\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\n\nimport {dataMaster, nestedData, collapsed} from './index';\nimport {filterMaster, removeFilter, addFilter} from './filterComponent';\nimport { updateMainView, groupedView } from './viewControl';\nimport {getNested} from './pathCalc';\nimport { dropDown } from './buttonComponents';\n\n\nexport function buildTreeStructure(paths, edges){\n    let root = paths[0][0];\n    let nestedData = getNested(root, edges.rows);\n  \n    return nestedData;\n}\n\nfunction updateBrush(treeBrush, scales){\n    \n    let sidebar = d3.select('#sidebar');\n    let toolbarDiv = d3.select('#toolbar');\n\n    let data = filterMaster.length === 0 ? dataMaster[0] : dataMaster[0];\n    let nodes = sidebar.select('svg').select('g').selectAll('.node');\n    let selectedNodes = nodes.filter(n=> (n.y > d3.event.selection[0][0]) && (n.y < d3.event.selection[1][0]) && (n.x > d3.event.selection[0][1]) && (n.x < d3.event.selection[1][1])).classed('selected', true);\n    let filterArray = selectedNodes.data().map(n=> n.data.node);\n    let test = treeFilter(data, filterArray);\n    let brushId = 'brush-'+ filterMaster.filter(f=> f.attributType === 'topology').length;\n    let filterOb = addFilter('data-filter', 'topology', brushId, treeFilter, [...data], [...test], null);\n\n    updateMainView(scales, 'edgeLength');\n   \n    ///DIMMING THE FILTERED OUT NODES//////\n\n    ////Class Tree Links////\n    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n    d3.selectAll('.link-not-there').classed('link-not-there', false);\n    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingLinks.classed('link-not-there', true);\n\n    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingNodes.classed('node-not-there', true);\n\n    ///END NODE DIMMING///////\n\n    let button = toolbarDiv.append('button').classed('btn btn-info', true);\n    let span = button.append('span').classed('badge badge-light', true);\n    span.text(test.length);\n    let label = button.append('h6').text('Tree Filter');\n\n    let xSpan = label.append('i').classed('close fas fa-times', true);\n    xSpan.on('click', async (d, i, n)=> {\n        removeFilter(brushId);\n        await updateMainView(scales, 'edgeLength');\n        d3.selectAll('.selected').classed('selected', false);\n        d3.selectAll('.link-not-there').classed('link-not-there', false);\n        d3.selectAll('.node-not-there').classed('node-not-there', false);\n        button.remove();\n        d3.select(this).call(treeBrush.move, null);\n        d3.select('.tree-brush').remove();\n    });\n}\n\nexport function renderTreeButtons(normedPaths, calculatedScales, sidebar){\n    ///SIDBAR STUFF\n    sidebar = sidebar.append('div').classed('button-wrap', true);\n    let treeButton = sidebar.append('button').text('Filter by Tree').classed('btn btn-outline-secondary', true);  \n    let treeBrush = d3.brush().extent([[0, 0], [400, 600]]).on('end', (d, i, n) => updateBrush(treeBrush, calculatedScales));\n    treeButton.on('click', ()=> {\n        renderTree(sidebar, true, null, true);\n        let treeBrushG = sidebar.select('svg').append('g').classed('tree-brush', true).call(treeBrush);\n    });\n\n        ///SIDBAR STUFF\n    let treeViewButton = sidebar.append('button').text('Hide Lengths').attr('id', 'length').classed('btn btn-outline-secondary', true);  \n\n    treeViewButton.on('click', ()=> {\n  \n       sidebar.select('svg').remove();\n       if(treeViewButton.text() === 'Show Lengths'){\n            renderTree(sidebar, null, true);\n            treeViewButton.text('Hide Lengths');\n       }else{\n            renderTree(sidebar, null, false);\n            treeViewButton.text('Show Lengths');\n       }\n    });\n\n    treeViewButton.style('opacity', 0).style('width', 0).style('padding', 0).style('margin', 0)\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> optionArray.push(m))\n\n    let dropOptions = dropDown(sidebar, optionArray, 'See Values','show-drop-div-sidebar');\n\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            renderTree(sidebar, d, true);\n            //updateTree(tree, dimensions, treeSvg, g, d, lengthBool);\n        }else if(d.type === 'continuous'){\n            renderTree(sidebar, null, false);\n            //updateTree(tree, dimensions, treeSvg, g, null, lengthBool);\n        }else{\n            renderTree(sidebar, null, false);\n           // updateTree(tree, dimensions, treeSvg, g, null, lengthBool);\n        }\n       sidebar.select('#show-drop-div-sidebar').classed('show', false);\n    });\n}\n\nfunction treeFilter(data, selectedNodes){\n    return data.filter(path=> {\n        let nodeNames = path.map(no=> no.node);\n        let booArray = nodeNames.map(id=> selectedNodes.indexOf(id) > -1);\n        return booArray.indexOf(true) > -1\n    });\n}\n\nfunction uncollapseSub(d){\n    d.children = d._children;\n    d._children = null;\n    if(d.children){\n        d.children.map(c=> uncollapseSub(c));\n    }    \n}\n\nfunction collapseSub(d){\n    if(d.children) {\n        d._children = d.children\n        d._children.forEach(collapseSub)\n        d.children = null\n    }  \n}\n\n\nfunction collapseTree(treeData){\n\n    let leaves = getLeaves(treeData, []);\n    //GOING TO CHANGE ALL BLANK TO ANOLIS FOR THIS SITUATION///\n    leaves.forEach(l=> l.data.clade === \"Norops\" ? l.data.clade = \"Norops\" : l.data.clade = \"Anolis\");\n\n    return stepDown(treeData);\n\n    function stepDown(node){\n        let leaves = getLeaves(node, []);\n        let ids = new Set(leaves.map(m=> m.data.clade));\n        if(ids.size > 1){\n            node.children.map(n=> stepDown(n))\n        }else{\n            node.branchPoint = true;\n            node.clade = Array.from(ids)[0]\n            collapseSub(node);\n            return node;\n        }\n        return node;\n    }\n    \n    function getLeaves(node, array){\n        if(node.children != undefined ){\n            node.children.map(n=> getLeaves(n, array))\n        }else{\n            array.push(node);\n        };\n        return array;\n    }\n}\n\nfunction assignPosition(node, position) {\n    if (node.children === undefined || node.children === null){\n        \n        position = position + 1.5;\n        node.position = position;\n        return position;\n    }else{\n        let positionArray = []\n        node.children.forEach((child) => {\n            position = assignPosition(child, position);\n            positionArray.push(position);\n        });\n        node.options = positionArray;\n        node.position = d3.max(positionArray);\n        return position;\n    }\n}\n\nfunction addingEdgeLength(edge, data){\n    data.combEdge = data.edgeLength + edge;\n    if(data.children){\n        data.children.forEach(chil=> {\n            addingEdgeLength(data.combEdge, chil);\n        });\n    }\n}\n\nexport function renderTree(sidebar, att, uncollapse, pheno){\n    // set the dimensions and margins of the diagram\n    let dimensions = {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 290,\n        height : 520\n    }\n\n    // declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([dimensions.height, dimensions.width]);\n\n    addingEdgeLength(0, nestedData[0]);\n\n    console.log('neeested', pheno ? nestedData[0].attributes[pheno].yScale.domain() : null)\n\n    //  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData[0]);\n\n    // maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let groupedBool = d3.select('#show-drop-div-group').attr('value');\n    let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n\n    let sidebarTest = sidebar.select('svg');\n    let treeSvg = sidebarTest.empty() ? sidebar.append(\"svg\") : sidebarTest;\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + dimensions.margin.top + dimensions.margin.bottom);\n\n    let gTest = treeSvg.select('g.tree-g');\n    let g = gTest.empty() ? treeSvg.append(\"g\").classed('tree-g', true) : gTest;\n    g.attr(\"transform\",\n      \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\");\n\n    if(groupedBool === \"ungrouped\" && uncollapse === false){\n        let newNodes = collapseTree(treenodes);\n        updateTree(newNodes, dimensions, treeSvg, g, att, lengthBool);\n    }else{\n        ////Break this out into other nodes////\n        console.log('pheno',pheno)\n        updateTree(treenodes, dimensions, treeSvg, g, att, lengthBool, pheno);\n    }\n    /////END TREE STUFF\n    ///////////\n}\n\nfunction findDepth(node, array){\n\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n\n    return array;\n    \n}\n\nfunction updateTree(treenodes, dimensions, treeSvg, g, attrDraw, length, pheno){\n    \n    assignPosition(treenodes, 0);\n\n   // console.log('PHENOO', pheno ? treenodes.data.attributes[pheno].yScale.domain() : null)\n\n    //console.log('length in tree', pheno, d3.select('.attr-drop.dropdown').empty() ? 'nope': d3.select('.attr-drop.dropdown').select('button').text())\n\n    let branchCount = findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, 1]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, 1])\n\n    if(length){   \n        g.attr('transform', 'translate(20, 265)');\n        treeSvg.attr('height', 800);\n        yScale.range([500, 0]).domain([0, branchCount.length])\n        xScale.range([0, dimensions.width + 10]);\n    } \n    if(pheno){\n        g.attr('transform', 'translate(20, 50)');\n        treeSvg.attr('height', 800);\n        xScale.domain(treenodes.data.attributes[pheno].yScale.domain())\n        yScale.domain([0, 1]).range([0, 500])\n    }\n\n// adds the links between the nodes\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n        if(length && pheno === undefined){\n           return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n           + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n           + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n           + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n        }else{\n            return \"M\" + xScale(d.data.attributes[pheno].realVal) + \",\" + yScale(d.data.combEdge)\n            + \" \" + xScale(d.parent.data.attributes[pheno].realVal) + \",\" + yScale(d.parent.data.combEdge);\n            /*\n            return \"M\" + d.y + \",\" + d.x\n            + \"C\" + (d.y + d.parent.y) / 2 + \",\" + d.x\n            + \" \" + (d.y + d.parent.y) / 2 + \",\" + d.parent.x\n            + \" \" + d.parent.y + \",\" + d.parent.x;\n            */\n        }       \n    });\n\n    if(pheno){\n        link.style('opacity', 0.3)\n    }\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants(), d => d.data.node)\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n    .duration(500)\n    .attr(\"transform\", function(d) { \n        if(length && pheno === undefined){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n        }else{\n           // return \"translate(\" + d.y + \",\" + d.x + \")\"; \n           return \"translate(\" + xScale(d.data.attributes[pheno].realVal) + \",\" + yScale(d.data.combEdge) + \")\"; \n        }\n    });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n        \n        attrDraw.stateColors.forEach(att=> {\n            let circ = leaves.filter(f=> {\n                return f.data.attributes[attrDraw.field].winState === att.state;\n            }).select('circle');\n            circ.attr('fill', att.color);\n            circ.attr('r', 4)\n            notleaves.selectAll('circle').attr('fill', 'gray');\n        });\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    })\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateTree(treenodes, dimensions, treeSvg, g, attrDraw, lengthBool);\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n    return node;\n}","import { pairPaths } from \"./dataFormat\";\nimport { dropDown } from \"./buttonComponents\";\nimport * as d3 from \"d3\";\nimport { renderTree } from \"./sidebarComponent\";\nimport { speciesTest, dataMaster } from \".\";\n\n\nexport function generatePairs(data, main){\n\n        let pairs = pairPaths(data);\n\n        let attKeys = d3.entries(pairs[0].p1[0].attributes)\n                    .filter(f=> f.value.type === 'continuous')\n                    .map(m=> {\n                        return {'field': m.key, 'value': m.key }\n                    });\n        \n        let drop = dropDown(d3.select('#toolbar'), attKeys, attKeys[0].field, 'attr-drop');\n        drop.on('click', (d, i, n)=> {\n            updateRanking(pairPaths(data), d.field);\n            renderTree(d3.select('#sidebar'), null, true, d.field);\n            d3.select('.attr-drop.dropdown').select('button').text(d.field);\n        });\n\n        updateRanking([...pairs], attKeys[0].field);\n\n        ///BUTTON FOR PHENOGRAM VIEW. MAYBE MOVE THIS TO SIDEBAR\n        let phenogramButton = d3.select('#sidebar').select('.button-wrap').append('button').text('Phenogram');\n        phenogramButton.classed('btn btn-outline-secondary', true); \n        phenogramButton.on('click', ()=> {\n            renderTree(d3.select('#sidebar'), null, true, d3.select('.attr-drop.dropdown').select('button').text())\n        })\n}\n\nfunction updateRanking(pairs, field){\n    \n    let deltaMax = d3.max([...pairs].map(m=> m.deltas.filter(f=> f.key === field)[0]).map(m=> m.value));\n    let closeMax = d3.max([...pairs].map(m=> m.closeness.filter(f=> f.key === field)[0]).map(m=> m.value));\n    let distMax = d3.max([...pairs].map(d=> d.distance))\n    let deltaScale = d3.scaleLinear().domain([0, deltaMax]).range([0, 1]);\n    let closeScale = d3.scaleLinear().domain([closeMax, 0]).range([0, 1]);\n    let distScale = d3.scaleLinear().domain([0, distMax]).range([0, 1]);\n    let pickedPairs = [...pairs].map(p=> {\n        p.delta = p.deltas.filter(d=> d.key === field)[0];\n        p.closeness = p.closeness.filter(d=> d.key === field)[0];\n        p.deltaRank = deltaScale(p.delta.value);\n        p.closenessRank = closeScale(p.closeness.value);\n        p.distanceRank = distScale(p.distance);\n        p.totalRank = p.deltaRank + p.closenessRank + p.distanceRank;\n        return p;\n    })\n    let sortedPairs = pickedPairs.sort((a, b)=> b.totalRank - a.totalRank).slice(0, 40);\n    \n    sortedPairs = sortedPairs.filter((f, i)=> i%2 === 0)\n    drawSorted(sortedPairs, field);\n\n}\n\nfunction drawSorted(pairs, field){\n   // console.log('pairs', pairs, field);\n    let width = 600;\n    let height = 100;\n    let xScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n\n    d3.select('#main').selectAll('*').remove()\n    let svg = d3.select('#main').append('svg');\n    svg.attr('height', pairs.length * 150)\n    let wrap = svg.append('g');\n    wrap.attr('transform', 'translate(20, 70)')\n    let pairWraps = wrap.selectAll('g.pair-wrap').data(pairs).join('g').classed('pair-wrap', true);\n    pairWraps.attr('transform', (d, i)=> `translate(50,${i*150})`);\n    pairWraps.append('rect')\n        .attr('width', (d, i)=> {\n            return width - xScale(d.common.edgeMove);\n        })\n        .attr('height', height)\n        .attr('x', d=> xScale(d.common.edgeMove))\n        .attr('stroke-width', 1).attr('stroke', 'black')\n        .attr('fill', '#fff');\n\n    pairWraps.append('text').text((d, i)=> {\n        return `${d.p1[d.p1.length - 1].label} + ${d.p2[d.p2.length - 1].label}`\n    }).attr('y', -10);\n\n    let pairGroup = pairWraps.selectAll('g.pair').data(d=> [d.p1, d.p2]).join('g').classed('pair', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, width]);\n       // let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n       let distance = x(d.edgeMove);\n        return distance; })\n    .y(d=> {\n        let y = d.attributes[field].yScale;\n        y.range([height, 0]);\n        return y(d.attributes[field].realVal);\n    });\n\n    let innerPaths = pairGroup.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', 'rgb(165, 185, 198)');\n\n    let branches = pairGroup.selectAll('g.branch').data(d=> d).join('g').classed('branch', true);\n    branches.attr('transform', (d, i)=> `translate(${xScale(d.edgeMove)}, 0)`);\n    branches.filter(f=> f.leaf != true).append('rect').attr('width', 10).attr('height', (d)=> {\n        let y = d.attributes[field].yScale;\n        return y(d.attributes[field].lowerCI95) - y(d.attributes[field].upperCI95)\n    }).attr('fill', 'rgb(165, 185, 198, .5)').attr('y', (d, i)=> {\n        let y = d.attributes[field].yScale;\n        return y(d.attributes[field].upperCI95);\n    });\n\n    branches.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n        return d.attributes[field].yScale(d.attributes[field].realVal) - 2;\n    });\n\n    pairWraps.append('rect').attr('width', (d, i)=> {\n        return xScale(d.common.edgeMove)})\n        .attr('height', height)\n        .attr('fill', '#fff').style('opacity', 0.7);\n\n        let yAxisG = pairWraps.append('g').classed('y-axis', true);\n        let xAxisG = pairWraps.append('g').classed('x-axis', true);\n        xAxisG.call(d3.axisBottom(xScale).ticks(10));\n        xAxisG.attr('transform', `translate(0, ${height})`)\n\n    pairWraps.on('mouseover', (d, i)=> {\n        \n        let species = [...d.p1.map(n=> n.node)].concat(d.p2.map(n=> n.node));\n        let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.label)].concat(d.p1.filter(n=> n.leaf === true).map(m=> m.label));\n        let neighbors = labels.flatMap(m=> {\n            let start = speciesTest[0].indexOf(m);\n            let ne = speciesTest[0].filter((f, j)=> (j < (+start + 4)) && (j > (+start - 4)));\n            return ne;\n        });\n        \n        let neighNodes = dataMaster[0].filter(f=> neighbors.indexOf(f[f.length -1].label) > -1).flatMap(m=> m.map(f=> f.node))\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return species.indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> species.indexOf(f.data.node) > -1).classed('hover', true);\n\n        treeNode.filter(f=> neighNodes.indexOf(f.data.node) > -1).classed('hover-neighbor', true);\n        //Hiding Others\n        treeNode.filter(f=> (neighNodes.indexOf(f.data.node) === -1) && (species.indexOf(f.data.node) === -1)).classed('hover-not', true);\n        //Coloring Niehgbors\n        treeLinks.filter(f=> neighNodes.indexOf(f.data.node) > -1).classed('hover-neighbor', true);\n        //Hiding Others\n        treeLinks.filter(f=> (neighNodes.indexOf(f.data.node) === -1) && (species.indexOf(f.data.node) === -1)).classed('hover-not', true);\n\n        return d3.select(this).classed('hover', true);\n    })\n\n    pairWraps.on('mousemove', function(d, i) {\n        let scale = d.p1[0].attributes[field].yScale;\n        let axisGroupTest = d3.select(this).select('.y-axis');\n        let axisGroup = axisGroupTest.empty() ? d3.select(this).append('g').classed('y-axis', true) : axisGroupTest;\n        if(d3.select('#compare-button').empty() || d3.select('#compare-button').text()==='Normal Mode'){\n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)')\n            axisGroup.call(d3.axisLeft(scale).ticks(5));\n        }else{\n            let pathD = d3.select(this).select('.path-groups').selectAll('path');\n            let maxDiff = pathD.data().map(d=> d[0].maxDiff)[0];\n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)');\n            let newScale = d3.scaleLinear().domain([maxDiff, 0]).range([0, 60]);\n            axisGroup.call(d3.axisLeft(newScale).ticks(5));\n        }\n\n    }).on('mouseleave', function(){\n        let axisGroup = d3.select(this).select('.y-axis');\n        axisGroup.remove();\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false).classed('hover-neighbor', false).classed('hover-not', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false).classed('hover-neighbor', false).classed('hover-not', false);\n        return d3.select(this).classed('hover', false);\n    });\n    \n\n\n\n\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {drawPathsAndAttributes, drawDiscreteAtt, drawGroups} from './renderPathView';\nimport {toggleFilters, getLatestData} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport { collapsed } from '.';\nimport { dropDown } from './buttonComponents';\nimport { generatePairs } from './pairView';\n\n\nexport function toolbarControl(toolbar, normedPaths, main, calculatedScales, pathView){\n\n    console.log('paths',pathView)\n\n    let viewButton = toolbar.append('button').attr('id', 'view-toggle').attr('attr' , 'button').attr('class', 'btn btn-outline-secondary');\n    viewButton.on('click', ()=> togglePathView(viewButton, calculatedScales));\n\n    let pairButton = toolbar.append('button').attr('id', 'pair-toggle').attr('attr' , 'button').attr('class', 'btn btn-outline-secondary');\n    \n    pairButton.text('Pair View');\n    \n    pairButton.on('click', ()=> {\n        generatePairs(normedPaths, main);\n    });\n\n    if(pathView === 'paths'){\n        viewButton.text('View Summary');\n    }else if(pathView === 'summary'){\n        viewButton.text('View Paths');\n    }else{\n        console.error('pathView parameter not found');\n    }\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, main, calculatedScales));\n    ///LENGTH BUTTON CODE\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, main, calculatedScales));\n\n    let discreteViewButton = toolbar.append('button').attr('id', 'discrete-view');\n    discreteViewButton.attr('class', 'btn btn-outline-secondary').text('Switch to Discrete Bars');\n    discreteViewButton.attr('value', false);\n    discreteViewButton.on('click', ()=> {\n        let discretePredictedGroups = d3.selectAll('.predicated-attr-groups');\n        if(discreteViewButton.text() === 'Switch to Discrete Bars'){\n            discreteViewButton.text('Switch to Discrete Dots');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, true);\n        }else{\n            discreteViewButton.text('Switch to Discrete Bars');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, false);\n        }\n    });\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> {\n        if(m.type === 'discrete'){\n            optionArray.push(m);\n        }\n    });\n\n    let dropOptions = dropDown(toolbar, optionArray, 'Group By','show-drop-div-group');\n    toolbar.select('#show-drop-div-group').attr('value', 'ungrouped');\n    console.log('dropOptions', toolbar.select('#show-drop-div-group').attr('value'));\n\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            let data = getLatestData();\n            let stateBins = d.scales.map(m=> {\n                return {'field': m.field, 'state': m.scaleName, 'data': []}});\n           \n            stateBins.map(state=> {\n               state.data = data.filter(paths=> {\n                    let node = paths.filter(no=> no.leaf === true);\n                        return node[0].attributes[state.field].winState === state.state;\n                });\n            });\n           d3.select('#main').selectAll('*').remove();\n           drawGroups(stateBins, calculatedScales);\n        }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        toolbar.select('#show-drop-div-group').classed('show', false);\n    });\n}\n\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, main, calculatedScales){\n\n    let data = getLatestData();\n   \n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(data, main, calculatedScales, 'edgeLength');\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n\n        drawPathsAndAttributes(data, main, calculatedScales, 'edgeLength');\n    }\n}\n\n/**\n * \n * @param {*} viewButton button that changes the actual view the text of the button determines what the view should change to \n * @param {*} normedPaths \n * @param {*} main \n * @param {*} calculatedScales \n */\nfunction togglePathView(viewButton, calculatedScales){\n\n    if(viewButton.text() === 'View Paths'){\n        viewButton.text('View Summary');\n    }else{\n        viewButton.text('View Paths');\n    }\n    updateMainView(calculatedScales);\n}\n\n\n\n\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {loadData} from './dataLoad';\nimport {calculateScales, matchLeaves, matchEdges, normPaths, filterKeeper, pairPaths} from './dataFormat';\nimport {allPaths, pullPath, getPath} from './pathCalc';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {toolbarControl, renderAttToggles} from './toolbarComponent';\nimport { updateMainView, initialViewLoad } from './viewControl';\n\nexport const dataMaster = [];\nexport const savedSelected = [];\nexport const collapsed = false;\nexport const nestedData = [];\nexport const speciesTest = [];\n\nexport const colorKeeper = [\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n]\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nlet selectedPaths = wrap.select('#selected');\nlet sidebar = wrap.select('#sidebar');\n\n//hiding this for dev\n//sidebar.style('opacity', 0)\n\nlet toolbarDiv = wrap.select('#toolbar');\n\nloadData(d3.json, './public/data/body-length-res.json', '').then(d=> console.log('new data!', d))\n\nloadData(d3.json, './public/data/anolis-edges.json', 'edge').then(async edges => {\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edgeLen = await loadData(d3.json, './public/data/anolis-edge-length.json', 'edge');\n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.V1);\n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.V2) == -1 );\n    let leafChar = await loadData(d3.json, './public/data/anolisLeafChar.json', '');\n    let leafChar2 = await loadData(d3.csv, './public/data/anolisDataNew.csv', '');\n    let labels = await loadData(d3.json, './public/data/anolis-labels.json', '');\n\n    console.log('leafffs', leafChar)\n\n// console.log('new attribute data',leafChar, leafChar2)\n  //  console.log(Object.entries(leafChar2).filter(en=> en[0] != 'columns' && en[0] != 'type'));\n    let rows = Object.entries(leafChar2).filter(en=> en[0] != 'columns' && en[0] != 'type');\n    \n //   let leafChar = {'rows': rows.map(m=> m[1]), 'type': leafChar2.type, 'fields': leafChar2.columns};\n\n    ///MAKE A ESTIMATED SCALES THING\n    let calculatedAtt = {\n        'awesomeness' : await loadData(d3.json, './public/data/anolis-awesomeness-res.json', 'continuous'),\n        'island' : await loadData(d3.json, './public/data/anolis-island-res.json', 'discrete'),\n        'SVL' : await loadData(d3.json, './public/data/anolis-svl-res.json', 'continuous'),\n        'ecomorph': await loadData(d3.json, './public/data/anolis-ecomorph-res.json', 'discrete'),\n        'PCIII_padwidth_vs_tail': await loadData(d3.json, './public/data/padwidth-vs-tail-res.json', 'continuous'),\n    }\n\n    ////CALCULATE THE SCALES FOR EACH ATTRIBUTE////////\n    let calculatedScales = calculateScales(calculatedAtt, colorKeeper);\n\n    ///MATCH LEAF CHARACTERS AND LABELS TO LEAVES///\n    let matchedLeaves = matchLeaves(labels, leaves, leafChar, calculatedScales);\n\n    //MATCH CALC ATTRIBUTES TO EDGES///\n    let matchedEdges = matchEdges(edges, edgeLen, calculatedAtt, calculatedScales);\n\n    ///CALCULATES PATHS FROM THE DATA////\n    let paths = allPaths(matchedEdges, matchedLeaves, \"V1\", \"V2\");\n\n    let normedPaths = normPaths(paths, calculatedAtt, calculatedScales);\n    dataMaster.push(normedPaths);\n//console.log(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.label))\n  //  console.log(normedPaths.filter(f=> f.label));\n\n    speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.label));\n   \n    toolbarControl(toolbarDiv, normedPaths, main, calculatedScales, 'paths');\n    \n    let filterDiv = wrap.select('#filter-tab').classed('hidden', true);\n\n    ////////TREE RENDER IN SIDEBAR////////\n    \n    nestedData.push(buildTreeStructure(paths, edges));\n    renderTreeButtons(normedPaths, calculatedScales, sidebar, false);\n    let tree = renderTree(sidebar, null, false);\n    \n    /// LOWER ATTRIBUTE VISUALIZATION ///\n    initialViewLoad(calculatedScales, 'edgeLength');\n});\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n/*\nloadData(d3.json, './public/data/geospiza_with_attributes.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    //console.log('pa',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/geospiza_loop_all_asr_features.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('pa RICH',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/anolis_rich_ASR_pad_vs_tail.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('anolis RICH',pathArray);\n});*/\n\n\n\n\n"],"sourceRoot":""}