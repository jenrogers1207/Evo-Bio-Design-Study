{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/multinetLoad.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/pairView.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/cladeMaker.js","webpack:///./src/scripts/buttonComponents.js","webpack:///./src/scripts/viewControl.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/renderPathView.js","webpack:///./src/scripts/brusherMaker.js","webpack:///./src/scripts/compare.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","api_root","Multinet","this","tables","nodes","links","graph_structure","api","multinetApi","getGraphNames","workspace","graphs","load_data","graph","multinetOb","load_tables","nodeTables","node_table","load_nodes","edge_table","edgeTable","load_links","rename_node_vars","rename_link_vars","JSON","parse","stringify","table","limit","concat","row","id","_id","source","_from","target","_to","allPaths","edgeArray","leafArray","map","le","getPath","leaf","pathKeeper","path","filter","ed","reverse","pullPath","pathArray","arrayOfArray","nameArray","depth","forEach","node","childArray","undefined","children","assign","flag","selectedPaths","comparisonKeeper","width","pathSelected","selectedPath","otherPaths","scales","selectedDiv","d3","main","selectAll","remove","style","drawPathsAndAttributes","commonNodes","pathData","console","log","classed","selectedSpecies","flatMap","f","treeNodes","select","indexOf","selectedToolTest","selectedTool","empty","append","svgTest","svg","branchFrequency","reduce","acc","curr","selectWrap","attr","circleScale","range","domain","values","selectedGroups","join","addRemoveBubble","on","treeNode","treeLinks","text","string","charAt","toUpperCase","timelines","nodeGroups","maxTimeKeeper","x","combLength","hovers","label","nearest","shownAttributes","checked","attributeWrapper","attData","formatAttributeData","attributeGroups","renderAttributes","keys","attributes","drawContAtt","collapsed","drawDiscreteAtt","commonNodeStart","paths","maxBranch","thresh","max","chil","parentBase","move","base","scaledParentMove","parentScale","xScale","level","getCommonNodes","pathBars","combEdge","childNodeWrap","childNodes","curve","y","line","species","commonHover","renderSelectedTopology","attWrap","attributeData","ch","attDataComb","att","offset","attribute","type","index","last","mappedDis","dis","spec","states","winState","color","maxP","v","realVal","notMax","other","findMaxState","attGroups","wrapRect","speciesGrp","lineGenD","attributeHeight","lineGenC","yScale","branchGrpDis","sp","bCirc","otherCirc","tool","transition","duration","html","state","pageX","pageY","ticks","branchGrpCon","MeanRect","scale","field","min","confiBars","lowerCI95","upperCI95","dataMaster","renderDistibutions","radio","sorted","sort","a","b","high","highLeaves","low","lowLeaves","renderSelectedView","commonNode","chosenPath","test","distance","pathIndex","error","sortOtherPaths","group","pathRemove","renderComparison","buttonGroupTest","buttonGroup","usedColors","groupColor","newColor","colorKeeper","find","compareButtonTest","compareButton","comparisonCombined","sc","newAtt","com","atts","added","standard","variance","first","second","button","filteredComp","selectedTest","attWraps","normBins","Array","fill","internalNodes","leafNodes","bins","edges","top","mean","e","Math","sqrt","meanStandard","sigma2","upCon95","lowCon95","leaves","exit","attWrapsEnter","enter","merge","innerWrap","lineGen","pathGroups","missing","areaG","y0","y1","confGroups","conf","NaN","axisGroupTest","axisGroup","maxDiff","newScale","startBins","difArray","diffs","abs","clamp","diff","obsDistWrap","histogram","thresholds","newLeaves","xAxis","each","distGroups","groupLength","macroModes","pict","traitVal","topPairsKeeper","pairUpdateRender","pairs","weights","mappedPairs","updateRanking","pairPaths","drawSorted","topPairs","discreteTraitDraw","allPairs","matchKeeper","getScales","newPair","check","others","rankGrid","topPairSearch","pairGroups","trait","discreteTraitCalc","stateWraps","pairState","p1","p2","rankingControl","rankDiv","dropDiv","weightPicker","wImage","dropOptions","dropDown","defaultW","slider","slide","default","displayValue","num","w","disMarkers","sortDropOp","otherList","totalRank","sortandRedraw","changeTrait","attKeys","toolbarButtonDiv","drop","renderTree","penalty","includes","weightScales","deltaMax","deltas","closeMax","closeAll","distMax","delta","close","getWeightScales","pickedPairs","newP","closeness","deltaFix","deltaRank","closenessRank","distanceRank","lateDivergence","percentage","round","brushes","brushData","pairColor","rankMeta","renderText","xScaleAxis","wrap","pairWraps","common","scoreWrap","scoreGroups","score","scoreLabel","zero","areaGen","pairGroupN","species1","species2","neighbors","start","speciesTest","speciesNames","labeledN","spec1N","spec2N","closest1","closest2","branchesN","pairGroup","branches","xAxisG","checkArray","mouseG","mousePerLine","parentNode","dat","mouse","xDate","invert","bisect","edgeLength","right","getElementsByClassName","beginning","end","getTotalLength","floor","pos","getPointAtLength","toFixed","pairLength","myArray","chunk_size","arrayLength","tempArray","myChunk","chunkArray","newMatch","col","satScale","groups","squarebins","buildTreeStructure","getNested","String","V1","traitColorDropDown","sidebar","renderCallback","addedCall","optionArray","reduce2DropArray","startArray","array","renderTreeButtons","normedPaths","buttonWrap","phenoOptions","phenogramButton","cladeButton","growSidebarRenderTree","collapseSub","_children","assignPosition","position","positionArray","child","options","addingEdgeLength","edge","uncollapse","pheno","dimensions","margin","bottom","left","height","lengthHeight","treemap","nestedData","treenodes","groupedBool","sidebarTest","treeSvg","gTest","g","cladesGroupKeeper","chosenCladesGroup","updateTree","treeData","getLeaves","stepDown","ids","Set","Clade","size","branchPoint","clade","from","collapseTree","attrDraw","getLatestData","branchCount","findDepth","scalingValues","link","descendants","parent","valueParam","yFlipped","yAxis","notleaves","stateColors","nodeArray","access","tooltipTreeNode","branchNodes","triangle","uncollapseSub","raise","cladeKeeper","colorKeep","highlightGroups","className","param","chosen","defineTraitClade","category","scaleName","dropOp","textInput","addClade","updateCladeDrop","sliderThing","callBack","intitialBrush","labelL","labelR","brush","extent","selection","handle","dispatchEvent","CustomEvent","gBrush","dx","cx","x0","x1","cladeBool","root","updateCladeTree","dataSet","lengthBool","renderCladeTree","nodeData","findCommonNode","path1","path2","subtreeFinder","nodeNames","labelTree","cladeData","treeSVG","newClade","cladeMono","xStep","step","names","drawCladeBox","leafNames","leafNameNodeData","allLeafNodeData","positionHolder","positions","addCladeGroup","clades","logScaleToggle","updateViews","toolbarDataControl","toolbar","graphList","chosenGraph","dataDrop","toolbarButtonWrap","loadApp","clearMain","loader","changeDropValue","updateMainView","display","document","getElementById","toolbarControl","calculatedScales","viewArray","dropUpdated","filterButton","filterDiv","moveMetric","selectWrapper","attButton","stateChange","attProps","selectedOption","optKeys","button1","button2","submit","fromState","classList","toState","filterMaster","discreteFilter","filterOb","addFilter","attributeType","nodeList","addFilterTag","continRanges","ranges","brushBars","xBrush","brushGroup","selections","_groups","__brush","predictedFilter","observedFilter","lastFilter","continuousFilter","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","queryFilter","toggleFilters","scrunchButton","toggleScrunch","discreteViewButton","discretePredictedGroups","stateBins","no","splitOnArray","newBins","newBinData","newData","pa","firstGroupSvg","firstGroup","secondGroup","newM","branchBar","drawBranchPointDistribution","groupLabels","pathAdd","stateLabel","innerGroup","innerWrapRect","wrappers","shiftWraps","xAxisShift","shiftCircles","leafWraps","totalVal","totalMean","newVal","groupMean","distcircles","dotVals","generateTraitScale","rectWidth","groupBy","totalArray","leafWrapsD","rects","groupedData","d3Array","ratio","drawLeaves","drawGroups","attributeOptions","checkedAttributes","dropdiv","dropContent","attoptions","cladeOptions","dropdivClade","buttonClade","dropContentClade","li","binGroups","calculatedScalesKeeper","dropUl","div","dropText","dropId","rectHeight","collapsedHeight","nodeTooltipFlag","newOb","popDeviation","popCharShift","sortBar","dropWrap","popStatWrap","traitLabel","characterShifts","volatility","SortPathsByTrait","pathWrapTest","pathWrap","notIt","nodeFilter","renderPaths","combinedAttGroup","datum","continuousPaths","predictedAttrGrps","attribWrap","attrMove","cGroups","compactLineG","continuousArea","volatilityGroups","discG","comboDisc","comboStates","toGroup","endLength","precision","vals","sizer","drawDistLines","selectedState","filterType","leafStateFilter","attrLabel","innerTimeline","change","innerPaths","opacity","colorBool","continuousAtt","attribRectCont","innerBars","rangeRect","colorScale","up","logUpper","logLower","bars","discreteAtt","innerTimelineDis","statePath","disct","attribRectDisc","attributeNodesDisc","stateDots","endStateDot","stateBars","probability","chosenIn","valueAdd","brushArray","brushColors","addBrushables","continDist","startPos","endPos","brushOb","mouseBool","ind","rectGroup","dragPos","filterData","continuousHistogram","maxCount","brushedDist","mirrorlineGen","otherBins","otherDist","findNodesOtherTraits","descendBins","valueRange","testH","findDescendValues","treenodeOb","descendNodes","descendLinks","highlightTree","brushedDomain","dist","badge","textIn","copyText","setSelectionRange","execCommand","alert","event","stopPropagation","removeBrush","addBadge","viewType","then","view","disabled","renderDistStructure","generatePairs","initialViewLoad","dataName","removeFilter","filterId","dataFilters","filterIndex","testData","fun","filterFunction","newTestData","newFilterMaster","attType","filFunction","oldData","extra","ex","filterToolbar","formater","nodeId","selectedNode","predicted","observed","numb","filterPred","st","filterObs","win","selectorDiv","selectId","dropDownWrapper","compareColors","light","dark","renderDistributionComparison","branchScale","divWrap","groupHeader","textDiv","branchPointSvg","groupBins","pointGroups","selectedClades","selectedNodes","testNodes","testLinks","pathsListOne","pathsListTwo","testNodesOne","testLinksOne","testNodesTwo","testLinksTwo","mapBins","combined","groupKey","leafData","stateKeys","binnedWrap","selected","sum","squareDim","predictedWrap","rootData","contRoot","newy","defaultBarColor","disRoot","rootStateGroups","maxVal","branchGroup","timeRange","discreteDist","discreteStateGroups","k","stateKey","discreteWidth","cladeStateGroups","probabilityTicks","arr","average","list","continBinGroups","distrib","gindex","maxCounts","classLabel","brushedVal","groupDis","histo","oNode","oHisto","oDist","nodesFlat","notNodes","brushedNodes","selectedBranch","secondGrp","doesItExist","groupLabel","classy","observedWrap","predictedWidth","contOb","contBars","observedWidth","movex","xvalues","discOb","discBars","dRects","offSet","movey","xPoint","padding","attrHide","newNormed","keysToHide","count","int","nodeSet","getNormBins","rootNodes","sortedBins","mapNorm","bin","fData","attrib","binI","leafAttr","outliers","normalRange","binNormal","outlierRange","xO","histogramO","rootNode","colors","entries","h","binWrap","nodeLengthArray","nodeDuplicateCheck","bPointScale","eMove","binsRects","xFlipped","axis","axGroup","drawGroupLabels","fl","cladeLabel","mainDiv","compareTooltipFlag","filteredAttributes","labelText","abbreviate","stateBarsPredicted","random","newstate","maxBin","maxState","winStates","renderDiscretePredicted","highlightNodesMouseover","renderContinuousPredicted","brushSpace","pixelRange","pair","leaf1","leaf2","verts","lastNode","p1Index","p2Index","distanceFlag","shallowFlag","getDistance","binCount","binStep","one","two","fillBins","slopeMagic","slope","valdiffs","maxOneVal","maxTwoVal","slope_one","slope_two","oneVal","y1_one","test2","twoVal","y1_two","test1","calculateDelta","earlyBins","laterBins","x2","y2","calculateNewScales","keyList","deviation","scaleCat","combineLength","maxTime","filterArray","sumKeeper","valKeeper","diffSquared","next","calcVolatility","speciesLabel","catColor","edgeMove","popNormalRange","word","dataLoadAndFormatMultinet","graphName","unique","self","attributeList","rows","internal","notAttributeList","discreteTraitList","calculatedAtt","newRow","logVal","calcLeafAtt","matchedEdges","fromNode","V2","rooted","chosenClade","savedSelected","toolbarDiv","toolbarDataWrap","centData","appLaunch"],"mappings":"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","file":"js/app.a03cbc89.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Trevo/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([200,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { multinetApi } from \"multinet\";\n\n/* Multinet data importer */\n// Define local variables that will store the api url and the responses from the database\n// const api_root = \"https://multinet.app/api\";\nconst api_root = \"https://api.multinet.app/api\";\n\n//const api_root = \"http://localhost:5000/api\";\n\nclass Multinet {\n    constructor(){\n        this.tables = {},\n        this.nodes = [],\n        this.links = [],\n        this.graph_structure = {},\n        this.api_root = api_root\n    }\n}\n\nconst api = multinetApi(api_root);\n\nexport async function getGraphNames(workspace){\n    return await api.graphs(workspace);\n}\n\nexport async function load_data(workspace, graph) {\n\n    let multinetOb = new Multinet();\n\n    // Fetch the names of all the node and edge tables \n    await load_tables(workspace, graph, multinetOb);\n\n    // Loop through each node tables and fetch the nodes to global variables\n    for (let node_table of multinetOb.tables.nodeTables) {\n        await load_nodes(workspace, node_table, multinetOb);\n    };\n\n    // Load the edge table (ONLY ONE BECAUSE OF ARANGO API LIMITATIONS) to a global variable\n    let edge_table = multinetOb.tables.edgeTable;\n    await load_links(workspace, edge_table, multinetOb);\n\n    // Set the graph structure\n    multinetOb.graph_structure = { \"nodes\": rename_node_vars(multinetOb.nodes), \"links\": rename_link_vars(multinetOb.links) }\n   \n    return JSON.parse(JSON.stringify(multinetOb.graph_structure))\n};\n\nasync function load_tables(workspace, graph, multinetOb) {\n    multinetOb.tables = await api.graph(workspace, graph);\n};\n\nasync function load_nodes(workspace, node_table, multinetOb) {\n    const table = await api.table(workspace, node_table, {\n      limit: 1000,\n    });\n    multinetOb.nodes = [].concat(multinetOb.nodes, table);\n};\n\nasync function load_links(workspace, edge_table, multinetOb) {\n    const table = await api.table(workspace, edge_table, {\n      limit: 1000,\n    });\n    multinetOb.links = [].concat(multinetOb.links, table)\n};\n\nfunction rename_link_vars(links) {\n    for (let row of links) {\n        row.id = row._id;\n        row.source = row._from;\n        row.target = row._to;\n\n        delete row._id;\n        delete row._from;\n        delete row._to;\n    };\n\n    return links;\n}\n\nfunction rename_node_vars(nodes) {\n    for (let row of nodes) {\n        row.id = row._id;\n\n        delete row._id;\n    };\n\n    return nodes;\n}\n","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n\nexport function getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function calculateMovingAverage(data, i) {\n\n    if (movingAverage === 0) {\n        return data[i][yValue];\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        sum += x;\n    }\n\n    return sum / count;\n};\n\nexport function calculateMovingStandardDeviation(data, i, avg) {\n\n    if (movingAverage === 0) {\n        return 0;\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        var dx = x - avg;\n        sum += (dx * dx);\n    }\n\n    var variance = sum / count;\n    return Math.sqrt(variance);\n};\n\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    \n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    \n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n\n\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n       // node.edgeLength = node.edge_data.weight;\n        if(notEmpty(node.children)){\n            pathArray.push(Object.assign({}, node));\n            pullPath([...pathArray], [...node.children], arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, Object.assign({},node)]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import * as d3 from \"d3\";\nimport { branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes } from './renderPathView';\nimport { formatAttributeData, maxTimeKeeper } from './dataFormat';\nimport { filterMaster } from './filterComponent';\nimport { dataMaster, collapsed, colorKeeper } from './index';\nimport { renderDistibutions } from \"./distributionView\";\n\nexport let selectedPaths = [];\nexport let comparisonKeeper = [];\nconst width = 800;\n\nexport function pathSelected(selectedPath, otherPaths, scales, width) {\n\n    let selectedDiv = d3.select('div#selected');\n    let main = d3.select('div#main');\n    if (selectedPath === null) {\n\n        selectedPaths = [];\n\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, false);\n\n    } else {\n        \n        selectedPaths = selectedPaths.concat(selectedPath);\n        let commonNodes = renderSelectedView([...selectedPaths], [...otherPaths], selectedDiv, scales, width);\n        let sortedPaths = sortOtherPaths([...selectedPaths], [...otherPaths], [...commonNodes]);\n        \n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let pathGroups = drawPathsAndAttributes(sortedPaths.map(s => s.data), main, scales, false);\n\n        main.style('padding-top', '250px');\n    }\n}\nfunction getCommonNodes(paths){\n   \n    let maxBranch = d3.max(paths.map(p => p.length));\n    let longestBranch = paths.filter(path => path.length === maxBranch)[0];\n    let startBranch = longestBranch.filter(f=> f.leaf != true);\n    let commonNodeStart = startBranch;\n    //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n    paths.map(path => {\n        commonNodeStart = [...path].filter(f => {\n            return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n    });\n\n    let children = paths.map(path => {\n        path = (path[0].leaf === true) ? path.reverse() : path;\n        let nodeIndex = path.map(p => p.node);\n        let thresh = nodeIndex.indexOf(commonNodeStart[commonNodeStart.length - 1].node);\n        let subset = path.filter((f, i) => i > thresh);\n        return subset;\n    });\n\n    commonNodeStart[commonNodeStart.length - 1].children = children.map((path, i) => {\n        let max = d3.max(path.map(p => p.combLength)) - commonNodeStart[commonNodeStart.length - 1].combLength;\n        return path.map((chil, j, n) => {\n            chil.parentBase = commonNodeStart[commonNodeStart.length - 1].combLength;\n            chil.move = chil.combLength - commonNodeStart[commonNodeStart.length - 1].combLength;\n            chil.base = (j === 0) ? 0 : n[j - 1].combLength - commonNodeStart[commonNodeStart.length - 1].combLength;\n            let parentScale = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width])\n            let scaledParentMove = parentScale(commonNodeStart[commonNodeStart.length - 1].combLength);\n            chil.xScale = d3.scaleLinear().domain([0, max]).range([0, (width - scaledParentMove)]);\n            chil.level = i;\n            return chil;\n        });\n    });\n\n    return commonNodeStart;\n}\nexport function sortOtherPaths(pathData, otherPaths, commonNode) {\n\n    if(pathData.length > 1){\n\n        if(commonNode != null){\n\n            let chosenPath = commonNode.reverse().map(m => m.node);\n            let rankedPaths = otherPaths.map(path => {\n                let step = 0;\n                let test = path.reverse().map((node, i) => {\n                    if (chosenPath.indexOf(node.node));\n                    return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n                }).filter(f => f.indexOf > -1);\n                let distance = (test[0].indexOf + test[0].pathIndex);\n                return { 'data': path.reverse(), 'distance': distance };\n            });\n            let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        \n            return sortedData;\n        }\n        console.error('multiple paths without common node');\n    }else{\n\n        let chosenPath = pathData[0].reverse().map(m => m.node);\n    \n        let rankedPaths = otherPaths.map(path => {\n            let step = 0;\n            let test = path.reverse().map((node, i) => {\n                if (chosenPath.indexOf(node.node));\n                return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n            }).filter(f => f.indexOf > -1);\n            let distance = (test[0].indexOf + test[0].pathIndex);\n            return { 'data': path.reverse(), 'distance': distance };\n        });\n        let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        return sortedData;\n    }\n\n}\nfunction renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency){\n\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', 'translate(0, 20)')\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data([commonNodeStart]).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n        pathBars.attr('height', (35 + (25 * commonNodeStart[commonNodeStart.length - 1].children.length)));\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales, width)\n\n        /////////\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(145, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', (d, i) => {\n                let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n                return x(d[d.length - 1].combEdge)\n            })\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => {\n            return d}).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length -1]]).range([0, width]);\n            let distance = x(d.combEdge);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        nodeGroups.classed('common-node', true);\n\n        let childNodeWrap = nodeGroups\n        .filter((c, i, n) => {\n            return i === n.length - 1\n            })\n        .selectAll('g.child')\n        .data(d => {\n                return d.children})\n        .join('g').classed('child', true);\n\n        let childNodes = childNodeWrap.selectAll('g.node').data(d => {\n           \n            return d}).join('g').classed('node', true);\n        childNodes.attr('transform', (d, i, n) => {\n            return 'translate(' + d.xScale(d.move) + ', ' + (d.level * 20) + ')';\n        });\n\n        childNodeWrap.append('path').attr('d', (d, i, n) => {\n            let pathArray = [{ 'x': 0, 'y': 0 }, { 'x': 0, 'y': i }];\n            d.map(m => {\n                d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]])\n                pathArray.push({ 'x': m.xScale(m.move), 'y': m.level })\n            });\n            let line = d3.line()\n                .curve(d3.curveMonotoneY)\n                .x(function(d) {\n                    return d.x;\n                })\n                .y(d => (d.y * 20))\n            return line(pathArray);\n        }).attr('stoke-width', '2px').attr('fill', 'none').attr('stroke', 'gray');\n\n        childNodeWrap.on('mouseover', (d, i)=> {\n            let specArray = d.map(m=> m.species);\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let commonHover = [...commonNodeStart].map(c=> c.node).concat(d.map(n=> n.node));\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            treeLinks.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', (d, i)=> {\n            d3.selectAll('.hover').classed('hover', false);\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        let childCirc = childNodes.append('circle').attr('r', 7).attr('fill', 'red').attr('y', 5);\n\n        childCirc.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        childNodes.filter(f => f.leaf === true).append('text').text(d => d.label).attr('x', 9).attr('y', 4);\n        //selectWrap.attr('transform', 'translate('+(50+(20 *commonNodeStart[commonNodeStart.length - 1].children.length))+')')\n       \n\n}\nexport function addRemoveBubble(group, scales, width){\n\n    let pathRemove = group.append('g').classed('x-icon', true);\n    pathRemove.attr('transform', 'translate(15, 10)');\n    pathRemove.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathRemove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n    pathRemove.style('cursor', 'pointer');\n    pathRemove.on('click', (d, i, n) => {\n        let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        pathSelected(null, dataMaster[0], scales, width);\n    });\n\n}\nexport function renderComparison(group, otherPaths, selectedDiv, scales){\n \n    let buttonGroupTest = selectedDiv.select('.button-wrap');\n    let buttonGroup = buttonGroupTest.empty() ? selectedDiv.append('div').classed('button-wrap', true) : buttonGroupTest;\n    \n    buttonGroup.style('display','inline-block').style('width', '900px').style('height', '50px');\n    let main = d3.select('div#main');\n    main.style('padding-top', '300px');\n\n    if(group != null){\n        let usedColors = comparisonKeeper.map(m=> m.groupColor);\n        let newColor = colorKeeper.find(c => usedColors.indexOf(c[0]) === -1);\n        group.groupColor = newColor[0];\n        comparisonKeeper.push(group);\n    }\n\n    if(comparisonKeeper.length > 1){\n        let compareButtonTest = d3.select('#toolbar').select('#compare-button');\n        let compareButton = compareButtonTest.empty() ? d3.select('#toolbar').append('button').text('Normal Mode').attr('id', 'compare-button').classed('btn btn-info', true) : compareButtonTest;\n        compareButton.on('click', ()=> {\n            compareButton.text() === \"Normal Mode\" ? compareButton.text('Compare Mode') : compareButton.text('Normal Mode');\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        });\n    }\n\n    let comparisonCombined = scales.map((sc, i)=> {\n        let newAtt = {'field': sc.field, 'type': sc.type, 'data': []}\n        comparisonKeeper.map((com, i)=> {\n            let atts = formatAttributeData(com.data, scales, [sc.field]);\n           \n            let added = atts.flatMap(att=> {\n                return att.map(a => {\n                    return a.map(m=> {\n                        let standard = m.leaf === true ? 0 : (m.upperCI95 - m.realVal) / 2;\n                        m.variance = standard * standard;\n                        return m;\n                    });\n                })\n            })\n\n            newAtt.data.push({'group': {'first': com.first, 'second': com.second, 'color': com.groupColor}, 'data': sc.type === 'continuous' ? added : atts.flatMap(a=> a)});\n        })\n        return newAtt;\n    });\n\n    let button = buttonGroup.selectAll('button').data(comparisonKeeper).join('button').classed('btn btn-info', true).style('background', d=> d.groupColor);\n    button.selectAll('span').data(t=> [t]).join('span').text(t=> {\n        return t.first ? `${t.first[1]} / ${t.second[1]}` : t.state;\n    }).append('span').text(t=> t.data.length).classed(\"badge badge-light\", true)\n    \n    let xOut = button.selectAll('i').data(d=> [d]).join('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    xOut.on('click', (d, i)=> {\n        let filteredComp = comparisonKeeper.filter(f=> f.groupColor != d.groupColor);\n        comparisonKeeper = filteredComp;\n        if(comparisonKeeper.length > 0){\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        }else{\n            selectedDiv.selectAll('*').remove();\n            selectedDiv.style('height', '0px');\n            main.style('padding-top', '0px');\n        }\n    });\n\n    let selectedTest = selectedDiv.select('.comparison-svg');\n    let selectedTool = selectedTest.empty() ? selectedDiv.append('svg').classed('comparison-svg', true) : selectedTest;\n    selectedDiv.style('height', '300px').style('width', '100%');\n    selectedTool.style('height', '300px');\n\n    let attWraps = selectedTool.selectAll('.att-wrapper').data(comparisonCombined.filter(f=> f.type === 'continuous').map((com)=>{\n       \n        let max = d3.max(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.upperCI95)))) + .2;\n        let min = d3.min(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.lowerCI95)))) - .2;\n        \n        com.data.map(c=> {\n            let binLength = 6;\n            //let max = scales.filter(f=> f.field === com.field)[0].max;\n           // let min = scales.filter(f=> f.field === com.field)[0].min;\n            let normBins = new Array(binLength).fill().map((m, i)=> {\n                let step = 1 / binLength;\n                let base = (i * step);\n                let top = ((i+ 1)* step);\n                return {'base': base, 'top': top, 'binI': i, 'max': max, 'min':min }\n            });\n\n            let internalNodes = c.data.map(path => path.filter(node=> node.leaf != true));\n            let leafNodes = c.data.flatMap(path => path.filter(node=> node.leaf === true));\n\n            c.bins = normBins.map((n, i, nodes)=> {\n                let edges = internalNodes.flatMap(path => path.filter(node=> {\n                    return node.combLength >= n.base && node.combLength <= n.top;\n                } ));\n                n.data = edges;\n                let mean = d3.mean(edges.map(e=> e.realVal));\n                n.mean = mean === undefined ? normBins[i-1].mean : mean;\n                let standard = Math.sqrt(d3.mean(edges.map(e=> e.variance)));\n                n.meanStandard = edges.length === 0 ? 0 : standard;\n                let sigma2 = standard * 2;\n                n.upCon95 = mean === undefined ? normBins[i-1].upCon95 : mean + sigma2;\n                n.lowCon95 = mean === undefined ? normBins[i-1].lowCon95 : mean - sigma2;\n                return n;\n            });\n            c.leaves = leafNodes;\n           \n            return c;\n        })\n        \n        return com;\n    }));\n\n    attWraps.exit().remove();\n    let attWrapsEnter = attWraps.enter().append('g').classed('att-wrapper', true);\n\n    let attLabels = attWrapsEnter.append('text').text(d=> d.field).style('text-anchor', 'end')\n                    .style('font-size', '11px').attr('transform', 'translate(120, 35)');\n\n    attWraps = attWrapsEnter.merge(attWraps);\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+(10+(i * 70))+')');\n\n    let innerWrap = attWraps.selectAll('g.inner-group').data(d=> [d]).join('g').classed('inner-group', true);\n    innerWrap.attr('transform', 'translate(150, 0)');\n    let wrapRect = innerWrap.selectAll('rect.outline-rect').data(d=> [d]).join('rect').classed('outline-rect', true)\n                    .attr('width', 800).attr('height', 60).attr('fill', '#fff').attr('stroke', 'gray');\n    \n    if(d3.select('#compare-button').empty() || d3.select('#compare-button').text() === \"Normal Mode\"){\n            let lineGen = d3.line()\n            .x((d, i)=> {\n                let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n                return x(i);\n            })\n            .y(d=> {\n            let y = d3.scaleLinear().domain([d.min, d.max])\n                y.range([60, 1]);\n                return y(d.mean);\n    });\n\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> d.data).join('g').classed('path-groups', true);\n    pathGroups.selectAll('*').remove();\n    let paths = pathGroups.append('path').attr('d', d=> { \n        let scale = d.bins[0].data[0].yScale\n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.mean === undefined){\n                b.mean = d.bins[i-1].mean;\n                d.missing = true;\n            }\n           \n            b.yScale = d3.scaleLinear().domain([b.min, b.max]).range([60, 1])\n            return b;\n        });\n        return lineGen(d.bins);\n    }).classed('path', true);\n\n    var areaG = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i)=> {\n        let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n        return x(i);\n    })\n    .y0(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.lowCon95);\n    })\n    .y1(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.upCon95); \n    });\n\n    let confGroups = innerWrap.selectAll('g.conf-groups').data(d=> d.data).join('g').classed('conf-groups', true);\n    confGroups.selectAll('*').remove();\n    let conf = confGroups.append('path').attr('d', d=> { \n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.upCon95 === NaN){\n                b.upCon95 = d.bins[i-1].upCon95;\n                d.missing = true;\n            }\n            if(b.lowCon95 === NaN){\n                b.lowCon95 = d.bins[i-1].lowCon95;\n                d.missing = true;\n            }\n\n            return b;\n        });\n        return areaG(d.bins);\n    }).classed('path', true);\n\n    paths.style('fill', 'none');\n    paths.style('stroke', d=> d.group.color);\n    paths.style('stroke-width', '2px');\n\n    conf.style('fill', d=> d.group.color);\n    conf.style('opacity', 0.15);\n\n    let yAxisG = innerWrap.append('g').classed('y-axis', true);\n\n    innerWrap.on('mousemove', function(d, i) {\n     \n        let scale = d3.scaleLinear().domain([d.data[0].bins[0].min, d.data[0].bins[0].max]).range([1, 60]);\n        let axisGroupTest = d3.select(this).select('.y-axis');\n        let axisGroup = axisGroupTest.empty() ? d3.select(this).append('g').classed('y-axis', true) : axisGroupTest;\n        \n        if(d3.select('#compare-button').empty() || d3.select('#compare-button').text()==='Normal Mode'){\n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)')\n            axisGroup.call(d3.axisLeft(scale).ticks(5));\n        }else{\n            let pathD = d3.select(this).select('.path-groups').selectAll('path');\n            let maxDiff = pathD.data().map(d=> d[0].maxDiff)[0];\n            \n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)');\n            let newScale = d3.scaleLinear().domain([maxDiff, 0]).range([0, 60]);\n            axisGroup.call(d3.axisLeft(newScale).ticks(5));\n        }\n\n    \n    }).on('mouseleave', function(){\n        let axisGroup = d3.select(this).select('.y-axis');\n        axisGroup.remove();\n    });\n    \n}else{\n\n    innerWrap.selectAll('.path-groups').remove();\n    innerWrap.selectAll('g.conf-groups').remove();\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> {\n        let startBins = d.data[0].bins;\n        let difArray = [];\n        for(let i = 1; i < d.data.length; i ++){\n            let diffs = []\n            d.data[i].bins.map((b, j)=>{\n                if(b.mean === undefined){\n                    b.mean = d.data[i].bins[j-1].mean;\n                }\n                if(startBins[j].mean === undefined){\n                    startBins[j].mean = startBins[j-1].mean;\n                }\n                let maxDiff = d.data[0].bins[0].max - d.data[0].bins[0].min;\n                diffs.push({'diff':Math.abs(startBins[j].mean - b.mean), 'maxDiff': maxDiff});\n            });\n            difArray.push(diffs);\n        }\n        return difArray;\n    }).join('g').classed('path-groups', true);\n\n    let lineGen = d3.line()\n        .x((d, i)=> {\n            let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n            return x(i);\n        })\n        .y(d=> {\n            let y = d3.scaleLinear().domain([0, d.maxDiff]).clamp(true);\n            y.range([60, 0]);\n            return y(d.diff);\n        });\n\n    let paths = pathGroups.append('path').attr('d', d=> { \n        return lineGen(d);\n    });\n\n    paths.style('fill', 'none');\n    paths.style('stroke', 'black');\n    paths.style('stroke-width', '2px');\n}\n\n/////////////////////////\nlet obsDistWrap = attWraps.selectAll('.observed-dist-wrap').data(d=> {\n  \n        let max = d3.max(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n        let min = d3.min(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n\n        let x = d3.scaleLinear().domain([min, max]).range([0, 200]);\n    \n        let histogram = d3.histogram()\n        .value(function(d) { return d.realVal; })  \n        .domain(x.domain())  \n        .thresholds(x.ticks(10)); \n        \n        let leafData = d.data.map(m=> {\n            let newLeaves = [...m.leaves].map(leaf => {\n                leaf.x = x;\n                leaf.group = m.group;\n                return leaf;\n            });\n            return {'binData':histogram(m.leaves), 'data': newLeaves, 'group': m.group, 'xScale': x};\n        });\n        return [{'data':leafData, 'xScale': x}];\n    }).join('g').classed('observed-dist-wrap', true);\n\n    obsDistWrap.attr('transform', 'translate(970, 0)');\n  \n    let xAxis = obsDistWrap.selectAll('g.axis-x').data(d=> [d]).join('g').classed('axis-x', true);\n    xAxis.attr('transform', 'translate(0, 50)')\n    xAxis.each((d, i, nodes)=> {\n        d3.select(nodes[i]).call(d3.axisBottom(d.xScale).ticks(5))\n    });\n\n    let distGroups = obsDistWrap.selectAll('.observed-group').data(d=> {\n        return d.data.map((m, i, n)=> {\n            m.index = i;\n            m.groupLength = n.length;\n            return m;\n        });\n    }).join('g').classed('observed-group', true);\n\n    let lines = distGroups.selectAll('.line').data(d => {\n            let mean = d3.mean(d.data.map(r=> r.realVal))\n            let vals = {'mean': mean, 'group':d.group, 'x':d.xScale}\n            return [vals];\n    }).join('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.mean)-1.5)+',0)')\n    .attr('height', 50).attr('width', 3).attr('fill', d=> d.group.color).style('opacity', '0.4')\n\n    let circWrap = distGroups.selectAll('.circ-wrap').data((d, i)=> [d]).join('g').classed('circ-wrap', true).attr('transform', (d, i, n)=> {\n        let move = d3.scaleLinear().domain([0, d.groupLength]).range([0, 60]);\n        return 'translate(0,'+(move(d.index+0.5))+')'});\n\n    let distCirc = circWrap.selectAll('circle.disDots').data(d=> d.data).join('circle').attr('r', 3)\n    .attr('cx', (d, i) => {\n        return d.x(d.realVal);\n    }).attr('cy', (d, i, n)=> {\n        return 0;\n    }).attr('fill', d=> d.group.color);\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales, width) {\n\n    console.log('path', pathData, otherPaths, selectedDiv, scales)\n    d3.select('#selected').classed('hidden', false);\n\n    let attributeHeight = 50;\n\n    let selectedSpecies = pathData.flatMap(p => p.filter(f => f.leaf === true).map(n => n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node => selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n    ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    // let attrHide = filterMaster.filter(f => f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f => f.type === 'hide-attribute').map(m => m.attribute) : [];\n    // let attrFilter = attrHide.length > 0 ? scales.filter(sc => {\n    //     return attrHide.indexOf(sc.field) === -1;\n    // }).map(m => m.field) : null;\n\n    ////IF THE SELECTED DIV IS THERE ALREADY USE THAT/////\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    ///////////////////////\n    // let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    // sortByDistanceDiv.append('text').text('Topology: ');\n    // let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    // sortByDistanceButton.text('Sort Most to Least');\n    // sortByDistanceButton.on('click', () => sortPaths(sortByDistanceButton));\n\n    /////////////Sorting by attribute///////////////\n    // let attrKeys = scales.map(m => m.field);\n    // let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    // attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n    // let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n    // let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d => d).attr('id', (d, i) => 'radio-' + i).classed(\"form-check-input\", true);\n    // radioDiv.append('label').text(d => d).property('for', (d, i) => 'radio-' + i).classed(\"form-check-label\", true);\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty() ? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    svg.selectAll('*').remove();\n\n    let branchFrequency = pathData.flatMap(row => row.flatMap(f => f.node)).reduce(function(acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n            acc[curr] = 1;\n        } else {\n            acc[curr] += 1;\n        }\n        return acc;\n    }, {});\n\n    ///RENDERING SELECTED PATHS////\n    if (pathData.length === 1) {\n        /////////////////////////////////////////////////\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', (d, i) => 'translate(0,20)');\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales, width)\n\n        /////////\n        selectedGroups.on('mouseover', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => {\n                return d.map(m => m.node).indexOf(f.data.node) > -1;\n            }).classed('hover', true);\n            treeLinks.filter(f => d.map(m => m.node).indexOf(f.data.node) > -1).classed('hover', true);\n            return d3.select(this).classed('hover', true);\n        }).on('mouseout', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n            let treeLinks = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n            return d3.select(this).classed('hover', false);\n        });\n\n        let speciesTitle = selectedGroups.append('text').text(d => {\n            let string = d.filter(f => f.leaf === true)[0].node;\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        });\n\n        speciesTitle.attr('x', 25).attr('y', 15);\n\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(150, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', width)\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n            let distance = x(d.combLength);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        circle.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        let speciesNodeLabel = nodeGroups.filter(f => f.label != undefined).append('text').text(d => {\n            let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n            return string;\n        }).attr('x', 10).attr('y', 5);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(0,' + (i * 60) + ')');\n\n        let nodes = selectedGroups.select('.time-line').selectAll('.node');\n        nodes.on('mouseover', (d, i) => {\n\n            let nearest = otherPaths.filter(path => {\n                let nodearray = path.flatMap(f => f.node);\n                return nodearray.indexOf(d.node) > -1;\n            });\n\n            let nearestA = nearest[0];\n            let nearestB = nearest[1];\n           \n        });\n\n        //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n\n        let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n        let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n        let attData = formatAttributeData(pathData, scales, shownAttributes);\n        let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(10,' + (i * ((attributeHeight + 5) * (Object.keys(d[1].attributes).length + 1))) + ')');\n\n        drawContAtt(attributeGroups, collapsed, width);\n        drawDiscreteAtt(attributeGroups, false, false, width);\n        //predictedAttrGrps, collapsed, false, width\n\n        //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attributeWrapper.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        // radio.on('click', (d, i) => {\n        //     let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n        //     let sorted = [...otherPaths].sort(function(a, b) {\n        //         return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n        //     });\n    \n        //     let main = d3.select('div#main');\n        //     /// LOWER ATTRIBUTE VISUALIZATION ///\n        //     drawPathsAndAttributes(sorted.reverse(), main, scales);\n        //     main.style('padding-top', '250px');\n    \n        //     let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n        //     let high = paths.filter(path => {\n        //         let leafOther = path.filter(node => node.leaf === true)[0];\n        //         return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n        //     });\n        //     high.classed('high', true);\n    \n        //     let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n        //     treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n        //     let low = paths.filter(path => {\n        //         let leafOther = path.filter(node => node.leaf === true)[0];\n        //         return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n        //     });\n        //     low.classed('low', true);\n    \n        //     let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n        //     treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n        //     let same = paths.filter(path => {\n        //         let leafOther = path.filter(node => node.leaf === true)[0];\n        //         return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n        //     });\n        //     same.classed('same', true);\n        // });\n      \n        return pathData;\n\n    } else if(pathData.length > 1 && pathData.length < 5) {\n\n       \n        let commonNodeStart = getCommonNodes(pathData, width);\n\n        renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency);\n\n        /////END PATH RENDER///////\n        let attWrap = svg.append('g').classed('attribute-wrapper', true);\n        let attributeData = commonNodeStart[commonNodeStart.length - 1].children.map(ch => {\n            return [...commonNodeStart].concat(ch);\n        });\n\n        let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n       // console.log('attributes',attributeData[0][attributeData[0].length - 1].node, shownAttributes)\n        let attData = formatAttributeData(attributeData, scales, shownAttributes);\n        console.log('attData',attData)\n        let attDataComb = attData[0].map((att, i)=> {\n            \n            let species = att[att.length - 1].node;//pathData[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < attData.length; index++ ){\n                console.log(attData[index], attData[index][attData[index].length - 1].filter(f=> f.leaf === true)[0].species)\n                let species = attData[index][attData[index].length - 1].filter(f=> f.leaf === true)[0].species//pathData[index].filter(f=> f.leaf === true)[0].node;\n                let last = attData[index][i].length - 1\n                attData[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': attData[index][i]})\n            }\n            return attribute;\n        });\n\n        console.log('attr comb', attDataComb)\n\n        function findMaxState(states, offset){\n            let maxP = d3.max(states.map(v=> v.realVal));\n            let notMax = states.filter(f=> f.realVal != maxP);\n            let winState = states[states.map(m=> m.realVal).indexOf(maxP)]\n            winState.other = notMax;\n            winState.offset = offset;\n    \n            return winState;\n        }\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n\n       let attGroups = attWrap.selectAll('g').data(mappedDis).join('g').classed('attr', true);\n       attGroups.attr('transform', (d, i) => 'translate(145,' + (i * (attributeHeight + 10)) + ')');\n\n       attGroups.append('text')\n            .text(d=> d.label)\n            .style('text-anchor', 'end')\n            .style('font-size', 11)\n            .attr('transform', 'translate(0,'+(attributeHeight/2)+')');\n\n       let wrapRect = attGroups.append('rect').attr('width', width);\n       wrapRect.attr('height', attributeHeight);\n       wrapRect.style('fill', '#fff');\n       wrapRect.style('stroke', 'gray');\n       wrapRect.style('opacity', 0.5);\n\n       attGroups.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n     \n       let speciesGrp = attGroups.selectAll('g').data(d=> {\n            d.data = d.data.map(m=> {\n                m.type = d.type;\n                return m;\n            });\n            return d.data;\n        }).join('g').classed('species', true);\n\n       let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n           //return y(d.realVal) + d.offset;\n           return y(d.realVal)\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.scales.yScale;\n           y.range([attributeHeight-2, 1]);\n           return y(d.values.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n           d3.select(n[i]).classed('selected', true);\n       }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).classed('selected', false);\n       });\n\n       let disGroup = speciesGrp.filter(sp=> {\n        return sp.type === 'discrete';\n        });\n\n       let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n       branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n        });\n\n        let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 5, 2]);\n            return y(d.values.realVal) + d.offset;\n        }).attr('cx', 5);\n\n        bCirc.attr('fill', (d, i)=> d.color);\n\n        let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n        otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n                return y(c.values.realVal);\n            }).attr('fill', (c)=> c.color).style('opacity', 0.1);\n\n        otherCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n\n        bCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.values.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n        \n        /////AXIS ON HOVER////\n        branchGrpDis.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let conGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'continuous';\n        });\n\n        let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n        branchGrpCon.attr('transform', (d)=> {\n         let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n             let distance = x(d.combLength);\n             return 'translate('+distance+', 0)';\n         });\n\n         /////AXIS ON HOVER////\n        branchGrpCon.on('mouseover', (d, i, n)=> {\n            let y = d.yScale;\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let MeanRect = branchGrpCon.append('rect');\n   \n        MeanRect.attr('width', 10).attr('height', 3);\n        MeanRect.attr('y', (d, i) => {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0])\n            return y(d.values.realVal);\n        });\n\n        let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n        confiBars.attr('width', 10).attr('height', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.values.lowerCI95) - y(d.values.upperCI95);\n        });\n\n        confiBars.attr('y', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.values.upperCI95);\n        })\n        confiBars.style('opacity', 0.1);\n\n        //tranforming elements\n        svg.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(0, 60)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n\n\n    }else{\n       \n        /////////\n        //getting common node\n        ///\n\n        let maxBranch = d3.max(pathData.map(p => p.length));\n        let longestBranch = pathData.filter(path => path.length === maxBranch)[0];\n        let startBranch = longestBranch.filter(f=> f.leaf != true);\n        let commonNodeStart = startBranch;\n        //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n        pathData.map(path => {\n            commonNodeStart = [...path].filter(f => {\n                return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n        });\n\n        svg.remove();\n        let remove = selectedTool.append('g').classed('x-icon', true);\n        remove.attr('transform', 'translate(15, 10)');\n        remove.append('circle').attr('r', 7).attr('fill', '#fff');\n        remove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n        remove.style('cursor', 'pointer');\n        remove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales, width);\n        });        \n\n        /////////\n        renderDistibutions(pathData, selectedDiv, scales);\n        selectedDiv.style('height', '550px');\n\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n    }\n    \n}\n\nfunction sortPaths(sortButton) {\n    if (sortButton.text() === 'Sort Most to Least') {\n        sortButton.text('Sort Least to Most');\n    } else {\n        sortButton.text('Sort Most to Least');\n    }\n}","import { pairPaths, maxTimeKeeper } from \"./dataFormat\";\nimport { dropDown } from \"./buttonComponents\";\nimport * as d3 from \"d3\";\nimport * as slide from 'd3-simple-slider';\nimport { speciesTest, dataMaster } from \".\";\nimport { findBrushedNodes } from \"./toolbarComponent\";\nimport { getScales } from \"./filterComponent\";\nimport { renderTree } from \"./sidebarComponent\";\n\nconst macroModes = [\n  {field:'Convergence (Shallow)', value: [-1, 1, 1], pict: 'shallow-converg.gif'}, \n  {field:'Convergence (Ancient)', value: [1, 1, 1], pict: 'ancient-converg.gif'}, \n  {field:'Divergence (Shallow)', value: [-1, 1, -1], pict: 'shallow-div.gif'}, \n  {field:'Divergence (Ancient)', value: [1, 1, -1], pict: 'ancient-div.gif'},\n  {field:'Conservativism', value: [1, -1, 1], pict: 'conservativism.gif'},  \n  {field:'Anti-Convergence', value: [1, -1, -1], pict: 'char-disp.gif'}\n];\n\nlet traitVal = null;\nlet topPairsKeeper = [];\n\nfunction sortandRedraw(field){\n\n  let top = topPairsKeeper[topPairsKeeper.length - 1];\n\n \n\n  if(field === 'Sort by Top Frequency'){\n\n    let otherList = top.others.sort((a, b)=> b.value.length - a.value.length).map(m=> m.key);\n\n    let indexed = top.topPairs.map((m, i)=>{\n      m.index = otherList.indexOf(m.key) > -1 ? otherList.indexOf(m.key) : (100 + i);\n      return m;\n    });\n\n    let sorted = indexed.sort((a, b)=> a.index - b.index);\n    let pairGroups = drawSorted(sorted,  d3.select('.attr-drop.dropdown').select('button').attr('value'));\n    if(traitVal != null) discreteTraitDraw(pairGroups, traitVal);\n    rankGrid(top.others.sort((a, b)=> b.value.length - a.value.length), top.length);\n\n  }else{\n    let sorted = top.topPairs.sort((a, b) => b.totalRank - a.totalRank);\n    let pairGroups = drawSorted(sorted,  d3.select('.attr-drop.dropdown').select('button').attr('value'));\n    if(traitVal != null) discreteTraitDraw(pairGroups, traitVal);\n    rankGrid(top.others.sort((a, b)=> b.value.length - a.value.length), top.length);\n  }\n\n}\n\nexport function pairUpdateRender(pairs, attr, weights){\n\n  let mappedPairs = updateRanking(pairs, attr, weights);\n\n  topPairsKeeper.push(mappedPairs);\n \n  let pairPaths = drawSorted(mappedPairs.topPairs, d3.select('.attr-drop.dropdown').select('button').attr('value'));\n  if(traitVal != null) discreteTraitDraw(pairPaths, traitVal);\n  topPairSearch(mappedPairs.topPairs, mappedPairs.pairs, d3.select('.attr-drop.dropdown').select('button').attr('value'), weights);\n  \n}\n\nfunction discreteTraitDraw(pairGroups, trait){\n\n  discreteTraitCalc(pairGroups.data(), trait)\n  let stateWraps = pairGroups.selectAll('g.stateWrap').data(d=> [d]).join('g').classed('stateWrap', true);\n  stateWraps.attr('transform', `translate(560, -24)`)\n\n  let pairState = stateWraps.selectAll('g.state').data(d=> {\n    return [{'key': 'p1', 'value': d.p1}, {'key': 'p2', 'value': d.p2}]\n  }).join('g').classed('state', true);\n\n  pairState.append('rect')\n    .attr('height', 15)\n    .attr('width', 15)\n    .attr('fill', d=> {\n      return d.value[d.value.length - 1].attributes[trait].color;\n    });\n\n  pairState.attr('transform', (d, i)=>`translate(${i*20}, 0)`);\n\n  pairState.on('mouseover', (d, i)=> {\n\n    let tool = d3.select('#tooltip');\n    tool.transition()\n    .duration(200)\n    .style(\"opacity\", .9);\n    tool.html(`${d.value[d.value.length - 1].attributes[trait].winState}`);\n\n    tool.style(\"left\", (d3.event.pageX + 6) + \"px\")\n    .style(\"top\", (d3.event.pageY - 18) + \"px\");\n    tool.style('height', 'auto');\n\n  }).on('mouseout', ()=> {\n    let tool = d3.select('#tooltip').style('opacity', 0)\n  })\n\n\n\n}\n\nfunction discreteTraitCalc(pairs, trait){\n  console.log('pppppairs',pairs, trait);\n \n}\n\nexport function rankingControl(data){\n\n    let rankDiv = d3.select('#pair-rank').classed('hidden', false);\n    rankDiv.selectAll('*').remove();\n\n    let dropDiv = rankDiv.append('div')\n      .style('width', '180px')\n      .style('display', 'inline-block')\n      .style('padding-left', '30px')\n      .style('padding-bottom', '20px')\n\n    let weightPickerDiv = rankDiv\n      .append('div')\n      .style('display', 'inline-block')\n      .style('padding-left', '80px');\n\n    let weightPicker = weightPickerDiv\n      .append('svg')\n      .style('width', '830px')\n      .attr('height', 100)\n      .append('g')\n      .attr('transform', 'translate(10,10)');\n    \n    let wImage = weightPicker\n      .append(\"svg:image\")\n      .attr('width', 142)\n      .attr('height', 102)\n      .attr('y', -12)\n      .attr(\"xlink:href\", `./public/${macroModes[1].pict}`);\n\n    let dropOptions = dropDown(dropDiv, macroModes, macroModes[1].field, 'preset');\n    dropOptions.attr('value', macroModes[1].field);\n   \n    let defaultW = macroModes[1].value;\n    let sliderWidth = 110;\n    let sliderMargin = 40;\n\n    let labels = ['Distance', 'Delta', 'Closeness'];\n\n    weightPicker.selectAll('text.labels').data(labels).join('text').classed('labels', true)\n    .text(d=> d)\n    .attr('y', 10)\n    .attr('x', (d, i)=> (200+((sliderWidth + sliderMargin) * i)));\n \n    defaultW.forEach((color, i) => {\n      var slider = slide\n        .sliderBottom()\n        .min(-1)\n        .max(1)\n        .ticks(2)\n        .width(sliderWidth)\n        .default(defaultW[i])\n        .displayValue(false)\n        .fill('#516880')\n        .on('end', num => {\n          defaultW[i] = num;\n          pairUpdateRender(pairPaths(data), d3.select('.attr-drop.dropdown').select('button').attr('value'), defaultW);\n        });\n  \n      weightPicker\n        .append('g')\n        .attr('id', `weight-slider-${i}`)\n        .attr('transform', `translate(${200+((sliderWidth + sliderMargin) * i)}, 20)`)\n        .call(slider);\n\n      weightPicker.selectAll('.tick')\n        .filter(f=> f < 0).select('text')\n        .attr('fill', 'red')\n        .attr('opacity', 0.6);\n      });\n\n      dropOptions.on('click', (d, i, n)=> {\n\n        let sliderGroups = d3.selectAll('.weight-slider');\n\n        d3.select('#preset').classed('show', false);\n        defaultW = d.value;\n\n        defaultW.forEach((w, j)=> {\n\n          var slider = slide\n          .sliderBottom()\n          .min(-1)\n          .max(1)\n          .ticks(3)\n          .width(sliderWidth)\n          .default(w)\n          .displayValue(false)\n          .fill('#516880')\n          .on('end', num => {\n            defaultW[i] = num;\n            pairUpdateRender(pairPaths(data), d3.select('.attr-drop.dropdown').select('button').attr('value'), defaultW);\n          });\n\n          d3.select(`#weight-slider-${j}`).call(slider);\n        })\n   \n        d3.select('.dropdown.preset').select('button').text(d.field);\n        dropOptions.attr('value', d.field);\n       \n    \n        pairUpdateRender(pairPaths(data), d3.select('.attr-drop.dropdown').select('button').attr('value'), defaultW);\n   \n        wImage.attr(\"xlink:href\", `./public/${d.pict}`);\n   \n       });\n\n     \n       let disMarkers = getScales().filter(f=> f.type === 'discrete');\n       traitVal = disMarkers.length > 0 ? disMarkers[0].field : null;\n       if(traitVal != null){\n         \n        let disMarkOp = dropDown(rankDiv, disMarkers, disMarkers[0].field, 'discrete-trait-mark');\n        disMarkOp.on('click', (d)=> {\n          \n           d3.select('.discrete-trait-mark').select('button').attr('value', d.field);\n           d3.select('.discrete-trait-mark.dropdown').select('button').text(`Trait: ${d.field}`);\n           d3.select('#discrete-trait-mark').classed('show', false);\n \n           discreteTraitDraw(d3.selectAll('.pair-wrap'), d.field)\n        });\n\n       }\n  \n      \n      let sortDropOp = [{field:'Sort by Rank'}, {field:'Sort by Top Frequency'}];\n      let sortOps = dropDown(rankDiv, sortDropOp, sortDropOp[0].field, 'sort-pair-drop');\n      sortOps.on('click', (d)=> {\n         \n        d3.select('.sort-pair-drop').select('button').attr('value', d.field);\n        d3.select('.sort-pair-drop.dropdown').select('button').text(`${d.field}`);\n        d3.select('#sort-pair-drop').classed('show', false);\n\n        sortandRedraw(d.field);\n\n        //discreteTraitDraw(d3.selectAll('.pair-wrap'), d.field)\n     });\n\n       \n}\nexport function changeTrait(attKeys, data, weights){\n\n  let toolbarButtonDiv = d3.select('#toolbar').select('#tool-buttons');\n\n  let view = toolbarButtonDiv.select('.dropdown.change-view').select('.dropdown-toggle').node().value;\n\n  let drop = d3.select('.attr-drop.dropdown')\n  .selectAll('a').empty() ? dropDown(toolbarButtonDiv, attKeys, `Trait: ${attKeys[3].field}`, 'attr-drop') : d3.select('.attr-drop.dropdown').selectAll('a');\n\n  d3.select('.attr-drop.dropdown').select('button').attr('value', attKeys[3].field);\n\n  drop.on('click', (d, i, n)=> {\n\n    if(toolbarButtonDiv.select('.dropdown.change-view').select('.dropdown-toggle').node().value === \"Pair View\"){\n     \n      pairUpdateRender(pairPaths(data), d.field, weights);\n    }\n\n    if(d3.select('#sidebar').select('#view-pheno').text() === 'View Phylogeny'){\n      renderTree(null, true, d.field);\n    }\n\n    d3.select('.attr-drop.dropdown').select('button').attr('value', d.field);\n    d3.select('.attr-drop.dropdown').select('button').text(`Trait: ${d.field}`);\n    d3.select('#attr-drop').classed('show', false);\n});\n\nreturn drop;\n\n}\nexport async function generatePairs(data){\n\n        let pairs = await pairPaths(data);\n     \n        let weights = [1, 1, 1];\n\n        let attKeys = d3.entries(pairs[0].p1[0].attributes)\n                    .filter(f=> f.value.type === 'continuous')\n                    .map(m=> {\n                        return {'field': m.key, 'value': m.key }\n                    });\n        \n        \n        let drop = changeTrait(attKeys, data, weights);\n\n        pairUpdateRender([...pairs], attKeys[0].field, weights);\n\n\n        \n}\nfunction getWeightScales(pairs, field){\n \n  let deltaMax = d3.max([...pairs].map(m=> m.deltas.filter(f=> f.key === field)[0]).map(m=> m.value));\n  let closeMax = d3.max([...pairs].map(m=> m.closeAll.filter(f=> f.key === field)[0]).map(m=> m.value));\n  let distMax = d3.max([...pairs].map(d=> d.distance));\n  let deltaScale = d3.scaleLinear().domain([0, deltaMax]).range([0, 1]);\n  let closeScale = d3.scaleLinear().domain([closeMax, 0]).range([0, 1]);\n  let distScale = d3.scaleLinear().domain([0, distMax]).range([0, 1]);\n  return {delta: deltaScale, close:closeScale, distance: distScale};\n\n}\nexport function updateRanking(pairs, field, weights){\n\n \n  let preset = d3.select('.dropdown.preset').select('button').text()\n  let penalty = preset.includes(`(Shallow)`) ? -1 : 1;\n\n\n    let weightScales = getWeightScales(pairs, field);\n\n    let pickedPairs = [...pairs].map(p=> {\n        let newP = Object.assign({}, p);\n\n        newP.delta = p.deltas.filter(d=> d.key === field)[0];\n        newP.closeness = p.closeAll.filter(d=> d.key === field)[0];\n        let deltaFix = newP.delta.value > 11 ? 0 : weightScales.delta(newP.delta.value);\n        newP.deltaRank = deltaFix;//weightScales.delta(newP.delta.value);\n        newP.closenessRank = weightScales.close(newP.closeness.value);\n        newP.distanceRank = (penalty === -1 && p.lateDivergence) ? -100 : weightScales.distance(p.distance);\n        let totalRank = (weights[0] * newP.distanceRank) + (weights[1] * newP.deltaRank) + (weights[2] * newP.closenessRank);\n        newP.totalRank = newP.delta.value < newP.closeness.value ? (totalRank * penalty) : totalRank;\n      \n        return newP;\n    });\n\n    let percentage = Math.round(pickedPairs.length * 0.01);\n    let sortedPairs = pickedPairs.sort((a, b)=> b.totalRank - a.totalRank).slice(0, percentage);\n\n    return {topPairs: sortedPairs, 'pairs': pickedPairs};\n}\nfunction renderText(pairs, field){\n  d3.select('#pair-rank').select('svg').select('.rank-meta').remove();\n  let rankMeta = d3.select('#pair-rank').select('svg').append('g').classed('rank-meta', true);\n  rankMeta.append('text').text(`Trait: ${field}`).attr('transform', 'translate(690, 20)').style('font-size', '12px');\n  rankMeta.append('text').text(`Pairs Shown: Top 1%`).attr('transform', 'translate(690, 40)').style('font-size', '12px');\n  rankMeta.append('text').text(`Num of Pairs: ${pairs.length}`).attr('transform', 'translate(690, 60)').style('font-size', '12px');\n\n}\n\n\n\nfunction drawSorted(pairs, field){\n\n  let pairColor = ['#FF5733', '#129BF5'];\n  let nodes = findBrushedNodes();\n\n  d3.select('#main').selectAll('*').remove();\n\n  renderText(pairs, field);\n\n  let width = 600;\n  let height = 100;\n  let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n  let xScaleAxis = d3.scaleLinear().domain([maxTimeKeeper[maxTimeKeeper.length - 1], 0]).range([0, width]);\n    \n  let svg = d3.select('#main').append('svg');\n  svg.attr('height', pairs.length * (height * 1.9))\n  let wrap = svg.append('g');\n  wrap.attr('transform', 'translate(20, 120)')\n  let pairWraps = wrap.selectAll('g.pair-wrap').data(pairs).join('g').classed('pair-wrap', true);\n  pairWraps.attr('transform', (d, i)=> `translate(50,${i*(height * 1.8)})`);\n  pairWraps.append('rect')\n    .attr('width', (d, i)=> {\n    return width - xScale(d.common.combLength);\n    })\n    .attr('height', height)\n    .attr('x', d=> xScale(d.common.combLength))\n    .attr('stroke-width', 1).attr('stroke', 'black')\n    .attr('fill', '#fff');\n\n    pairWraps.append('text').text((d, i)=> {\n        return `${d.p1[d.p1.length - 1].node} + ${d.p2[d.p2.length - 1].node}`\n    }).attr('y', -10);\n\n    let scoreWrap = pairWraps.append('g').classed('score-wrap', true);\n    let scoreGroups = scoreWrap.selectAll('g.score').data((d, i)=> {\n        return [\n         {label: 'Distance', value: d.distance, score: d.distanceRank}, \n         {label: 'Delta', value: d.delta.value, score: d.deltaRank},\n         {label: 'Closeness', value: d.closeness.value, score: d.closenessRank}\n        ];\n    }).join('g').classed('score', true);\n\n    let scoreLabel = scoreWrap.append('g').attr('transform', `translate(650, 10)`);\n    scoreLabel.append('rect').attr('width', 200).attr('height', 40).attr('fill', 'gray').attr('y', 45).attr('opacity', .1)\n    scoreLabel.append('text').text('Score').attr('y', 20).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Value').attr('y', 40).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreLabel.append('text').text('Distinctiveness Score').attr('y', 60).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Rank').attr('y', 80).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreGroups.attr('transform', (d, i, n)=> {\n       return  i === 0 ? `translate(${(670)},0)` : \n       `translate(${(660+(d3.sum(d3.selectAll(n).filter((f, j)=> i > j).data().map(m=> m.label.length * 6)))+ (i*30))},0)`;\n    });\n\n    var zero = d3.format(\".3n\");\n    scoreGroups.append('text').text((d, i)=>  d.label).style('font-size', 10).attr('y', 10);;\n    scoreGroups.append('text').text((d, i)=> zero(d.score)).style('font-size', 10).attr('y', 30);\n    scoreGroups.append('text').text((d, i)=> zero(d.value)).style('font-size', 10).attr('y', 50);\n\n    scoreLabel.append('text').text((d, i, n)=> zero(d.closenessRank + d.distanceRank + d.deltaRank)).style('font-size', 10).attr('y', 60).attr('x', 115);\n    scoreLabel.append('text').text((d, i)=> i+1).style('font-size', 10).attr('y', 80).attr('x', 115);\n\n    let lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n       let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n        let y = d.attributes[field].scales.yScale;\n        y.range([height, 0]);\n        return y(d.attributes[field].values.realVal);\n    });\n\n    let areaGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n        let distance = x(d.combLength);\n        return distance;\n    })\n    .y0(d=> {\n      let y = d.attributes[field].scales.yScale;\n      y.range([height, 0]);\n      let value = d.attributes[field].values.lowerCI95 ? d.attributes[field].values.lowerCI95 : d.attributes[field].values.realVal\n      return y(value);\n    })\n    .y1((d, i, n)=> {\n      let y = d.attributes[field].scales.yScale;\n      y.range([height, 0]);\n      let value = d.attributes[field].values.upperCI95 ? d.attributes[field].values.upperCI95 : d.attributes[field].values.realVal\n      return y(value);\n    });\n\n    //BEGIN EXPERIOMENTING////]\n    let pairGroupN = pairWraps.selectAll('g.pair-neighbor').data((d, i, n)=> {\n      let species1 = d.p1.map(n=> n.node);\n      let species2 = d.p2.map(n=> n.node);\n      let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n\n      let neighbors = labels.flatMap(m=> {\n          let start = speciesTest[speciesTest.length - 1].indexOf(m);\n          let ne = speciesTest[speciesTest.length - 1].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n          return ne;\n      });\n      \n      let speciesNames = [species1[species1.length-1], species2[species2.length-1]];\n\n      ////EXPERIMENTING WITH NODES////\n      let neighPaths = dataMaster[dataMaster.length - 1].filter(f=> \n        (neighbors.indexOf(f[f.length - 1].node)) > -1 && (speciesNames.indexOf(f[f.length - 1].node) === -1));\n\n      let labeledN = [...neighPaths].map(path=> {\n        let name = path[path.length - 1].node;\n        return path.map(p=> {\n          p.name = name;\n          return p\n        })\n      });\n      \n      let spec1N = labeledN.map(m => m.filter(f=> species1.indexOf(f.node) > -1));\n      let spec2N = labeledN.map(m => m.filter(f=> species2.indexOf(f.node) > -1));\n\n      let closest1 = spec1N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n  \n      let closest2 = spec2N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n      \n      let wholeClosest1 = labeledN.filter(f=> f[f.length-1].node === closest1[closest1.length - 1].name)[0];\n      let wholeClosest2 = labeledN.filter(f=> f[f.length-1].node === closest2[closest2.length - 1].name)[0];\n     \n      return [wholeClosest1, wholeClosest2];\n\n    }).join('g').classed('pair-neighbor', true).attr('opacity', 0);\n\n      let innerPathsN = pairGroupN.append('path')\n      .attr(\"d\", lineGen)\n      .attr(\"class\", \"inner-line-n\")\n      .attr('fill', 'none')\n      .attr('stroke-width', 1)\n      .style('stroke', 'rgba(160, 141, 184, .9)');\n\n      let rangePathsN = pairGroupN.append('path')\n      .attr(\"d\", areaGen)\n      .attr(\"class\", \"inner-area-n\")\n      .attr('fill', 'rgba(160, 141, 184, .4)')\n      .attr('stroke-width', 1)\n      .style('stroke', 'rgba(160, 141, 184, .9)');\n     \n      let branchesN = pairGroupN.selectAll('g.branch-n').data(d=> d).join('g').classed('branch-n', true);\n      branchesN.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n      branchesN.filter(f=> f.leaf != true).append('rect').attr('width', 10).attr('height', (d)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n      }).attr('fill', 'rgba(160, 141, 184, .2)').attr('y', (d, i)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.upperCI95);\n      });\n  \n      branchesN.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n          return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n      }).attr('opacity', 0.5);\n\n      branchesN.filter((b, i, n)=> {\n        return i === (n.length - 1);\n      }).append('text').text(d=> d.node)\n        .attr('fill', 'rgba(160, 141, 184, 1)')\n        .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return (y(d.attributes[field].values.realVal) - 4);\n        }).attr('x', 3).style('font-size', 10);\n\n////////////////////////////END EXPERIMENT///////\n\n    let pairGroup = pairWraps.selectAll('g.pair').data(d=> [d.p1, d.p2]).join('g').classed('pair', true);\n\n    let rangePaths = pairGroup.append('path')\n    .attr(\"d\", areaGen)\n    .attr(\"class\", \"inner-area\")\n    .attr('fill', (d, i)=> pairColor[i])\n    .attr('opacity', 0.07)\n \n    let innerPaths = pairGroup.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d, i)=> pairColor[i])\n  \n   let brushedPaths = innerPaths.filter(f=> {\n    let nodeTest = f.filter(n=> nodes.map(m=> m.node).indexOf(n.node) > -1)\n    return nodeTest.length > 0}).style('stroke', '#64B5F6').style('stroke-width', '5px');\n\n    let branches = pairGroup.selectAll('g.branch').data(d=> d).join('g').classed('branch', true);\n    branches.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n    branches.filter(f=> f.leaf != true).append('rect')\n    .classed('range', true)\n    .attr('width', 8)\n    .attr('height', (d)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n    }).attr('fill', 'none')\n    .style('stroke', 'rgba(165, 185, 198, .5)')\n\n    .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.upperCI95);\n    });\n\n    let chosenNodes = branches.filter(f=> {\n      return nodes.map(m=> m.node).indexOf(f.node) > -1\n    }).selectAll('rect.range').attr('fill', '#64B5F6')\n\n    branches.append('rect').attr('width', 8).attr('height', 4).attr('y', (d, i)=> {\n        return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n    });\n\n    pairWraps.append('rect').attr('width', (d, i)=> {\n        return xScale(d.common.combLength)})\n        .attr('height', height)\n        .attr('fill', '#fff').style('opacity', 0.7);\n        let yAxisG = pairWraps.append('g').classed('y-axis', true);\n        let xAxisG = pairWraps.append('g').classed('x-axis', true);\n        xAxisG.call(d3.axisBottom(xScaleAxis).ticks(10));\n        xAxisG.attr('transform', `translate(0, ${height})`)\n\n    pairWraps.on('mouseover', (d, i, n)=> {\n       \n        let species1 = d.p1.map(n=> n.node);\n        let species2 = d.p2.map(n=> n.node);\n        let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n        let neighbors = labels.flatMap(m=> {\n            let start = speciesTest[speciesTest.length - 1].indexOf(m);\n            let ne = speciesTest[speciesTest.length - 1].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n            return ne;\n        });\n        let checkArray = species1.filter(s=> species2.indexOf(s) > -1);\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        let pairNode1 = treeNode.filter(f=> {\n            return species1.filter(s=> species2.indexOf(s) === -1).indexOf(f.data.node) > -1;\n        }).classed('hover one', true);\n\n        let pairNode2 = treeNode.filter(f=> {\n          return species2.filter(s=> species1.indexOf(s) === -1).indexOf(f.data.node) > -1;\n      }).classed('hover two', true);\n\n        treeLinks.filter(f=> species1.filter(s=> species2.indexOf(s) === -1).indexOf(f.data.node) > -1).classed('hover one', true);\n        treeLinks.filter(f=> species2.filter(s=> species1.indexOf(s) === -1).indexOf(f.data.node) > -1).classed('hover two', true);\n     \n        //Hiding Others\n        treeNode.filter(f=> (checkArray[checkArray.length - 1] != f.data.node) && (species1.filter(s=> species2.indexOf(s) === -1).concat(species2.filter(s=> species1.indexOf(s) === -1)).indexOf(f.data.node) === -1)).classed('hover-not', true);\n     \n        //Hiding Others\n        treeLinks.filter(f=> (species1.filter(s=> species2.indexOf(s) === -1).concat(species2.filter(s=> species1.indexOf(s) === -1)).indexOf(f.data.node) === -1)).classed('hover-not', true);\n        \n        let speciesNames = [species1[species1.length-1], species2[species2.length-1]]\n      \n        return d3.select(this).classed('hover', true);\n    })\n    .on('mouseleave', (d, i, n)=>{\n\n      d3.select(n[i]).selectAll('.pair-neighbor').attr('opacity', 0);\n\n        let treeNode  = d3.select('#sidebar').selectAll('.node')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n\n        let treeLinks  = d3.select('#sidebar').selectAll('.link')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n        return d3.select(n[i]).classed('hover', false);\n    });\n\n    let axisGroup = pairWraps.append('g').classed('y-axis', true);\n  \n    axisGroup.each((d, i, n)=> {\n        let scale = d.p1[0].attributes[field].scales.yScale;\n        d3.select(n[i]).call(d3.axisLeft(scale).ticks(5));\n    });\n\n  let mouseG = pairWraps.append(\"g\")\n    .attr(\"class\", \"mouse-over-effects\");\n\n  mouseG.append(\"path\") // this is the black vertical line to follow mouse\n    .attr(\"class\", \"mouse-line\")\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"1px\")\n    .style(\"opacity\", \"0\");\n\n   var mousePerLine = mouseG.selectAll('.mouse-per-line')\n   .data((d, i)=> {\n\n    return [d.p1, d.p2]})\n   .join(\"g\")\n   .attr(\"class\", \"mouse-per-line\");\n\nmousePerLine.append(\"circle\")\n   .attr(\"r\", 7)\n   .style(\"stroke\", function(d) {\n     return 'red';\n   })\n   .style(\"fill\", \"none\")\n   .style(\"stroke-width\", \"1px\")\n   .style(\"opacity\", \"0\");\n\nmousePerLine.append(\"text\").attr('class', 'value')\n   .attr(\"transform\", \"translate(10,3)\");\n\nmousePerLine.append(\"text\").attr('class', 'species')\n   .attr(\"transform\", \"translate(10,3)\");\n\nmouseG.append('svg:rect') // append a rect to catch mouse movements on canvas\n      .attr('width', width) // can't catch mouse events on a g element\n      .attr('height', height)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .on('mouseout', function() { // on mouse out hide line, circles and text\n        d3.selectAll(\".mouse-line\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"0\");\n      })\n      .on('mouseover', (d, i, n)=> { // on mouse in show line, circles and text\n        d3.select(n[i].parentNode).selectAll('.mouse-line')\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"1\");\n\n          \n      })\n      .on('mousemove', (dat, i, n)=> { // mouse moving over canvas\n        var mouse = d3.mouse(n[i]);\n       \n        d3.select(n[i].parentNode).select('.mouse-line')\n          .attr(\"d\", function() {\n            var d = \"M\" + mouse[0] + \",\" + height;\n            d += \" \" + mouse[0] + \",\" + 0;\n            return d;\n          });\n       \n          d3.select(n[i].parentNode).selectAll('.mouse-per-line')\n          .attr(\"transform\", function(d, j, node) {\n         \n            var xDate = xScale.invert(mouse[0]),\n                bisect = d3.bisector(function(d) { return d.edgeLength; }).right,\n                idx = bisect(d.values, xDate);\n            \n            let line = n[i].parentNode.parentNode.getElementsByClassName('inner-line');\n          \n            var beginning = 0,\n                end = line[j].getTotalLength(),\n                target = null\n\n            while (true){\n               target = Math.floor((beginning + end) / 2);\n               var pos = line[j].getPointAtLength(target);\n              if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n                  break;\n              }\n              if (pos.x > mouse[0])      end = target;\n              else if (pos.x < mouse[0]) beginning = target;\n              else break; //position found\n            }\n            let y = dat.p1[0].attributes[field].scales.yScale;\n          \n            d3.select(node[j]).select('text.value')\n              .text(y.invert(pos.y).toFixed(2))\n              .style('font-size', 11)\n              .attr('y', ()=> {\n                  return j === 0 ? 10 : -10;\n                });\n\n            d3.select(node[j]).select('text.species')\n                .text(d[d.length-1].node)\n                .style('font-size', 11)\n                .attr('y', ()=> {\n                    return j === 0 ? 19 : -19;\n                  });\n              \n            return \"translate(\" + mouse[0] + \",\" + pos.y +\")\";\n          });\n      });\n\n      return pairWraps;\n   \n}\nfunction topPairSearch(topPairs, allPairs, field, weights){\n\n  let matchKeeper = [];\n  let nameArray = topPairs.map(m=> m.key);\n  let otherFields = getScales()\n    .filter(f=> f.field != field && f.type === 'continuous')\n    .map(m=> m.field);\n\n  otherFields.map(m => {\n  \n    let mappedPairs = updateRanking([...allPairs], m, weights);\n\n    let test = mappedPairs.topPairs.map((m, i)=> {\n      let newPair = m.key\n      if(nameArray.indexOf(m.key) > -1){\n      \n        let check = matchKeeper.map(m=> m.key);\n        if(check.indexOf(newPair) > -1){\n          let index = check.indexOf(newPair);\n          matchKeeper[index].value.push([newPair, i+1, m]);\n        }else{\n          matchKeeper.push({key: newPair, value: [[newPair, i+1, m]]})\n        }\n      }\n    });\n  });\n\n  topPairsKeeper[topPairsKeeper.length - 1].others = matchKeeper;\n  rankGrid(matchKeeper, topPairs.length);\n\n\n}\n\nfunction rankGrid(matchKeeper, pairLength){\n\n  let scales = getScales();\n\n  let size = 20;\n\n  let result = chunkArray(scales.map(m=> m.field), 4);\n\n  let newMatch = matchKeeper.map(m=> {\n    let bins = result.map(col=> {\n      return col.map(c=> {\n        return {key: c, value: m.value.filter(f=> f[2].delta.key === c) }\n      })\n    });\n    \n    return {key:m.key, 'bins':bins}\n  });\n\n  let satScale = d3.scaleLinear().domain([pairLength, 1]).range([0.02, 1])\n\n  newMatch.map(m=> {\n\n    let group = d3.selectAll('.pair-wrap').filter(f=> {\n          return (m.key === f.key);\n        }).append('g').classed('other-rank', true);\n\n    group.attr('transform', 'translate(900, 0)');\n\n    group.append('text')\n    .text('Ranked Top 1% in Other Traits')\n    .style('font-size', 11)\n    .attr('transform', `translate(5,0)`);\n    \n   \n    let groups = group.selectAll('.square-group').data(m.bins).join('g').classed('square-group', true);\n    groups.attr('transform', (d, i)=> `translate(${i*22}, 5)`);\n    let squarebins = groups.selectAll('.trait-bin').data(d=> {\n      return d;\n    }).join('g').classed('trait-bin', true);\n\n    squarebins.on('mouseover', (r,i)=>{\n      let tool = d3.select('#tooltip');\n      tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n      \n      let f = d3.format(\".3f\");\n      if(r.value[0]){\n        tool.html(`${r.value[0][2].delta.key} : ${f(r.value[0][2].totalRank)} </br> Ranking: ${r.value[0][1]}`)\n        .style(\"left\", (d3.event.pageX - 40) + \"px\")\n        .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        \n        tool.style('height', 'auto');\n        tool.style('width', '150px');\n\n      }\n    \n\n    }).on('mouseout', ()=> {\n      let tool = d3.select('#tooltip').style('opacity', 0);\n    });\n\n    squarebins.append('rect')\n    .attr('width', size)\n    .attr('height', size)\n    .style('stroke', '#EBECED')\n    .style('stoke-width', '0.5px')\n    .style('fill', (d, i)=> {\n      if(d.value.length === 0){\n        return 'gray';\n      }else{\n        return d.value[0][1] < 2 ? '#FFC74F' : 'gray';\n      }\n    })\n    .style('fill-opacity', (d, i)=> {\n      return d.value.length === 0 ? satScale(33) : satScale(d.value[0][1]);ß\n    });\n    squarebins.attr('transform', (d, i)=> `translate(0, ${i*22})`);\n  });\n\n\n\n}\nfunction chunkArray(myArray, chunk_size){\n    var index = 0;\n    var arrayLength = myArray.length;\n    var tempArray = [];\n    \n    for (index = 0; index < arrayLength; index += chunk_size) {\n        let myChunk = myArray.slice(index, index+chunk_size);\n        // Do something if you want with the group\n        tempArray.push(myChunk);\n    }\n\n    return tempArray;\n}\n\nfunction rankHistogram(matchKeeper){\n\n  let size = 25;\n  let height = 12;\n\n  let rankBins = [[1,3], [4,6], [7,9], [10, 12], [13, 15], [16, 18], [19, 21]];\n  let axisLabels = ['1-3', '4-6', '7-9', '10-12', '13-15', '16-18', '19-21'];\n\n  let newArray = matchKeeper.map(m=> {\n    let bins = rankBins.map(r=> {\n      return {bin:r, values: m.value.filter(f=> f[1] >= r[0] && f[1] <= r[1])}\n    });\n    return {key:m.key, 'bins':bins}\n  });\n\n  newArray.map(m=> {\n\n    let group = d3.selectAll('.pair-wrap').filter(f=> {\n          return (m.key === f.key);\n        }).append('g').classed('other-rank', true);\n\n    group.attr('transform', 'translate(880, 0)');\n\n    group.append('text')\n    .text('Ranked Top 20 in Other Traits')\n    .style('font-size', 11)\n    .style('text-anchor', 'middle')\n    .attr('transform', `translate(${(rankBins.length * (size+2))/2},0)`);\n\n    group.append('g')\n    .call(d3.axisBottom(d3.scaleBand().domain(axisLabels).range([0, rankBins.length * (size+2)])))\n    .attr('transform', 'translate(0, 92)');\n\n    let binGroups = group.selectAll('g.bin').data(m.bins).join('g').classed('bin', true);\n    binGroups.attr('transform', (d, i)=> `translate(${i*(size+2)}, ${80})`);\n\n    let binRects = binGroups.selectAll('rect').data(d=>d.values.sort((a, b)=> a[1]-b[1])).join('rect');\n    binRects.attr('width', size)\n    .attr('height', size/2)\n    .attr('transform', (d, i)=> `translate(0, ${-1*(i*((size/2)+1))})`);\n\n    binRects.attr('opacity', (d, i, n)=> {\n      let minMax = rankBins.filter(r=> d[1]<= r[1] && d[1] >= r[0])[0];\n      let scale = d3.scaleLinear().domain([minMax[0], minMax[1]]).range([.8, .2])\n      return scale(d[1])})\n\n    binRects.on('mouseover', (r,i)=>{\n      let tool = d3.select('#tooltip');\n      tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n      \n      let f = d3.format(\".3f\");\n        \n      tool.html(`${r[2].delta.key} : ${f(r[2].totalRank)} </br> Ranking: ${r[1]}`)\n          .style(\"left\", (d3.event.pageX - 40) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n          \n      tool.style('height', 'auto');\n      tool.style('width', '150px');\n\n    }).on('mouseout', ()=> {\n      let tool = d3.select('#tooltip').style('opacity', 0);\n    });\n  });\n\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {drawPathsAndAttributes, drawDiscreteAtt, drawGroups} from './renderPathView';\nimport {toggleFilters, getLatestData} from './filterComponent';\nimport { updateMainView, updateViews } from './viewControl';\nimport { collapsed, calculatedScalesKeeper, workspace, loadApp } from '.';\nimport { dropDown } from './buttonComponents';\nimport { cladesGroupKeeper, chosenCladesGroup, cladeKeeper } from './cladeMaker';\nimport { binGroups, renderDistStructure } from './distributionView';\n\nexport let valueParam = d3.select('#toolbar').select('input').node().checked ? 'logVal' : 'realVal';\n\nexport function logScaleToggle(){\n\n    \n    d3.select('#toolbar').select('input')\n    .on('change', (d, i, n)=> {\n        \n        valueParam = n[i].checked === true ? 'logVal' : 'realVal';\n        \n    //     let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n    //         return li[j].checked === true});\n        \n    //     let groups = test.data().map((m=> {\n    //         let names = m.nodes.map(path => path[path.length - 1].node);\n    //         let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n            \n    //         let group = binGroups(data, m.field, calculatedScalesKeeper[0], 8);\n    //         return {'label': m.field, 'paths': data, 'groupBins': group};\n    //    }));\n    //    console.log('groups', chosenCladesGroup[chosenCladesGroup.length - 1], groups)\n    //    let loader = clearMain();\n    //    updateMainView(d3.select('.dropdown.change-view').select('button').node().value, groups);\n    //    loader.style.display = \"none\";\n    updateViews(d3.select('.dropdown.change-view').select('button').node().value);\n    });\n}\n\nexport function findBrushedNodes(){\n    let brushes = d3.select('#toolbar').selectAll('.brush-span');\n    let brushData =  [];\n    brushes.each(e => brushData.push(e));\n    let nodes = brushData.flatMap(m=> m.nodes);\n    return nodes;\n}\nexport function toolbarDataControl(toolbar, graphList, chosenGraph){\n\n    let dataDrop = dropDown(toolbar, graphList, chosenGraph.text, 'change-data');\n    d3.select('.dropdown.change-data').select('button').node().value = chosenGraph.field;\n    dataDrop.on('click', (d, i, n)=> {\n        d3.select('.dropdown.change-data').select('button').node().value = d.field;\n        d3.select('.dropdown.change-data').select('button').text(d.text);\n        d3.select('#change-data').classed('show', false);\n        let main = d3.select('#main');\n        let sidebar = d3.select('#sidebar');\n        let toolbarDiv = d3.select('#toolbar');\n        let toolbarButtonWrap = toolbarDiv.select('.toolbar-button-wrap');\n        main.selectAll('*').remove();\n        sidebar.selectAll('*').remove();\n        toolbarButtonWrap.selectAll('*').remove();\n        cladeKeeper.push([]);\n        loadApp(workspace, d.field);\n    });\n\n}\nasync function dropUpdated(d, button){\n    let loader = await clearMain();\n    await changeDropValue(d, button);\n    await updateMainView(d.field, chosenCladesGroup[chosenCladesGroup.length - 1].groups);\n    loader.style.display = \"none\";\n}\nexport function changeDropValue(d, button){\n    button.node().value = d.field;\n    button.text(d.field);\n    return d;\n}\nexport function clearMain(){\n    d3.select('#main').selectAll('*').remove();\n    d3.select('#change-view').classed('show', false);\n    document.getElementById(\"loader\").style.display = \"block\";\n    return document.getElementById(\"loader\");\n}\nexport function toolbarControl(toolbar, main, calculatedScales){\n\n    let viewArray = [{'field':'Summary View'},{'field':'Path View'},{'field':'Pair View'}];\n    let viewDrop = dropDown(toolbar, viewArray, viewArray[0].field, 'change-view');\n\n    viewDrop.on('click', (d)=> dropUpdated(d, d3.select('.dropdown.change-view').select('button')));\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, main, calculatedScales));\n    filterButton.classed('hidden', true);\n    ///LENGTH BUTTON CODE\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, main, calculatedScales));\n\n    let discreteViewButton = toolbar.append('button').attr('id', 'discrete-view');\n    discreteViewButton.attr('class', 'btn btn-outline-secondary').text('Switch to Discrete Bars');\n    discreteViewButton.attr('value', false);\n    \n    discreteViewButton.on('click', ()=> {\n        let discretePredictedGroups = d3.selectAll('.predicated-attr-groups');\n        if(discreteViewButton.text() === 'Switch to Discrete Bars'){\n            discreteViewButton.text('Switch to Discrete Dots');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, true);\n        }else{\n            discreteViewButton.text('Switch to Discrete Bars');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, false);\n        }\n    });\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> {\n        if(m.type === 'discrete'){\n            optionArray.push(m);\n        }\n    });\n\n    let dropOptions = dropDown(toolbar, optionArray, 'Group By', 'show-drop-div-group');\n    toolbar.select('#show-drop-div-group').attr('value', 'ungrouped');\n\n    d3.select('.dropdown.show-drop-div-group').select('button').style('display', 'none')\n\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            let data = getLatestData();\n            let stateBins = d.scales.map(m=> {\n                return {'field': m.field, 'state': m.scaleName, 'data': [] };\n            });\n           \n            stateBins.map(state=> {\n               state.data = data.filter(paths=> {\n                    let node = paths.filter(no=> no.leaf === true);\n                        return node[0].attributes[state.field].winState === state.state;\n                });\n            });\n           d3.select('#main').selectAll('*').remove();\n           drawGroups(stateBins, calculatedScales);\n        }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        toolbar.select('#show-drop-div-group').classed('show', false);\n    });\n\n    /////ATTRIBUTE DROP DOWN\n    let attributeOptions = calculatedScales.map(m=> m.field).filter(f=> f != \"Clade\");\n    let checkedAttributes = attributeOptions.length > 11 ? attributeOptions.slice(0, 8) : attributeOptions;\n\n    let dropdiv = toolbar.append('div').classed(`dropdown attribute-show`, true);\n    dropdiv.style('display', 'inline-block');\n    let button = dropdiv.append('button').classed('btn dropbtn dropdown-toggle', true).text('Shown Attributes');\n    let dropContent = dropdiv.append('div').attr('id', 'attribute-show').classed('dropdown-content', true);\n    let dropUl = dropContent.append('ul');\n    \n    let attoptions = dropUl.selectAll('li').data(attributeOptions).join('li')\n    let checkBox = attoptions.append('input').attr('type', 'checkbox');\n    attoptions.append('text').text(d=> ` ${d}`);\n\n    let checkedDefault = attoptions.filter(f=> checkedAttributes.indexOf(f) > -1).select('input');\n    checkedDefault.each((d, i, n) => n[i].checked = true);\n\n    button.on('click', async(d, i, n)=> {\n        if(dropContent.classed('show')){\n\n            let loader = await clearMain();\n            dropContent.classed('show', false);\n            await updateMainView(d3.select('.dropdown.change-view').select('button').node().value, chosenCladesGroup[chosenCladesGroup.length - 1].groups);\n            loader.style.display = \"none\";\n\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n\n    /////ATTRIBUTE DROP DOWN\n    let cladeOptions = cladeKeeper[cladeKeeper.length - 1];\n\n    let dropdivClade = toolbar.append('div').classed(`dropdown clade-show`, true);\n    dropdivClade.style('display', 'inline-block')\n    let buttonClade = dropdivClade.append('button').classed('btn dropbtn dropdown-toggle', true).text('Shown Subtrees');\n\n    let dropContentClade = dropdivClade.append('div').attr('id', 'clade-show').classed('dropdown-content', true);\n    let dropUlClade = dropContentClade.append('ul');\n\n    let options = updateCladeDrop(dropUlClade, cladeOptions);\n\n    buttonClade.on('click', (d, i, n)=> {\n        if(dropContentClade.classed('show')){\n\n            dropContentClade.classed('show', false);\n           \n            let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n                return li[j].checked === true});\n            \n            let groups = test.data().map((m=> {\n                let names = m.nodes.map(path => path[path.length - 1].node);\n                let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n                \n                let group = binGroups(data, m.field, calculatedScalesKeeper[0], 8);\n                return {'label': m.field, 'paths': data, 'groupBins': group};\n           }));\n\n           let loader = clearMain();\n           updateMainView(d3.select('.dropdown.change-view').select('button').node().value, groups);\n           loader.style.display = \"none\";\n\n\n        }else{\n            dropContentClade.classed('show', true);\n        }\n    });\n}\nexport function updateCladeDrop(dropUl, cladeOptions){\n\n    let options = dropUl.selectAll('li').data(cladeOptions).join('li');\n    let checkBox = options.selectAll('input').data(d=> [d]).join('input').attr('type', 'checkbox');\n    options.selectAll('text').data(d=> [d]).join('text').text(d=> ` ${d.field}`);\n    \n    if(cladeOptions.length < 1){\n        d3.select('.dropdown.clade-show').select('button').classed('hidden', true);\n    }else{\n        d3.select('.dropdown.clade-show').select('button').classed('hidden', false);\n    }\n\n    return options;\n    \n    // let checkedDefault = options.filter(f=> checkedAttributes.indexOf(f) > -1).select('input');\n}\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, main, calculatedScales){\n\n    let data = getLatestData();\n   \n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\n\nimport {dataMaster, nestedData, collapsed} from './index';\nimport {getScales, getLatestData} from './filterComponent';\nimport {getNested} from './pathCalc';\nimport { dropDown } from './buttonComponents';\nimport { updateRanking, changeTrait } from './pairView';\nimport { pairPaths, maxTimeKeeper, scalingValues } from './dataFormat';\nimport { cladesGroupKeeper, chosenCladesGroup, growSidebarRenderTree } from './cladeMaker';\nimport { valueParam } from './toolbarComponent';\n\n\nexport function buildTreeStructure(paths, edges){\n   \n    let root = paths[0][0];\n    let nestedData = getNested(root, edges);\n    return nestedData;\n}\n\nexport function traitColorDropDown(scales, sidebar, renderCallback, addedCall){\n\n    let optionArray  = reduce2DropArray(scales);\n\n    let dropOptions = dropDown(sidebar, optionArray, `Color By Trait`,'show-drop-div-sidebar');\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            renderCallback(d, true, false);\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`);\n            if(addedCall != null) addedCall(d);\n        }else if(d.type === 'continuous'){\n            renderCallback(d, true, false);\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`);\n            if(addedCall != null) addedCall(d);\n        }else{\n             renderCallback(null, true, false)\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Color By Value`);\n        }\n    sidebar.select('#show-drop-div-sidebar').classed('show', false);\n    });\n\n    return dropOptions;\n\n}\n\nexport function reduce2DropArray(startArray){\n    return  startArray.reduce(function(array, scale){\n        array.push(scale);\n        return array; \n    }, [{'field':'None'}]); \n}\n\nexport function renderTreeButtons(normedPaths){\n\n    let scales = getScales();\n    let sidebar = d3.select('#sidebar');\n\n    ///SIDBAR STUFF\n    let buttonWrap = sidebar.append('div').classed('button-wrap', true);\n   \n    traitColorDropDown(scales, buttonWrap, renderTree), null;\n\n    buttonWrap.select('button').style('font-size', '12px');\n    let phenoOptions = reduce2DropArray(scales.filter(f=> f.type != 'discrete'));\n \n      ///BUTTON FOR PHENOGRAM VIEW. MAYBE MOVE THIS TO SIDEBAR\n    let phenogramButton = d3.select('#sidebar').select('.button-wrap').append('button').text('Phenogram').style('font-size', '12px');\n    phenogramButton.classed('btn btn-outline-secondary', true).attr('id', 'view-pheno'); \n    phenogramButton.on('click', ()=> {\n          if(phenogramButton.text() === 'Phenogram'){\n\n              phenogramButton.text('View Phylogeny');\n              changeTrait(phenoOptions, normedPaths, null);\n              \n              renderTree(null, true, d3.select('.attr-drop.dropdown').select('button').attr('value'));\n\n          }else{\n            ////ADD THE HIDE BUTTON HERE \n            let view = d3.select('.dropdown.change-view').select('button').text();\n           \n            if(view != \"Pair View\"){\n                d3.select('.dropdown.attr-drop').remove();\n            }\n            renderTree(null, true, false);\n            phenogramButton.text('Phenogram');\n\n          }\n    });\n\n    let cladeButton = buttonWrap.append('button').attr('id', 'clade-maker');\n    cladeButton.attr('class', 'btn btn-outline-secondary').text('Subtree View').style('font-size', '12px');\n    cladeButton.on('click', ()=> growSidebarRenderTree(null));\n}\n\nexport function tooltipTreeNode(data, index, nodeArray, attribute){\n\n    let paths = d3.select('#main-path-view').selectAll('.paths');\n    let points = d3.select('#main-summary-view').selectAll('.branch-points');\n    points.filter(f=> f.node === data.data.node).classed('selected', true);\n\n    let selectedPaths = paths.filter(path=> {\n        let nodes = path.map(m=> m.node);\n        return nodes.indexOf(data.data.node) > -1;\n    }).classed('hover', true);\n    selectedPaths.selectAll('g').filter(g=> g.node === data.data.node).classed('selected', true);\n    d3.select(nodeArray[index]).classed('selected-branch', true);\n\n    if(data.data.leaf === true){\n        let tool = d3.select('#tooltip');\n        tool.transition()\n        .duration(200)\n        .style(\"opacity\", .9);\n    \n        if(attribute != null){\n\n            let access = attribute.type === 'continuous' ? 'realVal' : attribute.field;\n\n            tool.html(`\n            ${data.data.name.charAt(0).toUpperCase() + data.data.name.slice(1)} <br/>\n            ${attribute.field}: ${data.data.attributes[attribute.field].values[access]}\n            `);\n\n        }else{\n            tool.html(`${data.data.name.charAt(0).toUpperCase() + data.data.name.slice(1)}`);\n        }\n      \n        tool.style(\"left\", (d3.event.pageX + 6) + \"px\")\n        .style(\"top\", (d3.event.pageY - 18) + \"px\");\n        tool.style('height', 'auto');\n\n   \n    }\n\n}\n\nfunction uncollapseSub(d){\n    d.children = d._children;\n    d._children = null;\n    if(d.children){\n        d.children.map(c=> uncollapseSub(c));\n    }    \n}\n\nfunction collapseSub(d){\n    if(d.children) {\n        d._children = d.children\n        d._children.forEach(collapseSub)\n        d.children = null\n    }  \n}\n\nfunction collapseTree(treeData){\n\n    let leaves = getLeaves(treeData, []);\n\n    return stepDown(treeData);\n\n    function stepDown(node){\n        let leaves = getLeaves(node, []);\n        \n        let ids = new Set(leaves.map(m=> m.data.attributes.Clade.values.Clade));\n        if(ids.size > 1){\n            node.children.map(n=> stepDown(n))\n        }else{\n            node.branchPoint = true;\n            node.clade = Array.from(ids)[0]\n            collapseSub(node);\n            return node;\n        }\n        return node;\n    }\n    \n    function getLeaves(node, array){\n        if(node.children != undefined ){\n            node.children.map(n=> getLeaves(n, array))\n        }else{\n            array.push(node);\n        };\n        return array;\n    }\n}\n\nexport function assignPosition(node, position) {\n    if (node.children === undefined || node.children === null){\n        \n        position = position + 1.5;\n        node.position = position;\n        return position;\n    }else{\n        let positionArray = []\n        node.children.forEach((child) => {\n            position = assignPosition(child, position);\n            positionArray.push(position);\n        });\n        node.options = positionArray;\n        node.position = d3.max(positionArray);\n        return position;\n    }\n}\n\nexport function addingEdgeLength(edge, data){\n    data.combEdge = data.edgeLength + edge;\n    if(data.children){\n        data.children.forEach(chil=> {\n            addingEdgeLength(data.combEdge, chil);\n        });\n    }\n}\n\nexport function renderTree(att, uncollapse, pheno){\n\n    let sidebar = d3.select('#sidebar');\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 260,\n        height : 720,\n        lengthHeight: 850,\n    }\n\n    // declares a tree layout and assigns the size\n    var treemap = d3.tree()\n   // .size([dimensions.height, dimensions.width]);\n   \n    addingEdgeLength(0, nestedData[nestedData.length - 1]);\n    \n    //  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData[nestedData.length - 1]);\n\n    // maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let groupedBool = d3.select('#show-drop-div-group').attr('value');\n\n    let sidebarTest = sidebar.select('svg');\n    let treeSvg = sidebarTest.empty() ? sidebar.append(\"svg\") : sidebarTest;\n    treeSvg.classed('tree-svg', true);\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + dimensions.margin.top + dimensions.margin.bottom);\n\n    let gTest = treeSvg.select('g.tree-g');\n    let g = gTest.empty() ? treeSvg.append(\"g\").classed('tree-g', true) : gTest;\n    g.attr(\"transform\",\n      \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\");\n\n    if(groupedBool === \"ungrouped\" && uncollapse === false){\n        if((cladesGroupKeeper.length > 0) && (chosenCladesGroup[chosenCladesGroup.length - 1].field != 'Clade Attribute)')){\n            let newNodes = collapseTree(treenodes);\n         \n            updateTree(newNodes, dimensions, treeSvg, g, att, pheno);\n        }else{\n          \n            updateTree(treenodes, dimensions, treeSvg, g, att, pheno);\n        }\n        \n    }else{\n        \n        ////Break this out into other nodes////\n        updateTree(treenodes, dimensions, treeSvg, g, att, pheno);\n    }\n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n    return array;\n}\n\nexport function updateTree(treenodes, dimensions, treeSvg, g, attrDraw, pheno){\n\n    \n    let dataSet = getLatestData();\n    let move = dataSet.length > 200 ? 370 : 375;\n\n    let length = true;\n    let uncollapse = true;\n\n    d3.select('.pheno-y-axis').remove();\n    d3.select('.pheno-x-axis').remove();\n    \n    assignPosition(treenodes, 0);\n\n    let branchCount = findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, 1]);\n\n    g.attr('transform', `translate(20, ${move})`);\n    treeSvg.attr('height', 1100);\n    yScale.range([700, 0]).domain([0, branchCount.length]);\n    xScale.range([0, dimensions.width + 10]);\n\n    if(pheno){\n\n        if(pheno === 'None'){\n            let scales = getScales().filter(f=> f.type === 'continuous');\n            pheno = scales[0].field;\n        }\n\n        treeSvg.attr('height', 800);\n        let min = scalingValues(treenodes.data.attributes[pheno].scales.min);\n        let max = scalingValues(treenodes.data.attributes[pheno].scales.max);\n       \n        //xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain())\n        xScale.domain([min, max]);\n        yScale.domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 600]);\n        \n    }\n\n    // adds the links between the nodes\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n        if((length && pheno === undefined) || (length && pheno === false)){\n           return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n           + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n           + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n           + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n        }else{\n            return \"M\" + xScale(d.data.attributes[pheno].values[valueParam]) + \",\" + yScale(d.data.combEdge)\n            + \" \" + xScale(d.parent.data.attributes[pheno].values[valueParam]) + \",\" + yScale(d.parent.data.combEdge);\n        }       \n    });\n\n    if(pheno){\n        \n        link.style('opacity', 0.3);\n        g.attr('transform', 'translate(30, 50)');\n\n        let x = xScale;\n        x.range([0, (dimensions.width+20)]);\n        let min = scalingValues(treenodes.data.attributes[pheno].scales.min);\n        let max = scalingValues(treenodes.data.attributes[pheno].scales.max);\n       \n        //xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain())\n        x.domain([min, max]);\n   \n        let xAxis = d3.axisBottom(x);\n        g.append('g').classed('pheno-x-axis', true).call(xAxis).attr('transform', 'translate(0, 610)').select('path').attr('stroke-width', 0);\n\n        let y = d3.scaleLinear().domain([0,maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 600-20]);\n        let yFlipped = d3.scaleLinear().domain([maxTimeKeeper[maxTimeKeeper.length - 1], 0]).range([0, 600]);\n        let yAxis = d3.axisLeft(yFlipped);\n        g.append('g').classed('pheno-y-axis', true).call(yAxis).attr('transform', 'translate(0, 2)').select('path').attr('stroke-width', 0);;\n    }\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants(), d => d.data.node)\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n    .duration(500)\n    .attr(\"transform\", function(d) { \n        if(length && pheno === undefined || pheno === false){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n        }else{\n\n           return \"translate(\" + (xScale(d.data.attributes[pheno].values[valueParam]) - 5) + \",\" + yScale(d.data.combEdge) + \")\"; \n        }\n    });\n\n    if(attrDraw != null){\n        \n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values[valueParam]);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n\n        tooltipTreeNode(d, i, n, attrDraw);\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    });\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateTree(treenodes, dimensions, treeSvg, g, attrDraw, \"SVL\");\n        //treenodes, dimensions, treeSvg, g, att, pheno\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n    if(uncollapse){\n       \n        // let groups = chosenCladesGroup[chosenCladesGroup.length - 1];\n        \n        // let groupGroup = treeSvg.selectAll('.clade-rects')\n        // .data(groups.groups)\n        // .join('g')\n        // .attr('class', d=> d.label)\n        // .classed('clade-rects', true)\n    \n        // let rect = groupGroup.append('rect');\n        // rect.attr('width', 20);\n        // rect.attr('height', (d, i)=> {\n        //     return d.paths.length * 6;\n        // });\n        // groupGroup.each((d, i, node)=> {\n       \n        //     let first = d.paths.map(m=> m[m.length-1].node);\n        //     let test = treeSvg.selectAll('.node--leaf').filter((f)=> {\n        //         return first.indexOf(f.data.node) > -1});\n        //     let leafSort = test.data().sort((a, b)=> {\n        //         return a.x - b.x;\n        //     });\n\n        //     let chosenNode = test.filter(f=> {\n        //         return f.data.node === leafSort[leafSort.length - 1].data.node;\n        //     });\n\n     \n        //     d3.select(node[i]).attr('transform', `translate(300, ${yScale(leafSort[0].position)})`)\n        // })\n\n    }\n\n    return node;\n}","import {dataMaster, nestedData, calculatedScalesKeeper} from './index';\nimport { updateDropdown, dropDown, slider } from './buttonComponents';\nimport * as d3 from \"d3\";\nimport { addingEdgeLength, assignPosition, renderTree, renderTreeButtons, traitColorDropDown } from './sidebarComponent';\nimport { maxTimeKeeper } from './dataFormat';\nimport { getLatestData, getScales } from './filterComponent';\nimport { renderDistStructure, binGroups, continuousHistogram, mirrorlineGen, selectedClades } from './distributionView';\nimport { updateMainView } from './viewControl';\nimport { pullPath } from './pathCalc';\nimport { updateCladeDrop } from './toolbarComponent';\n\nexport const cladesGroupKeeper = [];\nexport const chosenCladesGroup = [];\nexport const cladeKeeper = [[]];\n\nconst colorKeep = ['#58D68D', '#F39C12', '#EC7063'];\n\nfunction highlightGroups(group, className, range, param){\n\n    let attr = param && param != null ? param : 'field';\n\n    let data = getLatestData();\n    if(group.type === 'continuous'){\n\n        d3.selectAll('.clade-define-hover').classed('clade-define-hover', false);\n\n        let chosen = data.filter(f=> {\n            let leaf = f[f.length - 1];\n            return (leaf.attributes[group.field].values.realVal >= range[0]) && (leaf.attributes[group.field].values.realVal <= range[1]);\n        });\n\n        let leaf = d3.select('#sidebar').select('.tree-svg').selectAll('.node--leaf');\n        let chosenLeaf = leaf.filter(f=> {\n            return chosen.map(m=> m[m.length - 1].node).indexOf(f.data.node) > -1\n        }).select('circle').classed(className, true);\n\n        return chosen;\n\n\n    }else{\n\n        let chosen = data.filter(f=> {\n            let leaf = f[f.length - 1];\n            return group[attr].includes(leaf.attributes[group.field].winState);\n        });\n    \n        let leaf = d3.select('#sidebar').select('.tree-svg').selectAll('.node--leaf');\n        let chosenLeaf = leaf.filter(f=> {\n            return chosen.map(m=> m[m.length - 1].node).indexOf(f.data.node) > -1\n        }).select('circle').classed(className, true);\n    \n        return chosen;\n    }\n         \n}\n\nfunction defineTraitClade(trait){\n    \n    d3.select('#clade-by-trait').remove();\n    if(trait.type === 'discrete'){ \n        \n        let options = [...trait.scales].map(m => {\n            m.trait = m.field;\n            m.category = m.scaleName;\n            return m;\n        });\n\n        let dropOp = dropDown(d3.select('#sidebar').select('.button-wrap'), options, 'Define by Trait', 'clade-by-trait', 'category');\n        dropOp.on('mouseover', (d)=> {\n           highlightGroups(d, 'clade-define-hover', null, 'category');\n        }).on('mouseout', ()=> {\n            d3.selectAll('.clade-define-hover').classed('clade-define-hover', false);\n        });\n           \n        dropOp.on('click', (d)=> {\n\n            let chosen = highlightGroups(d, 'clade-define', null, 'category');\n\n            d3.select('#clade-by-trait').classed('show', false);\n\n            let wrap = d3.select('#sidebar').select('.button-wrap').append('form').classed(\"form-inline\", true)\n            .append('div').classed(\"form-group\", true).style('width', '300px');\n            \n            let textInput = wrap.append('input').attr('type', 'text')\n            .classed('form-control', true)\n            .attr('placeholder', `Group-${d.category}`);\n\n            let button = wrap.append('div').classed('input-group-append', true).append('button').attr('type', 'button').classed('btn btn-outline-secondary', true);\n            button.text('Add Group');\n            \n            button.on('click', ()=> {\n                let name = textInput.node().value != \"\" ? textInput.node().value : `Group-${d.trait}`;\n               \n                addClade(name, chosen, []);\n                growSidebarRenderTree(null);\n                let ul = d3.select('div#clade-show').selectAll('ul');\n                updateCladeDrop(ul, cladeKeeper[cladeKeeper.length - 1]);\n            });\n        });\n\n    }else{\n\n        console.log('c', trait)\n\n        let sliderThing = slider(trait, d3.select('#sidebar').select('.button-wrap').append('svg'), highlightGroups);\n\n        let wrap = d3.select('#sidebar').select('.button-wrap').append('form').classed(\"form-inline\", true)\n        .append('div').classed(\"form-group\", true).style('width', '300px');\n        \n        let textInput = wrap.append('input').attr('type', 'text')\n        .classed('form-control', true)\n        .attr('placeholder', `Group-${trait.field}`);\n\n        let button = wrap.append('div').classed('input-group-append', true).append('button').attr('type', 'button').classed('btn btn-outline-secondary', true);\n        button.text('Add Group');\n        \n        button.on('click', ()=> {\n\n            let range = sliderThing.value;\n            let name = textInput.node().value != \"\" ? textInput.node().value : `Group-${trait.field}`;\n\n            let data = getLatestData();\n\n            let chosen = data.filter(f=> {\n                let leaf = f[f.length - 1];\n                return (leaf.attributes[trait.field].values.realVal >= range[0]) && (leaf.attributes[trait.field].values.realVal <= range[1]);\n            });\n\n            addClade(name, chosen, []);\n            growSidebarRenderTree(null);\n            let ul = d3.select('div#clade-show').selectAll('ul');\n            updateCladeDrop(ul, cladeKeeper[cladeKeeper.length - 1]);\n        });\n    }\n}\n\n\nexport function growSidebarRenderTree(attrDraw){\n\n    let sidebar = d3.select('#sidebar');\n    let cladeBool = null;\n\n    sidebar.classed('clade-view', true);\n    d3.select('#main').classed('clade-view', true);\n\n    sidebar.select('.tree-svg').remove();\n    sidebar.select('.button-wrap').selectAll('*').remove();\n\n    traitColorDropDown(getScales(), sidebar.select('.button-wrap'), growSidebarRenderTree, defineTraitClade);\n    \n    let x = sidebar.select('.button-wrap').append('div')\n        .style('position', 'absolute')\n        .style('right', '5px')\n        .style('top', '18px')\n        .append('i')\n        .classed('close fas fa-times', true)\n        .style('padding-right', '10px');\n\n    x.on('click', ()=> {\n        sidebar.classed('clade-view', false);\n        d3.select('#main').classed('clade-view', false);\n        sidebar.selectAll('*').remove();\n        ////REDRAW SIDEBAR\n        renderTreeButtons(getLatestData(), sidebar, false);\n        renderTree(null, true, false);//att, uncollapse, pheno\n    });\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 400,\n        height : (getLatestData().length * 8),\n        lengthHeight: 500,\n    }\n   \n    let treenodes = renderCladeTree(sidebar, null, dimensions);\n\n    let leaf = sidebar.select('.tree-svg').selectAll('.node--leaf');\n    let nodes = sidebar.select('.tree-svg').selectAll('.node');\n    let link = sidebar.select('.tree-svg').selectAll('.link');\n\n    let nodeData = getLatestData();\n  \n    function  findCommonNode(path1, path2, className){\n\n        let common = path1.filter(f=> path2.map(m=> m.node).indexOf(f.node) > -1);\n        let subtreeFinder = [nestedData[nestedData.length - 1]];\n        let commonNodeMark = nodes.filter(f=> f.data.node === common[common.length - 1].node);\n      \n        common.map(m=> m.node).map((m, i)=> {\n            if(i > 0){\n                let child = subtreeFinder[subtreeFinder.length - 1].children.filter(f=> {\n                    return f.node === m})[0];\n                subtreeFinder.push(child);\n            }\n        });\n\n        let paths = pullPath([subtreeFinder[subtreeFinder.length - 1]], subtreeFinder[subtreeFinder.length - 1].children, [], [], 0);\n        let nodeNames = paths.flatMap(path => path.map(p=> p.node))\n        nodes.filter(f=> nodeNames.indexOf(f.data.node) > -1).select('circle').classed(className, true);\n        link.filter(f=> nodeNames.filter((n)=> n != common[common.length - 1].node).indexOf(f.data.node) > -1).classed(className, true);\n\n        return paths;\n\n    }\n   \n    labelTree(leaf);\n\n    if(attrDraw != null){\n    \n        let notleaves = nodes.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaf.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaf.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        nodes.selectAll('circle').attr('fill', 'gray');\n    }\n\n    drawCladeBox(cladeKeeper[cladeKeeper.length - 1]);\n\n    leaf.on('click', (d, i, n)=> {\n   \n        d3.select(n[i]).select('circle').attr('fill', 'orange').attr('r', '5');\n\n        if(cladeBool === null){\n            cladeBool = d;\n           \n        }else{\n            let dat1 = nodeData.filter(f=> f[f.length-1].node === cladeBool.data.node)[0];\n            let dat2 = nodeData.filter(f=> f[f.length-1].node === d.data.node)[0];\n            let paths = findCommonNode(dat1, dat2, 'selected');\n\n            let leafNames = paths.map(p=> p[p.length - 1].node);\n\n            let leafNameNodes = leaf.filter(f=> {\n                return leafNames.indexOf(f.data.node) > -1;\n            });\n            \n            let leafNameNodeData = leafNameNodes.data().sort((a, b)=> b.position - a.position);\n            let allLeafNodeData = leaf.data().sort((a, b)=> b.position - a.position);\n            \n            let positionHolder = [leafNameNodeData[0], leafNameNodeData[leafNameNodeData.length - 1]].map((m)=> {\n                let index = allLeafNodeData.indexOf(m);\n                m.index = index;\n                return m;\n            });\n\n            let yScale = d3.scaleLinear()\n            yScale.range([dimensions.height, 0]).domain(d3.extent(leaf.data().map(m=> m.position)));\n\n            let wrap = sidebar.select('.button-wrap').append('form').classed(\"form-inline\", true)\n            .append('div').classed(\"form-group\", true).style('width', '300px');\n            \n            let textInput = wrap.append('input').attr('type', 'text')\n            .classed('form-control', true)\n            .attr('placeholder', 'Clade Name');\n\n            let button = wrap.append('div').classed('input-group-append', true).append('button').attr('type', 'button').classed('btn btn-outline-secondary', true);\n            button.text('Add Group');\n            \n            button.on('click', ()=> {\n                let name = textInput.node().value != \"\" ? textInput.node().value : `Group-${cladeKeeper[cladeKeeper.length - 1].length}`;\n                addClade(name, paths, positionHolder);\n                growSidebarRenderTree(null);\n                let ul = d3.select('div#clade-show').selectAll('ul');\n                updateCladeDrop(ul, cladeKeeper[cladeKeeper.length - 1]);\n            });\n            cladeBool = null;\n        }\n    });\n    leaf.on('mouseover', (d, i, n)=> {\n        if(cladeBool!=null){\n            let dat1 = nodeData.filter(f=> f[f.length-1].node === cladeBool.data.node)[0];\n            let dat2 = nodeData.filter(f=> f[f.length-1].node === d.data.node)[0];\n            findCommonNode(dat1, dat2, 'selected-hover');\n        }\n\n    }).on('mouseout', ()=> {\n        sidebar.selectAll('.selected-hover').classed('selected-hover', false);\n    });\n\n   sidebar.select('.tree-svg').classed('clade-view', true).append('g').classed('overlay-brush', true);\n\n}\n\nfunction drawCladeBox(cladeData){\n    let base = 0;\n    let treeSVG = d3.select('.tree-svg');\n\n    let newClade = cladeData.filter(f=> f.position != undefined)\n                        .map((m, i)=> {\n                            m.color = colorKeep[i];\n                            return m;\n                        });\n\n    let cladeMono = treeSVG.append('g').selectAll('g.clade-label').data(newClade.filter(f=> f.position.length > 0)).join('g').classed('clade-label', true);\n    cladeMono.append('rect')\n    .attr('width', (d, i, n)=> {\n        if(i>0){\n            let others = d3.select(n[i-1]).data()[0].nodes.map(m=> m[m.length-1].node);\n            let test = d.nodes.filter(m=> {\n                let node = m[m.length-1].node;\n                return others.indexOf(node) > -1;\n            });\n            \n            let width = test.length > 0 ? 8 : 60;\n            return width;\n        }else{\n            return 60;\n        }\n    })\n    .attr('height', (d, i)=>{\n        return (d.nodes.length * 12);\n    }).attr('transform', (d, i, n)=> {\n        if(i>0){\n            let others = d3.select(n[i-1]).data()[0].nodes.map(m=> m[m.length-1].node);\n            let test = d.nodes.filter(m=> {\n                let node = m[m.length-1].node;\n                return others.indexOf(node) > -1;\n            });\n          \n            if(test.length > 0){base = base + 1};\n            let xStep = test.length === 0 ? 0 : base;\n            let step = d.position[0].index > 10 ? 12 : 11.6;\n            return `translate(${(xStep*65)+435}, ${((d.position[0].index * step)+28)})`;\n            \n        }else{\n            let step = d.position[0].index > 10 ? 12 : 11.6;\n            return `translate(${435}, ${((d.position[0].index * step)+28)})`;\n        }\n        \n        \n    })\n    .attr('fill',(d, i)=> d.color)\n    .attr('opacity', .3);\n\n    let multiData = newClade.filter(f=> f.position.length === 0).map(n=> {\n        let names = n.nodes.map(m=> m[m.length - 1].node);\n        treeSVG.selectAll('.node--leaf').filter(f=> names.indexOf(f.data.node) > -1).select('circle').attr('fill', n.color);\n    });\n \n\n    //treeSvg.selectAll('.node--leaf').filter(f=> f.data)\n\n    cladeMono.on('mouseover', (d, i, n)=> {\n\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.field}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n\n    }).on('mouseout', (d, i, n)=> {\n       \n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n}\n\nexport function addClade(name, nodes, positions){\n    cladeKeeper[cladeKeeper.length - 1].push({field: name, nodes: nodes, position: positions});\n}\n\nexport function addCladeGroup(name, clades, nodes){\n    cladesGroupKeeper.push({field: name, names: clades, groups:nodes});\n    return {field: name, names: clades, groups:nodes};\n}\n\nexport function removeCladeGroup(clades){\n    cladeKeeper[cladeKeeper.length - 1] = cladeKeeper[cladeKeeper.length - 1].filter(f=> f.groupKey != clades.groupKey);\n}\n\nfunction createNewCladeGroup(div, scales){\n    let cladeNames = [];\n    let clades = [];\n    d3.selectAll('.clade-name').each((e, i, n)=> {\n       cladeNames.push(n[i].value);\n       let rectTest = d3.select(`.rect-${i + 1}`).node().getBoundingClientRect();\n       let nodes = div.select('.tree-svg.clade-view').selectAll('.node--leaf').filter((f, j, node)=> {\n           let circPos = node[j].getBoundingClientRect();\n           return circPos.y >= rectTest.y-4 && circPos.y <= ((rectTest.y + rectTest.height) - 4);\n       })\n       nodes.select('circle').attr('fill', 'red');\n       clades.push({'clade': n[i].value , 'nodes': nodes.data().map(m=> m.data)});\n    });\n \n    let groupName = d3.select('.group-name').node().value;\n    let chosenGroup = addCladeGroup(groupName, cladeNames, clades);\n    updateDropdown(cladesGroupKeeper, 'change-clade');\n    let groups = groupDataByClade(scales, getLatestData(), chosenGroup);\n\n    d3.select('.dropdown.change-clade').select('button').text(`Groups Shown: ${chosenGroup.field}`);\n\n    updateMainView('Summary View', groups);\n    renderTree(d3.select('#sidebar'), null, true, false);\n}\n\nfunction labelTree(nodes){\n    nodes.append('text')\n    .text(d=> d.data.node)\n    .attr('font-size', 9)\n    .attr('x', 4)\n    .attr('y', 2);\n}\n\nexport async function createCladeView(div, scales){\n    drawTreeForGroups(div);\n    cladeToolbar(div, scales);\n}\n\nexport function renderCladeTree(sidebar, att, dimensions){\n\n\n\n     addingEdgeLength(0, nestedData[nestedData.length - 1]);\n    \n    let treeFun = data => {\n        const root = d3.hierarchy(data);\n        return d3.tree().size([dimensions.width, dimensions.height])(root);\n      }\n\n    let treenodes = treeFun(nestedData[nestedData.length - 1]);\n\n    let treeSvg = sidebar.append(\"svg\").classed('tree-svg', true);\n    let g = treeSvg.append(\"g\").classed('tree-g', true);\n   \n    ////Break this out into other nodes////\n    updateCladeTree(treenodes, dimensions, treeSvg, g, att, true);\n    return treenodes;\n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n    return array;\n}\n\nexport function updateCladeTree(treenodes, dimensions, treeSvg, g, attrDraw, length){\n\n    let dataSet = getLatestData();\n    let move = dataSet.length > 200 ? dimensions.height / 1.964 : dimensions.height / 1.9;\n    \n    assignPosition(treenodes, 0);\n\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + (dimensions.height / 1.5));\n\n    findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, getLatestData().length])\n    //g.attr('transform', `translate(30, ${dimensions.height / 1.9})`);\n    g.attr('transform', `translate(30, ${move})`);\n\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n        return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n        + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n        + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n        + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n        .data(treenodes.descendants(), d => d.data.node)\n        .join(\"g\")\n        .attr(\"class\", function(d) { \n        return \"node\" + \n        (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n        .duration(500)\n        .attr(\"transform\", function(d) { \n                return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n        });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)//f.data.attributes[attrDraw.field].winState === att.state;\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    });\n\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateCladeTree(treenodes, dimensions, treeSvg, treeSvg.select('g'), attrDraw, lengthBool);\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n    return node;\n}","import * as d3 from \"d3\";\nimport '../styles/index.scss';\nimport { changeDropValue } from \"./toolbarComponent\";\n\nexport function dropDown(div, optionArray, dropText, dropId, param){\n    let att = param && param != null ? param : 'field';\n    let dropdiv = div.append('div').classed(`dropdown ${dropId}`, true);\n    dropdiv.style('display', 'inline-block')\n    let button = dropdiv.append('button').classed('btn dropbtn dropdown-toggle', true).text(dropText);\n    let dropContent = dropdiv.append('div').attr('id', dropId).classed('dropdown-content', true);\n    dropContent.append('a').text('text').attr('font-size', 11);\n    let options = dropContent.selectAll('a').data(optionArray).join('a').text(d=> d[att]);\n\n    options.on('click', (d, i, n)=> {\n        \n        changeDropValue(d, button);\n        dropContent.classed('show', false);\n    });\n\n    button.on('click', (d, i, n)=> {\n        if(dropContent.classed('show')){\n            dropContent.classed('show', false);\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n    options.raise()\n    return options;\n}\n\nexport function updateDropdown(optionArray, dropId){\n    d3.select(`#${dropId}`).selectAll('a').data(optionArray).join('a').text(d=> d.field);\n}\n\nexport function slider(trait, svg, callBack) {\n   \n\n    let range = [trait.min, trait.max];\n\n    let intitialBrush = false;\n    // set width and height of svg\n    var w = 200\n    var h = 100\n\n    svg.attr('width', w)\n        .attr('height', h)\n\n    var margin = {top: 30,\n                  bottom: 15,\n                  left: 30,\n                  right: 20}\n  \n    // dimensions of slider bar\n    var width = w - margin.left - margin.right;\n    var height = h - margin.top - margin.bottom;\n  \n    // create x scale\n    var x = d3.scaleLinear()\n      .domain(range)  // data space\n      .range([0, width]);  // display space\n    \n    // create svg and translated g\n    const g = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`)\n    \n    // labels\n    var labelL = g.append('text')\n      .attr('id', 'labelleft')\n      .attr('x', 0)\n      .attr('y', height + 5)\n      .style('text-anchor', 'end')\n  \n    var labelR = g.append('text')\n      .attr('id', 'labelright')\n      .attr('x', 0)\n      .attr('y', height + 5)\n      .style('text-anchor', 'start')\n  \n    // define brush\n    var brush = d3.brushX()\n      .extent([[0,0], [width, height]])\n      .on('brush', function() {\n        var s = d3.event.selection;\n        // update and move labels\n        labelL.attr('x', s[0])\n          .text((x.invert(s[0]).toFixed(2)))\n        labelR.attr('x', s[1])\n          .text((x.invert(s[1]).toFixed(2)))\n        // move brush handles      \n        handle.attr(\"display\", null).attr(\"transform\", function(d, i) { return \"translate(\" + [ s[i], - height / 4] + \")\"; });\n        // update view\n        // if the view should only be updated after brushing is over, \n        // move these two lines into the on('end') part below\n        svg.node().value = s.map(function(d) {var temp = x.invert(d); return +temp.toFixed(2)});\n        svg.node().dispatchEvent(new CustomEvent(\"input\"));\n      }).on('end', ()=> {\n            if(intitialBrush === false){\n                intitialBrush = true;\n            }else{\n                callBack(trait, 'clade-define-hover', svg.node().value)\n            }\n      });\n  \n    // append brush to g\n    var gBrush = g.append(\"g\")\n        .attr(\"class\", \"brush\")\n        .call(brush)\n  \n    // add brush handles (from https://bl.ocks.org/Fil/2d43867ba1f36a05459c7113c7f6f98a)\n    var brushResizePath = function(d) {\n        var e = +(d.type == \"e\"),\n            x = e ? 1 : -1,\n            y = height / 2;\n        return \"M\" + (.5 * x) + \",\" + y + \"A6,6 0 0 \" + e + \" \" + (6.5 * x) + \",\" + (y + 6) + \"V\" + (2 * y - 6) +\n          \"A6,6 0 0 \" + e + \" \" + (.5 * x) + \",\" + (2 * y) + \"Z\" + \"M\" + (2.5 * x) + \",\" + (y + 8) + \"V\" + (2 * y - 8) +\n          \"M\" + (4.5 * x) + \",\" + (y + 8) + \"V\" + (2 * y - 8);\n    }\n  \n    var handle = gBrush.selectAll(\".handle--custom\")\n      .data([{type: \"w\"}, {type: \"e\"}])\n      .enter().append(\"path\")\n      .attr(\"class\", \"handle--custom\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"fill\", '#eee')\n      .attr(\"cursor\", \"ew-resize\")\n      .attr(\"d\", brushResizePath);\n      \n    // override default behaviour - clicking outside of the selected area \n    // will select a small piece there rather than deselecting everything\n    // https://bl.ocks.org/mbostock/6498000\n    gBrush.selectAll(\".overlay\")\n      .each(function(d) { d.type = \"selection\"; })\n      .on(\"mousedown touchstart\", brushcentered)\n    \n    function brushcentered() {\n      var dx = x(1) - x(0), // Use a fixed width when recentering.\n      cx = d3.mouse(this)[0],\n      x0 = cx - dx / 2,\n      x1 = cx + dx / 2;\n      d3.select(this.parentNode).call(brush.move, x1 > width ? [width - dx, width] : x0 < 0 ? [0, dx] : [x0, x1]);\n    }\n    \n    // select entire range\n    gBrush.call(brush.move, range.map(x));\n\n\n    \n    return svg.node();\n  }","import * as d3 from \"d3\";\nimport { renderDistibutions, groupDistributions, renderDistStructure, binGroups } from './distributionView';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport { getLatestData } from \"./filterComponent\";\nimport { generatePairs, rankingControl } from \"./pairView\";\nimport { drawTreeForGroups, createCladeView, chosenCladesGroup } from \"./cladeMaker\";\nimport { calculatedScalesKeeper } from \".\";\nimport { changeDropValue, clearMain } from './toolbarComponent';\nimport { removeAllBrushes } from \"./brusherMaker\";\n\nexport let groupedView = false;\n\n\n/**\n * Get the latest data and filter only what is selected\n */\nexport function getSelectedData(){\n\n    let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n        return li[j].checked === true});\n\n    let names = Array.from(new Set(test.data().flatMap(f=> f.nodes.map(path => path[path.length - 1].node))));\n    let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n\n    return data;\n}\n\nexport async function updateViews(viewType){\n\n    let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n        return li[j].checked === true});\n    \n    let groups = test.data().map((m=> {\n        let names = m.nodes.map(path => path[path.length - 1].node);\n        let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n        \n        let group = binGroups(data, m.field, calculatedScalesKeeper[calculatedScalesKeeper.length - 1], 8);\n        return {'label': m.field, 'paths': data, 'groupBins': group};\n   }));\n  \n    clearMain().then((loader=> {\n        updateMainView(viewType, groups).then(()=> {\n            loader.style.display = \"none\";\n        });\n    }));\n}\n\nexport function updateMainView(d, groups){\n\n    let main = d3.select('#main');\n    \n    let data = getSelectedData();\n    let view = d3.select('#view-pheno').empty()? null : d3.select('#view-pheno').text();\n   \n    if(d != 'Pair View' && view === 'View Phenogram'){\n        d3.select('.dropdown.attr-drop').remove();\n    }\n\n    removeAllBrushes();\n  \n    if(d === 'Path View' || d === null){\n        d3.select('#pair-rank').classed('hidden', true);\n        drawPathsAndAttributes(data, main);\n\n        document.getElementById(\"scrunch\").disabled = false;\n        document.getElementById(\"discrete-view\").disabled = false;\n\n        d3.select('#scrunch').classed('hidden', false);\n        d3.select('#discrete-view').classed('hidden', false);\n\n    }else if(d === 'Summary View'){\n\n        d3.select('#pair-rank').classed('hidden', true);\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n        groups ? renderDistStructure(main, groups) : renderDistStructure(main, data);\n       \n    }else if(d === 'Pair View'){\n        rankingControl(data);\n        generatePairs(data);\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n    }else{\n        console.error('field not found');\n    }\n\n    return main;\n}\nexport function initialViewLoad(scales, dataName){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    // if(data.length > 50){\n\n        renderDistStructure(main, chosenCladesGroup[chosenCladesGroup.length - 1].groups)\n            .then(()=>  document.getElementById(\"loader\").style.display = \"none\");\n        \n        d3.select('#view-toggle').text('View Paths');\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n        changeDropValue({'field':'Summary View'}, d3.select('.dropdown.change-view').select('button'));\n\n    // }else{\n        \n        // drawPathsAndAttributes(data, main);\n        // d3.select('#view-toggle').text('View Summary');\n\n        // document.getElementById(\"scrunch\").disabled = false;\n        // document.getElementById(\"discrete-view\").disabled = false;\n\n        // d3.select('#scrunch').classed('hidden', false);\n        // d3.select('#discrete-view').classed('hidden', false);\n        \n\n        // changeDropValue({'field':'Path View'});\n      \n//    }\n\n}\n\n","import '../styles/index.scss';\n\nimport * as d3 from \"d3\";\nimport {dataMaster, calculatedScalesKeeper} from './index';\nimport { updateMainView } from './viewControl';\n\nexport let filterMaster = [];\n\nexport function removeFilter(filterId, scales){\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n    let filterIndex = dataFilters.map(f=> f.filterId).indexOf(filterId);\n\n    if(filterIndex != dataFilters.length - 1){\n   \n        let baseData = filterIndex === 0? dataMaster[0] : dataFilters[filterIndex - 1].data;\n    \n        let testData = [...baseData];\n\n        let filterToolbar = d3.select(\"#toolbar\");\n\n        let badges = filterToolbar.selectAll('.filter-tag').remove();\n  \n        for(let i = filterIndex + 1; i < dataFilters.length; i ++){\n       \n            let fun = dataFilters[i].filterFunction;\n            if(dataFilters[i].attributeType === 'continuous'){\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].predictedFilter, dataFilters[i].observedFilter);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'c-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }else{//discrete\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].fromState, dataFilters[i].toState);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'd-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }\n        }\n    }\n    let newFilterMaster = filterMaster.filter(f=> f.filterId != filterId);\n\n    filterMaster = newFilterMaster;\n}\n\nexport function addFilter(filterType, attType, filterId, filFunction, oldData, newData, extra){\n    let filterOb = {'filterType': filterType, 'attributeType': attType, 'filterId': filterId, 'filterFunction':filFunction, 'before-data': oldData, 'data': newData}\n    if(extra != null){\n        extra.forEach(ex=> {\n            filterOb[ex[0]] = ex[1];\n        });\n    }\n    filterMaster.push(filterOb);\n    return filterOb;\n}\n\nexport function getLatestData(){\n    return filterMaster.length > 0 ? filterMaster[filterMaster.length - 1].data : dataMaster[dataMaster.length-1]; \n}\n\nexport function getScales(){\n    return calculatedScalesKeeper[calculatedScalesKeeper.length - 1];\n}\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, main, scales){\n    console.log(filterButton, main, scales)\n\n    let filterDiv = d3.select('#filter-tab');\n    let data = getLatestData();\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        //move metric is 'edgeLength'\n\n        //renderAttToggles(filterDiv, data, scales);\n        stateFilter(filterDiv, filterButton, data, main, scales);\n        queryFilter(filterDiv, filterButton, data, main, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\nfunction addFilterTag(data, scales){\n\n    let filterToolbar = d3.select('#toolbar');\n\n    if(data.attributeType === 'continuous'){\n\n        let formater = d3.format(\".2s\");\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        d3.select(button).datum(data);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        let label = button.append('h6').text(data.selectedOption + \"  Predicted: \"+ formater(data.predictedFilter[0]) + \"-\" + formater(data.predictedFilter[1]) + \" Observed: \" + formater(data.observedFilter[0]) + \"-\" + formater(data.observedFilter[1]));\n        let xSpan = label.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> data.attribute != f.attribute);\n            ////YOU NEED TO CHANGE THIS TO REMOVE FILTER FUNCTION\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'discrete'){\n     \n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(data.state[0]);\n        button.append('i').classed('fas fa-arrow-right', true);\n        button.append('h6').text(data.state[1] + '  ');\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'branch'){\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(' At Branch: ' + data.nodeId);\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }\n    \n}\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n              \n                    //let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n                    let data = getLatestData();\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filId = 'd-'+filterMaster.filter(f=> f.attributeType === 'discrete').length;\n                    let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n                    updateMainView('Summary View');\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR////\n                    addFilterTag(filterOb, scales);\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    let filId = 'c-'+filterMaster.filter(f=> f.attributeType === 'continuous').length;\n                    let filterOb = addFilter('data-filter', 'continuous', filId, continuousFilter, [...data], [...test], [['selectedOption', selectedOption], ['predictedFilter', predictedFilter], ['observedFilter', observedFilter]]);\n\n                    updateMainView('Summary View');\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    addFilterTag(filterOb, scales);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\nexport function nodeFilter(selectedNode, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path.map(node => node.node).indexOf(selectedNode) > -1;\n    });\n\n    let filId = 'b-'+filterMaster.filter(f=> f.attributeType === 'branch').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'branch', filId, nodeFilter, [...data], [...test], [['nodeId', selectedNode]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\nexport function leafStateFilter(selectedState, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path[path.length - 1].attributes[selectedState.label].winState === selectedState.winState;\n    });\n\n    let filId = 'l-'+filterMaster.filter(f=> f.attributeType === 'leaf').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'leaf', filId, nodeFilter, [...data], [...test], [['leafState', [selectedState.label, selectedState.winState]]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n}\nfunction discreteFilter(data, selectedOption, fromState, toState){\n    if(selectedOption != undefined){\n        return data.filter(path=> {\n            let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n                let states = node.attributes[selectedOption].states;\n                if(fromState === 'Any'){\n                    return true;\n                }else{\n                    return states.filter(st=> st.state === fromState).length > 0 && states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n                }\n            });\n            let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n            let win = node.attributes[selectedOption].winState;\n            if(toState === 'Any'){\n                return true;\n            }else{\n                return win === toState;\n            }\n            });\n            return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n        });\n    }\n}\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, scales){\n\n    let moveMetric = 'edgeLength';\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n         \n             updateMainView('Summary View');\n\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                updateMainView('Summary View');\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, scales){\n\n    console.log(normedPaths, scales.map(m=> m.field))\n\n    ////NEED TO GET RID OF TOGGLE SVG\n   // let keys = Object.keys(normedPaths[0][0].attributes);\n   let keys = scales.map(m=> m.field);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths], 'data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n    \n        updateMainView(\"Summary View\");\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport * as d3Array from 'd3-array'\nimport {pathSelected, renderComparison} from './selectedPaths';\nimport {formatAttributeData, maxTimeKeeper, scalingValues, generateTraitScale} from './dataFormat';\nimport {filterMaster, nodeFilter, getLatestData, leafStateFilter, getScales} from './filterComponent';\nimport { drawBranchPointDistribution } from './distributionView';\nimport { dropDown } from './buttonComponents';\n\nlet valueParam = 'realVal'\n\nconst dimensions = {\n    rectWidth: 15,\n    rectHeight: 40,\n    collapsedHeight: 20,\n}\n\nexport function calcVolatility(data, attribute){\n\n    let length = data.length;\n\n    let sumKeeper = [];\n    let valKeeper = [];\n\n    for(let i = 1; i < length; i++){\n\n        let one = i - 1;\n        let two = i;\n\n        if(data[one] && data[two]){\n        \n            let diff = data[one].attributes[attribute].values[valueParam] - data[two].attributes[attribute].values[valueParam];\n            let diffSquared = diff * diff;\n            sumKeeper.push(diffSquared);\n            valKeeper.push(data[one].attributes[attribute].values[valueParam])\n        }\n    }\n\n    let characterShifts = [];\n\n    if(data[0].attributes[attribute].type === 'discrete'){\n\n        let first = d3.entries(data[0].attributes[attribute].values).filter(f=> {\n            let max = d3.max(d3.entries(data[0].attributes[attribute].values), d=> +d.value);\n            return +f.value === max;\n        });\n\n        data.map((d)=> {\n       \n            let next = d3.entries(d.attributes[attribute].values).filter(f=> {\n                let max = d3.max(d3.entries(d.attributes[attribute].values), d=> +d.value);\n                return +f.value === max;\n            });\n         \n            if(next === undefined){\n                if(!first[first.length - 1].key.includes(d.winState)){\n                    first.push({'key': d.winState, 'value': 1});\n                }\n\n            }else{\n\n                if(next.length === 1){\n                    if(next[0].key != first[first.length - 1].key){\n                        first.push(next[0]);\n                    }\n                }\n            }\n\n            characterShifts.push(first);\n        \n            return d;\n        });\n    }\n\n    return data.map(d=> {\n        if(d.attributes[attribute].type === 'continuous'){\n            //d.attributes[attribute].volatility = d3.deviation(valKeeper);//Math.sqrt(d3.mean(sumKeeper));//d3.variance(sumKeeper) / d3.mean(sumKeeper);\n            d.attributes[attribute].volatility = d3.deviation(sumKeeper);//Math.sqrt(d3.mean(sumKeeper));//d3.variance(sumKeeper) / d3.mean(sumKeeper);\n            d.attributes[attribute].extent = d3.extent(valKeeper);\n            d.attributes[attribute].maxDiff = d3.extent(valKeeper)[1] - d3.extent(valKeeper)[0];\n            return d;\n        }else{\n            d.attributes[attribute].characterShifts = characterShifts[0].length - 1;\n        }\n    });\n}\n\nexport function SortPathsByTrait(trait, paths, main){\n   \n    let test = paths.sort((a, b)=> {\n        if(trait.type === 'continuous'){\n            return  b[b.length - 1].attributes[trait.field].volatility - a[a.length - 1].attributes[trait.field].volatility\n        }else{\n            return b[b.length - 1].attributes[trait.field].characterShifts - a[a.length - 1].attributes[trait.field].characterShifts;\n        }\n    });\n\n\n    drawPathsAndAttributes(test, main)\n\n}\n\nexport function drawPathsAndAttributes(pathData, main){\n\n    let width = 800;\n    let scales = getScales();\n    let nodeTooltipFlag = true;\n\n    let collapsed = d3.select('#scrunch').attr('value');\n    main.select('#main-path-view').selectAll('*').remove();\n\n    let optionArray = scales.map(m=> {\n        let newOb = {}\n        newOb.field = m.field;\n        newOb.type = m.type;\n        newOb.popDeviation = m.type === 'continuous' ? m.popDeviation : null;\n        newOb.popCharShift = m.type === 'continuous' ? null : m.popCharShift;\n        return newOb;\n    });\n\n    let sortBar = main.append('div')\n    .classed('sort-toolbar', true)\n    .style('width', '100%')\n    .style('height', '60px')\n    .style('padding-top', '10px');\n    \n    let dropWrap = sortBar.append('div')\n    .style('display', 'inline')\n    .style('padding-top', '10px')\n    .style('padding-left', '20px');\n\n    let popStatWrap = sortBar.append('div')\n    .style('display', 'inline')\n    .style('padding-left', '20px');\n\n    let traitSortOp = dropDown(dropWrap, optionArray, 'Sort Paths By', 'trait-path-sort');\n    traitSortOp.on('click', (d)=>{\n\n        d3.select('#trait-path-sort').classed('show', false);\n        popStatWrap.selectAll('*').remove();\n\n        var zero = d3.format(\".2n\");\n\n        let traitLabel = popStatWrap.append('div').classed('label', true);\n        traitLabel.append('span').append('text').text(`Sorted By :`).style('font-weight', '900');\n        traitLabel.append('text').text(` ${d.field} `)\n        let stateLabel = popStatWrap.append('div').classed('label', true);\n        stateLabel.append('span').text(`Volatility of Population : `).style('font-weight', '900');\n        stateLabel.text(`Volatility of Population : ${d.type === 'discrete'? d.characterShifts : zero(d.popDeviation)}`);\n\n        SortPathsByTrait(d, pathData, main);\n    });\n\n    let pathGroups = renderPaths(pathData, main, 800);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n    let attData = formatAttributeData(pathData, scales, shownAttributes);\n\n    if(collapsed != 'true'){\n\n        let combinedAttGroup = pathGroups.append('g').classed('all-att-combo', true);\n        combinedAttGroup.datum((d,i)=> attData[i])\n        combinedAttGroup.attr('transform', `translate(${width + 180}, -9)`)\n        combinedAttGroup.append('rect')\n            .attr('width', 80)\n            .attr('height', 40)\n            .attr('fill', '#fff')\n            .style('fill-opacity', '0.6')\n            .style('stroke', 'gray')\n            .style('stroke-width', '0.7px');\n\n        let comboLineGroups = combinedAttGroup.selectAll('g.combo-lines').data((d, i)=> {\n            return d}).join('g').classed('combo-lines', true);\n    \n        let comboLine = continuousPaths(comboLineGroups.filter(f=> f[0].type === 'continuous'), collapsed, 80, 0.3, false);\n\n        pathGroups.append('text').text('Volatility').attr('transform', `translate(${1100}, ${30})`);\n        pathGroups.append('text').text('Val Range').attr('transform', `translate(${1200}, ${30})`);\n        // pathGroups.append('text').text('Min Val').attr('transform', `translate(${1190}, ${30})`);\n        // pathGroups.append('text').text('Max Val').attr('transform', `translate(${1290}, ${30})`);\n        // pathGroups.append('text').text('State Shifts').attr('transform', `translate(${1300}, ${30})`);\n\n    }\n   \n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (shownAttributes.length + 1))) +')');\n\n    let cGroups = drawContAtt(predictedAttrGrps, collapsed, width);\n    let dGroups = drawDiscreteAtt(predictedAttrGrps, collapsed, false, width);\n\n    if(collapsed != 'true'){\n\n        let compactLineG = cGroups.append('g').classed('compact-line', true);\n        compactLineG.attr('transform', `translate(${width + 40}, 0)`);\n        compactLineG.append('rect').attr('width', 80).attr('height', 40).classed('attribute-rect', true);\n    \n        let innerPaths = continuousArea(compactLineG.filter(f=> f[0].type === 'continuous'), collapsed, 80, 1);\n        compactLineG.on('mouseover', (d, i, n)=> {\n            let test = d3.select(n[i].parentNode.parentNode.parentNode).selectAll('g.combo-lines');\n            test.filter(f=> {\n                return f[0].field === d[0].field;\n            }).select('path')\n            .style('stroke', (s)=> s[0].color)\n            .style('opacity', 1);\n        }).on('mouseout', (d, i, n)=> {\n            let test = d3.select(n[i].parentNode.parentNode.parentNode).selectAll('g.combo-lines');\n            test.filter(f=> {\n                return f[0].field === d[0].field;\n            }).select('path')\n            .style('stroke', 'gray')\n            .style('opacity', 0.4);\n        });\n\n        var zero = d3.format(\".2n\");\n\n        let contDist = drawDistLines(compactLineG.filter(f=> f[0].type != 'continuous'));\n      \n        let volatilityGroups = cGroups.filter(f=> {\n            return f[0].type === \"continuous\"});\n      \n\n        let volatility = volatilityGroups.append('g').append('text').text(d=> zero(d[d.length - 1].volatility));\n        volatility.attr('transform', `translate(${970}, ${30})`);\n         let valRange = volatilityGroups.append('g').append('text').text(d=> zero(d[d.length - 1].extent[1] - d[d.length - 1].extent[0]));\n        valRange.attr('transform', `translate(${1075}, ${30})`);\n        // let minVal = volatilityGroups.append('g').append('text').text(d=> zero(d[d.length - 1].extent[0]));\n        // minVal.attr('transform', `translate(${1050}, ${30})`);\n        // let maxVal = volatilityGroups.append('g').append('text').text(d=> zero(d[d.length - 1].extent[1]));\n        // maxVal.attr('transform', `translate(${1150}, ${30})`);\n\n\n        ////DISCRETE CHAR SHIFTS\n        let shiftGroups = cGroups.filter(f=> {\n            return f[0].type != \"continuous\"});\n\n        let shiftVal = shiftGroups.append('g').append('text').text(d=> d[d.length - 1].characterShifts);\n        shiftVal.attr('transform', `translate(${975}, ${30})`);\n\n       \n    }\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, pathData, (shownAttributes.length * attributeHeight));\n\n    let leafStates = d3.selectAll('.discrete-leaf');\n    leafStates.on('click', (d, i)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#state-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.winState);\n            d3.select(\"#state-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-state\").on('click', ()=> {\n                leafStateFilter(d, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-state\").on('click', ()=> {\n                let data = getLatestData();\n                let test = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState === d.winState;\n                });\n\n                let notIt = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState != d.winState;\n                });\n            \n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test, notIt, scales);\n            });\n\n        }});\n\n    return pathGroups;\n\n}\n\nfunction drawDistLines(discG){\n\n    let comboDisc = discG.selectAll('g.states').data(d=> {\n        let states = d[0].map(m=> m.key).map(m=> {\n            let values = d.filter(f=> f.leaf != true).flatMap(v=> v.filter(f=> f.key === m));\n            return {key: m, 'value': values};\n        });\n        return states;\n    }).join('g').classed('states', true);\n\n    comboDisc.append('text').text(d=> d.key).style('font-size', '7px').style('fill', 'gray').attr('x', 83).attr('y', 3.5);\n\n    function round_to_precision(x, precision) {\n        var y = +x + (precision === undefined ? 0.5 : precision/2);\n        return y - (y % (precision === undefined ? 1 : +precision));\n    }\n\n    let comboStates = comboDisc.selectAll('g.state-node')\n    .data(d=> {\n        let toGroup = d.value.map((v, i, n)=> {\n            v.value = +v.value;\n            v.endLength = i < n.length - 1 ? n[i+1].combLength : maxTimeKeeper[maxTimeKeeper.length - 1];\n            return v;\n        });\n        return  Array.from(d3Array.group(toGroup, v=> round_to_precision(v.value, .005)));\n    }).join('g').classed('state-node', true);\n  \n    comboDisc.attr('transform', (d, i, n)=> {\n        let step = 40 / n.length;\n        return `translate(0, ${(i * step)+(step/2.2)})`});\n    \n        comboStates.append('rect')\n            .attr('width', (d, i)=>{\n                let vals = d[1]\n                let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0,80])\n                return (x(vals[vals.length-1].endLength) - x(vals[0].combLength)) - .5;\n            })\n            .attr('height', (d, i)=> {\n                let sizer = d3.scaleLinear().domain([0, 1]).range([0.2, 6]);\n                return sizer(d[0]);\n            })\n            .attr('fill', 'gray')\n            .attr('opacity', 0.4)\n            .attr('y', (d)=> {\n                let sizer = d3.scaleLinear().domain([0, 1]).range([0.2, 6]);\n                return (sizer(d[0]) / 2) * -1;\n            });\n\n        comboStates.attr('transform', (d, i)=> {\n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0,80])\n            return `translate(${x(d[1][0].combLength)},0)`;\n        });\n\n    return comboDisc;\n}\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 35)');\n        ///////////////////////////////////\n}\nexport function renderPaths(pathData, main, width){\n\n    let scales = getScales();\n\n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    \n    let nodeTooltipFlag = false;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n    let circleScale = d3.scaleLog().range([6, 12]).domain([1, d3.max(Object.values(branchFrequency))]);\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.style('width', '100%');\n    pathBars.attr('y', -12);\n\n    //////////\n    ///Selecting species\n    /////////\n    let pathAdd = pathGroups.append('g').classed(\"fas fa-search-plus\", true);\n    pathAdd.attr('transform', 'translate(15, 10)');\n    pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathAdd.append('text').text('+').attr('transform', 'translate(-5, 5)');\n    pathAdd.style('cursor', 'pointer');\n\n    pathAdd.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales, width);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected([d], notIt.data(), scales, width);\n        }\n    });\n\n    /////////\n    pathGroups.on('mouseover', function(d, i){\n\n      \n        let nodeNames = d.map(m=> m.node);\n       \n\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n         \n            return nodeNames.indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       let string = d.filter(f=> f.leaf === true)[0].node;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 25).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', width)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> {\n        return d}).join('g').attr('class', (d, i, n)=> {\n            return d3.select(n[n.length - 1]).data()[0].node + \" node\";\n        });\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 10)';});\n\n    nodeGroups.on('click', (d, i, n)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#branch-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.node);\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-node\").on('click', ()=> {\n                nodeFilter(d.node, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-node\").on('click', ()=> {\n                let data = getLatestData();\n                let test = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) > -1;\n                });\n                let notIt = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) === -1;\n                });\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n                pathSelected(test.data(), notIt.data(), scales, width);\n            });\n        }\n    });\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n}\nexport function renderAttributes(attributeWrapper, data, collapsed){\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> {\n        return data[i]}).join('g');\n    predictedAttrGrps.classed('predicated-attr-groups', true);\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n\n    let attrLabel = predictedAttrGrps.append('text').text(d=> {\n        return d[d.length - 1].label ? d[d.length - 1].label : d[d.length - 1].attrLabel\n    });\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    return predictedAttrGrps;\n\n}\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p[valueParam] > data[i-step][valueParam]) ? 1 : 18;\n        p.change = test;\n    })\n}\nasync function continuousArea(innerTimeline, collapsed, width){\n\n     //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n     let height = (collapsed === 'true')? dimensions.collapsedHeight : dimensions.rectHeight;\n     var lineGen = d3.area()\n     .x(d=> {\n         let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n         let distance = x(d.combLength);\n         return distance; })\n     .y1(d=> {\n         let y = d.scales.yScale;\n         y.range([40, 0]);\n         if(collapsed === 'true'){\n             return d.change;\n         }else{\n             return y(d.values[valueParam]);\n         }\n     }).y0(d=> {\n        let y = d.scales.yScale;\n        y.range([40, 0]);\n        return 40\n    });\n \n     let innerPaths = innerTimeline.append('path')\n     .attr(\"d\", lineGen)\n     .style('fill', (d)=> d[0].color)\n     .style('stroke-width', '1px')\n     .style('stroke', (d)=> d[0].color)\n     .style('fill-opacity', 0.3);\n \n     return innerPaths;\n\n}\nasync function continuousPaths(innerTimeline, collapsed, width, opacity, colorBool){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? dimensions.collapsedHeight : dimensions.rectHeight;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n        let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n       \n        //let y = generateTraitScale([scalingValues(d.scales.min), scalingValues(d.scales.max)], [height, 0])\n        let y = generateTraitScale([d.scales.min, d.scales.max], [height, 0])\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.values[valueParam]);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> {\n        return colorBool ? d[0].color : 'gray'\n    })\n    .style('opacity', opacity);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\nexport function drawContAtt(predictedAttrGrps, collapsed, width){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return (d[d.length - 1] != undefined) ? d[d.length - 1].type === 'continuous' : d.type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? dimensions.collapsedHeight : dimensions.rectHeight;\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, collapsed, width, 1, true);\n\n    ////////\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);\n    attribRectCont.attr('width', width);\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n        let y = generateTraitScale([d.scales.min, d.scales.max], [attributeHeight-3, 0]);\n       // let y = generateTraitScale([scalingValues(d.scales.min), scalingValues(d.scales.max)], [attributeHeight-3, 0])\n\n        // let up = valueParam === 'realVal' ? +d.values.upperCI95 : +d.values.logUpper;\n        // let low = valueParam === 'realVal' ? +d.values.lowerCI95 : +d.values.logLower;\n      \n        let range = 0;\n        if(d.leaf != true){ \n            range = Math.abs(y(+d.values.lowerCI95) - y(+d.values.upperCI95)); \n        }\n\n        let barHeight = (collapsed === 'true') ? dimensions.collapsedHeight : range;\n        return barHeight;\n    });\n\n    rangeRect.attr('transform', (d, i)=> {\n\n        let y = d3.scaleLinear();\n        // let min = scalingValues(d.scales.min);\n        // let max = scalingValues(d.scales.max);\n        let min = d.scales.min;\n        let max = d.scales.max;\n\n        y.domain([min, max]);\n        y.range([attributeHeight, 0]).clamp(true);\n\n        //let up = valueParam === 'realVal' ? +d.values.upperCI95 : +d.values.logUpper;\n       // let up = valueParam === 'realVal' ? +d.values.upperCI95 : +d.values.logUpper;\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(+d.values.upperCI95);\n       \n        return 'translate(0, '+ Math.abs(move) +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.values[valueParam]);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.values[valueParam]);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', dimensions.rectWidth).attr('height', 4)\n        .attr('transform', (d, i)=> {\n            let y = generateTraitScale([d.scales.min, d.scales.max], [attributeHeight, 0])\n            return 'translate(0, '+ y(d.values[valueParam]) +')';})\n        .attr('fill', d=> d.color).classed('val-bar', true);\n    }\n\n    /////AXIS ON HOVER////\n    innerBars.on('mouseover', (d, i, n)=> {\n        let y = generateTraitScale([d.scales.min, d.scales.max], [0, attributeHeight]);\n        //let y = generateTraitScale([scalingValues(d.scales.min), scalingValues(d.scales.max)], [0, attributeHeight]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n\n        let f = d3.format(\".3f\");\n\n        let up = valueParam === 'realVal' ? +d.values.upperCI95 : +d.values.logUpper;\n        let low = valueParam === 'realVal' ? +d.values.lowerCI95 : +d.values.logLower;\n\n        tool.html('mean: '+f(d.values[valueParam]) +\"</br>\"+\"</br>\"+ 'upperCI: '+ f(up) +\"</br>\"+\"</br>\"+ 'lowerCI: '+ f(low))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n          \n        tool.style('height', 'auto');\n       \n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('g.y-axis')\n        d3.select(n[i]).select('g.y-axis').remove();\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    return predictedAttrGrps;\n   \n}\nexport function findMaxState(states, offset){\n    let maxP = d3.max(states.map(v=> v.values.realVal));\n    let notMax = states.filter(f=> f.values.realVal != maxP);\n    let winState = states[states.map(m=> m.values.realVal).indexOf(maxP)]\n    winState.other = notMax;\n    winState.offset = offset;\n    return winState;\n}\n    //BEGIN TEST\nfunction drawLeaves(attWraps, groupBy){\n    //THIS IS HARD CODED AND SHOULD NOT BE\n\n    let numSpecies = 100;\n    let height = 40;\n\n    //CONTINUOUS \n    let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap-first.continuous').data(d=> {\n            let totalVal = attWraps.data().filter(f=> f.label === d.label).map(m=> m.data);\n            let totalArray = totalVal.flatMap(p=> p.flatMap(f=> f.paths[f.paths.length - 1][valueParam]));\n\n            let max = d3.max(totalArray);\n            let min = d3.min(totalArray);\n            let totalMean = d3.mean(totalArray);\n        \n            let x = d3.scaleLinear().domain([min, max]).range([0, 200]);\n            let newVal = d.data.map((m, i)=> {\n                m.index = i;\n                return {'value': m.paths[m.paths.length - 1].values[valueParam], 'x': x, 'min': min, 'max': max, 'species':m.species };\n            });\n            let groupMean = d3.mean(newVal.map(v=> v.value));\n            return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n        }).join('g').classed('observe-wrap-first continuous', true);\n        \n        leafWraps.attr('transform', 'translate(850, 0)');\n        \n        let xAxis = leafWraps.append('g').classed('axis-x', true);\n        xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n        xAxis.each((d, i, nodes)=> {\n            d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n        });\n        \n        let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n        \n        let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n        \n        let distCircGroupOut = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n        let distcirclesOut = distCircGroupOut.selectAll('circle').data(d=> d.dotVals).join('circle');\n        distcirclesOut.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n        //DISCRETE//\n        let leafWrapsD = attWraps.filter(f=> f.type === 'discrete').selectAll('g.observe-wrap-first.discrete').data(d=> {\n          return [d];\n        }).join('g').classed('observe-wrap-first discrete', true);\n\n        let rects = leafWrapsD.filter(f=> {\n            return f.label != groupBy;\n        }).selectAll('rect').data(d=> {\n            let groupedData = d3Array.groups(d.data.map(m=> m.paths[m.paths.length - 1]), d=> d.state);\n            groupedData.sort((a, b)=> b[1].length - a[1].length)\n            return groupedData;\n        }).join('rect').attr('height', 15).attr('width', (d, i, n)=>{\n            let scale = d3.scaleLinear().domain([0, d3.sum(d3.selectAll(n).data().map(m=> m[1].length))])\n            .range([5, 170]);\n            d.width = scale(d[1].length);\n            return scale(d[1].length);\n        });\n\n        rects.attr('x', (d, i, n)=> {\n            if(i === 0){ return 0}\n            else {\n                d3.selectAll(n).filter((f, j)=> j< i);\n                let move = d3.sum(d3.selectAll(n).filter((f, j)=> j< i).data().map(m=> m.width));\n                return move;}\n        }).attr('y', 12)\n\n        rects.attr('fill', d=> d[1][0].color);\n\n        rects.on('mouseover', (d, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            \n            tool.html(d[0] + \"</br>\" + d[1].length)\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY + 20) + \"px\");\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 0.3);\n          \n        }).on('mouseout', (s, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 1)\n        })\n\n        leafWrapsD.attr('transform', 'translate(850, 0)');\n\n        let ratio = leafWrapsD.filter(f=> f.label === groupBy)\n            .selectAll('text').data(d=> [d]).join('text').text(d=> {\n                let paths = d.data[d.data.length - 1].paths;\n                return `${paths[paths.length - 1].state}: ${d.data.length} / ${numSpecies}`\n            });\n        ratio.style('text-anchor', 'middle')\n        ratio.style('font-size', '12px')\n        ratio.attr('x', 90).attr('y', 25)\n        \n    }\nexport function drawGroups(stateBins, scales){\n    \n    let groupedBool = d3.select('#show-drop-div-group').attr('value', 'grouped');\n    \n    let height = 40;\n    let selectedTool = d3.select('#selected');\n    selectedTool.selectAll('*').remove();\n \n    let main = d3.select('#main');\n    main.style('padding-top', 0);\n\n    d3.select('#toolbar').append('text').text(stateBins[0].field)\n\n    let splitOnArray = [{'field':'None'}].concat(scales.filter(f=> (f.field != stateBins[0].field) && f.type === 'discrete'));\n    let dropOptions = dropDown(d3.select('#toolbar'), splitOnArray, 'Split On','show-drop-div-group');\n\n    ////THIS SPLITS THE DATA////\n    dropOptions.on('click', (d, i, n)=> {\n        d3.select('#toolbar').append('text').text(d.field);\n        \n        if(d.type === 'discrete'){\n            let newBins = stateBins.map(state=> {\n                let newBinData = d.scales.map(sc=> {\n                    let field = sc.field;\n                    let name = sc.scaleName;\n                    let newData = state.data.filter(pa=> {\n                        let leaf = pa.filter(le=> le.leaf === true)[0];\n                        return leaf.attributes[field].winState === name;\n                    });\n                    return {'field': field, 'state': name, 'data': newData }\n                });\n                state.data = newBinData;\n                return state;\n            });\n\n            //////RENDERING NEED TO SEPARATE OUT/////\n           \n           let main = d3.select('#main');\n           main.selectAll('*').remove();\n           main.style('padding-top', '40px');\n           let firstGroupDiv = main.selectAll('div.first-group').data(newBins).join('div').classed('first-group', true);\n           \n           let firstGroupSvg = firstGroupDiv.append('svg');\n           firstGroupSvg.attr('height', s=> (s.data.length*270));\n           let firstGroup = firstGroupSvg.append('g');\n          \n           let firstLabel = firstGroup.append('text').text(f=> f.state).attr('transform', 'translate(10, 10)');\n\n           let secondGroup = firstGroup.selectAll('g.second-group').data(g=> {\n               let newGroups = g.data.map((m)=>{\n                   let newM = {};\n                   newM.first = [g.field, g.state];\n                   newM.second = [m.field, m.state];\n                   newM.data = m.data\n                   newM.leaves = m.data.flatMap(path=> path.filter(f=> f.leaf === true));\n                   return newM\n               });\n               return newGroups}).join('g').classed('second-group', true);\n\n           secondGroup = secondGroup.filter(f=> f.data.length > 0);\n           secondGroup.attr('transform', (s, i)=> 'translate(30,'+(20 + (i * 270))+')');\n\n           secondGroup.each((s, i, n)=> {\n            let branchBar = drawBranchPointDistribution(s.data, d3.select(n[i]));\n            branchBar.select('rect').attr('x', -80).attr('fill','gray');\n            branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n            \n            branchBar.select('.leaf-label').append('text').text((t, i) =>': '+ t.data.length).attr('transform', 'translate(45, 0)');\n            branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n    \n            branchBar.select('line').attr('stroke', '#fff');\n\n            let groupLabels = d3.select(n[i]).append('g');\n\n            //groupLabels.\n            let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n            pathAdd.attr('transform', 'translate(-10, 15)');\n            pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n            pathAdd.append('text').text('+').attr('transform', 'translate(-5, 3)').attr('fill', 'gray');\n        \n            pathAdd.style('cursor', 'pointer');\n\n            pathAdd.on('click', ()=> {\n                let other = d3.selectAll(n).filter((f,j)=> j != i);\n                renderComparison(s, other.data(), d3.select('#selected'), scales);\n            });\n\n            let stateLabel = groupLabels.append('text').text((s, i)=> s.second[1]);\n            stateLabel.attr('transform', (d, i)=> 'translate(3, 20)');\n            stateLabel.attr('fill', '#fff');\n           });\n\n           let innerGroup = secondGroup.filter(f=> f.data.length > 0).append('g').classed('inner-wrap', true);\n           innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n       \n           let attWraps = innerGroup.selectAll('.att-wrapper').data((d)=> {\n               let atts = formatAttributeData(d.data, scales, null);\n             \n               let attDataComb = atts[0].map((att, i)=> {\n                  \n                   let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n\n                   att[att.length - 1].offset = 0;\n                   let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n                   for(let index = 1; index < atts.length; index++ ){\n                       let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                       let last = atts[index][i].length - 1\n                       atts[index][i][last].offset = (index * 8);\n                       attribute.data.push({'species': species, 'paths': atts[index][i]});\n                   }\n                   \n                   return attribute;\n               });\n\n              let mappedDis = attDataComb.map(dis=> {\n                  dis.data = dis.data.map((spec, i)=> {\n                      spec.paths = spec.paths.map(m=> {\n                            if(dis.type === 'discrete'){\n                                let offset = 5 * i;\n                                let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                                return maxProb;\n                            }else{\n                                return m;\n                            }\n                        });\n                   return spec;\n                  });\n        \n                  dis.leaves = dis.data.flatMap(f=> f.paths.filter(p=> p.leaf === true));\n                  return dis;\n              });\n              return mappedDis;\n           }).join('g').classed('att-wrapper', true);\n\n           let innerWrapRect = attWraps.append('rect').attr('width', 800);\n\n            innerWrapRect.attr('height', height);\n            innerWrapRect.style('fill', '#fff');\n            innerWrapRect.style('stroke', 'gray');\n\n            attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n            wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n            svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n            let labels = attWraps.append('text')\n            .text(d=> d.label)\n            .style('text-anchor', 'end')\n            .style('font-size', 11)\n            labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n////WORKING ON STATE SHIFT VIEW///////\n            let shiftWraps = attWraps.filter(f=> f.type === 'discrete').selectAll('g.shift-wrap').data(d=> {\n       \n                let test = d.data.flatMap(m=> m.paths.filter((f, i)=> {\n                    if(i===0) return (i === 0);\n                    if(i > 0) return (m.paths[i-1].state != f.state)\n                    if(i < m.paths.length - 1) return (m.paths[i+1].state != f.state);\n                }));\n             \n                return [test];\n            }).join('g').classed('shift-wrap', true);\n\n            shiftWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxisShift = shiftWraps.append('g').classed('axis-x', true);\n            xAxisShift.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxisShift.each((d, i, nodes)=> {\n                let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 200]);\n                d3.select(nodes[i]).call(d3.axisBottom(x).ticks(5));\n            });\n\n            let circGroupShift = shiftWraps.append('g').attr('transform', 'translate(0, 20)');\n\n            let shiftCircles = circGroupShift.selectAll('circle.shift').data(d=> d).join('circle').classed('shift', true);\n            shiftCircles.attr('r', 4).attr('cx', (d, i)=> {\n                let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 200]);\n                return x(d.combLength)\n            });\n            shiftCircles.attr('fill', d=> d.color).style('opacity', 0.4);\n\n//////DRAW OBSERVED DISTRIBUTIONS/////\n            let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap').data(d=> {\n                let totalVal = attWraps.data().filter(f=> f.label === d.label).flatMap(m=> m.leaves.map(l=> l[valueParam]));\n                let max = d3.max(totalVal);\n                let min = d3.min(totalVal);\n                let totalMean = d3.mean(totalVal);\n\n                let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n                let newVal = d.leaves.map((m, i)=> {\n                    m.index = i;\n                    return {'value': m[valueParam], 'x': x, 'min': min, 'max': max, 'species':m.species };\n                });\n                let groupMean = d3.mean(newVal.map(v=> v.value));\n                return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n            }).join('g').classed('observe-wrap', true);\n\n            leafWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxis = leafWraps.append('g').classed('axis-x', true);\n            xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxis.each((d, i, nodes)=> {\n                d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n            });\n\n            let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n\n            let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n\n            let distCircGroup = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n            let distcircles = distCircGroup.selectAll('circle').data(d=> d.dotVals).join('circle');\n            distcircles.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n            distcircles.on('mouseover', (d, i, n)=> {\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n           \n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n\n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n\n            ////DRAW SPECIES GROUPS IN THE ATTRIBUTES\n\n            let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n                d.data = d.data.map(m=> {\n                    m.type = d.type;\n                    return m;\n                });\n                return d.data;\n            }).join('g').classed('species', true);\n\n            let lineGenD = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                    })\n                .y(d=> {\n                    let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n                    return y(d.realVal);\n                });\n\n            let lineGenC = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                })\n                .y(d=> {\n                   \n                    //let y = generateTraitScale([scalingValues(d.scales.min), scalingValues(d.scales.max)], [height-2], 1);\n                    let y = generateTraitScale([d.scales.min, d.scales.max], [height-2], 1);\n                    return y(d.values[valueParam]) + 2;\n                });\n\n            let innerStatePaths = speciesGrp.append('path')\n                .attr(\"d\", d=> {\n                        return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n                    })\n                .attr(\"class\", (d, i)=> {\n                        return d.species + \" inner-line\"})\n                .style('stroke-width', 0.7)\n                .style('fill', 'none')\n                .style('stroke', 'gray');\n\n            innerStatePaths.on('mouseover', (d, i, n)=> {\n               \n                d3.select(n[i]).classed('selected', true);\n                distcircles.filter(f=> f.species === d.species).classed('selected', true).style('opacity', 1);\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n                \n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n            let disGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'discrete';\n            });\n\n            let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n            branchGrpDis.attr('transform', (d)=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                    let distance = x(d.combLength);\n                    return 'translate('+distance+', 0)';\n            });\n\n            let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n                let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n                return y(d.realVal);\n            }).attr('cx', 5);\n\n            bCirc.classed('win-state', true);\n\n            bCirc.attr('fill', (d, i, n)=> {\n                if(i === 0){\n                    return d.color;\n                }else if(i === n.length - 1){\n                    if(d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }else{\n                    if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }\n            });\n\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n    branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n        //  let min = scalingValues(scale.min);\n        //  let max = scalingValues(scale.max);\n         let min = scale.min;\n         let max = scale.max;\n         let y = generateTraitScale([min, max], [height-3, 0]);\n        // let y = d3.scaleLinear().domain([min, max]).range([height-3, 0]);\n         return y(d[valueParam]);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n\n     confiBars\n     .attr('width', dimensions.rectWidth)\n     .attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let min = scale.min;\n         let max = scale.max;\n         let y = generateTraitScale([min, max], [height, 0]);\n\n         return y(+d.values.lowerCI95) - y(+d.values.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     });\n     confiBars.style('opacity', 0.1);\n           \n          \n    }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        selectedTool.select('#show-drop-div-group').classed('show', false);\n    });\n    /////END SPLIT VIEW//////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    svg.selectAll('*').remove();\n\n    svg.attr('height', (stateBins.length * (height + 20)));\n    svg.append('g').attr('transform', 'translate(500, 40)').append('text').text(stateBins[0].field)\n\n    let wrappers = svg.selectAll('.grouped').data(stateBins).join('g').classed('grouped', true);\n    wrappers.each((d, i, n)=> {\n        let branchBar = drawBranchPointDistribution(d.data, d3.select(n[i]));\n        branchBar.select('rect').attr('x', -80).attr('fill','gray');\n        branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n        \n        branchBar.select('.leaf-label').append('text').text((d, i) =>': '+ d.data.length).attr('transform', 'translate(45, 0)');\n        branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n\n        branchBar.select('line').attr('stroke', '#fff');\n    });\n\n    let groupLabels = wrappers.append('g');\n   \n\n     //groupLabels.\n     let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n     pathAdd.attr('transform', 'translate(20, -5)');\n     pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n     pathAdd.append('text').text('+').attr('transform', 'translate(5, 3)').attr('fill', 'gray');\n \n     pathAdd.style('cursor', 'pointer');\n\n     pathAdd.on('click', (d, i, n)=> {\n         let other = d3.selectAll(n).filter((f,j)=> j != i);\n         renderComparison(d, other.data(), d3.select('#selected'), scales);\n     });\n\n     groupLabels.append('text').text((d, i)=> d.state);\n     groupLabels.attr('transform', (d, i)=> 'translate(40, 16)');\n     groupLabels.style('text-anchor', 'end');\n     groupLabels.attr('fill', '#fff');\n\n    let innerGroup = wrappers.append('g').classed('inner-wrap', true);\n    innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n    let attWraps = innerGroup.selectAll('.att-wrapper').data((d, i)=> {\n        let atts = formatAttributeData(d.data, scales, null);\n\n       \n        let attDataComb = atts[0].map((att, i)=> {\n            let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < atts.length; index++ ){\n                let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                let last = atts[index][i].length - 1;\n                atts[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': atts[index][i]})\n            }\n            return attribute;\n        });\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n       return mappedDis;\n    }).join('g').classed('att-wrapper', true);\n\n    let innerWrapRect = attWraps.append('rect').attr('width', 800);\n    innerWrapRect.attr('height', height);\n    innerWrapRect.style('fill', '#fff');\n    innerWrapRect.style('stroke', 'gray');\n\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n    wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n    \n    svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n       //END EXPERIMENT\n    drawLeaves(attWraps, stateBins[0].field);\n\n    let labels = attWraps.append('text')\n    .text(d=> d.label)\n    .style('text-anchor', 'end')\n    .style('font-size', 11)\n    labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n    let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n        d.data = d.data.map(m=> {\n            m.type = d.type;\n            return m;\n        });\n        return d.data;\n    }).join('g').classed('species', true);\n\n    let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n           return y(d.values.realVal);\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([height-2, 1]);\n           return y(d.values.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n        d3.select(n[i]).classed('selected', true);\n    }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).classed('selected', false);\n    });\n\n    let disGroup = speciesGrp.filter(sp=> {\n     return sp.type === 'discrete';\n     });\n\n    let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 800]);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n     });\n\n    let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n         let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n         //return y(d.realVal) + d.offset;\n         return y(d.values.realVal);\n     }).attr('cx', 5);\n\n     bCirc.classed('win-state', true);\n\n     bCirc.attr('fill', (d, i, n)=> {\n        if(i === 0 || i === n.length - 1){\n            return d.color;\n            /*\n        }else if(i === n.length - 1){\n            if(d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }*/\n        }else{\n            if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }\n        }\n     });\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 750]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n     branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     })\n     confiBars.style('opacity', 0.1);\n\n     /////HIGHLIGHTING NODES IN A TREE ON HOVER//////\n     d3.selectAll('.att-wrapper').selectAll('.branch').on('mouseover', (d, i, n)=> {\n         let treeNode  = d3.select('#sidebar').selectAll('.node');\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', true);\n      \n    }).on('mouseout', (d, i, n)=> {\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', false);\n    })\n     \n}\nexport function drawDiscreteAtt(predictedAttrGrps, collapsed, bars, width){\n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', width).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        \n        let disct = d;\n       \n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n             return disct.map(m=> m.leaf ? m : m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width-10]);\n        let distance = x(d.combLength);\n        return distance + 7;})\n    .y(d=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        return d.value ? y(d.value) : y(1);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", (d, i)=> d[0].species + \" inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;\n    });\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);\n    attribRectDisc.attr('width', width);\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g');\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width-10]);\n        if(d[0]){\n           let distance = x(d[0].combLength);\n            return 'translate('+distance+', 0)';\n        }else{\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('rect').attr('width', dimensions.rectWidth).attr('height', attributeHeight).attr('opacity', 0);\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n        /////AXIS ON HOVER////\n    attributeNodesDisc.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, attributeHeight]);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n        })\n\n    attributeNodesDisc.attr('class', (d, i, n)=> {\n        let path = d3.selectAll(n).data();\n        return path[path.length - 1].species;\n    }).classed('attribute-node-discrete', true);\n\n    if(bars === false){\n\n        let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n            return d;\n        }).join('circle').classed('dots', true);\n        \n        stateDots.attr('cx', 10)\n        .attr('cy', (d)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n            return d.realVal? y(d.realVal) : y(d.value);\n        }).attr('r', (d, i, n)=> {\n            return d.value > .5 ? 7 : 3;\n        });\n        \n        stateDots.style('fill', (d, i, n)=> {\n            return d.value > .5 ? d.color.color : 'gray';\n        }).style('opacity', '0.8')\n    \n\n        ////NEED TO ADD COLOR ON STATE CHANGE////\n    \n        stateDots.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n        ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n    \n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }else{\n        attributeNodesDisc.filter((att, i)=> {\n            return att[0] != undefined;}).append('rect').attr('height', attributeHeight).attr('width', dimensions.rectWidth).attr('fill', '#fff')\n        let stateBars = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dis-rect').data(d=> {\n            return d;\n        }).join('rect').classed('dis-rect', true);\n\n        stateBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            return y(d.realVal);\n        });\n\n        stateBars.attr('fill', (d, i)=> d.color);\n        stateBars.attr('opacity', '0.7');\n        stateBars.attr('stroke', '#fff');\n        stateBars.attr('transform', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            let probability = d3.selectAll(n).data().sort((a, b)=> b.realVal - a.realVal);\n            let chosenIn = probability.map(p=> p.state).indexOf(d.state);\n         \n            if(chosenIn === 0){\n                    return 'translate(0,0)';\n            }else{\n                ///need to make this a reduce function///\n                let valueAdd = 0;\n                    for(let step = 0; step < chosenIn; step++){\n                        valueAdd = valueAdd + probability[step].realVal;\n                    }\n                return 'translate(0,'+(y(valueAdd))+')';\n            }\n        });\n\n        stateBars.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n\n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }\n\n    return attributeNodesDisc;\n}\n\n","import * as d3 from \"d3\";\nimport { renderDistStructure, binGroups, continuousHistogram, mirrorlineGen } from './distributionView';\nimport { getLatestData } from \"./filterComponent\";\nimport { addClade, cladeKeeper } from \"./cladeMaker\";\nimport { updateCladeDrop } from \"./toolbarComponent\";\n\n\nexport let brushArray = [];\n\nexport const brushColors = [\n    '#FE6D5E', '#85C1E9', '#A3E4D7' \n]\n\nexport function addBrushables(bins, continDist){\n\n    let startPos = 0;\n    let endPos = 0;\n    let brushOb = null;\n    let mouseBool = false;\n\n    bins.on('mousedown', (d, i, n)=> {\n\n        mouseBool = true;\n\n        let scale = d3.scaleLinear().domain(d.domain).range([0, 80]);\n        \n        let ind = brushArray.length + 1;\n        let rectGroup = d3.select(n[i]).append('g').classed(`group-${ind}`, true);\n        let dragPos = d3.mouse(n[i]);\n        startPos = dragPos[1];\n        brushOb = {key: `${d.key}-${d.index}-${ind}`, trait:d.key, brush: rectGroup, 'scale': scale, color: brushColors[ind-1]};\n        brushArray.push(brushOb);\n        \n        let rect = rectGroup.append('rect')\n            .classed(`rect-${ind}`, true)\n            .attr('height', 10)\n            .attr('width', 10)\n            .attr('opacity', 0.5)\n            .attr('fill', brushOb.color)\n            .attr('transform', `translate(0, ${dragPos[1]})`);\n    });\n\n    bins.on('mousemove', (d, i, n)=> {\n\n        let dragPos = d3.mouse(n[i]);\n        if(mouseBool === true){\n\n            brushOb.brush.select('rect').attr('height', (dragPos[1] - startPos));\n\n        }\n    })\n\n    bins.on('mouseup', (d, i, n)=> {\n       \n        mouseBool = false;\n        let dragPos = d3.mouse(n[i]);\n        endPos = dragPos[1];\n\n        var zero = d3.format(\".3n\");\n       \n        let filterData = d.data.filter(f=> f.values.realVal >= brushOb.scale.invert(endPos) && f.values.realVal <= brushOb.scale.invert(startPos));\n        let test = continuousHistogram(filterData);\n\n        test.maxCount = d3.sum(d.bins.map(m=> m.length));\n\n        //////EXPERIMENTING WITH BRUSH DRAW DISTRIBUTIONS////\n        let brushedDist = d3.select(n[i].parentNode)\n            .selectAll('g.distribution-too')\n            .data([test])\n            .join('g')\n            .classed('distribution-too', true);\n\n        brushedDist\n        .attr('transform', 'translate(0, 0) rotate(90)');\n\n        let path = brushedDist.append('path')\n        .attr('d', mirrorlineGen);\n\n        path.attr(\"fill\", brushOb.color)\n        .attr('fill-opacity', 0.5)\n            .style('stroke', brushOb.color);\n\n        \n        let otherBins = findNodesOtherTraits(d, brushOb, filterData, continDist);\n        let descendBins = findDescendValues(d, brushOb, [endPos, startPos], continDist);\n       \n        let treenodeOb = highlightTree(filterData, descendBins, brushOb);\n       \n        addBadge(brushOb, [zero(brushOb.scale.invert(endPos)), zero(brushOb.scale.invert(startPos))], path, otherBins, descendBins, treenodeOb, filterData);\n      \n    });\n}\n\nfunction highlightTree(nodes, descendBins, brushOb){\n    let treenodes = d3.select('#sidebar').select('.tree-svg').selectAll('.node').filter(f=> {\n        let names = nodes.map(m=> m.node);\n        return names.indexOf(f.data.node) > -1});\n    let descendNodes = d3.select('#sidebar').select('.tree-svg').selectAll('.node').filter(f=> {\n        let names = descendBins.data().flatMap(m=> m.data.map(d=> d.node));\n        return names.indexOf(f.data.node) > -1});\n    let descendLinks = d3.select('#sidebar').select('.tree-svg').selectAll('.link').filter(f=> {\n        let names = descendBins.data().flatMap(m=> m.data.map(d=> d.node));\n        return names.indexOf(f.data.node) > -1});\n    treenodes.select('circle').attr('fill', brushOb.color).attr('r', 5).style('stroke-width', '1px').style('stroke', 'gray');\n    descendNodes.select('circle').attr('fill', brushOb.color).attr('r', 5);\n    //descendLinks.style('stroke', brushOb.color);\n    return {'treenodes': treenodes, 'descendNodes':descendNodes, 'descendLinks': descendLinks};\n}\n\nfunction findNodesOtherTraits(data, brushOb, filterData, continDist){\n\n    let nodeNames = filterData.map(m=> m.node);\n\n    let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n\n    otherBins.each((b, i, n)=> {\n            \n        let test = continuousHistogram(b.data.filter(f=> nodeNames.indexOf(f.node) > -1) );\n           \n        test.maxCount = d3.sum(b.bins.map(m=> m.length));\n          \n        let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n            .data([test])\n            .join('g')\n            .classed('distribution-too', true);\n\n        otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n        let path = otherDist.append('path').attr('d', mirrorlineGen);\n        path.attr(\"fill\", brushOb.color).attr('fill-opacity', 0.5)\n            .style('stroke', brushOb.color);\n\n    });\n\n    return otherBins;\n}\nfunction findDescendValues(data, brushOb, valueRange, continDist){\n\n    let descendBins = continDist.filter(f=> {\n        return (f.index > data.index) && (f.key === data.key)});\n\n    descendBins.each((b, i, n)=> {\n\n        let test = b.data.filter(f=> {\n            return (f.values.realVal > brushOb.scale.invert(valueRange[0])) && (f.values.realVal < brushOb.scale.invert(valueRange[1]));\n            });\n\n         let testH = continuousHistogram(test);\n       \n         testH.maxCount = d3.sum(b.bins.map(m=> m.length));\n      \n        let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n        .data([testH])\n        .join('g')\n        .classed('distribution-too', true);\n\n        otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n        let path = otherDist.append('path').attr('d', mirrorlineGen);\n        path.attr(\"fill\", brushOb.color).attr('fill-opacity', 0.5)\n        .style('stroke', brushOb.color);\n    });\n\n    return descendBins;\n\n}\n\nfunction addBadge(brushOb, brushedDomain, dist, otherBins, descendBins, treenodeOb, filterData){\n    d3.select('#toolbar').append()\n\n    let badge = d3.select('#toolbar')\n    .append('span')\n    .attr('id', brushOb.key)\n    .classed('brush-span', true)\n    .classed('badge badge-secondary', true)\n    .style('background', brushOb.color)\n    .datum({brush:brushOb})\n    .text(`${brushOb.trait}:${brushedDomain[0]} - ${brushedDomain[1]}`)\n    .style('margin-left', '25px');\n\n    let nodeNames = filterData.map(m=> m.node);\n\n    let species = getLatestData().filter(f=> {\n        let nodes = f.map(n=> n.node).filter(no => nodeNames.includes(no));\n        return nodes.length > 0;\n    }).flatMap(s=> s[s.length - 1].node);\n\n    badge.on('click', ()=> {\n\n        let tool = d3.select('#copy-tooltip');\n\n        tool.classed('hidden') ? tool.classed('hidden', false) : tool.classed('hidden', true);\n\n        tool.style(\"left\", (d3.event.pageX) + \"px\")\n        .style(\"top\", (d3.event.pageY - 28) + \"px\")\n\n        tool.select('button').on('click', ()=> {\n\n            tool.classed('hidden', true);\n        \n            let textIn = d3.select('#copy-input');\n            textIn.select('#copy-input-text').attr('value', species)\n\n            textIn.classed('hidden', false);\n\n            textIn.style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n\n            textIn.select('button').on('click', ()=> {\n                textIn.classed('hidden', true);\n                let copyText = document.getElementById(\"copy-input-text\");\n                copyText.select();\n                copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n                document.execCommand(\"copy\");\n\n               \n                alert(\"Copied the text: \" + copyText.value);\n\n            });\n\n            textIn.select('#make-clade-copy').on('click', ()=> {\n               \n                textIn.classed('hidden', true);\n                let name = `Group-Brush-${species.length}`;\n                addClade(name, getLatestData().filter(f=> species.indexOf(f[f.length - 1].node) > -1), []);\n\n                //growSidebarRenderTree(null);\n                let ul = d3.select('div#clade-show').selectAll('ul');\n                updateCladeDrop(ul, cladeKeeper[cladeKeeper.length - 1]);\n            });\n\n        });\n    });\n\n    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n    xOut.on('click', (d, i, n)=> {\n        event.stopPropagation();\n        removeBrush(d.brush);\n        d3.select(n[i].parentNode).remove();\n        dist.remove();\n        otherBins.selectAll('.distribution-too').remove();\n        descendBins.selectAll('.distribution-too').remove();\n        treenodeOb.treenodes.selectAll('circle').attr('fill', 'gray').attr('r', 3).style('stroke-width', '0px');\n        treenodeOb.descendNodes.selectAll('circle').attr('fill', 'gray').attr('r', 3);\n        treenodeOb.descendLinks.style('stroke', 'gray');\n    \n    });\n}\n\nfunction removeBrush(brushOb){\n\n    brushOb.brush.remove();\n    brushArray = brushArray.filter(f=> f.key != brushOb.key);\n\n}\n\nexport function removeAllBrushes(){\n\n    d3.selectAll('.distribution-too').remove();\n    d3.selectAll('.brush-span').remove();\n\n\n}","\nimport '../styles/index.scss';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster, getLatestData, getScales} from './filterComponent';\nimport { calculatedScalesKeeper } from '.';\nimport { drawBranchPointDistribution, dimensions, defaultBarColor, mirrorlineGen, lineGen, selectedClades, binGroups, renderDistStructure } from './distributionView';\nimport { renderTree } from './sidebarComponent';\n\nconst compareColors = [{light: '#F8C471', dark: '#F39C12'}, {light: '#A3E4D7', dark: '#17A589'}]\n\n\nexport function renderDistributionComparison(div, data, branchScale){\n  \n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n  \n    let divWrap = div.append('div').attr('id', 'compare-wrap');\n\n    let groupHeader = divWrap.append('div').classed('compare-header', true).style('margin', 'auto');\n\n    let textDiv = groupHeader.append('div').attr('height', 50).attr('width', 200).style('margin-left', '460px');\n    let branchPointSvg  = groupHeader.append('svg');\n\n    let pointData = {paths: data[0].paths.concat(data[1].paths), groupBins: data[0].groupBins};\n    let branchBar = drawBranchPointDistribution(pointData, branchPointSvg);\n    branchBar.attr('transform', 'translate(-30, 10)');\n\n    //'#DCD4D4'\n\n    branchBar.selectAll('rect.bin').attr('stroke', '#fff').attr('stroke-width', '3px');\n    let pointGroups = branchBar.selectAll('g.branch-points');\n  \n    let xOut = groupHeader.append('div')\n    .style('position', 'absolute')\n    .style('left', '5px')\n    .style('top', '65px')\n    .append('i')\n    .classed('close fas fa-times', true)\n    .style('padding-left', '10px');\n    \n    xOut.on('click', (d, i, n)=> {\n        divWrap.remove();\n        selectedClades.push(new Array());\n       \n        let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n            return li[j].checked === true});\n\n        let groups = test.data().map((m=> {\n            let names = m.nodes.map(path => path[path.length - 1].node);\n            let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n                \n            let group = binGroups(data, m.field, calculatedScalesKeeper[0], 8);\n            return {'label': m.field, 'paths': data, 'groupBins': group};\n        }));\n      \n        d3.select('#summary-view').remove();\n        renderDistStructure(d3.select('#main'), groups);  \n       \n        d3.select('#sidebar').selectAll('.node').remove();\n        d3.select('#sidebar').selectAll('.link').remove();\n\n        renderTree(null, true, false);\n       \n    });\n\n    if(data.length > 1){\n//ADD THIS BACK IN//\n\n        d3.select('#toolbar').selectAll('.brush-span').remove();\n       \n        let selectedNodes = Array.from(new Set(data.flatMap(f=> f.paths).flatMap(p=> p.map(m=> m.node))));\n   \n        let testNodes = d3.select('#sidebar').selectAll('.node').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n        let testLinks = d3.select('#sidebar').selectAll('.link').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n\n        testNodes.attr('opacity', 0.3)\n        testLinks.attr('opacity', 0.3)\n\n        let pathsListOne = Array.from(new Set(data[0].paths.flatMap(p=> p.map(m=> m.node))));\n        let pathsListTwo = Array.from(new Set(data[1].paths.flatMap(p=> p.map(m=> m.node))));\n\n        let testNodesOne = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n        let testLinksOne = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n\n        testNodesOne.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[0].dark)\n        testLinksOne.attr('opacity', .8).style('stroke', compareColors[0].dark)\n\n        let testNodesTwo = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n        let testLinksTwo = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n\n        testNodesTwo.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[1].dark)\n        testLinksTwo.attr('opacity', .8).style('stroke', compareColors[1].dark)\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-left', true)\n        .style('margin-right', '10px');\n\n        data.forEach((d, i)=> {\n        textDiv.append('span')\n            .text(d.label)\n            .classed('badge badge-secondary', true)\n            .style('padding', '5px')\n            .style('margin-bottom', '7px')\n            .style('background', compareColors[i].light)\n        });\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-right', true)\n        .style('margin-left', '10px');\n        \n    }\n    let svg = divWrap.append('svg').attr('class', 'compare-svg').style('padding-top', '50px');\n\n    ////COMBINEDATA///\n    if(data.length > 1){\n       \n        let startBins = data[0].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let mapBins = data[1].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let combined = startBins.map((d, i, n)=> {\n         \n            d.branches = [...d.branches].map((b, j)=> {\n                \n                b.bins = [{key:data[0].label, value: b.bins, index:0},\n                          {key:data[1].label, value: mapBins[i].branches[j].bins, index:1}\n                         ];\n             \n                b.data = [{key: data[0].label, \n                            value: b.data.map(m=>{\n                                    m.groupKey = data[0].label;\n                                    m.index = 0;\n                                    return m;\n                                    }), \n                            index: 0},\n                        \n                        { key: data[1].label, \n                            value : mapBins[i].branches[j].data.map(m=> {\n                                    m.groupKey = data[1].label;\n                                    m.index = 1;\n                                    return m;\n                            }), \n                         index: 1 }];\n\n                return b;\n            });\n          \n           if(d.type === 'continuous'){\n\n            d.leafData.data = [{key: data[0].label, \n                value: d.leafData.data.map(m=>{\n                        m.groupKey = data[0].label;\n                        m.index = 0;\n                        return m;\n                        }), \n                index: 0},\n            \n            { key: data[1].label, \n                value : mapBins[i].leafData.data.map(m=> {\n                        m.groupKey = data[1].label;\n                        m.index = 1;\n                        return m;\n                }), \n             index: 1 }];\n\n             d.leafData.bins = [{key:data[0].label, value: d.leafData.bins, index:0},\n                                {key:data[1].label, value: mapBins[i].leafData.bins, index:1}\n                                ];\n           }else{\n\n            d.leafData.data = [{key: data[0].label, \n                value: d.leafData.data.map(m=>{\n                        m.groupKey = data[0].label;\n                        m.index = 0;\n                        return m;\n                        }), \n                index: 0},\n            \n            { key: data[1].label, \n                value : mapBins[i].leafData.data.map(m=> {\n                        m.groupKey = data[1].label;\n                        m.index = 1;\n                        return m;\n                }), \n             index: 1 }];\n\n             d.leafData.bins = [\n                {key:data[0].label, keys: d.stateKeys, value: d.leafData.bins, index:0},\n                {key:data[1].label, keys: d.stateKeys, value: mapBins[i].leafData.bins, index:1}\n                ];\n           }\n          \n            return d;\n        });\n\n        let wrap = svg.append('g').attr('class', 'group-wrap').attr('transform', 'translate(30, 10)');\n        let binnedWrap = wrap.selectAll('.attr-wrap').data(combined).join('g').classed('attr-wrap', true);\n        svg.attr('height', (combined.length * (dimensions.height + 5)));\n        \n        binnedWrap.attr('transform', (d, i, n)=>  {\n            if(i === 0){\n                    return 'translate(0,0)';\n            }else{\n                let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                d.sum = sum;\n                return `translate(0, ${sum})`;\n            }\n        });\n\n        let label = binnedWrap.append('text')\n            .text(d=> d.key);\n    \n        label.filter(f=> f.type === 'continuous')\n            .attr('y', 40)\n            .attr('x', 80)\n            .style('text-anchor', 'end')\n            .style('font-size', 11);\n    \n        label.filter(f=> f.type === 'discrete')\n            .attr('y', (d, i)=> 3)\n            .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n            .style('text-anchor', 'middle')\n            .style('font-size', 11)\n            .attr('transform', 'rotate(-90)');\n\n        /////FROM DISCRETE DRAW\n\n        let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n        predictedWrap.attr('transform', 'translate(25, 0)');\n        predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n        //ROOT RENDERING\n        let root = predictedWrap.selectAll('g.root').data(d=> {\n            return [d.rootData]}).join('g').classed('root', true);\n        root.attr('transform', `translate(60,0)`);\n\n        let contRoot = root.filter(f=> f.type === \"continuous\");\n        contRoot.append('rect')\n            .attr('height', dimensions.height)\n            .attr('width', 12)\n            .attr('fill', '#fff')\n            .style('stroke-width', '0.5px')\n            .style('stroke', 'black')\n    \n        let rootRange = contRoot.append('rect')\n            .attr('width', 12)\n            .attr('height', d=> {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return newy(d.values.lowerCI95) - newy(+d.values.upperCI95)\n            }).attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return 'translate(0,'+newy(+d.values.upperCI95)+')'\n            }).style('opacity', 0.5)//.attr('fill', \"rgba(133, 193, 233)\")\n            .attr('fill', defaultBarColor);\n    \n        let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n        \n        rootAv.attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([dimensions.height, 0]);\n                let mean = +d.values.realVal;\n                return 'translate(0,'+newy(mean)+')';\n        }).attr('fill', '#004573');\n    \n           // Discrete Root\n        let disRoot = root.filter(f=> f.type === \"discrete\");\n        let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n            return d.bins}).join('g').classed('root-state-groups', true);\n    \n        rootStateGroups.append('text')\n            .text((d, i)=> d.color.state)\n            .attr('y', 10)\n            .attr('x', -3)\n            .style('font-size', 10)\n            .style('text-anchor', 'end');\n    \n        rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n        rootStateGroups.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim)\n            .attr('fill', '#fff').attr('opacity', 1);\n    \n        let rootRects = rootStateGroups.append('rect')\n            .classed('color-rect', true)\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim);\n    \n        rootRects.attr('fill', (d, i)=> {\n                return `rgba(89, 91, 101, ${d.state[0].value})`;\n            }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n    \n        let winStateRoot = disRoot.selectAll('g.root-state-groups')\n            .filter((f, j, n)=>{\n                let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n                return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n            }).classed('win', true);\n    \n        winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            });\n\n        ////BRANCHES\n        let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n           \n            return d.branches}).join('g').classed('branch-bin', true);\n    \n        branchGroup.attr('transform', (d, i, n)=> {\n            let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0\n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n           \n            let move = d.type === 'continuous'? 100 : 70;\n                return 'translate('+(move + (branchScale(i)) + x(step)) +', 0)'});\n\n        let discreteDist = branchGroup.filter(f=> f.type === 'discrete').append('g');\n\n        discreteDist.attr('transform', 'translate(5, 0)');\n\n        let discreteWidth = 85;\n\n        let discreteStateGroups = discreteDist.selectAll('g.group')\n            .data(d=> {\n                let keys = d.bins[0].value.map(m=> m.color.state);\n            \n                let bins = keys.map(k=> {\n                    let newOb = {};\n                    newOb.stateKey = k;\n                    \n                    newOb.bins = d.bins.map((m, i)=> {\n                        let clade = {}\n                        clade.index = i;\n                        clade.value = m.value.filter(f=> f.color.state === k)[0];\n                        clade.key = m.key;\n                        return clade;\n                    });\n                    return newOb;\n                });\n              \n                return bins;\n            })\n            .join('g')\n            .classed('group', true)\n            .attr('transform', (d, i)=> { \n                let move = d.index === 0 ? (-40 - (dimensions.squareDim/2)) : (dimensions.squareDim/2);\n                return `translate(${move}, 0)`});\n\n        let binRects = discreteStateGroups.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', discreteWidth)\n            .attr('stroke', 'black')\n            .attr('fill', '#fff')\n            .attr('opacity', 0.3);\n            \n            discreteStateGroups.attr('transform', (d, i)=> `translate(0, ${4+(i*(dimensions.squareDim+2))})`);\n\n            discreteStateGroups.append('text')\n            .text('1')\n            .attr('transform', `translate(${discreteWidth + 2},10)`)\n            .style('font-size', '10px')\n            .style('opacity', 0.6);\n        \n            discreteStateGroups.append('text')\n            .text('0')\n            .attr('transform', `translate(-7,10)`)\n            .style('font-size', '10px')\n            .style('opacity', 0.6);\n\n            let cladeStateGroups = discreteStateGroups.selectAll('.clade-dis').data(d=> {\n                return d.bins}).join('g').classed('clade-dis', true);\n\n\n            //////\n            function randomizer(){\n                var min= -.03; \n                var max= .03;  \n                var random = Math.random() * (+max - +min) + +min; \n                return random;\n            }\n        \n\n            let probabilityTicks = cladeStateGroups\n            .selectAll('.prob-tick')\n            .data((d, i, n)=> {\n                \n                let form = d3.format(\".3f\");\n              \n                let jitterMove = [...new Set(d.value.state.map(m=> +form(m.value)))].map(m=> {\n                  \n                    let arrayTest = d.value.state\n                    .filter(f=> +form(f.value) === m)\n                    .map(arr=> {\n                    \n                        arr.index = d.index;\n                      //  arr.y = Math.random();\n                      //  arr.x = randomizer();\n                        return arr;\n                    });\n                    return arrayTest;\n                })\n\n            \n                return jitterMove.flatMap(j=> j);\n               \n\n            }).join('circle').classed('prob-tick', true)\n        \n            probabilityTicks\n                .attr('r', 2)\n                .attr('opacity', 0.4)\n                .attr('fill', (d)=> {\n                    return compareColors[d.index].light;\n                });\n        \n            probabilityTicks.attr('transform', (d, i, n)=> {\n                console.log('d in prob', d)\n                let scale = d3.scaleLinear().domain([0, 1]).range([2, (discreteWidth - 2)]).clamp(true);\n                \n                let yScale = d3.scaleLinear().domain([0, 1]).range([2, dimensions.squareDim - 2])\n                return `translate(${scale(d.value + d.x)},${yScale(d.y)})`;\n             });\n\n\n            let averageTick = cladeStateGroups\n                    .selectAll('.av-tick').data(d=> {\n                        return [{value: d.value.state[0].average, color: d.value.color.color, index: d.index}];\n                    }).join('rect').classed('av-tick', true)\n                    .attr('width', 2).attr('height', dimensions.squareDim)\n                    .attr('fill', d=> {\n                        return compareColors[d.index].dark})\n                    .attr('transform', (d, i, n)=> {\n                        let scale = d3.scaleLinear().domain([0, 1]).range([0, (discreteWidth - 2)]);\n                        return `translate(${scale(d.value)}, 0)`});\n\n            averageTick.on('mouseover', (d, i, n)=> {\n                \n                    let tool = d3.select('#tooltip');\n                    tool.transition()\n                        .duration(200)\n                        .style(\"opacity\", .9);\n                    \n                    let f = d3.format(\".3f\");\n                    tool.html(`Average: ${f(d.value)}`)\n                        .style(\"left\", (d3.event.pageX - 40) + \"px\")\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            \n                    tool.style('height', 'auto');\n            \n                }).on('mouseout', ()=>{\n                    let tool = d3.select('#tooltip');\n                    tool.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n                });\n            \n            probabilityTicks.on('mouseover', (d, i, n)=> {\n                \n                    let tool = d3.select('#tooltip');\n            \n                    tool.transition()\n                        .duration(200)\n                        .style(\"opacity\", .9);\n                    \n                    let f = d3.format(\".3f\");\n                    \n                    tool.html(`${d.state} : ${f(d.value)}`)\n                        .style(\"left\", (d3.event.pageX - 40) + \"px\")\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            \n                    tool.style('height', 'auto');\n            \n                }).on('mouseout', ()=>{\n                    let tool = d3.select('#tooltip');\n                    tool.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n                });\n \n\n    //         //END\n\n    //     //////PREDICTED CONTINUOUS\n\n    //       //CONTIN PREDICTED\n        let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n        continDist.on('mouseover', (d, i, node)=> {\n            let newData = d.data;\n            let list = newData[0].value.concat(newData[1].value).map(m=> m.node);\n            let selected = pointGroups.filter(p=> {\n                return list.indexOf(p.node) > -1}).classed('selected', true);\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n            let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n            let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        }).on('mouseout', (d, i, node)=> {\n            d3.selectAll(\".branch-points.selected\").classed('selected', false);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            d3.select(node[i]).select('.y-axis').remove();\n        });\n\n        let continBinGroups = continDist.selectAll('g.group').data(d=> {\n            return d.bins;\n        }).join('g').attr('class', d=> `g-${d.index} group`)//.classed('group', true);\n\n        continBinGroups.each((d, i, nodes)=> {\n            d.maxCount = d3.sum(d.value.map(m=> m.length));\n            d.value.maxCount = d3.sum(d.value.map(m=> m.length));\n            let distrib = d3.select(nodes[i])\n                .selectAll('g')\n                .data([d.value.map(v=> {\n                    v.maxCount = d3.sum(d.value.map(m=> m.length))\n                    v.index = d.index;\n                    return v;\n                })])\n                .join('g')\n                .classed('distribution', true);\n            distrib.attr('transform', (d,i,n)=> {\n                if(d[0].index === 0){\n                    return 'translate(0, 0) rotate(90)'\n                }else{\n                    return 'translate(11, '+dimensions.height+') rotate(-90)'\n                }\n               });\n            let path = distrib.append('path').attr('d', d.index === 0 ? mirrorlineGen : lineGen);\n            path.attr(\"fill\", (v, i, n)=> {\n                return defaultBarColor})\n            .attr('opacity', 0.4)\n            .style('stroke', compareColors[d.index].dark);\n        });\n\n        let contRect = continBinGroups.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 10)\n        .style('fill', '#fff')\n        .style('stroke', 'gray');\n\n    let rangeRectWrap = continDist.selectAll('g.range-wrap').data(d=> {\n        return d.data;\n    }).join('g').classed('range-wrap', true);\n    \n    let rangeRect = rangeRectWrap.selectAll('rect.range').data((d,i)=> {\n        let newData = d.value.map(m=> {\n            m.range = d.range;\n            m.gindex = i;\n            return m;\n        })\n        return newData;\n    }).join('rect').classed('range', true);\n\n    let avRect = continDist.selectAll('rect.av-rect').data(d=> d.data)\n        .join('rect').classed('av-rect', true).attr('width', 10).attr('height', (d, i)=> {\n        if(d.value != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n    \n    avRect.attr('transform', (d, i) => {\n        if(d.value != undefined){\n            let newy = d.value[0].scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = d3.mean(d.value.map(m=> +m.values.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', (d)=>compareColors[d.index].dark);\n\n     //////START BRANCH EXPERIMENT\n     let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n     brush.on('end', brushedComparison);\n\n     continDist.append(\"g\")\n     .classed('continuous-branch-brush', true)\n     .attr(\"class\", \"brush\")\n     .call(brush);\n\n     //////BRUSH FOR COMPARISON/////\n\n     function brushedComparison(){\n\n        let data = d3.select(this.parentNode).data()[0]\n\n        let maxCounts = data.bins.map(m => m.maxCount);\n       \n        var s = d3.event.selection;\n        var zero = d3.format(\".3n\");\n    \n        let index = d3.select('#toolbar').selectAll('.brush-span').size();\n        let classLabel = index === 0 ? 'one' : 'two';\n    \n        if(s != null){\n            let treeTest = d3.select('#sidebar').selectAll('.node').filter(f=> {\n                return f.data.leaf === true});\n    \n            \n            let y = d3.scaleLinear().domain([data.domain[0], data.domain[1]]).range([0, dimensions.height])\n            let attribute = data.key;\n            let brushedVal = [y.invert(s[1]), y.invert(s[0])];\n    \n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n            let nodes = data.data.map(m=> m.value.filter(f=> {\n                return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n            }));\n\n\n            let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n\n            let descendBins = continDist.filter(f=> {\n                return (f.index > data.index) && (f.key === data.key)});\n                \n    \n            nodes.forEach((n, i)=> {\n               \n                if(n.length > 0){\n                    let test = d3.select(this.parentNode).select(`.g-${i}`)\n                    let groupDis = test.append('g').classed('distribution-too', true);\n                    \n                    let histo = continuousHistogram(n)\n                    histo.maxCount = maxCounts[i];\n\n                    let names = n.map(m=> m.node);\n                   \n                    groupDis\n                    .data([histo]);\n\n                    groupDis.append('path')\n                    .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                    .style('stroke', compareColors[i].dark)\n                    .style('fill', compareColors[i].light)\n                    .style('fill-opacity', 0.8);\n\n                    groupDis.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n                    let otherDis = otherBins\n                    .select(`.g-${i}`).each((o, j, oNode)=> {\n                        let oHisto = continuousHistogram(o.data.filter(f=> f.index === i)[0].value.filter(f=> names.indexOf(f.node) > -1));\n                        oHisto.maxCount = o.bins[i].maxCount;\n                        let oDist = d3.select(oNode[j]).append('g').classed('distribution-too', true);\n                        oDist.data([oHisto])\n                        .append('path')\n                        .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                        .style('stroke', compareColors[i].dark)\n                        .style('fill', compareColors[i].light)\n                        .style('fill-opacity', 0.8);\n                        oDist.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n                    });\n\n                    let otherDesDis = descendBins\n                    .select(`.g-${i}`).each((o, j, oNode)=> {\n\n                        let oHisto = continuousHistogram(o.data.filter(f=> f.index === i)[0].value\n                                    .filter(f=> (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1])));\n                        oHisto.maxCount = o.bins[i].maxCount;\n\n                        let oDist = d3.select(oNode[j]).append('g').classed('distribution-too', true);\n                        oDist.data([oHisto])\n                        .append('path')\n                        .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                        .style('stroke', compareColors[i].dark)\n                        .style('fill', compareColors[i].light)\n                        .style('fill-opacity', 0.8);\n                        oDist.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n\n                    });\n                  \n                }\n            });\n\n             let nodesFlat = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n            }));\n\n           \n            let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n            }));\n    \n            let selectedNodes = brushedNodes(nodesFlat, notNodes, data, brushedVal, classLabel);\n            let selectedBranch = selectedNodes[0];\n            let secondGrp = selectedNodes[1];\n            let antiSelected = selectedNodes[2];\n            let antiSecond = selectedNodes[3];\n    \n            if(index < 2){\n                let doesItExist = d3.select('#toolbar').selectAll('.brush-span').filter((f, i, n)=> {\n                    return d3.select(n[i]).attr('value') == `${data.bins.groupLabel}-${data.key}`;\n                });\n    \n                if(doesItExist.size() === 0){\n    \n                    d3.select(this).select('.selection')\n                    .style('fill', `${brushColors[index][0]}`)\n                    .attr('stroke', `${brushColors[index][0]}`)\n                    .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                    .attr('stroke', brushColors[index][1])\n                    .attr('stroke-width', 2);\n    \n                    let badge = d3.select('#toolbar')\n                        .append('span')\n                        .attr('class', classLabel)\n                        .attr('id', classLabel)\n                        .classed('brush-span', true)\n                        .classed(`${data.bins.groupLabel}`, true)\n                        .classed('badge badge-secondary', true)\n                        .style('background', brushColors[index][0])\n                        .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                        .datum({brush:this, nodes: nodes})\n                        .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n    \n                    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        let classy = index === 0 ? 'one' : 'two';\n                        \n                        d3.select(d.brush).call(brush.move, null);\n                        d3.select(n[i].parentNode).remove();\n                        d3.select(d.brush).select('.overlay').attr('stroke-width', 0);\n                        descendBins.selectAll('.distribution-too').remove();\n                        otherBins.selectAll('.distribution-too').remove();\n                        d3.select(d.brush.parentNode).selectAll('.distribution-too').remove();\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed-second', false);\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed', false);\n                    });\n    \n                }else{\n\n                    doesItExist.text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                    let xOut = doesItExist.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                        d3.select(n[i].parentNode).remove();\n                    });\n                   \n                    d3.select(doesItExist.datum()).call(brush.move, null);\n                    d3.select(doesItExist.datum()).select('.overlay').attr('stroke-width', 0)\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll(`${data.bins.groupLabel}`)\n                        .selectAll('.second-branch')\n                        .classed('second-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.selected-branch')\n                        .classed('selected-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-second')\n                        .classed('anti-brushed-second', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-branch')\n                        .classed('anti-brushed-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n    \n                    let label = doesItExist.attr('id');\n    \n                    index = label === 'one' ? 0 : 1;\n    \n                    d3.select(this).select('.selection')\n                        .style('fill', `${brushColors[index][0]}`)\n                        .attr('stroke', `${brushColors[index][0]}`)\n                        .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                        .attr('stroke', brushColors[index][1])\n                        .attr('stroke-width', 2);\n\n                        let nodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n                        }))\n                       \n                        let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n                        }));\n\n                        doesItExist.datum({brush: this, nodes: nodes})\n    \n                        brushedNodes(nodes, notNodes, data, brushedVal, label);\n                    \n                }\n    \n            }else{\n    \n                d3.select('#toolbar').selectAll('.brush-span').filter((f, i)=> i === 0).remove();\n    \n                let classLabel = colorBool === 0 ? 'one': 'two';\n    \n                d3.select('#toolbar')\n                    .append('span')\n                    .attr('class', )\n                    .classed('brush-span', true)\n                    .classed('badge badge-secondary', true)\n                    .style('background', brushColors[colorBool][0])\n                    .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                    .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n\n                colorBool === 0 ? colorBool = 1 : colorBool = 0;\n                secondGrp.classed(classLabel, true);\n                selectedBranch.classed(classLabel, true);\n            }\n    \n        }else{\n            d3.selectAll(`.${data.key}.brushed-branch`).classed('brushed-branch', false);\n            d3.selectAll(`.${data.key}.brushed-second`).classed('brushed-second', false);\n        }\n     }\n    \n\n    ///OBSERVED/////\n    let observedWrap = binnedWrap.append('g').classed('observed', true);\n    observedWrap.attr('transform', (d, i, n)=> {\n        return 'translate('+ (dimensions.predictedWidth + 150) +', 0)'});\n\n    ////OBSERVED CONTIUOUS/////\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n    contOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, -15)`);\n\n    let compContGroups = contOb.selectAll('g.cont-groups').data(d=> d.leafData.bins).join('g').classed('cont-groups', true);\n\n    let contBars = compContGroups.selectAll('g.ob-bars').data(d=> {\n        let value = d.value.map(m=> {\n            m.index = d.index;\n            return m;\n        });\n        return value}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n\n   let y = d3.scaleLinear().domain([0, d3.max(d3.selectAll(n).data().map(m=> m.length))]).range([0, (dimensions.height - dimensions.margin)]);\n        return y(Object.keys(d).length - 2);\n    })\n    .attr('fill', d=> compareColors[d.index].light).attr('fill-opacity', .4);\n\n    contBars.attr('transform', (d, i, n)=> {\n\n        let movex = dimensions.observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, d3.max(d3.selectAll(n).data().map(m=> m.length))]).range([0, (dimensions.height - dimensions.margin)]);\n       \n        let movey = dimensions.height - y(Object.keys(d).length - 2);\n\n     return 'translate('+(movex * i)+', '+movey+')'});\n\n contOb.each((d, i, nodes)=> {\n\n     let xvalues = d.leafData.data[0].value.map(m=> {\n         return +m.values.realVal});\n     let x = d3.scaleLinear()\n         .domain([d3.min(xvalues), d3.max(xvalues)])\n         .range([0, dimensions.observedWidth]);\n\n     let y = d3.scaleLinear()\n         .domain([0, d3.max(d.leafData.bins[0].value.map(b=> Object.keys(b).length)) - 2])\n         .range([(dimensions.height - dimensions.margin), 0]);\n     \n     d3.select(nodes[i])\n         .append('g')\n         .classed('x-axis', true)\n         .call(d3.axisBottom(x))\n         .attr('transform', 'translate(0, '+dimensions.height+')')\n\n     d3.select(nodes[i]).append('g')\n         .classed('y-axis', true)\n         .call(d3.axisLeft(y).ticks(4))\n         .attr('transform', 'translate(0, '+dimensions.margin+')');\n\n         d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n         d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n\n         d3.select(nodes[i])\n         .append('g')\n         .classed('x-axis-label', true)\n         .append('text').text('Frequency')\n         .attr('transform', `translate(-20, ${dimensions.height- 10}) rotate(-90)`)\n         .style('font-size', '10px');\n });\n \n        ////Observed Discrete////\n        let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n        discOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, 5)`);\n\n        let compDisGroups = discOb.selectAll('g.dis-groups').data(d=> d.leafData.bins).join('g').classed('dis-groups', true);\n\n        let discBars = compDisGroups.selectAll('g.ob-bars').data(d=> {\n            return d.keys.map((key, i)=>{\n                return {state: key, data: d.value[i], max: d3.sum(d.value[i].map(b=> b.length)), index: d.index}\n            });\n        }).join('g').classed('ob-bars', true);\n        let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n            let width = dimensions.observedWidth / n.length;\n            return width/2;\n        }).attr('height', (d, i, n)=> {\n        \n           \n            let y = d3.scaleLinear().domain([0, d3.max(d3.selectAll(n).data().map(m=> m.data.length))]).range([0, dimensions.height]);\n            return y(d.data.length);\n\n        }).attr('fill', (d, i) => {\n            return d.data[0] != undefined ? d.data[0].color : '#fff';\n        }).attr('opacity', 0.3);\n\n        discBars.attr('transform', (d, i, n)=> {\n            let movex = dimensions.observedWidth / n.length;\n            let offSet = movex / 2\n          \n\n            let y = d3.scaleLinear().domain([0, d3.max(d3.selectAll(n).data().map(m=> m.data.length))]).range([0, dimensions.height]);\n            let movey = (dimensions.height) - y(d.data.length);\n\n            let finalMove = d.index === 0 ? 'translate('+(movex * i)+', '+movey+')' : 'translate('+(offSet+(movex * i))+', '+movey+')';\n            return finalMove;\n        })\n\n        dRects.on('mouseover', (d, i, n)=> {\n            let state = d3.select('g.'+d[0].label).selectAll('g.state');\n            state.filter(f=> {\n                return f[0].state === d[0].winState}).attr('opacity', 0.8);\n            state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n            d3.select(n[i]).attr('opacity', 0.9);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).attr('opacity', 0.3);\n            let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n        });\n\n        discOb.each((d, i, nodes)=> {\n                \n                let xPoint = d3.scalePoint().domain(d.stateKeys).range([0, dimensions.observedWidth]).padding(.6)\n              \n                let y = d3.scaleLinear().domain([0, d.leafData.data.length]).range([(dimensions.height), 0]);\n                d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4));\n                d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+dimensions.height+')');\n\n                d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n                d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n        });\n\n\n\n    }\n\n}","import '../styles/index.scss';\nimport {formatAttributeData, maxTimeKeeper, abbreviate, scalingValues, generateTraitScale} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster, getLatestData, getScales} from './filterComponent';\nimport { pullPath, calculateMovingAverage } from './pathCalc';\nimport { renderTree } from './sidebarComponent';\nimport {renderDistributionComparison} from './compare';\nimport { addBrushables } from './brusherMaker';\nimport { valueParam } from './toolbarComponent';\n\n\n\nexport const dimensions = {\n    height: 80,\n    observedWidth : 200,\n    predictedWidth : 900,\n    margin : 20,\n    squareDim : 15,\n    timeRange: 895\n}\n\nexport const brushColors = [\n    ['#64B5F6', '#F39C12'],\n    ['#6A1B9A', '#FDD835'],\n]\n\nexport const defaultBarColor = '#baaaaa'//#DCD4D4';\n\nexport let colorBool = 0;\nexport const selectedClades = [[]];\n\n\nexport function deviationTraitScale(deviation, pixelRange){\n\n    let scale = valueParam === 'realVal'? d3.scaleLinear() : d3.scaleLog();\n    scale.domain(deviation).range(pixelRange).clamp(true);\n    return scale;\n}\n\nfunction getNormBins(data, branchCount){\n\n    let max = maxTimeKeeper[maxTimeKeeper.length - 1];\n\n    let internalNodes = data.map(path => path.filter(node=> (node.leaf != true) && (node.root != true)));\n\n    let count = d3.max(internalNodes.map(int=> int.length)) < branchCount ? (d3.max(internalNodes.map(int=> int.length)) - 1) : branchCount;\n\n    let bins = new Array(count)\n    .fill().map((m, i)=> {\n        let step = max / count;\n        let base = (i * step);\n        let top = ((i + 1)* step);\n        return {'base': base, 'top': top, 'binI': i , 'step':step}\n    });\n\n    return bins.map((n, i)=> {\n       \n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n            return node.combLength > n.base && node.combLength <= n.top;\n        } ));\n\n        let nodeSet = [...new Set(edges.map(e=> e.node))].map(m=> edges.filter(f=> f.node === m)[0]);\n\n        n.data = nodeSet.map(m=> {\n            m.range = [...new Set(edges.map(e=> e.node))].length;\n            return m;\n        });\n\n        return n;\n    });\n}\n\nexport function groupDistributions(pathData, mainDiv, groupAttr){\n\n    let scales = getScales();\n\n    let groupKeys = scales.filter(f=> f.field === groupAttr)[0].scales.map(s=> s.scaleName)\n  \n    let branchBinCount = d3.median(pathData.map(m=> m.length)) - d3.min(pathData.map(m=> m.length))\n   \n    let pathGroups = groupKeys.map(group => {\n        let paths = pathData.filter(path => {\n            return group.includes(path[path.length - 1].attributes[groupAttr].values[groupAttr]);\n        });\n\n        let groupBins = binGroups(paths, group, scales, branchBinCount);\n        return {'label': group, 'paths': paths, 'groupBins': groupBins}\n    });\n\n    renderDistStructure(mainDiv, pathGroups);\n}\nexport function binGroups(pathData, groupLabel, scales, branchCount){\n\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n    \n    let keys = scales.map(s=> s.field).filter(f=> attrHide.indexOf(f) === -1);\n\n    let newNormed = [...pathData];\n    let keysToHide = attrHide.length > 0 ? scales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    let formatedNormed = formatAttributeData(newNormed, scales, keysToHide);\n  \n    let normBins = getNormBins(newNormed, branchCount);\n\n    \n    let leafNodes = newNormed.flatMap(path => path.filter(node=> node.leaf === true));\n    let rootNodes = newNormed.flatMap(path => path.filter(node=> node.root === true));\n\n    \n\n    let sortedBins = keys.map(key=> {\n\n        let scale = scales.filter(f=> f.field === key)[0];\n\n        \n    \n        let mapNorm = normBins.map(bin => {\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    let attrib = d.attributes[key];\n                    attrib.node = d.node;\n                    return attrib;\n                })\n            }else{\n                bin.fData = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        });\n\n     \n       \n        let leafAttr = leafNodes.map(m=> m.attributes[key]);\n        let leafData = {'data': leafAttr};\n   \n        if(scale.type === 'continuous'){\n            let min = valueParam === 'realVal' ? scale.min : Math.log(scale.min);\n            let max = valueParam === 'realVal' ? scale.max : Math.log(scale.max);\n            let x = d3.scaleLinear().domain([min, max]).range([0, dimensions.height]);\n\n    \n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.values[valueParam]; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n\n            mapNorm.map((n, i, nodeArray)=> {\n\n                n.outliers = n.data.filter(f=> {\n                    return f.values.realVal < f.normalRange[0] ||  f.values.realVal > f.normalRange[1];\n                });\n                \n                n.type = scale.type;\n                n.bins = histogram(n.data.filter(f=> {\n                    return f.values.realVal >= f.normalRange[0] &&  f.values.realVal <= f.normalRange[1];\n                }));\n                n.domain = [max, min];\n                n.bins.count = branchCount;\n                n.bins.groupLabel = groupLabel;\n              \n                n.bins.binNormal = n.data[0] ? n.data[0].normalRange : [];\n                n.bins.outlierRange = n.domain;\n\n                if(d3.mean(n.bins.map(m=> m.length)) === 0){\n                    if(i === 0){\n                        n.bins = histogram(rootNodes.map(m=> m.attributes[key]));\n                        n.data = rootNodes.map(m=> m.attributes[key]);\n                        n.bins.count = branchCount;\n                    }else{\n                        n.bins = nodeArray[i-1].bins;\n                        n.data = nodeArray[i-1].data;\n                    }\n                }\n                return n;\n            });\n\n            //Histogram for observed////\n            let maxO = d3.max(leafAttr.flatMap(v=> +v.values[valueParam]));\n            let minO = d3.min(leafAttr.flatMap(v=> +v.values[valueParam]));\n           // let xO = d3.scaleLinear().domain([minO, maxO]).range([0, dimensions.height]);\n           let xO = d3.scaleLinear().domain([min, max]).range([0, dimensions.width]);\n\n            let histogramO = d3.histogram()\n            .value(function(d) { \n                return +d.values[valueParam]; })  \n            .domain(xO.domain())  \n            .thresholds(xO.ticks(10)); \n\n            leafData.bins = histogramO(leafAttr);\n      \n            let newK = {'key': key, \n                    'branches': [...mapNorm], \n                    'type': scale.type, \n                    'leafData': leafData, \n                    'rootData': rootNodes.map(m=> m.attributes[key])[0]}\n   \n            return newK;\n\n        }else{\n            //HANDLING DISCRETE//\n            let states = leafAttr[0].scales.scales;\n            let stateKeys = states[0].state? states.map(s=> s.state) : states.map(s=> s.scaleName);\n          \n            let rootNode = rootNodes[0].attributes[key]\n            rootNode.bins = d3.entries(rootNodes[0].attributes[key].values).map(m=> {       \n                let states = [{'state': m.key, 'value':m.value}];\n                return {state: states, branchCount:branchCount, color : scale.stateColors.filter(f=> f.state === m.key)[0], max:80};\n               });\n            \n            mapNorm.bins = null;\n            leafData.bins = states.map(s=> {\n                return leafAttr.filter(f=> s.scaleName.includes(f.states.state))});\n   \n            let y = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n\n            let histogram = d3.histogram()\n                .value(function(d) { return d.value; })  \n                .domain(y.domain())  \n                .thresholds(y.ticks(10)); \n  \n            mapNorm.map((n, i, nodeArray)=> {\n                let colors = scale.stateColors;\n                n.bins = stateKeys.map(state=> {\n                    let test = n.data.flatMap(m=> Object.entries(m.values).filter(f=> f[0] === state))\n                    .map(m=> {\n                        return {'state': m[0], 'value':m[1]};\n                    });\n                    \n                    return {state: test, branchCount:branchCount, histogram: histogram(test), color : colors.filter(f=> f.state === state)[0], max:80};\n                });\n                //IF WE DONT HAVE ANY BRANCHES< WE ASSUME THAT THEY ARE THE SAME AS THE PREVIOUS\n                if(n.bins[0].state.length === 0){\n                    if(i === 0){\n                        n.bins = d3.entries(rootNode.values).map(m=> {\n                            let histo = histogram([+m.value]).map(h=>{\n                                if(m.value <= h.x1 && m.value >= h.x0){\n                                    h.push(+m.value);\n                                }\n                                return h;\n                             });\n                             let states = [{'state': m.key, 'value':m.value}];\n                             return {state: states, branchCount:branchCount, histogram: histo, color:colors.filter(f=> f.state === m.key)[0], max:80};\n                            });\n                        \n                    }else{\n                        n.bins = nodeArray[i-1].bins;\n                    }\n                }\n\n                n.type = scale.type;\n                return n;\n            });\n\n            let newK = {'key': key, \n                        'branches': [...mapNorm], \n                        'type': scale.type, \n                        'leafData': leafData, \n                        'rootData': rootNodes.map(m=> m.attributes[key])[0],\n                        'stateKeys': stateKeys,\n                        'maxCount': d3.max(mapNorm.map(n=> n.data.length)),\n                    }\n            return newK;\n        }\n    });\n\n\n\n    sortedBins.group = groupLabel;\n    sortedBins.branchCount = sortedBins[0].branches.length;\n    sortedBins.keys = keys;\n    return sortedBins;\n}\nexport function drawBranchPointDistribution(data, svg){\n\n    let branchBar = svg.append('g').classed('branch-bar', true);\n    branchBar.attr('transform', 'translate(150, 0)')\n\n    branchBar.append('rect').classed('point-dis-rect', true)\n        .attr('height', 25)\n        .attr('x', -10)\n        .attr('y', -10)\n       .attr('fill', 'none');\n\n    let binWrap = branchBar.append('g').attr('transform', 'translate(115, -10)');\n\n    branchBar.append('line')\n        .attr('y1', 2)\n        .attr('y2', 2)\n        .attr('x1', '100')\n        .attr('x2', dimensions.predictedWidth)\n        .attr('stroke', 'gray')\n        .attr('stroke-width', .25);\n\n    branchBar.append('text').text('Root').attr('transform', 'translate(80, 7)');\n    let leafLabel = branchBar.append('g').classed('leaf-label', true).attr('transform', `translate(${dimensions.predictedWidth + 200}, 7)`);\n    leafLabel.append('text').text('Leaves');\n\n    let nodeLengthArray = [];\n    let nodeDuplicateCheck = [];\n\n    data.paths.map(path=> {\n        path.filter(n=> n.leaf != true).map(node=> {\n            if(nodeDuplicateCheck.indexOf(node.node) == -1){\n                nodeDuplicateCheck.push(node.node);\n                nodeLengthArray.push({'node': node.node, 'eMove': node.combLength });\n            }\n        })\n    });\n\n    let bPointScale = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.timeRange]);\n    let pointGroups = branchBar.selectAll('g.branch-points').data(nodeLengthArray)\n        .join('g').attr('class', (d, i)=> d.node).classed('branch-points', true);\n\n    pointGroups.attr('transform', (d, i) => {\n        return `translate(${(115 + bPointScale(d.eMove))}, 0)`});\n    pointGroups.append('circle').attr('r', 5).attr('fill', '#fff').attr('opacity', 0.5);\n\n    let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.timeRange]);\n    \n    let binsRects = binWrap\n        .selectAll('rect.bin')\n        .data(data.groupBins[0].branches.map(m=> m.range))\n        .join('rect')\n        .classed('bin', true);\n\n    binsRects.attr('width', (d, i, n)=> {\n        return x(d[1]) - x(d[0]);\n    }).attr('height', 20);\n\n    binsRects.attr('transform', (d, i, n)=> {\n        let step = x(d[1]) - x(d[0]);\n        return `translate(${step*i},0)`});\n\n    binsRects.attr('fill', 'gray').attr('stroke-width', 2).attr('stroke', 'white');\n    \n    let xFlipped = d3.scaleLinear().domain([maxTimeKeeper[maxTimeKeeper.length - 1], 0]).range([0, dimensions.timeRange]);\n\n    let axis = d3.axisBottom(xFlipped);\n    let axGroup = branchBar.append('g').call(axis);\n    axGroup.attr('transform', 'translate(113, 10)');\n    axGroup.select('path').attr('stroke-width', 0);\n\n    return branchBar;\n}\nexport function drawGroupLabels(pathData, svg, groupLabel){\n\n    let leafNames = pathData[0].leafData.data.map(m=> m.node);\n    let nodeNames = getLatestData().filter(f=> leafNames.indexOf(f[f.length - 1].node) > -1).flatMap(fl=> fl.map(m=> m.node));\n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n    let cladeLabel = svg.append('g').classed('clade-label', true).attr('transform', 'translate(10, 0)');\n    cladeLabel.append('rect')\n        .attr('width', 50)\n        .attr('height', (pathData.keys.length * (dimensions.height+ 15)))\n        .attr('fill', 'gray')\n        .style('opacity', 0.2)\n        .on('mouseover', (d, i)=>{\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f=> {\n                return nodeNames.indexOf(f.data.node) > -1;\n            }).classed('hover clade', true);\n        \n        treeLinks.filter(f=> {\n            return nodeNames.indexOf(f.data.node) > -1;\n        }).classed('hover clade', true);\n\n        let species = d.paths.map(m=> m[m.length - 1].label);\n        }).on('mouseout', (d, i)=> {\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.classed('hover clade', false);\n            treeLinks.classed('hover clade', false);\n        });\n\n    cladeLabel.append('text').text(d=> d.label)\n    .style('text-anchor', 'middle')\n    .attr('transform', `translate(23, ${(shownAttributes.length * (dimensions.height+ 15)/2)}), rotate(-90)`);\n\n    return cladeLabel;\n}\n/**\n * \n * @param {*} mainDiv \n * @param {*} pathGroups \n */\nexport async function renderDistStructure(mainDiv, pathGroups){\n\n    console.log('pathgroups',pathGroups)\n\n    let compareTooltipFlag = false;\n   \n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n   \n    let groupWrap = mainDiv.append('div').attr('id', 'summary-view');\n    let groupDivs = groupWrap.selectAll('.group-div').data(pathGroups).join('div').classed('group-div', true);\n\n    groupDivs.each((d, i, node)=> {\n\n        let filteredAttributes = d.groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let group = d3.select(node[i]);\n        group.classed(d.label, true);\n        group.style('text-align', 'center');\n        group.append('text').text(d.label);\n        group.append('text').text(` : ${d.paths.length} Paths` );\n\n        //////Starting something new/////\n        let svg = group.append('svg');\n        svg.attr('class', 'main-summary-view');\n        svg.attr('id', `${d.label}-svg`);\n        svg.attr('height', (shownAttributes.length * (dimensions.height + 11))+ 50);\n    \n        let branchBar = drawBranchPointDistribution(d, svg);\n        branchBar.attr('transform', 'translate(55, 10)');\n    \n        let branchScale = d3.scaleLinear().domain([0, d.groupBins.branchCount]).range([0, dimensions.timeRange]);\n        let pointGroups = branchBar.selectAll('g.branch-points');\n      \n        let wrap = svg.append('g').classed('summary-wrapper', true);\n        wrap.attr('transform', 'translate(70, 50)');\n    \n        let binnedWrap = wrap.selectAll('.attr-wrap').data(filteredAttributes).join('g').attr('class', d=> d.key + ' attr-wrap');\n    \n        binnedWrap.attr('transform', (d, i, n)=>  {\n                if(i === 0){\n                    return 'translate(0,0)';\n                }else{\n                    let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                    let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                    d.sum = sum;\n                    return `translate(0, ${sum})`;\n                }\n        });\n\n        let label = binnedWrap.append('g')\n      \n        let labelText = label.append('text')\n            .text(d=> {\n                return abbreviate(d.key, 11)});\n\n        label.on('mouseover', (d, i, n)=> {\n            d3.select(\"#tooltip\")\n                    .classed('hidden', false)\n                    .style('opacity', 1)\n                    .style(\"left\", (d3.event.pageX) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\")\n                    .text(d.key);\n\n        }).on('mouseout', (d, i, n)=> d3.select('#tooltip').classed(\"hidden\", true).style('opacity', 0));\n\n        labelText.filter(f=> f.type === 'continuous')\n        .attr('y', 40)\n        .attr('x', 80)\n        .style('text-anchor', 'end')\n        .style('font-size', 11);\n\n        labelText.filter(f=> f.type === 'discrete')\n        .attr('y', (d, i)=> 3)\n        .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n        .style('text-anchor', 'middle')\n        .style('font-size', 11)\n        .attr('transform', 'rotate(-90)');\n    \n        let groupLabelBars = drawGroupLabels(d.groupBins, svg, d.label);\n        groupLabelBars.on('click', (d, i, n)=> {\n            if(compareTooltipFlag){\n                compareTooltipFlag = false;\n                d3.select(\"#compare-tooltip\").classed(\"hidden\", true);\n            }else{\n                compareTooltipFlag = true;\n                d3.select(\"#compare-tooltip\")\n                    .style(\"left\", (d3.event.pageX) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\")\n                    .select(\"#value\")\n                    .text(d.node);\n\n                d3.select(\"#compare-tooltip\").classed(\"hidden\", false);\n                d3.select('#select-for-compare').on('click', ()=> {\n\n                    compareTooltipFlag = false;\n                    d3.select(\"#compare-tooltip\").classed(\"hidden\", true);\n                    d3.select(n[i]).select('rect').attr('fill', '#F5B041');\n\n                    selectedClades[selectedClades.length - 1].push(Object.assign({},d));\n                    if(selectedClades[selectedClades.length - 1].length > 1){\n                        mainDiv.selectAll('*').remove();\n                        mainDiv.select('#compare-wrap').remove();\n                        \n                        renderDistributionComparison(mainDiv, selectedClades[selectedClades.length - 1], branchScale);\n                    }\n                });\n            }\n        });\n           \n        return renderDistibutions(binnedWrap, branchScale, pointGroups);\n    });\n}\n\n/**\n * \n * @param {*} binnedWrap \n * @param {*} branchScale \n * @param {*} pointGroups \n */\n\nexport function renderDistibutions(binnedWrap, branchScale, pointGroups){\n\n  \n\n    let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n    predictedWrap.attr('transform', 'translate(35, 0)');\n    predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n    //ROOT RENDERING\n    let root = predictedWrap.selectAll('g.root').data(d=> {\n        return [d.rootData]}).join('g').classed('root', true);\n    root.attr('transform', `translate(50,0)`);\n\n    let contRoot = root.filter(f=> f.type === \"continuous\");\n    contRoot.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 12)\n        .attr('fill', '#fff')\n        .style('stroke-width', '0.5px')\n        .style('stroke', 'black');\n        \n    let rootRange = contRoot.append('rect')\n        .attr('width', 12)\n        .attr('height', d=> {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            let up = valueParam === 'realVal' ? +d.values.upperCI95 : +d.values.logUpper;\n            let low = valueParam === 'realVal' ? +d.values.lowerCI95 : +d.values.logLower;\n            return newy(low) - newy(up);\n        }).attr('transform', (d, i) => {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            let up = valueParam === 'realVal' ? +d.values.upperCI95 : +d.values.logUpper;\n            return 'translate(0,'+newy(up)+')';\n        }).style('opacity', 0.5).attr('fill', defaultBarColor);\n\n    let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n    \n    rootAv.attr('transform', (d, i) => {\n        let newy = d.scales.yScale;\n        newy.range([dimensions.height, 0]);\n        let mean = +d.values[valueParam];\n        return 'translate(0,'+newy(mean)+')';\n    }).attr('fill', '#004573');\n\n    // Discrete Root\n    let disRoot = root.filter(f=> f.type === \"discrete\");\n    let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n        return d.bins}).join('g').classed('root-state-groups', true);\n\n    rootStateGroups.append('text')\n        .text((d, i)=> d.color.state)\n        .attr('y', 10)\n        .attr('x', -3)\n        .style('font-size', 10)\n        .style('text-anchor', 'end');\n\n    rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n\n    rootStateGroups.append('rect')\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim)\n        .attr('fill', '#fff').attr('opacity', 1);\n\n    let rootRects = rootStateGroups.append('rect')\n        .classed('color-rect', true)\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim);\n\n    rootRects.attr('fill', (d, i)=> {\n            return `rgba(89, 91, 101, ${d.state[0].value})`;\n        }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n\n    let winStateRoot = disRoot.selectAll('g.root-state-groups')\n        .filter((f, j, n)=>{\n            let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n            return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n        }).classed('win', true);\n\n    winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n            return c.color.color;\n        }).attr('opacity', (c)=>{\n            let sum = d3.sum(c.state.flatMap(s=> s.value));\n            return sum/c.state.length;\n        });\n\n    /////BRANCHES\n    let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n        return d.branches}).join('g').classed('branch-bin', true);\n\n    branchGroup.filter(f=> f.type === 'continuous').attr('transform', (d, i, n)=> {\n        let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0;\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.timeRange]);\n            return 'translate('+(90 + (branchScale(i)) + x(step)) +', 0)'});\n\n    let discreteDist = branchGroup.filter(f=> f.type === 'discrete');\n\n    /**\n     * Discrete Predicted Render and Events\n     */\n    renderDiscretePredicted(discreteDist);\n\n    discreteDist.attr('transform', (d, i, n)=> {\n        let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0;\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.timeRange]);\n            return 'translate('+(44 + (branchScale(i)) + x(step)) +', 0)'});\n\n    discreteDist.on('mouseover', (d, i, node)=> {\n       highlightNodesMouseover(d, i, node, pointGroups);\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    //CONTIN PREDICTED\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    continDist.on('mouseover', (d, i, node)=> {\n        highlightNodesMouseover(d, i, node, pointGroups);\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    renderContinuousPredicted(continDist);\n\n     //////START BRANCH EXPERIMENT\n    //  let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n    //  brush.on('end', brushed);\n\n     let brushSpace = continDist.append(\"g\")\n     .classed('brush-space', true);\n     brushSpace.append('rect').classed('brush-space-rect', true);\n\n     addBrushables(brushSpace, continDist);\n\n/**\n * OBSERVED STARTS HERE\n */\n    let observedWrap = binnedWrap.append('g').classed('observed', true);\n    observedWrap.attr('transform', (d, i, n)=> {\n         return 'translate('+ (dimensions.predictedWidth + 150) +', 0)'});\n\n/**\n * OBSERVED CONTINUOUS\n */\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n    contOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, -15)`);\n\n    let contBars = contOb.selectAll('g.ob-bars').data(d=> {\n        \n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, d3.max(d3.selectAll(n).data().map(m=> m.length))]).range([0, (dimensions.height - dimensions.margin)]);\n        return y(Object.keys(d).length - 2);\n    })\n    .attr('fill', defaultBarColor).attr('fill-opacity', .5);\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, d3.max(d3.selectAll(n).data().map(m=> m.length))]).range([0, (dimensions.height - dimensions.margin)]);\n       \n        let movey = dimensions.height - y(Object.keys(d).length - 2);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    contOb.each((d, i, nodes)=> {\n        let xvalues = d.leafData.data.map(m=> {\n            return +m.values[valueParam]});\n            \n        let x = d3.scaleLinear()\n            .domain([d3.min(xvalues), d3.max(xvalues)])\n            .range([0, dimensions.observedWidth]);\n\n        let y = d3.scaleLinear()\n            .domain([0, d3.max(d.leafData.bins.map(b=> Object.keys(b).length)) - 2])\n            .range([(dimensions.height - dimensions.margin), 0]);\n        \n        d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis', true)\n            .call(d3.axisBottom(x))\n            .attr('transform', 'translate(0, '+dimensions.height+')')\n\n        d3.select(nodes[i]).append('g')\n            .classed('y-axis', true)\n            .call(d3.axisLeft(y).ticks(4))\n            .attr('transform', 'translate(0, '+dimensions.margin+')');\n\n        d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n        d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n\n        d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis-label', true)\n            .append('text').text('Frequency')\n            .attr('transform', `translate(-20, ${dimensions.height- 10}) rotate(-90)`)\n            .style('font-size', '10px');\n    });\n    \n  /**\n   * OBSERVED DISCRETE\n   */\n    let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n    discOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, 5)`)\n    let discBars = discOb.selectAll('g.ob-bars').data(d=> {\n        return d.stateKeys.map((key, i)=>{\n            return {state: key, data: d.leafData.bins[i], max: d3.sum(d.leafData.bins.map(b=> b.length))}\n        });\n    }).join('g').classed('ob-bars', true);\n    let dRects = discBars.append('rect')\n    .attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10): 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height)])\n        return y(d.data.length);\n    }).attr('fill', (d, i) => {\n        return d.data[0] != undefined ? d.data[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    discBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10) : 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height-5)])\n        let movey = (height) - y(d.data.length);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    dRects.on('mouseover', (d, i, n)=> {\n        let state = d3.select('g.'+d[0].label).selectAll('g.state');\n        state.filter(f=> {\n            return f[0].state === d[0].winState}).attr('opacity', 0.8);\n        state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n        d3.select(n[i]).attr('opacity', 0.9);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).attr('opacity', 0.3);\n        let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n    });\n\n    discOb.each((d, i, nodes)=> {\n           \n        let xPoint = d3.scalePoint().domain(d.stateKeys).range([0, dimensions.observedWidth]).padding(.6)\n        let height = d.stateKeys ? (d.stateKeys.length * dimensions.squareDim - 10) : 0;\n        let y = d3.scaleLinear().domain([0, d.leafData.data.length]).range([(height), 0]);\n        d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4))//.attr('transform', 'translate(0, '+height+')');\n        d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n\n        d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n        d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n    });\n\n}\n\nfunction brushedNodes(nodes, notNodes, data, brushedVal, classLabel){\n   \n    let nodeNames = nodes.map(m=> m.node);\n    let notNodeNames = notNodes.map(m=> m.node);\n\n    let timeNodes = d3.extent(nodes.map(m=> m.combLength));\n    let treeNode = d3.select('#sidebar').selectAll('.node');\n\n    let selectedBranch = treeNode.filter(f=> {\n        return nodeNames.indexOf(f.data.node) > -1;\n    }).classed('brushed-branch', true);\n\n    let notNodeSelectedBranch = treeNode.filter(f=> notNodeNames.indexOf(f.data.node) > -1).classed('anti-brushed', true);\n\n    let test = pullPath([], selectedBranch.data(), [], [], 0);\n    let notTest = pullPath([], notNodeSelectedBranch.data(), [], [], 0);\n\n    let testtest = test.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values[valueParam] >= brushedVal[0] && f.data.attributes[data.key].values[valueParam] <= brushedVal[1];\n    }).map(m=> m.data.node);\n\n    let notTestTest = notTest.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values[valueParam] < brushedVal[0] || f.data.attributes[data.key].values[valueParam] > brushedVal[1];\n    }).map(m=> m.data.node);\n    \n    let secondGrp = treeNode.filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n\n    let secondLinks = d3.select('#sidebar').selectAll('.link')\n        .filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n    \n    selectedBranch.classed(`${data.key}`, true).classed(classLabel, true).classed('brushed-branch', true);\n   \n    let notNodeSecondGrp = treeNode\n        .filter(f=> (notNodeNames.indexOf(f.data.node) === -1 )&& (notTestTest.indexOf(f.data.node) > -1))\n        .classed('anti-brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n\n    let secondAntiLinks = d3.select('#sidebar').selectAll('.link')\n            .filter((f, j)=> (notNodeNames.indexOf(f.data.node) === -1)&&(notTestTest.indexOf(f.data.node) > -1));\n    secondAntiLinks.classed('anti-brushed-second', true).classed(`${data.key}`, true).classed(classLabel, true);\n    notNodeSelectedBranch.classed('anti-brushed', true).classed(classLabel, true).classed(classLabel, true);\n\n    return [selectedBranch, secondGrp, notNodeSelectedBranch, notNodeSecondGrp];\n}\n\nexport function continuousHistogram(data){\n\n    if(data[0]){\n        let x = data[0].yScale;\n        let histogram = d3.histogram()\n                .value(function(d) { return d.values[valueParam]; })  \n                .domain(x.domain())  \n                .thresholds(x.ticks(20)); \n    \n        return histogram(data);\n    }else{\n        return [];\n    }\n   \n}\n\nexport const mirrorlineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([n.length - 1, 0]).range([0, dimensions.height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = n.maxCount ? n.maxCount : d.maxCount;\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        \n        return x(dat); \n});\n\nexport const lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, n.length - 1]).range([0, dimensions.height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = d.maxCount? d.maxCount : d3.sum(n.map(m=> m.length))\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        return x(dat); \n    });\n\nfunction renderDiscretePredicted(discreteDist){\n            /////////EXPERIMENT////////\n    let stateBarsPredicted = discreteDist.selectAll('g.histo-bars')\n        .data(d=> {\n            let bins = d.bins.map(m=> {\n                m.index = d.index;\n                return m\n            });\n            return bins}).join('g')\n        .classed('histo-bars', true);\n\n    //stateBarsPredicted.attr('transform', (d, i)=> `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`);\n    stateBarsPredicted.attr('transform', (d, i, n)=> {\n        return `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`});\n\n    let discreteWidth = 85;\n\n    let binRects = stateBarsPredicted.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', discreteWidth)\n            .attr('stroke', 'black')\n            .style('stroke-width', 0.5)\n            .attr('fill', '#fff')\n            .attr('opacity', 0.3);\n\n    stateBarsPredicted.append('text')\n        .text('1')\n        .attr('transform', `translate(${discreteWidth + 2},10)`)\n        .style('font-size', '10px')\n        .style('opacity', 0.6);\n\n    stateBarsPredicted.append('text')\n        .text('0')\n        .attr('transform', `translate(-7,10)`)\n        .style('font-size', '10px')\n        .style('opacity', 0.6);\n\n    function randomizer(){\n        var min= -.03; \n        var max= .03;  \n        var random = Math.random() * (+max - +min) + +min; \n        return random;\n    }\n\n\n    let probabilityTicks = stateBarsPredicted\n    .selectAll('.prob-tick')\n    .data((d, i, n)=> {\n        \n        let form = d3.format(\".3f\");\n\n        let jitterMove = [...new Set(d.state.map(m=> +form(m.value)))].map(m=> {\n            let arrayTest = d.state\n            .filter(f=> +form(f.value) === m)\n            .map(arr=> {\n                arr.y = Math.random();\n                arr.x = randomizer();\n                \n                return arr;\n            });\n            return arrayTest;\n        });\n       \n        let state = d.state.map(m=> {\n          \n            \n            let newstate = m;\n            newstate.average = d3.mean(d.histogram.flatMap(m=> m.map(v=> +v.value)));\n    \n            newstate.color = d.color.color;\n            return newstate;\n        });\n    \n\n        state.color = d.color.color;\n \n         state.average = d3.mean(d.histogram.flatMap(m=> +m));\n        return state;\n    }).join('circle').classed('prob-tick', true)\n\n    probabilityTicks\n        .attr('r', 2)\n        .attr('opacity', 0.4)\n        .attr('fill', 'gray');\n\n    probabilityTicks.attr('transform', (d, i, n)=> {\n        let scale = d3.scaleLinear().domain([0, 1]).range([2, (discreteWidth - 2)]).clamp(true);\n    \n    let yScale = d3.scaleLinear().domain([0, 1]).range([2, dimensions.squareDim - 2]);\n  \n    return `translate(${scale(+d.value + d.x)},${yScale(d.y)})`});\n\n    let averageTick = stateBarsPredicted\n        .selectAll('.av-tick').data((d, i, n)=> {\n        \n            return [{value: d.state[0].average, color: d.color.color}];\n        }).join('rect').classed('av-tick', true)\n        .attr('width', 1).attr('height', dimensions.squareDim)\n        .attr('fill', d=> d.color)\n        .attr('transform', (d, i, n)=> {\n        \n            let avValue = d.value != undefined ? d.value : 0;\n            let scale = d3.scaleLinear().domain([0, 1]).range([0, (discreteWidth - 2)]);\n            return `translate(${scale(d.value)}, 0)`});\n\n    averageTick.on('mouseover', (d, i, n)=> {\n    \n        let tool = d3.select('#tooltip');\n\n        tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n        \n        let f = d3.format(\".3f\");\n        \n        tool.html(`Average: ${f(d.value)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n        tool.style('height', 'auto');\n\n    }).on('mouseout', ()=>{\n        let tool = d3.select('#tooltip');\n        tool.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    });\n\n    probabilityTicks.on('mouseover', (d, i, n)=> {\n    \n        let tool = d3.select('#tooltip');\n\n        tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n        \n        let f = d3.format(\".3f\");\n        \n        tool.html(`${d.state} : ${f(d.value)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n        tool.style('height', 'auto');\n\n    }).on('mouseout', ()=>{\n        let tool = d3.select('#tooltip');\n        tool.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    });\n\n    /////////END XPERIMENT////////\n\n    let stateBinsPredicted = discreteDist.selectAll('g.state-bins')\n        .data(d=> d.bins).join('g')\n        .classed('state-bins', true);\n\n    stateBinsPredicted.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n\n    discreteDist.each((d, i, node)=>{\n        let maxBin = 0;\n        let maxState = null;\n        d.bins.map(m=> {\n            if(d3.sum(m.state.flatMap(s=> s.value)) > maxBin){\n                maxBin = d3.sum(m.state.flatMap(s=> s.value));\n                maxState = m.color.state;\n            }\n        });\n\n        let winStates = d3.select(node[i]).selectAll('g.state-bins')\n            .filter((f, j, n)=>{\n                return f.color.state === maxState;\n            }).classed('win', true);\n\n        let winStateTicks = d3.select(node[i]).selectAll('g.histo-bars')\n            .filter((f, j, n)=>{\n                return f.color.state === maxState;\n            }).classed('win', true);\n        \n        winStates.select('rect.state-rect').attr('fill', (c)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            });\n    // winStateTicks.selectAll('rect.prob-tick').attr('fill', (c)=> c.color);\n        \n    });\n}\n\nfunction renderContinuousPredicted(continDist){\n\n    continDist.each((d, i, nodes)=> {\n        let distrib = d3.select(nodes[i])\n            .selectAll('g')\n            .data([d.bins])\n            .join('g')\n            .classed('distribution', true);\n\n        distrib.attr('transform', 'translate(10, '+dimensions.height+') rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", defaultBarColor).attr('fill-opacity', .4)//.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', defaultBarColor);\n    });\n\n    let contRect = continDist.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 11)\n        .style('fill', '#fff');\n\n    continDist.append('rect')\n        .attr('width', 10)\n        .attr('height', dimensions.height)\n        .style('fill', 'none')\n        .style('stroke', 'gray')\n        .attr('opacity', 0.3)\n        \n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        });\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.scales.yScale != undefined){\n            let newy = d.scales.yScale;\n            newy.range([80, 0]);\n               \n            let min = scalingValues(d.scales.min);\n            let max = scalingValues(d.scales.max);\n          \n            newy.domain([min, max]);\n\n            let up = valueParam === 'realVal' ? +d.values.upperCI95 : +d.values.logUpper;\n            let low = valueParam === 'realVal' ? +d.values.lowerCI95 : +d.values.logLower;\n            return newy(low) - newy(up);\n  \n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n\n        let newy = d.scales.yScale;\n        newy.range([80, 0]);\n           \n        let min = scalingValues(d.scales.min);\n        let max = scalingValues(d.scales.max);\n      \n        newy.domain([min, max]);\n\n        let up = valueParam === 'realVal' ? +d.values.upperCI95 : +d.values.logUpper;\n\n        return 'translate(0,'+newy(up)+')'\n    });\n\n    //rangeRect.attr('fill', \"rgba(133, 193, 233, .05)\");\n    rangeRect.attr('fill', defaultBarColor).attr('opacity', 0.2);\n\n    let normalDisRect = continDist.append('rect')\n        .attr('width', 10)\n        .style('fill', 'none')\n        .style('stroke', 'gray')\n        .attr('height', (d, i, n)=>{\n                let y = d3.scaleLinear().domain([d.data[0].scales.min, d.data[0].scales.max]).range([dimensions.height, 0]);\n                let h = y(d.data[0].normalRange[0]) - y(d.data[0].normalRange[1]);\n                \n                if(h < dimensions.height){\n                    if(y(d.data[0].normalRange[0]) > dimensions.height){\n                        return dimensions.height - y(d.data[0].normalRange[1]);\n                    }else{\n                        return y(d.data[0].normalRange[0]) - y(d.data[0].normalRange[1]);\n                    }\n                    \n                }else{\n                    return dimensions.height;\n                }\n                \n        }).attr('transform', (d, i)=> {\n            let y = d3.scaleLinear().domain([d.data[0].scales.min, d.data[0].scales.max]).range([dimensions.height, 0]);\n\n        if(d.data[0].scales.max >= d.data[0].normalRange[1]){\n            return `translate(0, ${y(d.data[0].normalRange[1])})`;\n        }else{\n            return `translate(0, 0)`;\n        }\n            \n        });\n\n    let avRect = continDist.append('rect').attr('width', 10).attr('height', (d, i)=> {\n        if(d.data[0] != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n\n    avRect.attr('transform', (d, i) => {\n        if(d.data[0] != undefined){\n            let newy = d.data[0].scales.yScale;\n           \n            let min = scalingValues(d.data[0].scales.min);\n            let max = scalingValues(d.data[0].scales.max);\n          \n            newy.range([dimensions.height, 0]);\n            newy.domain([min, max]);\n            let mean = d3.mean(d.data.map(m=> +m.values[valueParam]));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', '#004573');\n\n    let outliers = continDist.selectAll('g.outlier').data(d=> {\n       \n        return d.outliers.map(m=> {\n            m.domain = d.domain;\n            return m\n        });\n        \n    }).join('g').classed('outlier', true);\n\n    outliers.append('rect').attr('width', 10).attr('height', 2);\n\n    outliers.attr('transform', (d, i) => {\n        let yScale = d3.scaleLinear().domain([d.scales.min, d.scales.max]).range([dimensions.height, 0]);\n       return `translate(0,${yScale(d.values.realVal)})`;\n    }).attr('fill', 'red').attr('opacity', 0.7)\n}\n\nfunction highlightNodesMouseover(d, i, node, pointGroups){\n    let list = d.data.map(m=> m.node);\n    let selected = pointGroups.filter(p=> {\n        return list.indexOf(p.node) > -1}).classed('selected', true);\n    let treeNode  = d3.select('#sidebar').selectAll('.node');\n    let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n    if(d.type === 'continuous'){\n        let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n        let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n    }\n    \n}\n\n","import * as d3 from \"d3\";\nimport { load_data } from \"./multinetLoad\";\nimport { discreteTraitList, colorKeeper, calculatedScalesKeeper, dataMaster, nestedData, speciesTest } from \".\";\nimport { allPaths } from \"./pathCalc\";\nimport { binGroups } from \"./distributionView\";\nimport { addCladeGroup, chosenCladesGroup, addClade } from \"./cladeMaker\";\nimport { buildTreeStructure } from \"./sidebarComponent\";\nimport { calcVolatility } from \"./renderPathView\";\nimport { valueParam } from './toolbarComponent';\n\n\n\nexport const maxTimeKeeper = [];\n\nexport function calculateSDRange(ValueArray){\n\n\n\n}\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\nexport function generateTraitScale(extent, pixelRange){\n\n    let scale = valueParam === 'realVal'? d3.scaleLinear() : d3.scaleLog();\n    scale.domain(extent).range(pixelRange).clamp(true);\n    return scale;\n}\n\nexport function scalingValues(num){\n    if(valueParam === 'realVal'){\n        return num;\n    }else{\n        if(num < 0){\n           \n            return (Math.log(Math.abs(num)) * -1);\n        }else{\n            return Math.log(num);\n        }\n    }\n}\n\nfunction generatePairs(pathData){\n    return pathData.flatMap((path, i)=> {\n        let pairs = pathData.filter((f, j)=> j != i);\n        let paired =  pairs.map((p)=> {\n            return {'p1': path, 'p2': p}\n        });\n        return paired.map(m=> {\n            let key = [m.p1[m.p1.length - 1].node, m.p2[m.p2.length - 1].node].sort();\n            m.key = key.join(',');\n            let distance = getDistance(m);\n            m.distance = distance.distance;\n            m.lateDivergence = distance.shallowFlag;\n            m.deltas = calculateDelta(m, distance);\n            m.closeAll = calculateCloseness(m, distance);\n           \n            return m;\n        });\n    });\n}\n\nexport function pairPaths(pathData){\n\n    let allPairs = generatePairs(pathData);\n    let pairSet = [...new Set(allPairs.map(m=> m.key))];\n    return pairSet.map(k=> {\n        let index = allPairs.map(m=> m.key).indexOf(k);\n        return allPairs[index];\n    });\n}\n\nfunction getDistance(pair){\n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n    pair.common = pair.p1[p1Index]\n\n    let distanceFlag = pair.common.combLength > (maxTimeKeeper[maxTimeKeeper.length - 1] / 2) ? true : false;\n\n    return {distance: d3.sum(p1.map(m=> m.edgeLength)) + d3.sum(p2.map(m=> m.edgeLength)), shallowFlag: distanceFlag};\n}\n\nfunction fillBins(b, pair, bins, num, index){\n\n    let earlyBins = bins.filter((f, j)=> j < index && f[num].length > 0);\n    let x1 = earlyBins[earlyBins.length - 1][num][0].combLength;\n\n    let laterBins = bins.filter((f, j)=> {\n        return (j > index) && (f[num].length > 0)});\n\n    let x2 = laterBins.length === 0 ? pair[pair.length - 1].combLength : laterBins[0][num][0].combLength;\n\n    let slope = function(y1, y2){\n        return ((y2-y1) / (x2-x1));\n    };\n\n\n    b.lateDivergence = earlyBins[0][num][0].combLength >= (maxTimeKeeper[maxTimeKeeper.length - 1] * .6) ? true : false;\n\n    b[`slope_${num}`] = slope;\n    b[`y1_${num}`] = earlyBins[earlyBins.length - 1][num][0];\n    b[`y2_${num}`] = laterBins.length === 0 ? pair[pair.length - 1] : laterBins[0][num][0];\n\n    return b;\n\n}\n\nfunction calculateDelta(pair, distance){\n   \n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n \n    let range = maxTimeKeeper[maxTimeKeeper.length - 1] - p1[0].combLength;\n    let binCount = d3.max([p1.length, p2.length])\n    let binStep = range / binCount;\n   \n    let bins = [...new Array(binCount-1)].map((d, i)=> {\n        return {'bottom': p1[0].combLength + (i*binStep), 'top': p1[0].combLength + ((i+1)*binStep) }\n    })\n   \n    bins = bins.map((d, i)=> {\n        let one = p1.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        let two = p2.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        d.one = one;\n        d.two = two;\n        return d;\n    });\n\n    bins = bins.map((b, i)=> {\n        if(b.one.length === 0){\n           \n            b = fillBins(b, p1, bins, 'one', i);\n           \n          \n        }\n        if(b.two.length === 0){\n          \n            b = fillBins(b, p2, bins, 'two', i);\n\n        }\n\n        return b;\n    });\n\n    let slopeMagic = function(bin, num, trait){\n\n        let slope = bin[`slope_${num}`](bin[`y1_${num}`].attributes[trait].values.realVal, bin[`y2_${num}`].attributes[trait].values.realVal);\n        let x = (bin.top - bin.bottom);\n        let b = bin[`y1_${num}`].attributes[trait].values.realVal - (slope * bin[`y1_${num}`].combLength);\n\n        return (slope * x) + b;\n    }\n    \n    let attributes = d3.entries(p1[0].attributes)\n                    .filter(f => f.value.type === 'continuous')\n                    .map(m=> {\n                        let name = m.key;\n                        let valdiffs = bins.map((b, i)=> {\n                            let maxOneVal = [];\n                            let maxTwoVal = [];\n\n                            if(b.slope_one && !b.slope_two){\n\n                                let oneVal = b.lateDivergence === true ? b.y1_one.attributes[name].values.realVal : slopeMagic(b, 'one', name);\n\n                                //maxOneVal.push(slopeMagic(b, 'one', name));\n                                maxOneVal.push(oneVal);\n\n                                let test2 = d3.extent(b.two.map(m=> m.attributes[name].values.realVal));\n                                maxTwoVal.push(test2[0] < 0 ? test2[0]: test2[1]);\n\n                            }else if(b.slope_two && !b.slope_one){\n\n                                let twoVal = b.lateDivergence === true ? b.y1_two.attributes[name].values.realVal : slopeMagic(b, 'two', name);\n                                maxTwoVal.push(twoVal);\n\n                                let test1 = d3.extent(b.one.map(m=> m.attributes[name].values.realVal));\n                                maxOneVal.push(test1[0] < 0 ? test1[0]: test1[1]);\n\n                            }else if(b.slope_one && b.slope_two){\n\n                                // maxOneVal.push(slopeMagic(b, 'one', name));\n                                // maxTwoVal.push(slopeMagic(b, 'two', name));\n                                let oneVal = b.lateDivergence === true ? b.y1_one.attributes[name].values.realVal : slopeMagic(b, 'one', name);\n                                maxOneVal.push(oneVal);\n\n                                let twoVal = b.lateDivergence === true ? b.y1_two.attributes[name].values.realVal : slopeMagic(b, 'two', name);\n                                maxTwoVal.push(twoVal);\n\n                            }else{\n\n                                let test1 = d3.extent(b.one.map(m=> m.attributes[name].values.realVal));\n                                maxOneVal.push(test1[0] < 0 ? test1[0]: test1[1]);\n                        \n                                let test2 = d3.extent(b.two.map(m=> m.attributes[name].values.realVal));\n                                maxTwoVal.push(test2[0] < 0 ? test2[0]: test2[1]);\n                            }\n                            \n\n                 \n                            return Math.abs(maxOneVal[0] - maxTwoVal[0]);\n                          \n                        });\n                       // m.value = d3.max(valdiffs) / distance;\n                        m.value = d3.max(valdiffs) /// distance;\n                        return m;\n                    });\n\nreturn attributes;\n\n}\n\nfunction calculateCloseness(pair, distance){\n let leaf1 = pair.p1.filter(p=> p.leaf === true)[0].attributes;\n let leaf2 = pair.p2.filter(p=> p.leaf === true)[0].attributes;\n\n let closeness = d3.entries(leaf1).filter(f=> f.value.type === 'continuous').map(m=> {\n\n\n     m.value = Math.abs(m.value.values.realVal - leaf2[m.key].values.realVal)// / distance;\n     return m\n });\n\n return closeness;\n}\n\nfunction calcPopVol(){\n\n}\n\nexport function calculateNewScales(attributes, keyList, colorKeeper){\n\n    return keyList.map((d, i)=> {\n\n        let attData = attributes.flatMap(f=> f[d]);\n        let color = colorKeeper[i] != undefined ? colorKeeper[i][0] : colorKeeper[0][0];\n       \n        if(attData[0].type == 'continuous'){\n            \n            let max = d3.max(attData.flatMap(m=> m.values.upperCI95));\n            let min = d3.min(attData.flatMap(m=> m.values.lowerCI95));\n            let mean = d3.mean(attData.flatMap(m=> m.values.realVal));\n            let deviation = d3.deviation(attData.flatMap(m=> m.values.realVal));\n            let stRange = [(mean - (deviation * 2)), (mean + (deviation * 2))]\n            \n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'popDeviation':deviation,\n                'popNormalRange': stRange,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([color, '#f23929']).domain([min, max]),\n                'catColor': color,\n            };\n\n        }else{\n            let disAtt= attributes.map(f=> f[d]);\n           \n            let scaleCat = d3.keys(attData[0].values);\n\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, j)=> {\n                    return {'state': sc, 'color': colorKeeper[j][0]};\n                }),\n                'catColor': color,\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            \n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n            \n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                    \n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n        leaf.label = mappedLeafLabels[i];\n\n        //let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n      \n        let leafCharIndex = leafChar.rows[0][\"\"] ? leafChar.rows.map(m=> m[\"\"]) : leafChar.rows.map(m=> m[\"species\"]);\n  \n        leaf.node = leaf.V2;\n        let keys = calculatedScales.map(m=> m.field);\n        let attr = {};\n         \n        let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n        keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                    // return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                     return {'state': state, realVal: value};\n                 });\n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 //attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n                 attr[k] = {'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n\n         leaf.clade = chosenOne.clade;\n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                   // res.scaleVal = scale(res.estimate);\n                   // res.scaledLow = scale(res.lowerCI95);\n                    //res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                       // return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                        return {'state': s.scaleName, realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\nexport function rootAttribute(paths, calculatedAtt, calculatedScales){\n\n    let rootAtt = calculatedAtt.filter(f=> f.node === paths[0][0].node)[0];\n\n    Object.keys(rootAtt).filter(f=> f != 'node').map(att=> {\n        rootAtt[att].scales = calculatedScales.filter(f=> f.field === att)[0];\n    });\n\n    return paths.map((p, i)=> {\n        p[0].attributes = rootAtt;\n        p[0].root = true;\n        return p\n    });\n\n};\nexport function combineLength(paths){\n\n    let maxTime = paths.map(path=> d3.sum(path.map(p=> p.edgeLength)))[0];\n    maxTimeKeeper.push(maxTime);\n    return paths.map(path=> {\n        return path.map((node, i, n)=> {\n            node.maxTime = maxTime;\n            node.combLength = d3.sum(n.filter((f, j)=> i >= j).map(m=> m.edgeLength));\n            return node;\n        })\n    })\n\n}\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(pathData, scales, filterArray){\n\n    let keys = (filterArray == null)? Object.keys(pathData[0][0].attributes).filter(f=> f != 'node' && f != 'leaf' && f != 'length' && f != 'root' && f != 'key'): filterArray;\n    let test = pathData.map((path, i)=> {\n        return scales.map(m=> calcVolatility(path, m.field));\n    });\n    let newData = pathData.map(path=> {\n        return keys.map((key)=> {\n     \n            return path.map((m)=> {\n                let speciesLabel = path[path.length - 1].node;\n                if(m.attributes[key].type === 'continuous'){\n                \n                    m.attributes[key].species = speciesLabel;\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.combineLength;\n                    m.attributes[key].combLength = m.combLength;\n                    m.attributes[key].node = m.node;\n                    m.attributes[key].edgeMove = m.edgeLength;\n                    m.attributes[key].edgeLength = m.edgeLength;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = m.attributes[key].scales.yScale;\n                    m.attributes[key].satScale = m.attributes[key].scales.satScale;\n                    m.attributes[key].colorScale = m.attributes[key].scales.colorScale;\n                    m.attributes[key].normalRange = m.attributes[key].scales.popNormalRange;\n                    if(m.leaf){\n                        m.attributes[key].leaf = m.leaf;\n                    }\n                    m.attributes[key].leaf = m.leaf;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf === true){\n                        let states = d3.entries(m.attributes[key].values);\n                     \n                        m.attributes[key].leaf = m.leaf;\n                        let state = m.attributes[key];\n                        state.states = {field: key, state: m.attributes[key].values[key]}\n                        state.species = speciesLabel;\n                        state.winState = m.attributes[key].values[key] ?  m.attributes[key].values[key] : d3.entries(m.attributes[key].values);\n                        state.color = m.attributes[key].scales.stateColors.filter(f=> {\n                            return f.state.includes(state.winState)})[0].color;\n\n                        \n                        state.move = m.combLength;\n                        state.combLength = m.combLength;\n                        state.node = m.node;\n                        state.edgeMove = m.edgeLength;\n                        state.edgeLength = m.edgeLength;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : d3.entries(m.attributes[key].values);//.filter(f => f.state != undefined);\n\n                        return states.map((st, j)=> {\n                            st.state = st.key;\n                            st.value = st.value;\n                            \n                            st.color = m.attributes[key].scales.stateColors.filter(f=> f.state === st.key)[0];\n                           \n                            st.move = m.combLength;\n                            st.combLength = m.combLength;\n                            st.node = m.node;\n                            st.edgeMove = m.edgeLength;\n                            st.edgeLength = m.edgeLength;\n                            st.attrLabel = key;\n                            st.species = speciesLabel;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n\n   \n    return newData;\n}\n\nexport function abbreviate(word, limit){\n    \n    if(word.length > limit){\n        return word.slice(0, limit) + '...';\n    }else{\n        return word;\n    }\n}\n\nexport async function dataLoadAndFormatMultinet(workspace, graphName){\n\n    let dataName = graphName;\n    let data = await load_data(workspace, graphName);\n\n    let internalIndex = 0;\n    let leafIndex = 1;\n  \n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let attributeList = [];\n\n    let edges = data.links[0].rows;\n\n    let internal = data.nodes[internalIndex].rows//.filter(f=> f._id.includes('internal'));\n    let leaves = data.nodes[leafIndex].rows//.filter(f=> f._id.includes('leaf'));\n\n    let notAttributeList = [\"_id\", \"label\", \"_key\", \"_rev\", \"key\", \"length\"];\n\n    ///Creating attribute list to add estimated values in //\n    d3.keys(leaves[0]).filter(f=> notAttributeList.indexOf(f) === -1).forEach((d, i)=> {\n        if(discreteTraitList.indexOf(d) > -1){\n            attributeList.push({field: d, type: 'discrete'});\n        }else{\n            attributeList.push({field: d, type:'continuous'});\n        }\n    });\n\n    let calculatedAtt = internal.map((row, i)=> {\n\n        let newRow = {};\n        attributeList.forEach((att)=>{\n         \n            if(d3.entries(row).filter(f=> f.key.includes(att.field)).length > 0){\n                newRow[att.field] = {};\n                newRow[att.field].field = att.field;\n                newRow[att.field].type = att.type;\n                let values = {}\n                d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                    \n                    if(att.type === 'continuous'){\n                       \n                        if(m.key.includes('upperCI')){\n                            values.upperCI95 = +m.value;\n                            \n                         \n                            values.logUpper = +m.value < 0 ? (Math.log(Math.abs(+m.value)) * -1) : Math.log(+m.value);\n                        }else if(m.key.includes('lowerCI')){\n                            values.lowerCI95 = +m.value;\n                         \n                            let logLower = +m.value < 0 ? (Math.log(Math.abs(+m.value))) : Math.log(+m.value);\n                            values.logLower = logLower;\n                        }else{\n                            values.realVal = +m.value;\n                         \n                            values.logVal = +m.value < 0 ? (Math.log(Math.abs(+m.value)) * -1) : Math.log(+m.value);\n                        }\n                    }else{\n                         values[m.key] = m.value;   \n                    }\n                });\n                newRow[att.field].values = values;\n\n\n            }\n        });\n        newRow.node = row.label;\n        newRow.key = row._id;\n        newRow.length = +row.length;\n        newRow.leaf = false;\n        return newRow;\n    });\n\n    let calcLeafAtt = leaves.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                    values.realVal = +m.value;\n                    values.logVal = +m.value < 0 ? (Math.log(Math.abs(+m.value)) * -1) : Math.log(+m.value);\n                }else{\n                    values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.label;\n        newRow.label = row.label;\n        newRow.length = +row.length;\n        newRow.key = row._id;\n        newRow.leaf = true;\n        return newRow;\n    });\n\n    let calculatedScales = calculateNewScales(calculatedAtt, attributeList.map(m=> m.field).filter(f=> d3.keys(calculatedAtt[0]).indexOf(f) > -1), colorKeeper);\n\n    let matchedEdges = edges.map((edge, i)=> {\n\n        let edgeSource = '_from';\n        let edgeTarget = '_to';\n\n        let attrib = edge[edgeTarget].includes(\"internal\") ? calculatedAtt.filter(f=> f.key === edge[edgeTarget])[0] : calcLeafAtt.filter(f=> f.key === edge[edgeTarget])[0];\n        let fromNode = edge[edgeSource].includes(\"internal\") ? calculatedAtt.filter(f=> f.key === edge[edgeSource])[0] : calcLeafAtt.filter(f=> f.key === edge[edgeSource])[0];\n\n        if(attrib){\n            Object.keys(attrib).filter(f=> (f != 'node') && (f != 'label') && (f != 'length') && (f != 'leaf') && (f != 'key')).map((att, i)=>{\n                let scales = calculatedScales.filter(f=> f.field=== att)[0];\n                attrib[att].scales = scales;\n                return att;\n            })\n        }\n        let newEdge = {\n            V1: fromNode.node,\n            V2: attrib.node,\n            node: attrib.node,\n            leaf: attrib.leaf,\n            edgeLength: +attrib.length,\n            attributes: attrib ? attrib : null\n        }\n       \n        return newEdge;\n    });\n\n    let paths = allPaths(matchedEdges, matchedEdges.filter(f=> f.leaf === true), \"V1\", \"V2\")\n        .map((path, i)=> {\n            let root = path[0];\n            let attrib = calculatedAtt.filter(f=> f.node === root.node)[0];\n            if(attrib){\n               \n                Object.keys(attrib).filter(f=> (f != 'node') && (f != 'label') && (f != 'length') && (f != 'leaf') && (f != 'key')).map((att, i)=>{\n                    let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                    attrib[att].scales = scales;\n                    return att;\n                });\n            }\n            let rooted = {\n                V1: null,\n                V2: attrib.node,\n                node: attrib.node,\n                leaf: attrib.leaf,\n                root: true,\n                edgeLength: 0,\n                attributes: attrib ? attrib : null\n            }\n            path[0] = rooted;\n            return path;\n        });\n\n    let normedPaths = combineLength(paths);\n    let group = binGroups(normedPaths, dataName, calculatedScales, 8);\n    let chosenClade = addCladeGroup(`All ${dataName}`, ['Whole Set'], [{'label': `All ${dataName}`, 'paths': normedPaths, 'groupBins': group}]);\n    chosenCladesGroup.push(chosenClade)    \n    \n    addClade(`All ${dataName}`, normedPaths);\n\n    calculatedScalesKeeper.push(calculatedScales);\n    dataMaster.push(normedPaths);\n    nestedData.push(buildTreeStructure(normedPaths, matchedEdges));\n    speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.node));\n\n    return [normedPaths, calculatedScales];\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {calculateNewScales, rootAttribute, combineLength, dataLoadAndFormatMultinet, loadData} from './dataFormat';\nimport {allPaths} from './pathCalc';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {toolbarControl, toolbarDataControl, logScaleToggle} from './toolbarComponent';\nimport { initialViewLoad } from './viewControl';\nimport { addCladeGroup, chosenCladesGroup, addClade} from './cladeMaker';\nimport { binGroups } from './distributionView';\nimport { getGraphNames } from './multinetLoad';\n\n\nexport const dataMaster = [];\nexport const savedSelected = [];\nexport const collapsed = false;\nexport const nestedData = [];\nexport const speciesTest = [];\nexport const calculatedScalesKeeper = [];\n\nexport const colorKeeper = [\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n]\n\nexport const attributeList = [];\nexport let discreteTraitList = ['Clade', 'Group', 'island/mainland', 'ecomorph', 'island'];\n\nexport const workspace = 'evo-bio';\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nwrap.select('#selected').classed('hidden', true);\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar').select('#tool-buttons');\nlet toolbarDataWrap = toolbarDiv.append('div').classed('toolbar-data-button', true);\nlet toolbarButtonWrap = toolbarDiv.append('div').classed('toolbar-button-wrap', true);\nwrap.select('#filter-tab').classed('hidden', true);\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n\n////DATA LOADING////\n\n\n\nappLaunch();\n\nasync function appLaunch(){\n\n    let graphList = await getGraphNames(workspace);\n\n    graphList = graphList.map(name=> {\n        return {field: name, text: `Data: ${name}`}\n    });\n\n    let chosen = graphList.filter(f=> f.field === 'island-anolis')[0];\n\n    toolbarDataControl(toolbarDataWrap, graphList, chosen);\n    logScaleToggle();\n    loadApp(workspace, chosen.field);\n\n}\n\nexport async function loadApp(workspace, graphName){\n \n    dataLoadAndFormatMultinet(workspace, graphName).then(centData=> {\n\n        toolbarControl(toolbarButtonWrap, main, centData[1]);\n        d3.select('#clade-show').selectAll('li').select('input').node().checked = true\n        renderTree(null, true, false);\n        renderTreeButtons(centData[0], false);\n\n    \n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        initialViewLoad(centData[1]);\n    });\n}\n\nasync function dataLoadAndFormat(edgeFile, edgeLengthFile, leafCharFile, resFile, dataName){\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edges = await loadData(d3.json, `./public/data/${edgeFile}`, 'edge');\n    let leafChar = await loadData(d3.csv, `./public/data/${leafCharFile}`, '');\n    let edgeLen = await loadData(d3.json, `./public/data/${edgeLengthFile}`, 'edge');\n    let char = await loadData(d3.json, `./public/data/${resFile}`, '');\n\n    ///Creating attribute list to add estimated values in //\n\n    leafChar.columns.filter(f=> f != 'species').forEach((d, i)=> {\n\n        if(discreteTraitList.indexOf(d) > -1){\n            attributeList.push({field: d, type: 'discrete'});\n        }else{\n            attributeList.push({field: d, type:'continuous'});\n        }\n\n    });\n\n    edges.rows = edges.rows.filter(f=> f.From != \"\").map((edge, i)=> {\n        edge.edgeLength = edgeLen.rows[i].x;\n        return edge;\n    });  \n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.From);\n   \n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.To) == -1 );\n\n    let calculatedAtt = char.rows.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                   \n                    if(m.key.includes('upperCI')){\n                        values.upperCI95 = m.value;\n                    }else if(m.key.includes('lowerCI')){\n                        values.lowerCI95 = m.value;\n                    }else{\n                        values.realVal = m.value;\n                    }\n                }else{\n                     values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.nodeLabels;\n        return newRow;\n    });\n\n  \n    let calculatedScales = calculateNewScales(calculatedAtt, attributeList.map(m=> m.field), colorKeeper);\n\n    let matchedEdges = edges.rows.map((edge, i)=> {\n        let attrib = calculatedAtt.filter(f=> f.node === edge.To)[0]\n        if(attrib){\n            Object.keys(attrib).filter(f=> f != 'node').map((att, i)=>{\n                \n                let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                attrib[att].scales = scales;\n                return att;\n                \n            })\n        }\n        let newEdge = {\n            V1: edge.From,\n            V2: edge.To,\n            node: edge.To,\n            edgeLength: edge.edgeLength,\n            attributes: attrib ? attrib : null\n        }\n        return newEdge;\n    });\n\n\n    let calcLeafAtt = leafChar.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                    values.realVal = m.value;\n                }else{\n                    values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.species;\n        newRow.label = row.species;\n        \n        return newRow;\n    })\n\n\n    let matchedLeaves = leaves.map((leaf, i)=>{\n        let attrib = calcLeafAtt.filter(f=> f.node === leaf.To)[0]\n        if(attrib){\n            Object.keys(attrib).map((att, i)=>{\n                if(att!='node' && att != 'label'){\n                    let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                    attrib[att].scales = scales;\n                    return att;\n                }\n            });\n        }\n        let newEdge = {\n            V1: leaf.From,\n            V2: leaf.To,\n            node: leaf.To,\n            edgeLength: leaf.edgeLength,\n            attributes: attrib ? attrib : null,\n            group: null,\n            leaf: true\n        }\n        return newEdge;\n    });\n\n    let all = matchedEdges.filter(f=> f.attributes != null);\n\n    let paths = allPaths(all, matchedLeaves, \"V1\", \"V2\");\n    \n    let addedRoot = rootAttribute(paths, calculatedAtt, calculatedScales);\n\n    let normedPaths = combineLength(addedRoot);\n\n    let group = binGroups(normedPaths, dataName, calculatedScales, 8);\n    let chosenClade = addCladeGroup(`All ${dataName}`, ['Whole Set'], [{'label': `All ${dataName}`, 'paths': normedPaths, 'groupBins': group}]);\n    chosenCladesGroup.push(chosenClade)    \n    \n    addClade(`All ${dataName}`, normedPaths);\n\n    calculatedScalesKeeper.push(calculatedScales);\n    dataMaster.push(normedPaths);\n    nestedData.push(buildTreeStructure(normedPaths, all.concat(matchedLeaves)));\n    speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.node));\n\n    return [normedPaths, calculatedScales];\n}\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}