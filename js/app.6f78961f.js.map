{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/dataLoad.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/viewControl.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/renderPathView.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","loadData","_x","_x2","_x3","_loadData","this","arguments","_callee","readFunction","fileString","type","regeneratorRuntime","wrap","_context","prev","next","sent","String","abrupt","stop","calculateScales","calculatedAtt","colorKeeper","keys","map","max","d3","rows","upperCI95","min","lowerCI95","realVal","field","yScale","range","domain","clamp","satScale","colorScale","catColor","scaleCat","fields","filter","f","stateColors","sc","state","color","scales","scaleName","matchLeaves","labels","leaves","leafChar","calculatedScales","mappedLeafLabels","x","leaf","label","leafCharIndex","node","V2","attr","chosenOne","indexOf","forEach","k","scaleOb","thisScale","states","scaleVal","scale","scaledHigh","scaledLow","attributes","matchEdges","edges","edgeLen","edge","attrKeys","index","edgeLength","res","estimate","undefined","row","normPaths","paths","att","root","nodeLabels","rootAttr","console","error","maxBranch","xScale","leafIndex","prevStep","assign","step","edgeMove","move","formatAttributeData","pathData","filterArray","path","speciesLabel","species","winState","attrLabel","st","allPaths","edgeArray","leafArray","source","target","le","getPath","pathKeeper","ed","reverse","renderDistibutions","mainDiv","moveMetric","attrHide","filterMaster","attribute","newNormed","distributionView_toConsumableArray","keysToHide","medBranchLength","normBins","Array","fill","base","top","binI","internalNodes","leafNodes","flatMap","sortedBins","mapNorm","bin","fData","leafAttr","leafData","histogram","thresholds","ticks","bins","maxO","v","minO","xO","histogramO","branches","colors","chosen","average","stDev","stUp","stDown","test","stat","append","classed","text","dataMaster","svg","branchScale","branchPoints","nodeLengthArray","nodeDuplicateCheck","eMove","bPointScale","pointGroups","selectAll","join","binnedWrap","style","predictedWrap","branchGroup","continDist","on","list","y","select","remove","lineGen","curve","y0","y1","dat","each","nodes","distrib","rangeRect","newy","discreteDist","combEdge","stateGroups","predictedWidth","log","lineGenD","observedWrap","contOb","contBars","height","xvalues","b","discOb","discBars","dRects","xPoint","padding","updateMainView","main","getLatestData","document","getElementById","disabled","drawPathsAndAttributes","removeFilter","filterId","dataFilters","filterType","filterIndex","testData","filterComponent_toConsumableArray","fun","filterFunction","attributeType","newTestData","selectedOption","predictedFilter","observedFilter","addFilterTag","fromState","toState","newFilterMaster","addFilter","attType","filFunction","oldData","newData","extra","filterOb","before-data","ex","toggleFilters","filterButton","filterDiv","normedPaths","presentFilters","noShow","wrapper","labelGroups","toggle","shownToggs","togg","circle","toggleCircle","newKeys","hideKeys","newFilMaster","renderAttToggles","concat","selectWrapper","attButton","stateChange","attProps","options","optionArray","optKeys","button1","button2","submit","classList","discreteFilter","filId","treeLinks","treeNode","nodeList","missingLinks","missingNodes","continRanges","ranges","brushBars","wrapperRect","xBrush","extent","selection","handle","invert","brushGroup","selections","_groups","__brush","sort","lastFilter","continuousFilter","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","filterToolbar","button","span","xSpan","queryFilter","formater","datum","nodeId","nodeFilter","selectedNode","predicted","observed","numb","filterPred","filterObs","win","selectorDiv","selectId","dropDownWrapper","selectedPaths","pathSelected","selectedPath","otherPaths","selectedDiv","selectedPaths_toConsumableArray","commonNodes","selectedSpecies","treeNodes","attrFilter","selectedToolTest","selectedTool","empty","sortByDistanceDiv","sortByDistanceButton","sortButton","attrSortWrap","radioDiv","radio","svgTest","branchFrequency","reduce","acc","curr","selectWrap","circleScale","values","selectedGroups","pathBars","pathRemove","speciesTitle","string","charAt","toUpperCase","timelines","nodeGroups","distance","hovers","nearest","nodearray","nearestA","nearestB","attributeWrapper","attData","attributeGroups","renderAttributes","drawContAtt","drawDiscreteAtt","sorted","a","high","leafOther","highLeaves","low","lowLeaves","same","commonNodeStart","children","nodeIndex","thresh","subset","chil","parentBase","scaledParentMove","parentScale","level","getCommonNodes","childNodeWrap","childNodes","pathArray","line","commonHover","childCirc","attWrap","ch","attDataComb","offset","last","attGroups","dataGroups","speciesArray","contGroups","collapsed","valueBars","tool","transition","duration","html","pageX","pageY","disGroups","disLeaves","longestBranch","startBranch","renderSelectedView","commonNode","chosenPath","rankedPaths","pathIndex","sortedData","sortOtherPaths","nodeTooltipFlag","pathGroups","pathWrapTest","pathWrap","pathAdd","notIt","renderPaths","attKeys","attrMove","predictedAttrGrps","attributeHeight","attribWrap","sizeAndMove","selectedState","leafStateFilter","innerTimeline","innerPaths","change","continuousAtt","continuousPaths","attributeNodesCont","innerBars","bars","discreteAtt","innerTimelineDis","statePath","disct","attributeNodesDisc","stateDots","endStateDot","stateBars","probability","chosenIn","valueAdd","buildTreeStructure","getNested","V1","updateBrush","treeBrush","_this","sidebar","toolbarDiv","treeFilter","brushId","attributType","sidebarComponent_toConsumableArray","_ref","mark","renderTreeButtons","treeButton","treeViewButton","renderTree","dropdiv","dropContent","selectedNodes","no","id","attrDraw","margin","width","treemap","size","addingEdgeLength","nestedData","treenodes","g","descendants","parent","notleaves","circ","toolbarControl","toolbar","pathView","viewButton","scrunchButton","toggleScrunch","togglePathView","discreteViewButton","discretePredictedGroups","savedSelected","then","edgeSource","matchedLeaves","matchedEdges","unique","self","t0","t1","t2","t3","t4","awesomeness","island","SVL","ecomorph","PCIII_padwidth_vs_tail"],"mappings":"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","file":"js/app.6f78961f.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([132,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as d3 from 'd3';\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\n\n","import * as d3 from \"d3\";\n\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n            \n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n        leaf.label = mappedLeafLabels[i];\n        \n        let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n     \n        leaf.node = leaf.V2;\n        let keys = calculatedScales.map(m=> m.field);\n        let attr = {};\n         \n        let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n        keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                     return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                 });\n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n \n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                    res.scaleVal = scale(res.estimate);\n                    res.scaledLow = scale(res.lowerCI95);\n                    res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                        return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\n\nexport function normPaths(paths, calculatedAtt, calculatedScales){\n    paths.forEach((p, i)=> {\n        p[0].attributes = {};\n        Object.keys(calculatedAtt).map(att=> { \n            if(calculatedAtt[att].type == 'continuous'){\n                let root = calculatedAtt[att].rows.filter(f=> (f.nodeLabels == p[0].node) || (f.nodeLabels == ('node ' + p[0].node)))[0];\n                p[0].attributes[att] = {};\n                \n                let scale = calculatedScales.filter(f=> f.field == att)[0].yScale;\n             //   p[0].attributes[att].scaleVal =  scale(root.estimate);\n             //   p[0].attributes[att].scaledLow =  scale(root.lowerCI95);\n             //   p[0].attributes[att].scaledHigh =  scale(root.upperCI95);\n                p[0].attributes[att].realVal = root.estimate;\n                p[0].attributes[att].upperCI95 = root.upperCI95;\n                p[0].attributes[att].lowerCI95 = root.lowerCI95;\n                p[0].attributes[att].scale = scale;\n                p[0].attributes[att].type = 'continuous';\n            }else if(calculatedAtt[att].type == 'discrete'){\n                let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n                let scales = calculatedScales.filter(f=> f.field == att)[0].scales;\n                let rootAttr = scales.map(s=> {\n                    return {'state': s.scaleName,  scaleVal: s.yScale(root[s.scaleName]), realVal: root[s.scaleName]};\n                });\n                p[0].attributes[att] = {'states':rootAttr, 'type': 'discrete'};\n               \n            }else{\n                console.error('type not found');\n            }\n        });\n    });\n    \n    let maxBranch = d3.max(paths.map(r=> r.length));\n\n    //SCALES for X, Y /////\n    let xScale = d3.scaleLinear().range([0, 1000]).clamp(true);\n \n    let normedPaths = paths.map((p, i)=> {\n        p.xScale = xScale.domain([0, maxBranch - 1]);\n     \n        let leafIndex = p.length - 1;\n        let lengths = p.map(l=> l.edgeLength);\n        let prevStep = 0;\n        return p.map((m, j)=> {\n            let node = Object.assign({}, m);\n            //INTEGRATE THE DISTNACES HERE WHEN THEY WORK\n            let step = node.edgeLength + prevStep;\n            node.edgeMove = (j < leafIndex) ? step : 1;\n            prevStep = prevStep + node.edgeLength;\n         \n            node.move = (j < leafIndex) ? p.xScale(j) : p.xScale(maxBranch - 1);\n        \n            return node;\n        });\n    });\n\n    return normedPaths;\n}\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(pathData, scales, filterArray){\n\n    let keys = (filterArray == null)? Object.keys(pathData[0][0].attributes): filterArray;\n   \n    let newData = pathData.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                let speciesLabel = path[path.length - 1].label;\n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].species = speciesLabel;\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.move;\n                    m.attributes[key].edgeMove = m.edgeMove;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = scales.filter(s=> s.field === key)[0].yScale;\n                    m.attributes[key].satScale = scales.filter(s=> s.field === key)[0].satScale;\n                    m.attributes[key].colorScale = scales.filter(s=> s.field === key)[0].colorScale;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf){\n                        let state = m.attributes[key];\n                        state.species = speciesLabel;\n                        state.winState = m.attributes[key].states.filter(f=> f.realVal === 1)[0].state;\n                        state.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === state.winState)[0].color;\n                        state.move = m.move;\n                        state.edgeMove = m.edgeMove;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : m.attributes[key];//.filter(f => f.state != undefined);\n                        return states.map((st, j)=> {\n                            st.color = scales.filter(f=> f.field === key)[0].stateColors.filter(f=> f.state === st.state)[0].color;\n                            st.move = m.move;\n                            st.edgeMove = m.edgeMove;\n                            st.attrLabel = key;\n                            st.species = speciesLabel;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n\nexport function getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function calculateMovingAverage(data, i) {\n\n    if (movingAverage === 0) {\n        return data[i][yValue];\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        sum += x;\n    }\n\n    return sum / count;\n};\n\nexport function calculateMovingStandardDeviation(data, i, avg) {\n\n    if (movingAverage === 0) {\n        return 0;\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        var dx = x - avg;\n        sum += (dx * dx);\n    }\n\n    var variance = sum / count;\n    return Math.sqrt(variance);\n};\n\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n        if(notEmpty(node.children)){\n            pathArray.push(node);\n            pullPath([...pathArray], node.children, arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node_data['node name']);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, node]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import '../styles/index.scss';\nimport {formatAttributeData} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster} from './filterComponent';\nimport {dataMaster} from './index';\n\nexport function renderDistibutions(pathData, mainDiv, scales, moveMetric){\n    \n   // mainDiv.selectAll('*').remove();\n\n    let observedWidth = 200;\n    let predictedWidth = 800;\n    let height = 90;\n    let margin = 20;\n\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n    let keys = Object.keys(pathData[0][0].attributes).filter(f=> attrHide.indexOf(f) === -1);\n    let newNormed = [...pathData];\n    let keysToHide = attrHide.length > 0 ? scales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    formatAttributeData(newNormed, scales, keysToHide);\n\n    let maxBranch = d3.max(newNormed.map(p=> p.length)) - 1;\n    let medBranchLength = d3.median(newNormed.map(p=> p.length)) - 1;\n\n    let normBins = new Array(medBranchLength + 1).fill().map((m, i)=> {\n        let step = 1 / medBranchLength;\n        let base = (i > 0) ? ((i - 1) * step) : 0;\n        let top = (i * step);\n        return {'base': base, 'top': top, 'binI': i }\n    });\n   \n    let internalNodes = newNormed.map(path => path.filter(node=> node.leaf != true));\n    let leafNodes = newNormed.flatMap(path => path.filter(node=> node.leaf === true));\n\n    normBins.map((n, i)=> {\n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n            if(i === 0){\n                return node.edgeLength === 0;\n            }else{\n                return node.edgeMove > n.base && node.edgeMove <= n.top;\n            }\n        } ));\n        n.data = edges;\n        return n;\n    });\n\n    let sortedBins = keys.map(key=> {\n        let scale = scales.filter(f=> f.field === key)[0];\n        let mapNorm = normBins.map(bin => {\n\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    return d.attributes[key];\n                })\n            }else{\n                bin.fData = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        });\n\n        let leafAttr = leafNodes.map(m=> m.attributes[key]);\n        let leafData = {'data': leafAttr}\n   \n        if(scale.type === 'continuous'){\n         \n           // let max = d3.max(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n           // let min = d3.min(mapNorm.flatMap(m=> m.data).map(v=> v.realVal));\n           \n            let x = d3.scaleLinear().domain([scale.min, scale.max]).range([0, height]);\n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n  \n            mapNorm.forEach(n=> {\n                n.type = scale.type;\n                n.bins = histogram(n.data);\n               \n                n.domain = [scale.max, scale.min];\n                return n;\n            });\n\n            //Histogram for observed////\n            let maxO = d3.max(leafAttr.flatMap(v=> v.realVal));\n            let minO = d3.min(leafAttr.flatMap(v=> v.realVal));\n            let xO = d3.scaleLinear().domain([minO, maxO]).range([0, height])\n\n            let histogramO = d3.histogram()\n            .value(function(d) { return d.realVal; })  \n            .domain(xO.domain())  \n            .thresholds(xO.ticks(20)); \n\n            leafData.bins = histogramO(leafAttr);\n\n            let newK = {'key': key, 'branches': [...mapNorm], 'type': scale.type, 'leafData': leafData}\n            return newK;\n\n        }else{\n\n            let states = leafAttr[0].states;\n            mapNorm.bins = null\n            leafData.bins = states.map(s=> leafAttr.filter(f=> f.winState === s.state));\n            let x = d3.scaleLinear().domain([0, 1]).range([0, height]);\n            \n            mapNorm.map(n=> {\n                n.type = scale.type;\n                let colors = scale.stateColors;\n                n.bins = states.map(state=> {\n                    let color = colors.filter(f=> f.state === state.state);\n                  \n                    let chosen = n.data.flatMap(m=> m.states.filter(f=> f.state === state.state)).map(v=> v.realVal);\n                    let average = d3.mean(chosen);\n                    let stDev = d3.deviation(chosen);\n                    return {'state': state.state, 'average': average, 'stDev': stDev, 'stUp': average + stDev, 'stDown': average - stDev, 'color': color[0].color, 'range': n.range }\n                });\n                \n                return n;\n            });\n\n            let test = states.map(stat=> {\n                let key = stat.state;\n                return mapNorm.flatMap(m=> {\n                    return m.bins.filter(f=> f.state === key);\n                });\n            });\n\n            let newK = {'key': key, 'branches': [...mapNorm], 'type': scale.type, 'leafData': leafData, 'states': test}\n            return newK;\n        }\n    });\n\n    ///////RENDERING//////////\n\n    let dataCount = mainDiv.append('div').classed('species-count', true);\n    dataCount.append('text').text(\"Shown: \"+ pathData.length + \" /\"+ dataMaster[0].length);\n\n    let svg = mainDiv.append('svg');\n    svg.attr('id', 'main-summary-view');\n    svg.attr('height', (keys.length * (height + 25)));\n\n    let branchScale = d3.scaleLinear().domain([0, medBranchLength]).range([0, 780]);\n\n    let branchPoints = svg.append('g').classed('branch-bar', true).attr('transform', 'translate(10, 20)');\n    branchPoints.append('line').attr('y1', 2).attr('y2', 2).attr('x1', '100').attr('x2', 890).attr('stroke', 'gray').attr('stroke-width', .25)\n    branchPoints.append('text').text('Root').attr('transform', 'translate(50, 7)');\n    branchPoints.append('text').text('Leaves').attr('transform', 'translate(950, 7)');\n\n    let wrap = svg.append('g').classed('summary-wrapper', true);\n    wrap.attr('transform', 'translate(10, 50)');\n\n    let nodeLengthArray = [];\n    let nodeDuplicateCheck = []\n\n    newNormed.map(path=> {\n        path.filter(n=> n.leaf != true).map(node=> {\n            if(nodeDuplicateCheck.indexOf(node.node) == -1){\n                nodeDuplicateCheck.push(node.node);\n                nodeLengthArray.push({'node': node.node, 'eMove': node.edgeMove });\n            }\n        })\n    });\n\n    let bPointScale = d3.scaleLinear().domain([0, 1]).range([0, 795]);\n    let pointGroups = branchPoints.selectAll('g.branch-points').data(nodeLengthArray).join('g').attr('class', (d, i)=> d.node).classed('branch-points', true);\n    pointGroups.attr('transform', (d, i) => 'translate('+(105 + bPointScale(d.eMove))+', 0)');\n    pointGroups.append('circle').attr('r', 5).attr('fill', \"rgba(123, 141, 153, 0.5)\");\n\n    let binnedWrap = wrap.selectAll('.attr-wrap').data(sortedBins).join('g').attr('class', d=> d.key + ' attr-wrap');\n    binnedWrap.attr('transform', (d, i)=>  'translate(0,'+(i * (height + 5))+')');\n    \n    let label = binnedWrap.append('text').text(d=> d.key).attr('y', 40).attr('x', 80).style('text-anchor', 'end');\n\n    let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n\n    let pathGroup = predictedWrap.append('g').classed('path-wrapper', true);\n\n    let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> d.branches).join('g').classed('branch-bin', true);\n    branchGroup.attr('transform', (d, i)=> 'translate('+(100 + branchScale(i))+', 0)');\n\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    continDist.on('mouseover', (d, i, node)=> {\n        let list = d.data.map(m=> m.nodeLabels);\n        let selected = pointGroups.filter(p=> list.indexOf(p.node) > -1).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > 0).classed('selected-branch', true);\n        let y = d3.scaleLinear().domain(d.domain).range([0, height])\n        let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    var lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n       \n        let y = d3.scaleLinear().domain([0, n.length - 1]).range([0, height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1(d=> {\n        let dat = Object.keys(d).length - 1\n        let x = d3.scaleLinear().domain([0, 50]).range([0, 80]).clamp(true);\n        return x(dat); \n    });\n\n    continDist.each((d, i, nodes)=> {\n       \n        let distrib = d3.select(nodes[i]).selectAll('g').data([d.bins]).join('g').classed('distribution', true);\n        distrib.attr('transform', 'translate(11, '+height+') rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', \"rgba(133, 193, 233, .9)\");\n    });\n\n    let contRect = continDist.append('rect').attr('height', height).attr('width', 10).style('fill', 'none').style('stroke', 'gray');\n\n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        })\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.yScale != undefined){\n            let newy = d.yScale;\n            newy.range([80, 0]);\n            return newy(d.lowerCI95) - newy(d.upperCI95)\n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n        let newy = d.yScale;\n        newy.range([80, 0]);\n        return 'translate(0,'+newy(d.upperCI95)+')'\n    });\n\n    rangeRect.attr('fill', \"rgba(133, 193, 233, .05)\");\n\n    let avRect = continDist.append('rect').attr('width', 10).attr('height', (d, i)=> {\n        if(d.data[0] != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n\n    avRect.attr('transform', (d, i) => {\n        if(d.data[0] != undefined){\n            let newy = d.data[0].yScale;\n            newy.range([height, 0]);\n            let mean = d3.mean(d.data.map(m=> m.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', '#004573');\n\n    let discreteDist = branchGroup.filter(f=> f.type === 'discrete');\n    let discreteLine = discreteDist.append('line').attr('x0', 2).attr('x1', 2).attr('y0', 0).attr('y1', height).attr('stroke', 'gray').attr('stroke-width', 0.5);\n    let hoverRect = discreteDist.append('rect').attr('height', height).attr('width', 10).attr('opacity', 0);\n    discreteDist.on('mouseover', (d, i, n)=> {\n        let y = d3.scaleLinear().domain([1, 0]).range([0, height]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        let selected = pointGroups.filter(f=> f.eMove >= d.range[0] && f.eMove < d.range[1]).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n      \n        treeNode.filter(node=> node.data.combEdge >= d.range[0] && node.data.combEdge < d.range[1]).classed('selected-branch', true);\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('.y-axis').remove();\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n    })\n\n    let discreteBinWrap = predictedWrap.filter(f=> f.type === 'discrete');\n   \n    let stateGroups = discreteBinWrap.selectAll('.path-wrapper').selectAll('g.state').data(d=> d.states).join('g').classed('state', true);\n\n    stateGroups.append('path').attr('d', (p, i)=> {\n        var lineGenD = d3.area()\n        .curve(d3.curveCardinal)\n        .x((d, i)=> {\n            let y = d3.scaleLinear().domain([0, 9]).range([0, predictedWidth + 100]);\n            return y(i); \n        })\n        .y0(d=> {\n            \n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            console.log(d.stDown, x(d.stDev), x(d.average), x(d.stDown))\n            return x(d.stDown);\n        })\n        .y1(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.stUp); \n        });\n        return lineGenD(p);\n\n    }).attr('transform', 'translate(100, 10)').attr('fill', (d, i)=> {\n        return d[0] ? d[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    stateGroups.append('path').attr('d', (p, i)=> {\n        var lineGen = d3.line()\n        .curve(d3.curveCardinal)\n        .x((d, i)=> {\n            let y = d3.scaleLinear().domain([0, 9]).range([0, predictedWidth + 100]);\n            return y(i); \n        })\n        .y(d=> {\n            let x = d3.scaleLinear().domain([0, 1]).range([80, 0]).clamp(true);\n            return x(d.average); \n        });\n        return lineGen(p);\n\n    }).attr('transform', 'translate(100, 10)').attr('fill', 'none').attr('stroke', (d, i)=> {\n        return d[0] ? d[0].color : '#fff';\n    });\n\n\n\n    ////OBSERVED CONTIUOUS/////\n\n    let observedWrap = binnedWrap.append('g').classed('observed', true);\n    observedWrap.attr('transform', 'translate('+ (predictedWidth + 150) +', 0)')\n\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n\n    let contBars = contOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(height - margin), 0])\n        return y(Object.keys(d).length - 2)\n    }).attr('fill', 'rgba(133, 193, 233, .5)');\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(height - margin), 0])\n        let movey = height - y(Object.keys(d).length - 2);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    contOb.each((d, i, nodes)=> {\n        let xvalues = d.leafData.data.map(m=> m.realVal);\n        let x = d3.scaleLinear().domain([d3.min(xvalues), d3.max(xvalues)]).range([0, observedWidth])\n        let y = d3.scaleLinear().domain([0, d3.max(d.leafData.bins.map(b=> Object.keys(b).length)) - 2]).range([(height - margin), 0]);\n        d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(x)).attr('transform', 'translate(0, '+height+')');\n        d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y)).attr('transform', 'translate(0, '+margin+')');\n    });\n    \n////Observed Discrete////\n    let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n    let discBars = discOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n    let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n        let width = observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, 100]).range([(height -margin), 0])\n        return y(d.length)\n    }).attr('fill', (d, i) => {\n        return d[0] != undefined ? d[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    discBars.attr('transform', (d, i, n)=> {\n        let movex = observedWidth / n.length;\n        let y = d3.scaleLinear().domain([0, 100]).range([(height - margin), 0])\n        let movey = (height) - y(d.length);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    dRects.on('mouseover', (d, i, n)=> {\n        let state = d3.select('g.'+d[0].label).selectAll('g.state');\n        state.filter(f=> f[0].state === d[0].winState).attr('opacity', 0.8);\n        state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n        d3.select(n[i]).attr('opacity', 0.9);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).attr('opacity', 0.3);\n        let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n     \n    })\n\n    discOb.each((d, i, nodes)=> {\n            let labels = d.leafData.bins.map(b=> {\n                return b[0] != undefined ? b[0].winState : '';\n                })\n            let xPoint = d3.scalePoint().domain(labels).range([0, observedWidth]).padding(.6)\n            let y = d3.scaleLinear().domain([0, 100]).range([(height - margin), 0]);\n            d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5)).attr('transform', 'translate(0, '+margin+')');\n            d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n    });\n}\n","import * as d3 from \"d3\";\nimport { renderDistibutions } from './distributionView';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport { getLatestData } from \"./filterComponent\";\n\n\nexport function updateMainView(scales, moveMetric){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(d3.select('#view-toggle').text() === 'View Paths'){\n        renderDistibutions(data, main, scales, moveMetric);\n        document.getElementById(\"scrunch\").disabled = true;\n    }else{\n        drawPathsAndAttributes(data, main, scales, moveMetric);\n        document.getElementById(\"scrunch\").disabled = false;\n    }\n\n}\n\nexport function initialViewLoad(scales, moveMetric){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(data.length > 50){\n        renderDistibutions(data, main, scales, moveMetric);\n        d3.select('#view-toggle').text('View Paths');\n        document.getElementById(\"scrunch\").disabled = true;\n    }else{\n        drawPathsAndAttributes(data, main, scales, moveMetric);\n        d3.select('#view-toggle').text('View Summary');\n        document.getElementById(\"scrunch\").disabled = false;\n    }\n\n}","import '../styles/index.scss';\n\nimport * as d3 from \"d3\";\nimport {dataMaster} from './index';\nimport { updateMainView } from './viewControl';\n\nexport let filterMaster = [];\n\nexport function removeFilter(filterId, scales){\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n    let filterIndex = dataFilters.map(f=> f.filterId).indexOf(filterId);\n\n    if(filterIndex != dataFilters.length - 1){\n   \n        let baseData = filterIndex === 0? dataMaster[0] : dataFilters[filterIndex - 1].data;\n    \n        let testData = [...baseData];\n\n        let filterToolbar = d3.select(\"#toolbar\");\n\n        let badges = filterToolbar.selectAll('.filter-tag').remove();\n  \n        for(let i = filterIndex + 1; i < dataFilters.length; i ++){\n       \n            let fun = dataFilters[i].filterFunction;\n            if(dataFilters[i].attributeType === 'continuous'){\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].predictedFilter, dataFilters[i].observedFilter);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'c-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }else{//discrete\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].fromState, dataFilters[i].toState);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'd-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }\n        }\n    }\n    let newFilterMaster = filterMaster.filter(f=> f.filterId != filterId);\n\n    filterMaster = newFilterMaster;\n}\n\nexport function addFilter(filterType, attType, filterId, filFunction, oldData, newData, extra){\n    let filterOb = {'filterType': filterType, 'attributeType': attType, 'filterId': filterId, 'filterFunction':filFunction, 'before-data': oldData, 'data': newData}\n    if(extra != null){\n        extra.forEach(ex=> {\n            filterOb[ex[0]] = ex[1];\n        });\n    }\n    filterMaster.push(filterOb);\n    return filterOb;\n}\n\nexport function getLatestData(){\n    let data = filterMaster.length > 0 ? filterMaster[filterMaster.length - 1].data : dataMaster[0];\n    return data;\n}\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, main, moveMetric, scales){\n\n    let filterDiv = d3.select('#filter-tab');\n    let data = getLatestData();\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        renderAttToggles(filterDiv, data, main, scales, 'edgeLength');\n        stateFilter(filterDiv, filterButton, data, main, moveMetric, scales);\n        queryFilter(filterDiv, filterButton, data, main, moveMetric, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\n\nfunction addFilterTag(data, scales){\n\n    let filterToolbar = d3.select('#toolbar');\n\n    if(data.attributeType === 'continuous'){\n\n        let formater = d3.format(\".2s\");\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        d3.select(button).datum(data);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        let label = button.append('h6').text(data.selectedOption + \"  Predicted: \"+ formater(data.predictedFilter[0]) + \"-\" + formater(data.predictedFilter[1]) + \" Observed: \" + formater(data.observedFilter[0]) + \"-\" + formater(data.observedFilter[1]));\n        let xSpan = label.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> data.attribute != f.attribute);\n            ////YOU NEED TO CHANGE THIS TO REMOVE FILTER FUNCTION\n            removeFilter(data.filterId, scales);\n            updateMainView(scales, 'edgeLength')\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'discrete'){\n     \n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(data.state[0]);\n        button.append('i').classed('fas fa-arrow-right', true);\n        button.append('h6').text(data.state[1] + '  ');\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView(scales, 'edgeLength')\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'branch'){\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(' At Branch: ' + data.nodeId);\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView(scales, 'edgeLength')\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }\n    \n}\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n              \n                    //let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n                    let data = getLatestData();\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filId = 'd-'+filterMaster.filter(f=> f.attributeType === 'discrete').length;\n                    let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n                    updateMainView(scales, moveMetric);\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR////\n                    addFilterTag(filterOb, scales);\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    let filId = 'c-'+filterMaster.filter(f=> f.attributeType === 'continuous').length;\n                    let filterOb = addFilter('data-filter', 'continuous', filId, continuousFilter, [...data], [...test], [['selectedOption', selectedOption], ['predictedFilter', predictedFilter], ['observedFilter', observedFilter]]);\n\n                    updateMainView(scales, moveMetric);\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    addFilterTag(filterOb, scales);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\nexport function nodeFilter(selectedNode, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path.map(node => node.node).indexOf(selectedNode) > -1;\n    });\n\n    let filId = 'b-'+filterMaster.filter(f=> f.attributeType === 'branch').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'branch', filId, nodeFilter, [...data], [...test], [['nodeId', selectedNode]])\n    addFilterTag(filterOb, scales);\n    updateMainView(scales, 'edgeLength');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\nexport function leafStateFilter(selectedState, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path[path.length - 1].attributes[selectedState.label].winState === selectedState.winState;\n    });\n\n    let filId = 'l-'+filterMaster.filter(f=> f.attributeType === 'leaf').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'leaf', filId, nodeFilter, [...data], [...test], [['leafState', [selectedState.label, selectedState.winState]]])\n    addFilterTag(filterOb, scales);\n    updateMainView(scales, 'edgeLength');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n}\nfunction discreteFilter(data, selectedOption, fromState, toState){\n    if(selectedOption != undefined){\n        return data.filter(path=> {\n            let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n                let states = node.attributes[selectedOption].states;\n                if(fromState === 'Any'){\n                    return true;\n                }else{\n                    return states.filter(st=> st.state === fromState).length > 0 && states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n                }\n            });\n            let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n            let win = node.attributes[selectedOption].winState;\n            if(toState === 'Any'){\n                return true;\n            }else{\n                return win === toState;\n            }\n            });\n            return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n        });\n    }\n}\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n         \n            updateMainView(scales, moveMetric);\n\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                updateMainView(scales, moveMetric);\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, main, scales, moveMetric){\n\n    ////NEED TO GET RID OF TOGGLE SVG\n    let keys = Object.keys(normedPaths[0][0].attributes);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n   \n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths], 'data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n        updateMainView(scales, moveMetric)\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import * as d3 from \"d3\";\nimport { branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes } from './renderPathView';\nimport { formatAttributeData } from './dataFormat';\nimport { filterMaster } from './filterComponent';\nimport { dataMaster, collapsed } from './index';\nimport { renderDistibutions } from \"./distributionView\";\n\nexport let selectedPaths = [];\n\nexport function pathSelected(selectedPath, otherPaths, scales, moveMetric) {\n\n\n    let selectedDiv = d3.select('div#selected');\n    let main = d3.select('div#main');\n    if (selectedPath === null) {\n\n        selectedPaths = [];\n\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, moveMetric, false);\n\n    } else {\n      \n        selectedPaths = selectedPaths.concat(selectedPath);\n        let commonNodes = renderSelectedView([...selectedPaths], [...otherPaths], selectedDiv, scales, moveMetric);\n        let sortedPaths = sortOtherPaths([...selectedPaths], [...otherPaths], [...commonNodes]);\n        \n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let pathGroups = drawPathsAndAttributes(sortedPaths.map(s => s.data), main, scales, moveMetric, false);\n\n        main.style('padding-top', '250px');\n    }\n}\n\nfunction getCommonNodes(paths){\n    let maxBranch = d3.max(paths.map(p => p.length));\n    let longestBranch = paths.filter(path => path.length === maxBranch)[0];\n    let startBranch = longestBranch.filter(f=> f.leaf != true);\n    let commonNodeStart = startBranch;\n    //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n    paths.map(path => {\n        commonNodeStart = [...path].filter(f => {\n            return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n    });\n\n    let children = paths.map(path => {\n        path = (path[0].leaf === true) ? path.reverse() : path;\n        let nodeIndex = path.map(p => p.node);\n        let thresh = nodeIndex.indexOf(commonNodeStart[commonNodeStart.length - 1].node);\n        let subset = path.filter((f, i) => i > thresh);\n        return subset;\n    });\n\n    commonNodeStart[commonNodeStart.length - 1].children = children.map((path, i) => {\n        let max = d3.max(path.map(p => p.edgeMove)) - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n        return path.map((chil, j, n) => {\n            chil.parentBase = commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.move = chil.edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.base = (j === 0) ? 0 : n[j - 1].edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            let parentScale = d3.scaleLinear().domain([0, 1]).range([0, 1000])\n            let scaledParentMove = parentScale(commonNodeStart[commonNodeStart.length - 1].edgeMove);\n            chil.xScale = d3.scaleLinear().domain([0, max]).range([0, (1000 - scaledParentMove)]);\n            chil.level = i;\n            return chil;\n        });\n    });\n\n    return commonNodeStart;\n}\n\nexport function sortOtherPaths(pathData, otherPaths, commonNode) {\n\n    if(pathData.length > 1){\n\n        if(commonNode != null){\n\n            let chosenPath = commonNode.reverse().map(m => m.node);\n            let rankedPaths = otherPaths.map(path => {\n                let step = 0;\n                let test = path.reverse().map((node, i) => {\n                    if (chosenPath.indexOf(node.node));\n                    return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n                }).filter(f => f.indexOf > -1);\n                let distance = (test[0].indexOf + test[0].pathIndex);\n                return { 'data': path.reverse(), 'distance': distance };\n            });\n            let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        \n            return sortedData;\n        }\n        console.error('multiple paths without common node');\n    }else{\n\n        let chosenPath = pathData[0].reverse().map(m => m.node);\n    \n        let rankedPaths = otherPaths.map(path => {\n            let step = 0;\n            let test = path.reverse().map((node, i) => {\n                if (chosenPath.indexOf(node.node));\n                return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n            }).filter(f => f.indexOf > -1);\n            let distance = (test[0].indexOf + test[0].pathIndex);\n            return { 'data': path.reverse(), 'distance': distance };\n        });\n        let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        return sortedData;\n    }\n\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales, moveMetric) {\n\n    let attributeHeight = 45;\n\n    let selectedSpecies = pathData.flatMap(p => p.filter(f => f.leaf === true).map(n => n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node => selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n    ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f => f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f => f.type === 'hide-attribute').map(m => m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc => {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m => m.field) : null;\n\n    ////IF THE SELECTED DIV IS THERE ALREADY USE THAT/////\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    ///////////////////////\n\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', () => sortPaths(sortByDistanceButton));\n\n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m => m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n    let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n    let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d => d).attr('id', (d, i) => 'radio-' + i).classed(\"form-check-input\", true);\n    radioDiv.append('label').text(d => d).property('for', (d, i) => 'radio-' + i).classed(\"form-check-label\", true);\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty() ? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    svg.selectAll('*').remove();\n\n    let branchFrequency = pathData.flatMap(row => row.flatMap(f => f.node)).reduce(function(acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n            acc[curr] = 1;\n        } else {\n            acc[curr] += 1;\n        }\n        return acc;\n    }, {});\n\n    ///RENDERING SELECTED PATHS////\n    if (pathData.length === 1) {\n\n        /////////////////////////////////////////////////\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', (d, i) => 'translate(0,20)');\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n\n        //////////\n        ///Selecting species\n        /////////\n        let pathRemove = selectedGroups.append('g').classed('x-icon', true);\n        pathRemove.attr('transform', 'translate(15, 10)');\n        pathRemove.append('circle').attr('r', 7).attr('fill', '#fff');\n        pathRemove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n\n        pathRemove.style('cursor', 'pointer');\n\n        pathRemove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales, moveMetric);\n        });\n\n        /////////\n\n        selectedGroups.on('mouseover', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => {\n                return d.map(m => m.node).indexOf(f.data.node) > -1;\n            }).classed('hover', true);\n            treeLinks.filter(f => d.map(m => m.node).indexOf(f.data.node) > -1).classed('hover', true);\n            return d3.select(this).classed('hover', true);\n        }).on('mouseout', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n            let treeLinks = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n            return d3.select(this).classed('hover', false);\n        });\n\n        let speciesTitle = selectedGroups.append('text').text(d => {\n            let string = d.filter(f => f.leaf === true)[0].label;\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        });\n\n        speciesTitle.attr('x', 25).attr('y', 15);\n\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(150, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', 1000)\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        circle.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        let speciesNodeLabel = nodeGroups.filter(f => f.label != undefined).append('text').text(d => {\n            let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n            return string;\n        }).attr('x', 10).attr('y', 5);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(0,' + (i * 60) + ')');\n\n        let nodes = selectedGroups.select('.time-line').selectAll('.node');\n        nodes.on('mouseover', (d, i) => {\n\n            let nearest = otherPaths.filter(path => {\n                let nodearray = path.flatMap(f => f.node);\n                return nodearray.indexOf(d.node) > -1;\n            });\n\n            let nearestA = nearest[0];\n            let nearestB = nearest[1];\n            console.log(nearestA, nearestB)\n        });\n\n        //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(10,' + (i * ((attributeHeight + 5) * (Object.keys(d[1].attributes).length + 1))) + ')');\n\n        drawContAtt(attributeGroups);\n        drawDiscreteAtt(attributeGroups, scales);\n\n        //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n        //tranforming elements\n        svg.style('height', '250px');\n        selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 45) + 50 + 'px');\n        attributeWrapper.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales, moveMetric);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n      \n        return pathData;\n\n    } else if(pathData.length > 1 && pathData.length < 5) {\n       \n        let commonNodeStart = getCommonNodes(pathData);\n\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', (d, i) => 'translate(0,20)');\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data([commonNodeStart]).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n\n\n        //////////\n        ///Selecting species\n        /////////\n        let pathRemove = selectedGroups.append('g').classed('x-icon', true);\n        pathRemove.attr('transform', 'translate(15, 10)');\n        pathRemove.append('circle').attr('r', 7).attr('fill', '#fff');\n        pathRemove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n\n        pathRemove.style('cursor', 'pointer');\n\n        pathRemove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales, moveMetric);\n        });\n\n        /////////\n\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(150, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', (d, i) => {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n                return x(d[d.length - 1].edgeMove)\n            })\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        nodeGroups.classed('common-node', true);\n\n        let childNodeWrap = nodeGroups.filter(c => c.children != undefined).selectAll('g.child').data(d => d.children).join('g').classed('child', true);\n\n        let childNodes = childNodeWrap.selectAll('g.node').data(d => d).join('g').classed('node', true)\n        childNodes.attr('transform', (d, i, n) => {\n            return 'translate(' + d.xScale(d.move) + ', ' + (d.level * 20) + ')';\n        });\n\n        childNodeWrap.append('path').attr('d', (d, i, n) => {\n            let pathArray = [{ 'x': 0, 'y': 0 }, { 'x': 0, 'y': i }];\n            d.map(m => {\n                pathArray.push({ 'x': m.xScale(m.move), 'y': m.level })\n            });\n            let line = d3.line()\n                .curve(d3.curveMonotoneY)\n                .x(function(d) {\n                    return d.x;\n                })\n                .y(d => (d.y * 20))\n            return line(pathArray);\n        }).attr('stoke-width', '2px').attr('fill', 'none').attr('stroke', 'gray');\n\n        childNodeWrap.on('mouseover', (d, i)=> {\n            let specArray = d.map(m=> m.species);\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let commonHover = [...commonNodeStart].map(c=> c.node).concat(d.map(n=> n.node));\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            treeLinks.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', (d, i)=> {\n            d3.selectAll('.hover').classed('hover', false);\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        let childCirc = childNodes.append('circle').attr('r', 7).attr('fill', 'red').attr('y', 5);\n\n        childCirc.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        childNodes.filter(f => f.leaf === true).append('text').text(d => d.label).attr('x', 9).attr('y', 4);\n\n        let attWrap = svg.append('g').classed('attribute-wrapper', true);\n        let attributeData = commonNodeStart[commonNodeStart.length - 1].children.map(ch => {\n            return [...commonNodeStart].concat(ch);\n        });\n\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attDataComb = attData[0].map((att, i)=> {\n            let species = pathData[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'data': [{'species': species, 'paths': att}]}\n          \n            for(let index = 1; index < attData.length; index++ ){\n                let species = pathData[index].filter(f=> f.leaf === true)[0].label;\n                let last = attData[index][i].length - 1\n                attData[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': attData[index][i]})\n            }\n            return attribute;\n        })\n\n     \n        let attGroups = attWrap.selectAll('g').data(attDataComb).join('g').classed('attr', true);\n\n        attGroups.attr('transform', (d, i) => 'translate(140,' + (32+ (pathData.length*20) + (i * (attributeHeight + 5))) + ')');\n        \n        let dataGroups = attGroups.selectAll('g.path-grp').data((d, i)=> {\n            let speciesArray = d.data.map(m=> {\n                m.paths.map(path=>{\n                    path.species = m.species;\n                    path.index = i;\n                    return path;\n                })\n                return m.paths});\n            return speciesArray}).join('g').classed('path-grp', true);\n\n        let contGroups = drawContAtt(dataGroups, moveMetric, collapsed);\n       \n        let valueBars = contGroups.selectAll('.val-bar').on('mouseover', (d, i)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n                .duration(200)\n                .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.species + \": \" + f(d.realVal))\n                .style(\"left\", (d3.event.pageX) + \"px\")\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        }).on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n\n        valueBars.attr('opacity', 0.4);\n\n        let disGroups = drawDiscreteAtt(dataGroups, moveMetric, collapsed);\n        disGroups.selectAll('.dots').style('opacity', 0.4);\n\n        let disLeaves = disGroups.filter(d=> d.leaf === true);\n\n        disLeaves.attr('transform', d=> 'translate(1000,'+(d.offset)+')');\n        disLeaves.selectAll('circle').attr('stroke', '#fff').attr('stroke-width', '1px');\n\n        disLeaves.selectAll('circle').on('mouseover', (d, i)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n                .duration(200)\n                .style(\"opacity\", .9);\n            tool.html(d.species + \": \" + d.winState)\n                .style(\"left\", (d3.event.pageX) + \"px\")\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        }).on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n\n        /////ADDED LABELS///////\n        let attrLabel = dataGroups.filter((f, i)=> i === 0).append('text').text(d=> d[d.length - 1].label);\n        attrLabel.classed('attribute-label', true);\n        attrLabel.attr('transform', 'translate(-15, 20)');\n\n        d3.select('#selected').style('height', (50 + (pathData.length * 20) + (attDataComb.length * 53))+ 'px');\n        svg.style('height', (50 + (pathData.length * 20) + (attDataComb.length * 53)) + 'px');\n        pathBars.style('height', (commonNodeStart[commonNodeStart.length -1].children.length * 25)+'px');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales, moveMetric);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n\n        return commonNodeStart;\n\n\n    }else{\n       \n        /////////\n        //getting common node\n        ///\n\n        let maxBranch = d3.max(pathData.map(p => p.length));\n        let longestBranch = pathData.filter(path => path.length === maxBranch)[0];\n        let startBranch = longestBranch.filter(f=> f.leaf != true);\n        let commonNodeStart = startBranch;\n        //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n        pathData.map(path => {\n            commonNodeStart = [...path].filter(f => {\n                return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n        });\n\n        svg.remove();\n        let remove = selectedTool.append('g').classed('x-icon', true);\n        remove.attr('transform', 'translate(15, 10)');\n        remove.append('circle').attr('r', 7).attr('fill', '#fff');\n        remove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n\n        remove.style('cursor', 'pointer');\n\n        remove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales, moveMetric);\n        });        \n\n        /////////\n        renderDistibutions(pathData, selectedDiv, scales, moveMetric);\n        selectedDiv.style('height', '550px');\n\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales, moveMetric);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n\n        return commonNodeStart;\n    }\n}\n\nfunction sortPaths(sortButton) {\n    if (sortButton.text() === 'Sort Most to Least') {\n        sortButton.text('Sort Least to Most');\n    } else {\n        sortButton.text('Sort Most to Least');\n    }\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {pathSelected} from './selectedPaths';\nimport {formatAttributeData} from './dataFormat';\nimport {filterMaster, nodeFilter, getLatestData, leafStateFilter} from './filterComponent';\n\nexport function drawPathsAndAttributes(pathData, main, calculatedScales, moveMetric){\n\n    let nodeTooltipFlag = true;\n\n    let collapsed = d3.select('#scrunch').attr('value');\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(pathData, main, calculatedScales, moveMetric);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n\n    let attKeys = attrHide.length > 0 ? calculatedScales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    let attData = formatAttributeData(pathData, calculatedScales, attKeys);\n\n    let attrMove = attKeys === null ? calculatedScales.length : attKeys.length;\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, calculatedScales, null, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (attrMove + 1))) +')');\n    \n    let cGroups = drawContAtt(predictedAttrGrps, moveMetric, collapsed);\n    let dGroups = drawDiscreteAtt(predictedAttrGrps, moveMetric, collapsed, false);\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, pathData, (attrMove * attributeHeight));\n\n    console.log('state leaf', d3.selectAll('.discrete-leaf'));\n\n    let leafStates = d3.selectAll('.discrete-leaf');\n    leafStates.on('click', (d, i)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#state-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.winState);\n            d3.select(\"#state-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-state\").on('click', ()=> {\n                \n                leafStateFilter(d, calculatedScales);\n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n            });\n\n            d3.select(\"#select-by-state\").on('click', ()=> {\n                let data = getLatestData();\n                let test = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState === d.winState;\n                });\n\n                let notIt = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState != d.winState;\n                });\n            \n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test, notIt, calculatedScales, moveMetric);\n\n            });\n\n        }});\n\n    return pathGroups;\n\n}\n\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 25)');\n        ///////////////////////////////////\n}\n\nexport function renderPaths(pathData, main, scales, moveMetric){\n    \n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    let nodeTooltipFlag = false;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n    \n    let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n \n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.attr('y', -8);\n\n    //////////\n    ///Selecting species\n    /////////\n    let pathAdd = pathGroups.append('g').classed(\"fas fa-search-plus\", true);\n    pathAdd.attr('transform', 'translate(15, 10)');\n    pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathAdd.append('text').text('+').attr('transform', 'translate(-5, 5)');\n\n    pathAdd.style('cursor', 'pointer');\n\n    pathAdd.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales, moveMetric);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected([d], notIt.data(), scales, moveMetric);\n        }\n    });\n\n    /////////\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n      \n       let string = d.filter(f=> f.leaf === true)[0].label;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 25).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', 1000)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> {\n        return d}).join('g').attr('class', (d, i, n)=> {\n            return d3.select(n[n.length - 1]).data()[0].label + \" node\";\n        });\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 10)';});\n\n    nodeGroups.on('click', (d, i, n)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#branch-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.node);\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-node\").on('click', ()=> {\n                nodeFilter(d.node, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-node\").on('click', ()=> {\n                let data = getLatestData();\n                let test = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) > -1;\n                });\n                let notIt = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) === -1;\n                });\n\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test.data(), notIt.data(), scales, moveMetric);\n\n            });\n        }\n          \n    });\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n}\n\nexport function renderAttributes(attributeWrapper, data, scales, filterArray, collapsed){\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> data[i]).join('g');\n    predictedAttrGrps.classed('predicated-attr-groups', true);\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n\n    let attrLabel = predictedAttrGrps.append('text').text(d=> d[d.length - 1].label);\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    return predictedAttrGrps;\n}\n\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 1 : 18;\n        p.change = test;\n    })\n}\n\nasync function continuousPaths(innerTimeline, moveMetric, collapsed){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path, moveMetric);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? 20 : 45;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance; })\n    .y(d=> {\n        let y = d.yScale;\n        y.range([height, 0]);\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> d[0].color);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\n\nexport function drawContAtt(predictedAttrGrps, moveMetric, collapsed){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return (d[d.length - 1] != undefined) ? d[d.length - 1].type === 'continuous' : d.type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? 20 : 45;\n\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, moveMetric, collapsed);\n ////////\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n    let innerRect = innerBars.append('rect').classed('attribute-inner-bar', true);\n    innerRect.attr('height', attributeHeight);\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', 20).attr('height', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.lowerCI95) - y(d.upperCI95);\n        let barHeight = (collapsed === 'true') ? 20 : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(d.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.realVal);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.realVal);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', 20).attr('height', 5)\n        .attr('transform', (d, i)=> {\n            let y = d.yScale;\n            y.range([attributeHeight, 0]);\n            return 'translate(0, '+ y(d.realVal) +')';})\n        .attr('fill', d=> d.color).classed('val-bar', true);\n    }\n\n    /////AXIS ON HOVER////\n    innerBars.on('mouseover', (d, i, n)=> {\n        let y = d.yScale;\n        y.range([0, attributeHeight]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n       \n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('g.y-axis')\n        d3.select(n[i]).select('g.y-axis').remove();\n    });\n\n    return attributeNodesCont;\n   \n}\n\nexport function drawDiscreteAtt(predictedAttrGrps, moveMetric, collapsed, bars){\n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n    discreteAtt.selectAll('*').remove();\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        let disct = d.map(m=> {\n            let test = (m.leaf == true) ? m.states.map(s=> {\n                s.move = m.move;\n                s.edgeMove = m.edgeMove;\n                s.color = m.color;\n                return s;\n            }) : m;\n            return test;\n        });\n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n            return disct.map(m=> m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n        return distance + 7;})\n    .y(d=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        return y(d.realVal);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", (d, i)=> d[0].species + \" inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;});\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g').classed('attribute-node-discrete', true);\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n        if(d[0]){\n            let distance = (moveMetric === 'move') ? d[0].move : x(d[0].edgeMove);\n            return 'translate('+distance+', 0)';\n        }else{\n            let distance = (moveMetric === 'move') ? d.move : x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('rect').attr('width', 20).attr('height', attributeHeight).attr('opacity', 0);\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n        /////AXIS ON HOVER////\n    attributeNodesDisc.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, attributeHeight]);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n        })\n\n    if(bars === false){\n\n        let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n            return d;\n        }).join('circle').classed('dots', true);\n        \n        stateDots.attr('cx', 10).attr('cy', (d)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n            return y(d.realVal);\n        }).attr('r', 2).style('fill', d=> d.color);\n    \n        stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n    \n        stateDots.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n        ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n    \n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }else{\n        attributeNodesDisc.filter((att, i)=> {\n            return att[0] != undefined;}).append('rect').attr('height', attributeHeight).attr('width', 20).attr('fill', '#fff')\n        let stateBars = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dis-rect').data(d=> {\n            return d;\n        }).join('rect').classed('dis-rect', true);\n\n        stateBars.attr('width', 20).attr('height', (d, i)=> {\n           // console.log('inrect', d)\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            return y(d.realVal);\n        });\n\n        stateBars.attr('fill', (d, i)=> d.color);\n        stateBars.attr('opacity', '0.7');\n        stateBars.attr('stroke', '#fff');\n        stateBars.attr('transform', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            let probability = d3.selectAll(n).data().sort((a, b)=> b.realVal - a.realVal);\n            let chosenIn = probability.map(p=> p.state).indexOf(d.state);\n         \n            if(chosenIn === 0){\n                    return 'translate(0,0)';\n            }else{\n                ///need to make this a reduce function///\n                let valueAdd = 0;\n                    for(let step = 0; step < chosenIn; step++){\n                        valueAdd = valueAdd + probability[step].realVal;\n                    }\n                return 'translate(0,'+(y(valueAdd))+')';\n            }\n        });\n\n        stateBars.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n\n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }\n\n    return attributeNodesDisc;\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\n\nimport {dataMaster, nestedData} from './index';\nimport {filterMaster, removeFilter, addFilter} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport {getNested} from './pathCalc';\n\n\nexport function buildTreeStructure(paths, edges){\n    let root = paths[0][0];\n    let nestedData = getNested(root, edges.rows);\n    return nestedData;\n}\n\nfunction updateBrush(treeBrush, scales){\n    \n    let sidebar = d3.select('#sidebar');\n    let toolbarDiv = d3.select('#toolbar');\n\n    let data = filterMaster.length === 0 ? dataMaster[0] : dataMaster[0];\n    let nodes = sidebar.select('svg').select('g').selectAll('.node');\n    let selectedNodes = nodes.filter(n=> (n.y > d3.event.selection[0][0]) && (n.y < d3.event.selection[1][0]) && (n.x > d3.event.selection[0][1]) && (n.x < d3.event.selection[1][1])).classed('selected', true);\n    let filterArray = selectedNodes.data().map(n=> n.data.node);\n    let test = treeFilter(data, filterArray);\n    let brushId = 'brush-'+ filterMaster.filter(f=> f.attributType === 'topology').length;\n    let filterOb = addFilter('data-filter', 'topology', brushId, treeFilter, [...data], [...test], null);\n\n    updateMainView(scales, 'edgeLength');\n   \n    ///DIMMING THE FILTERED OUT NODES//////\n\n    ////Class Tree Links////\n    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n    d3.selectAll('.link-not-there').classed('link-not-there', false);\n    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingLinks.classed('link-not-there', true);\n\n    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n    missingNodes.classed('node-not-there', true);\n\n    ///END NODE DIMMING///////\n\n    let button = toolbarDiv.append('button').classed('btn btn-info', true);\n    let span = button.append('span').classed('badge badge-light', true);\n    span.text(test.length);\n    let label = button.append('h6').text('Tree Filter');\n\n    let xSpan = label.append('i').classed('close fas fa-times', true);\n    xSpan.on('click', async (d, i, n)=> {\n        removeFilter(brushId);\n        await updateMainView(scales, 'edgeLength');\n        d3.selectAll('.selected').classed('selected', false);\n        d3.selectAll('.link-not-there').classed('link-not-there', false);\n        d3.selectAll('.node-not-there').classed('node-not-there', false);\n        button.remove();\n        d3.select(this).call(treeBrush.move, null);\n        d3.select('.tree-brush').remove();\n    });\n}\n\nexport function renderTreeButtons(normedPaths, calculatedScales, sidebar){\n    ///SIDBAR STUFF\n    let treeButton = sidebar.append('button').text('Filter by Tree').classed('btn btn-outline-secondary', true);  \n   // let treeBrush = d3.brush().extent([[0, 0], [400, 600]]);\n   let treeBrush = d3.brush().extent([[0, 0], [400, 600]]).on('end', (d, i, n) => updateBrush(treeBrush, calculatedScales));\n    treeButton.on('click', ()=> {\n        let treeBrushG = sidebar.select('svg').append('g').classed('tree-brush', true).call(treeBrush);\n    });\n\n        ///SIDBAR STUFF\n    let treeViewButton = sidebar.append('button').text('Show Lengths').classed('btn btn-outline-secondary', true);  \n\n    treeViewButton.on('click', ()=> {\n  \n       sidebar.select('svg').remove();\n       if(treeViewButton.text() === 'Show Lengths'){\n            renderTree(sidebar, true, null);\n            treeViewButton.text('Hide Lengths');\n       }else{\n            renderTree(sidebar, false, null);\n            treeViewButton.text('Show Lengths');\n       }\n    });\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> optionArray.push(m))\n\n  let dropdiv = sidebar.append('div').classed('dropdown', true);\n  let button = dropdiv.append('button').classed('btn dropbtn btn-secondary', true).text('See Values');\n  let dropContent = dropdiv.append('div').attr('id', 'show-drop-div').classed('dropdown-content', true);\n  dropContent.append('a').text('text');\n  let options = dropContent.selectAll('a').data(optionArray).join('a').text(d=> d.field)\n\nbutton.on('click', (d, i, n)=> {\n   if(dropContent.classed('show')){\n       dropContent.classed('show', false);\n   }else{\n       dropContent.classed('show', true);\n   }\n});\n\noptions.on('click', (d, i, n)=> {\n    if(d.type === 'discrete'){\n        renderTree(sidebar, false, d);\n    }else if(d.type === 'continuous'){\n        renderTree(sidebar, false, null);\n    }else{\n        renderTree(sidebar, false, null);\n    }\n    dropContent.classed('show', false);\n})\n}\n\nfunction treeFilter(data, selectedNodes){\n    return data.filter(path=> {\n        let nodeNames = path.map(no=> no.node);\n        let booArray = nodeNames.map(id=> selectedNodes.indexOf(id) > -1);\n        return booArray.indexOf(true) > -1\n    });\n}\n\nexport function renderTree(sidebar, length, attrDraw){\n\n    if(attrDraw != null){\n        console.log('attDraw',attrDraw);\n    }\n    // set the dimensions and margins of the diagram\n    var margin = {top: 10, right: 90, bottom: 50, left: 20},\n    width = 400 - margin.left - margin.right,\n    height = 700 - margin.top - margin.bottom;\n\n// declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([height, width]);\n  \n    function addingEdgeLength(edge, data){\n        data.combEdge = data.edgeLength + edge;\n        if(data.children){\n            data.children.forEach(chil=> {\n                addingEdgeLength(data.combEdge, chil);\n            });\n        }\n    }\n    addingEdgeLength(0, nestedData[0])\n\n//  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData[0]);\n\n// maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let xScale = d3.scaleLinear().domain([0, 1]).range([0, width]).clamp(true);\n    sidebar.select('svg').remove();\n    var treeSvg = sidebar.append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom),\n    g = treeSvg.append(\"g\")\n    .attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// adds the links between the nodes\n    var link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\")\n    .attr(\"d\", function(d) {\n        if(length){\n            return \"M\" + xScale(d.data.combEdge) + \",\" + d.x\n            + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.x\n            + \" \" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + d.parent.x\n            + \" \" + xScale(d.parent.data.combEdge) + \",\" + d.parent.x;\n        }else{\n            return \"M\" + d.y + \",\" + d.x\n            + \"C\" + (d.y + d.parent.y) / 2 + \",\" + d.x\n            + \" \" + (d.y + d.parent.y) / 2 + \",\" + d.parent.x\n            + \" \" + d.parent.y + \",\" + d.parent.x;\n        }       \n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants())\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); })\n    .attr(\"transform\", function(d) { \n   \n        if(length){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + d.x + \")\"; \n        }else{\n            return \"translate(\" + d.y + \",\" + d.x + \")\"; \n        }\n    \n    //return \"translate(\" + d.y + \",\" + d.x + \")\"; \n});\n\n    // adds the circle to the node\n    node.append(\"circle\")\n    .attr(\"r\", 3);\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n        \n        attrDraw.stateColors.forEach(att=> {\n            let circ = leaves.filter(f=> {\n                return f.data.attributes[attrDraw.field].winState === att.state;\n            }).select('circle');\n            circ.attr('fill', att.color);\n            circ.attr('r', 4)\n            notleaves.selectAll('circle').attr('fill', 'gray');\n        });\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n    });\n\n    return node;\n/////END TREE STUFF\n///////////\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {drawPathsAndAttributes, drawDiscreteAtt} from './renderPathView';\nimport {toggleFilters, getLatestData} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport { collapsed } from '.';\n\nexport function toolbarControl(toolbar, normedPaths, main, calculatedScales, moveMetric, pathView){\n\n    let viewButton = toolbar.append('button').attr('id', 'view-toggle').attr('attr' , 'button').attr('class', 'btn btn-outline-secondary');\n\n    if(pathView === 'paths'){\n        viewButton.text('View Summary');\n    }else if(pathView === 'summary'){\n        viewButton.text('View Paths');\n    }else{\n        console.error('pathView parameter not found');\n    }\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, main, moveMetric, calculatedScales));\n    ///LENGTH BUTTON CODE\n/*\n    let lengthButton = toolbar.append('button').attr('id', 'change-length').attr('class', 'btn btn-outline-secondary');\n    if(moveMetric === 'move'){\n        lengthButton.text('Show Edge Length');\n    }else if(moveMetric === 'edgeLength'){\n        lengthButton.text('Normalize Edge Length');\n    }\n\n    lengthButton.on('click', ()=> {\n        if(lengthButton.text() === 'Show Edge Length'){\n            lengthButton.text('Normalize Edge Length');\n            main.selectAll('*').remove();\n            if(viewButton.text() === 'View Summary'){\n                drawPathsAndAttributes(normedPaths, main, calculatedScales, 'edgeLength');\n            }else{\n                renderDistibutions(main, calculatedScales, 'edgeLength');\n            }\n        }else{\n            lengthButton.text('Show Edge Length');\n            main.selectAll('*').remove();\n            /*\n            if(viewButton.text() === 'View Summary'){\n                drawPathsAndAttributes(normedPaths, main, calculatedScales, moveMetric);\n            }else{\n                renderDistibutions(main, calculatedScales, moveMetric);\n            }\n            updateMainView(calculatedScales, moveMetric);\n        }\n    });*/\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, main, calculatedScales));\n    viewButton.on('click', ()=> togglePathView(viewButton, calculatedScales, moveMetric));\n\n    let discreteViewButton = toolbar.append('button').attr('id', 'discrete-view');\n    discreteViewButton.attr('class', 'btn btn-outline-secondary').text('Switch to Discrete Bars');\n    discreteViewButton.attr('value', false);\n    discreteViewButton.on('click', ()=> {\n        let discretePredictedGroups = d3.selectAll('.predicated-attr-groups');\n        \n        if(discreteViewButton.text() === 'Switch to Discrete Bars'){\n            discreteViewButton.text('Switch to Discrete Dots');\n            drawDiscreteAtt(discretePredictedGroups, moveMetric, collapsed, true);\n        }else{\n            discreteViewButton.text('Switch to Discrete Bars');\n            drawDiscreteAtt(discretePredictedGroups, moveMetric, collapsed, false);\n        }\n        console.log('this is clicked!');\n        \n    });\n}\n\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, main, calculatedScales){\n\n    let data = getLatestData();\n   \n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(data, main, calculatedScales, 'edgeLength');\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n\n        drawPathsAndAttributes(data, main, calculatedScales, 'edgeLength');\n    }\n}\n\n/**\n * \n * @param {*} viewButton button that changes the actual view the text of the button determines what the view should change to \n * @param {*} normedPaths \n * @param {*} main \n * @param {*} calculatedScales \n */\nfunction togglePathView(viewButton, calculatedScales, moveMetric){\n\n    if(viewButton.text() === 'View Paths'){\n        viewButton.text('View Summary');\n    }else{\n        viewButton.text('View Paths');\n    }\n    updateMainView(calculatedScales, moveMetric);\n}\n\n\n\n\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {loadData} from './dataLoad';\nimport {calculateScales, matchLeaves, matchEdges, normPaths, filterKeeper} from './dataFormat';\nimport {allPaths, pullPath, getPath} from './pathCalc';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {toolbarControl, renderAttToggles} from './toolbarComponent';\nimport { updateMainView, initialViewLoad } from './viewControl';\n\nexport const dataMaster = [];\nexport const savedSelected = [];\nexport const collapsed = false;\nexport const nestedData = [];\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nlet selectedPaths = wrap.select('#selected');\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar');\n\nloadData(d3.json, './public/data/anolis-edges.json', 'edge').then(async edges => {\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edgeLen = await loadData(d3.json, './public/data/anolis-edge-length.json', 'edge');\n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.V1);\n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.V2) == -1 );\n    let leafChar = await loadData(d3.json, './public/data/anolisLeafChar.json', '');\n    let labels = await loadData(d3.json, './public/data/anolis-labels.json', '');\n\n    ///MAKE A ESTIMATED SCALES THING\n    let calculatedAtt = {\n        'awesomeness' : await loadData(d3.json, './public/data/anolis-awesomeness-res.json', 'continuous'),\n        'island' : await loadData(d3.json, './public/data/anolis-island-res.json', 'discrete'),\n        'SVL' : await loadData(d3.json, './public/data/anolis-svl-res.json', 'continuous'),\n        'ecomorph': await loadData(d3.json, './public/data/anolis-ecomorph-res.json', 'discrete'),\n        'PCIII_padwidth_vs_tail': await loadData(d3.json, './public/data/padwidth-vs-tail-res.json', 'continuous'),\n    }\n\n    console.log('pad v tail', calculatedAtt['pad-vs-tail'])\n\n    let colorKeeper = [\n        ['#0dc1d1', '#c8f7fd'],\n        ['#3AD701', '#2a9b01'],\n        ['#fec303', '#d3a001'],\n        ['#fe4ecb', '#d30197'],\n        ['#f36b2c'],\n        ['#1abc9c'],\n        ['#493267'],\n        ['#a40b0b'],\n        ['#0095b6'],\n    ]\n\n    ////CALCULATE THE SCALES FOR EACH ATTRIBUTE////////\n    let calculatedScales = calculateScales(calculatedAtt, colorKeeper);\n\n    ///MATCH LEAF CHARACTERS AND LABELS TO LEAVES///\n    let matchedLeaves = matchLeaves(labels, leaves, leafChar, calculatedScales);\n\n    //MATCH CALC ATTRIBUTES TO EDGES///\n    let matchedEdges = matchEdges(edges, edgeLen, calculatedAtt, calculatedScales);\n\n    ///CALCULATES PATHS FROM THE DATA////\n    let paths = allPaths(matchedEdges, matchedLeaves, \"V1\", \"V2\");\n \n    let normedPaths = normPaths(paths, calculatedAtt, calculatedScales);\n    dataMaster.push(normedPaths);\n   \n    toolbarControl(toolbarDiv, normedPaths, main, calculatedScales, 'edgeLength', 'paths');\n    \n    let filterDiv = wrap.select('#filter-tab').classed('hidden', true);\n\n    ////////TREE RENDER IN SIDEBAR////////\n    nestedData.push(buildTreeStructure(paths, edges));\n    renderTreeButtons(normedPaths, calculatedScales, sidebar, false);\n    let tree = renderTree(sidebar, false, null);\n    \n    /// LOWER ATTRIBUTE VISUALIZATION ///\n    initialViewLoad(calculatedScales, 'edgeLength');\n});\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n/*\nloadData(d3.json, './public/data/geospiza_with_attributes.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    //console.log('pa',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/geospiza_loop_all_asr_features.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('pa RICH',pathArray);\n});*/\n/*\nloadData(d3.json, './public/data/anolis_rich_ASR_pad_vs_tail.json').then(data=> {\n    let pathArray = pullPath([], [data], [], [], 0);\n\n    console.log('anolis RICH',pathArray);\n});*/\n\n\n\n\n"],"sourceRoot":""}