{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/dataLoad.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/buttonComponents.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/renderPathView.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/cladeMaker.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/pairView.js","webpack:///./src/scripts/viewControl.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","loadData","readFunction","fileString","type","String","maxTimeKeeper","pairPaths","pathData","field","flatMap","path","filter","f","map","pair","verts","test","lastNode","p1Index","p2Index","p1","p2","distance","node","indexOf","common","d3","edgeLength","deltas","range","combLength","binCount","binStep","bins","Array","one","top","bottom","two","b","attributes","valdiffs","Math","abs","values","realVal","calculateDelta","closeness","leaf1","leaf","leaf2","calculateCloseness","calculateNewScales","keyList","colorKeeper","attData","color","undefined","max","upperCI95","min","lowerCI95","domain","clamp","scaleCat","sc","combineLength","paths","maxTime","formatAttributeData","scales","filterArray","keys","speciesLabel","species","catColor","move","edgeMove","label","yScale","satScale","colorScale","state","states","winState","stateColors","includes","attrLabel","st","console","error","allPaths","edgeArray","leafArray","source","target","le","getPath","pathKeeper","ed","reverse","pullPath","pathArray","nodes","arrayOfArray","nameArray","depth","forEach","childArray","id","children","assign","flag","dropDown","div","optionArray","dropText","dropId","dropdiv","append","classed","style","button","text","dropContent","attr","options","selectAll","join","on","raise","selectedPaths","comparisonKeeper","pathSelected","selectedPath","otherPaths","selectedDiv","main","remove","drawPathsAndAttributes","commonNodes","selectedSpecies","treeNodes","select","attrHide","filterMaster","attribute","attrFilter","selectedToolTest","selectedTool","empty","sortByDistanceDiv","sortByDistanceButton","sortButton","attrKeys","attrSortWrap","radioDiv","radio","svgTest","svg","branchFrequency","row","reduce","acc","curr","selectWrap","circleScale","selectedGroups","addRemoveBubble","treeNode","treeLinks","this","string","charAt","toUpperCase","timelines","nodeGroups","x","hovers","nearest","attributeWrapper","attributeGroups","renderAttributes","drawContAtt","drawDiscreteAtt","sorted","sort","a","high","highLeaves","low","lowLeaves","commonNodeStart","maxBranch","thresh","chil","parentBase","base","scaledParentMove","parentScale","xScale","level","getCommonNodes","pathBars","childNodeWrap","childNodes","curve","y","line","commonHover","concat","renderSelectedTopology","attWrap","ch","mappedDis","att","offset","index","last","dis","spec","maxP","v","notMax","other","findMaxState","attGroups","wrapRect","speciesGrp","lineGenD","attributeHeight","lineGenC","branchGrpDis","sp","bCirc","otherCirc","tool","transition","duration","html","pageX","pageY","ticks","branchGrpCon","MeanRect","scale","confiBars","dataMaster","renderDistibutions","renderSelectedView","commonNode","chosenPath","pathIndex","sortOtherPaths","group","pathRemove","renderComparison","buttonGroupTest","buttonGroup","usedColors","groupColor","newColor","find","compareButtonTest","compareButton","comparisonCombined","newAtt","com","atts","added","standard","variance","first","second","filteredComp","selectedTest","attWraps","normBins","fill","internalNodes","leafNodes","edges","mean","e","sqrt","meanStandard","sigma2","upCon95","lowCon95","leaves","exit","attWrapsEnter","enter","merge","innerWrap","lineGen","pathGroups","missing","areaG","y0","y1","confGroups","conf","NaN","axisGroupTest","axisGroup","maxDiff","newScale","startBins","difArray","diffs","diff","obsDistWrap","histogram","thresholds","newLeaves","xAxis","each","distGroups","groupLength","dimensions","rectWidth","rectHeight","collapsedHeight","getScales","nodeTooltipFlag","collapsed","pathWrapTest","pathWrap","pathAdd","notIt","nodeFilter","getLatestData","renderPaths","shownAttributes","checked","predictedAttrGrps","attribWrap","attrMove","selectedState","filterType","addFilterTag","addFilter","attributeType","updateMainView","nodeList","leafStateFilter","innerTimeline","step","change","height","innerPaths","continuousAtt","continuousPaths","attributeNodesCont","innerBars","rangeRect","drawGroups","stateBins","splitOnArray","newBins","newBinData","scaleName","newData","pa","firstGroupSvg","firstGroup","secondGroup","g","newM","branchBar","drawBranchPointDistribution","groupLabels","stateLabel","innerGroup","innerWrapRect","wrappers","shiftWraps","xAxisShift","shiftCircles","leafWraps","totalVal","totalMean","newVal","groupMean","distcircles","dotVals","w","groupBy","totalArray","leafWrapsD","rects","groupedData","d3Array","width","ratio","drawLeaves","bars","discreteAtt","innerTimelineDis","statePath","disct","attributeNodesDisc","stateDots","endStateDot","stateBars","probability","chosenIn","valueAdd","toolbarControl","toolbar","calculatedScales","viewArray","chosenCladesGroup","groups","filterButton","log","filterDiv","normedPaths","moveMetric","selectWrapper","attButton","stateChange","attProps","selectedOption","optKeys","button1","button2","submit","fromState","classList","toState","discreteFilter","filterOb","continRanges","ranges","brushBars","xBrush","extent","selection","handle","invert","brushGroup","selections","_groups","__brush","predictedFilter","observedFilter","lastFilter","continuousFilter","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","queryFilter","toggleFilters","scrunchButton","toggleScrunch","discreteViewButton","discretePredictedGroups","dropOptions","no","attributeOptions","checkedAttributes","attoptions","cladeOptions","cladeKeeper","dropdivClade","buttonClade","dropContentClade","updateCladeDrop","li","names","binGroups","calculatedScalesKeeper","renderDistStructure","dropUl","cladesGroupKeeper","growSidebarRenderTree","cladeBool","sidebar","traitColorDropDown","renderTreeButtons","renderTree","margin","right","left","lengthHeight","renderCladeTree","link","nodeData","findCommonNode","path1","path2","subtreeFinder","nestedData","child","nodeNames","wrap","textInput","addClade","labelTree","addCladeGroup","clades","addingEdgeLength","root","treenodes","size","sidebarTest","treeSvg","gTest","updateCladeTree","attrDraw","assignPosition","array","stepDown","findDepth","descendants","combEdge","position","parent","notleaves","branchNodes","branchPoint","triangle","clade","uncollapseSub","collapseSub","lengthBool","observedWidth","predictedWidth","squareDim","timeRange","brushColors","compareColors","defaultBarColor","colorBool","selectedClades","groupLabel","branchCount","newNormed","keysToHide","rootNodes","sortedBins","mapNorm","bin","fData","binI","leafAttr","leafData","nodeArray","count","maxO","minO","xO","histogramO","stateKeys","rootNode","colors","entries","histo","h","x1","x0","binWrap","nodeLengthArray","nodeDuplicateCheck","bPointScale","pointGroups","eMove","binsRects","groupBins","branches","axis","axGroup","mainDiv","compareTooltipFlag","filteredAttributes","branchScale","binnedWrap","selected","sum","cladeLabel","testest","drawGroupLabels","divWrap","groupHeader","textDiv","branchPointSvg","selectedNodes","from","Set","testNodes","testLinks","pathsListOne","pathsListTwo","testNodesOne","testLinksOne","testNodesTwo","testLinksTwo","mapBins","combined","groupKey","predictedWrap","rootData","contRoot","newy","disRoot","rootStateGroups","maxVal","branchGroup","discreteDist","discreteMiddleGroups","stateRects","av","stateBarsPredicted","xMove","maxBin","maxState","continDist","list","continBinGroups","maxCount","distrib","mirrorlineGen","gindex","brush","parentNode","maxCounts","zero","classLabel","brushedVal","otherBins","descendBins","groupDis","continuousHistogram","oNode","oHisto","oDist","brushedNodes","selectedBranch","secondGrp","doesItExist","datum","classy","notNodes","observedWrap","contOb","contBars","movex","xvalues","discOb","discBars","dRects","offSet","movey","xPoint","padding","renderDistributionComparison","stateBinsPredicted","disWrap","winPosArray","getBoundingClientRect","win","lineThing","brushedDist","otherDist","testH","notNodeNames","notNodeSelectedBranch","notTest","testtest","notTestTest","notNodeSecondGrp","dat","updateRanking","pairs","weights","deltaMax","closeMax","distMax","deltaScale","closeScale","distScale","sortedPairs","delta","deltaRank","closenessRank","distanceRank","totalRank","pairColor","brushes","brushData","pairWraps","scoreWrap","scoreGroups","score","scoreLabel","pairGroupN","species1","species2","neighbors","start","speciesTest","speciesNames","labeledN","spec1N","spec2N","closest1","closest2","branchesN","pairGroup","xAxisG","neighNodes","mouseG","mousePerLine","mouse","xDate","bisect","getElementsByClassName","beginning","end","getTotalLength","floor","pos","getPointAtLength","toFixed","drawSorted","view","document","getElementById","disabled","rankDiv","defaultW","weightPicker","slider","slide","default","displayValue","num","rankingControl","attKeys","drop","generatePairs","removeFilter","filterId","dataFilters","filterIndex","testData","fun","filterFunction","newTestData","newFilterMaster","attType","filFunction","oldData","extra","ex","filterToolbar","formater","nodeId","selectedNode","predicted","observed","numb","filterPred","filterObs","selectorDiv","selectId","dropDownWrapper","buildTreeStructure","getNested","V1","renderCallback","reduce2DropArray","startArray","phenoOptions","phenogramButton","cladeButton","_children","positionArray","edge","uncollapse","pheno","treemap","groupedBool","updateTree","treeData","getLeaves","ids","Clade","collapseTree","yAxis","savedSelected","attributeList","discreteTraitList","toolbarDiv","dataLoadAndFormatMultinet","then","centData","edgeFile","internalFile","leafFile","dataName","unique","self","internal","columns","calculatedAtt","newRow","calcLeafAtt","matchedEdges","indexTo","_to","match","indexFrom","_from","attrib","fromNode","V2","rooted","chosenClade","appLaunch"],"mappings":"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","file":"js/app.de564296.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([173,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as d3 from 'd3';\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\n\n","import * as d3 from \"d3\";\n\nexport const maxTimeKeeper = []\n\n\nexport function pairPaths(pathData, field){\n\n\n    return pathData.flatMap((path, i)=> {\n        let pairs = pathData.filter((f, j)=> j != i);\n        let paired =  pairs.map((p)=> {\n            return {'p1': path, 'p2': p}\n        });\n        return paired.map(m=> {\n            m.distance = getDistance(m);\n            m.deltas = calculateDelta(m, field);\n            m.closeness = calculateCloseness(m, field);\n            \n            return m;\n        })\n    })\n}\n\nfunction getDistance(pair){\n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n    pair.common = pair.p1[p1Index]\n\n    return d3.sum(p1.map(m=> m.edgeLength)) + d3.sum(p2.map(m=> m.edgeLength));\n}\n\nfunction calculateDelta(pair, field){\n   \n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n \n    let range = maxTimeKeeper[0] - p1[0].combLength;\n    let binCount = d3.max([p1.length, p2.length])\n    let binStep = range / binCount;\n   \n    let bins = [...new Array(binCount-1)].map((d, i)=> {\n        return {'bottom': p1[0].combLength + (i*binStep), 'top': p1[0].combLength + ((i+1)*binStep) }\n    })\n   \n    bins = bins.map((d, i)=> {\n        let one = p1.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        let two = p2.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        d.one = one;\n        d.two = two;\n        return d;\n    });\n\n    bins = bins.map((b, i)=> {\n        if(b.one.length === 0){\n            b.one = bins[i-1].one;\n        }\n        if(b.two.length === 0){\n            b.two = bins[i-1].two;\n        }\n\n        return b;\n    })\n    \n    let attributes = d3.entries(p1[0].attributes)\n                    .filter(f => f.value.type === 'continuous')\n                    .map(m=> {\n                        let name = m.key;\n                        let valdiffs = bins.map((b, i)=> {\n                            return Math.abs(b.one[0].attributes[name].values.realVal - b.two[0].attributes[name].values.realVal);\n                        });\n                        m.value = d3.max(valdiffs)\n                        return m;\n                    });\n\nreturn attributes;\n\n}\n\nfunction calculateCloseness(pair, field){\n let leaf1 = pair.p1.filter(p=> p.leaf === true)[0].attributes;\n let leaf2 = pair.p2.filter(p=> p.leaf === true)[0].attributes;\n\n return d3.entries(leaf1).filter(f=> f.value.type === 'continuous').map(m=> {\n    \n     m.value = Math.abs(m.value.values.realVal - leaf2[m.key].values.realVal);\n     return m\n });\n}\n\nexport function calculateNewScales(attributes, keyList, colorKeeper){\n\n    return keyList.map((d, i)=> {\n\n        let attData = attributes.flatMap(f=> f[d]);\n        let color = colorKeeper[i] != undefined ? colorKeeper[i][0] : colorKeeper[0][0];\n       \n        if(attData[0].type == 'continuous'){\n            \n            let max = d3.max(attData.flatMap(m=> m.values.upperCI95));\n            let min = d3.min(attData.flatMap(m=> m.values.lowerCI95));\n            let mean = d3.mean(attData.flatMap(m=> m.values.realVal));\n\n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([color, '#f23929']).domain([min, max]),\n                'catColor': color,\n            };\n        }else{\n            let scaleCat = d3.keys(attData[0].values);\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, j)=> {\n                    return {'state': sc, 'color': colorKeeper[j][0]};\n                }),\n                'catColor': color,\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            \n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n            \n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n        leaf.label = mappedLeafLabels[i];\n\n        //let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n      \n        let leafCharIndex = leafChar.rows[0][\"\"] ? leafChar.rows.map(m=> m[\"\"]) : leafChar.rows.map(m=> m[\"species\"]);\n  \n        leaf.node = leaf.V2;\n        let keys = calculatedScales.map(m=> m.field);\n        let attr = {};\n         \n        let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n        keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                    // return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                     return {'state': state, realVal: value};\n                 });\n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 //attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n                 attr[k] = {'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n\n         leaf.clade = chosenOne.clade;\n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                   // res.scaleVal = scale(res.estimate);\n                   // res.scaledLow = scale(res.lowerCI95);\n                    //res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                       // return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                        return {'state': s.scaleName, realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\nexport function rootAttribute(paths, calculatedAtt, calculatedScales){\n\n    let rootAtt = calculatedAtt.filter(f=> f.node === paths[0][0].node)[0];\n\n    Object.keys(rootAtt).filter(f=> f != 'node').map(att=> {\n        rootAtt[att].scales = calculatedScales.filter(f=> f.field === att)[0];\n    });\n\n    return paths.map((p, i)=> {\n        p[0].attributes = rootAtt;\n        p[0].root = true;\n        return p\n    });\n\n};\nexport function combineLength(paths){\n\n    let maxTime = paths.map(path=> d3.sum(path.map(p=> p.edgeLength)))[0];\n    maxTimeKeeper.push(maxTime);\n    return paths.map(path=> {\n        return path.map((node, i, n)=> {\n            node.maxTime = maxTime;\n            node.combLength = d3.sum(n.filter((f, j)=> i >= j).map(m=> m.edgeLength));\n            return node;\n        })\n    })\n\n}\n\n// export function normPaths(paths, calculatedAtt, calculatedScales){\n//     paths.forEach((p, i)=> {\n//         p[0].attributes = {};\n//         Object.keys(calculatedAtt).map(att=> { \n//             if(calculatedAtt[att].type == 'continuous'){\n//                 let root = calculatedAtt[att].rows.filter(f=> (f.nodeLabels == p[0].node) || (f.nodeLabels == ('node ' + p[0].node)))[0];\n//                 p[0].attributes[att] = {};\n                \n//                 let scale = calculatedScales.filter(f=> f.field == att)[0].yScale;\n            \n//                 p[0].attributes[att].realVal = root.estimate;\n//                 p[0].attributes[att].upperCI95 = root.upperCI95;\n//                 p[0].attributes[att].lowerCI95 = root.lowerCI95;\n//                 p[0].attributes[att].scale = scale;\n//                 p[0].attributes[att].type = 'continuous';\n//             }else if(calculatedAtt[att].type == 'discrete'){\n//                 let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n//                 let scales = calculatedScales.filter(f=> f.field == att)[0].scales;\n//                 let rootAttr = scales.map(s=> {\n//                     //return {'state': s.scaleName,  scaleVal: s.yScale(root[s.scaleName]), realVal: root[s.scaleName]};\n//                     return {'state': s.scaleName, realVal: root[s.scaleName]};\n//                 });\n//                 p[0].attributes[att] = {'states':rootAttr, 'type': 'discrete'};\n               \n//             }else{\n//                 console.error('type not found');\n//             }\n//         });\n//     });\n    \n//     let maxBranch = d3.max(paths.map(r=> r.length));\n\n//     //SCALES for X, Y /////\n//     let xScale = d3.scaleLinear().range([0, 1000]).clamp(true);\n \n//     let normedPaths = paths.map((p, i)=> {\n//         p.xScale = xScale.domain([0, maxBranch - 1]);\n     \n//         let leafIndex = p.length - 1;\n//         let lengths = p.map(l=> l.edgeLength);\n//         let prevStep = 0;\n//         return p.map((m, j)=> {\n//             let node = Object.assign({}, m);\n//             //INTEGRATE THE DISTNACES HERE WHEN THEY WORK\n//             let step = node.edgeLength + prevStep;\n//             node.edgeMove = (j < leafIndex) ? step : 1;\n//             prevStep = prevStep + node.edgeLength;\n         \n//             node.move = (j < leafIndex) ? p.xScale(j) : p.xScale(maxBranch - 1);\n        \n//             return node;\n//         });\n//     });\n\n//     return normedPaths;\n// }\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(pathData, scales, filterArray){\n\n\n\n    let keys = (filterArray == null)? Object.keys(pathData[0][0].attributes).filter(f=> f != 'node' && f != 'leaf' && f != 'length' && f != 'root'): filterArray;\n   \n    let newData = pathData.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                let speciesLabel = path[path.length - 1].node;\n                \n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].species = speciesLabel;\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.combineLength;\n                    m.attributes[key].combLength = m.combLength;\n                    m.attributes[key].node = m.node;\n                    m.attributes[key].edgeMove = m.edgeLength;\n                    m.attributes[key].edgeLength = m.edgeLength;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = m.attributes[key].scales.yScale;\n                    m.attributes[key].satScale = m.attributes[key].scales.satScale;\n                    m.attributes[key].colorScale = m.attributes[key].scales.colorScale;\n                    if(m.leaf){\n                        m.attributes[key].leaf = m.leaf;\n                    }\n                    m.attributes[key].leaf = m.leaf;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf === true){\n                        let states = d3.entries(m.attributes[key].values);\n                     \n                        m.attributes[key].leaf = m.leaf;\n                        let state = m.attributes[key];\n                        state.states = {field: key, state: m.attributes[key].values[key]}\n                        state.species = speciesLabel;\n                        state.winState = m.attributes[key].values[key] ?  m.attributes[key].values[key] : d3.entries(m.attributes[key].values);\n                        state.color = m.attributes[key].scales.stateColors.filter(f=> {\n                            return f.state.includes(state.winState)})[0].color;\n\n                        \n                        state.move = m.combLength;\n                        state.combLength = m.combLength;\n                        state.node = m.node;\n                        state.edgeMove = m.edgeLength;\n                        state.edgeLength = m.edgeLength;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : d3.entries(m.attributes[key].values);//.filter(f => f.state != undefined);\n\n                        return states.map((st, j)=> {\n                            st.state = st.key;\n                            st.value = st.value;\n                            \n                            st.color = m.attributes[key].scales.stateColors.filter(f=> f.state === st.key)[0];\n                           \n                            st.move = m.combLength;\n                            st.combLength = m.combLength;\n                            st.node = m.node;\n                            st.edgeMove = m.edgeLength;\n                            st.edgeLength = m.edgeLength;\n                            st.attrLabel = key;\n                            st.species = speciesLabel;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n\nexport function getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function calculateMovingAverage(data, i) {\n\n    if (movingAverage === 0) {\n        return data[i][yValue];\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        sum += x;\n    }\n\n    return sum / count;\n};\n\nexport function calculateMovingStandardDeviation(data, i, avg) {\n\n    if (movingAverage === 0) {\n        return 0;\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        var dx = x - avg;\n        sum += (dx * dx);\n    }\n\n    var variance = sum / count;\n    return Math.sqrt(variance);\n};\n\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    \n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    \n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n\n\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n       // node.edgeLength = node.edge_data.weight;\n        if(notEmpty(node.children)){\n            pathArray.push(Object.assign({}, node));\n            pullPath([...pathArray], [...node.children], arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, Object.assign({},node)]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import * as d3 from \"d3\";\n\nexport function dropDown(div, optionArray, dropText, dropId){\n    let dropdiv = div.append('div').classed(`dropdown ${dropId}`, true);\n    dropdiv.style('display', 'inline-block')\n    let button = dropdiv.append('button').classed('btn dropbtn btn-secondary dropdown-toggle', true).text(dropText);\n    let dropContent = dropdiv.append('div').attr('id', dropId).classed('dropdown-content', true);\n    dropContent.append('a').text('text').attr('font-size', 11);\n    let options = dropContent.selectAll('a').data(optionArray).join('a').text(d=> d.field);\n\n    options.on('click', (d, i, n)=> dropContent.classed('show', false));\n\n    button.on('click', (d, i, n)=> {\n        if(dropContent.classed('show')){\n            dropContent.classed('show', false);\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n    options.raise()\n    return options;\n}\n\nexport function updateDropdown(optionArray, dropId){\n    d3.select(`#${dropId}`).selectAll('a').data(optionArray).join('a').text(d=> d.field);\n}","import * as d3 from \"d3\";\nimport { branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes } from './renderPathView';\nimport { formatAttributeData } from './dataFormat';\nimport { filterMaster } from './filterComponent';\nimport { dataMaster, collapsed, colorKeeper } from './index';\nimport { renderDistibutions } from \"./distributionView\";\n\nexport let selectedPaths = [];\nexport let comparisonKeeper = [];\n\nexport function pathSelected(selectedPath, otherPaths, scales) {\n\n    let selectedDiv = d3.select('div#selected');\n    let main = d3.select('div#main');\n    if (selectedPath === null) {\n\n        selectedPaths = [];\n\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, false);\n\n    } else {\n      \n        selectedPaths = selectedPaths.concat(selectedPath);\n        let commonNodes = renderSelectedView([...selectedPaths], [...otherPaths], selectedDiv, scales);\n        let sortedPaths = sortOtherPaths([...selectedPaths], [...otherPaths], [...commonNodes]);\n        \n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let pathGroups = drawPathsAndAttributes(sortedPaths.map(s => s.data), main, scales, false);\n\n        main.style('padding-top', '250px');\n    }\n}\nfunction getCommonNodes(paths){\n    let maxBranch = d3.max(paths.map(p => p.length));\n    let longestBranch = paths.filter(path => path.length === maxBranch)[0];\n    let startBranch = longestBranch.filter(f=> f.leaf != true);\n    let commonNodeStart = startBranch;\n    //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n    paths.map(path => {\n        commonNodeStart = [...path].filter(f => {\n            return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n    });\n\n    let children = paths.map(path => {\n        path = (path[0].leaf === true) ? path.reverse() : path;\n        let nodeIndex = path.map(p => p.node);\n        let thresh = nodeIndex.indexOf(commonNodeStart[commonNodeStart.length - 1].node);\n        let subset = path.filter((f, i) => i > thresh);\n        return subset;\n    });\n\n    commonNodeStart[commonNodeStart.length - 1].children = children.map((path, i) => {\n        let max = d3.max(path.map(p => p.edgeMove)) - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n        return path.map((chil, j, n) => {\n            chil.parentBase = commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.move = chil.edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.base = (j === 0) ? 0 : n[j - 1].edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            let parentScale = d3.scaleLinear().domain([0, 1]).range([0, 1000])\n            let scaledParentMove = parentScale(commonNodeStart[commonNodeStart.length - 1].edgeMove);\n            chil.xScale = d3.scaleLinear().domain([0, max]).range([0, (1000 - scaledParentMove)]);\n            chil.level = i;\n            return chil;\n        });\n    });\n\n    return commonNodeStart;\n}\nexport function sortOtherPaths(pathData, otherPaths, commonNode) {\n\n    if(pathData.length > 1){\n\n        if(commonNode != null){\n\n            let chosenPath = commonNode.reverse().map(m => m.node);\n            let rankedPaths = otherPaths.map(path => {\n                let step = 0;\n                let test = path.reverse().map((node, i) => {\n                    if (chosenPath.indexOf(node.node));\n                    return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n                }).filter(f => f.indexOf > -1);\n                let distance = (test[0].indexOf + test[0].pathIndex);\n                return { 'data': path.reverse(), 'distance': distance };\n            });\n            let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        \n            return sortedData;\n        }\n        console.error('multiple paths without common node');\n    }else{\n\n        let chosenPath = pathData[0].reverse().map(m => m.node);\n    \n        let rankedPaths = otherPaths.map(path => {\n            let step = 0;\n            let test = path.reverse().map((node, i) => {\n                if (chosenPath.indexOf(node.node));\n                return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n            }).filter(f => f.indexOf > -1);\n            let distance = (test[0].indexOf + test[0].pathIndex);\n            return { 'data': path.reverse(), 'distance': distance };\n        });\n        let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        return sortedData;\n    }\n\n}\nfunction renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency){\n\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', 'translate(0, 20)')\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data([commonNodeStart]).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n        pathBars.attr('height', (35 + (25 * commonNodeStart[commonNodeStart.length - 1].children.length)));\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(145, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', (d, i) => {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n                return x(d[d.length - 1].edgeMove)\n            })\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        nodeGroups.classed('common-node', true);\n\n        let childNodeWrap = nodeGroups.filter(c => c.children != undefined).selectAll('g.child').data(d => d.children).join('g').classed('child', true);\n\n        let childNodes = childNodeWrap.selectAll('g.node').data(d => d).join('g').classed('node', true)\n        childNodes.attr('transform', (d, i, n) => {\n            return 'translate(' + d.xScale(d.move) + ', ' + (d.level * 20) + ')';\n        });\n\n        childNodeWrap.append('path').attr('d', (d, i, n) => {\n            let pathArray = [{ 'x': 0, 'y': 0 }, { 'x': 0, 'y': i }];\n            d.map(m => {\n                pathArray.push({ 'x': m.xScale(m.move), 'y': m.level })\n            });\n            let line = d3.line()\n                .curve(d3.curveMonotoneY)\n                .x(function(d) {\n                    return d.x;\n                })\n                .y(d => (d.y * 20))\n            return line(pathArray);\n        }).attr('stoke-width', '2px').attr('fill', 'none').attr('stroke', 'gray');\n\n        childNodeWrap.on('mouseover', (d, i)=> {\n            let specArray = d.map(m=> m.species);\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let commonHover = [...commonNodeStart].map(c=> c.node).concat(d.map(n=> n.node));\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            treeLinks.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', (d, i)=> {\n            d3.selectAll('.hover').classed('hover', false);\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        let childCirc = childNodes.append('circle').attr('r', 7).attr('fill', 'red').attr('y', 5);\n\n        childCirc.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        childNodes.filter(f => f.leaf === true).append('text').text(d => d.label).attr('x', 9).attr('y', 4);\n        //selectWrap.attr('transform', 'translate('+(50+(20 *commonNodeStart[commonNodeStart.length - 1].children.length))+')')\n       \n\n}\nexport function addRemoveBubble(group, scales){\n\n    let pathRemove = group.append('g').classed('x-icon', true);\n    pathRemove.attr('transform', 'translate(15, 10)');\n    pathRemove.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathRemove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n    pathRemove.style('cursor', 'pointer');\n    pathRemove.on('click', (d, i, n) => {\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        pathSelected(null, dataMaster[0], scales);\n    });\n\n}\nexport function renderComparison(group, otherPaths, selectedDiv, scales){\n \n    let buttonGroupTest = selectedDiv.select('.button-wrap');\n    let buttonGroup = buttonGroupTest.empty() ? selectedDiv.append('div').classed('button-wrap', true) : buttonGroupTest;\n\n\n    \n    buttonGroup.style('display','inline-block').style('width', '900px').style('height', '50px');\n    let main = d3.select('div#main');\n    main.style('padding-top', '300px');\n\n    if(group != null){\n        let usedColors = comparisonKeeper.map(m=> m.groupColor);\n        let newColor = colorKeeper.find(c => usedColors.indexOf(c[0]) === -1);\n        group.groupColor = newColor[0];\n        comparisonKeeper.push(group);\n    }\n\n    if(comparisonKeeper.length > 1){\n        let compareButtonTest = d3.select('#toolbar').select('#compare-button');\n        let compareButton = compareButtonTest.empty() ? d3.select('#toolbar').append('button').text('Normal Mode').attr('id', 'compare-button').classed('btn btn-info', true) : compareButtonTest;\n        compareButton.on('click', ()=> {\n            compareButton.text() === \"Normal Mode\" ? compareButton.text('Compare Mode') : compareButton.text('Normal Mode');\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        });\n    }\n\n    let comparisonCombined = scales.map((sc, i)=> {\n        let newAtt = {'field': sc.field, 'type': sc.type, 'data': []}\n        comparisonKeeper.map((com, i)=> {\n            let atts = formatAttributeData(com.data, scales, [sc.field]);\n           \n            let added = atts.flatMap(att=> {\n                return att.map(a => {\n                    return a.map(m=> {\n                        let standard = m.leaf === true ? 0 : (m.upperCI95 - m.realVal) / 2;\n                        m.variance = standard * standard;\n                        return m;\n                    });\n                })\n            })\n\n            newAtt.data.push({'group': {'first': com.first, 'second': com.second, 'color': com.groupColor}, 'data': sc.type === 'continuous' ? added : atts.flatMap(a=> a)});\n        })\n        return newAtt;\n    });\n\n    let button = buttonGroup.selectAll('button').data(comparisonKeeper).join('button').classed('btn btn-info', true).style('background', d=> d.groupColor);\n    button.selectAll('span').data(t=> [t]).join('span').text(t=> {\n        return t.first ? `${t.first[1]} / ${t.second[1]}` : t.state;\n    }).append('span').text(t=> t.data.length).classed(\"badge badge-light\", true)\n    \n    let xOut = button.selectAll('i').data(d=> [d]).join('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    xOut.on('click', (d, i)=> {\n        let filteredComp = comparisonKeeper.filter(f=> f.groupColor != d.groupColor);\n        comparisonKeeper = filteredComp;\n        if(comparisonKeeper.length > 0){\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        }else{\n            selectedDiv.selectAll('*').remove();\n            selectedDiv.style('height', '0px');\n            main.style('padding-top', '0px');\n        }\n    });\n\n    let selectedTest = selectedDiv.select('.comparison-svg');\n    let selectedTool = selectedTest.empty() ? selectedDiv.append('svg').classed('comparison-svg', true) : selectedTest;\n    selectedDiv.style('height', '300px').style('width', '100%');\n    selectedTool.style('height', '300px');\n\n    let attWraps = selectedTool.selectAll('.att-wrapper').data(comparisonCombined.filter(f=> f.type === 'continuous').map((com)=>{\n       \n        let max = d3.max(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.upperCI95)))) + .2;\n        let min = d3.min(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.lowerCI95)))) - .2;\n        \n        com.data.map(c=> {\n            let binLength = 6;\n            //let max = scales.filter(f=> f.field === com.field)[0].max;\n           // let min = scales.filter(f=> f.field === com.field)[0].min;\n            let normBins = new Array(binLength).fill().map((m, i)=> {\n                let step = 1 / binLength;\n                let base = (i * step);\n                let top = ((i+ 1)* step);\n                return {'base': base, 'top': top, 'binI': i, 'max': max, 'min':min }\n            });\n\n            let internalNodes = c.data.map(path => path.filter(node=> node.leaf != true));\n            let leafNodes = c.data.flatMap(path => path.filter(node=> node.leaf === true));\n\n            c.bins = normBins.map((n, i, nodes)=> {\n                let edges = internalNodes.flatMap(path => path.filter(node=> {\n                    return node.edgeMove >= n.base && node.edgeMove <= n.top;\n                } ));\n                n.data = edges;\n                let mean = d3.mean(edges.map(e=> e.realVal));\n                n.mean = mean === undefined ? normBins[i-1].mean : mean;\n                let standard = Math.sqrt(d3.mean(edges.map(e=> e.variance)));\n                n.meanStandard = edges.length === 0 ? 0 : standard;\n                let sigma2 = standard * 2;\n                n.upCon95 = mean === undefined ? normBins[i-1].upCon95 : mean + sigma2;\n                n.lowCon95 = mean === undefined ? normBins[i-1].lowCon95 : mean - sigma2;\n                return n;\n            });\n            c.leaves = leafNodes;\n           \n            return c;\n        })\n        \n        return com;\n    }));\n    attWraps.exit().remove();\n    let attWrapsEnter = attWraps.enter().append('g').classed('att-wrapper', true);\n\n    let attLabels = attWrapsEnter.append('text').text(d=> d.field).style('text-anchor', 'end')\n                    .style('font-size', '11px').attr('transform', 'translate(120, 35)');\n\n    attWraps = attWrapsEnter.merge(attWraps);\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+(10+(i * 70))+')');\n\n    let innerWrap = attWraps.selectAll('g.inner-group').data(d=> [d]).join('g').classed('inner-group', true);\n    innerWrap.attr('transform', 'translate(150, 0)');\n    let wrapRect = innerWrap.selectAll('rect.outline-rect').data(d=> [d]).join('rect').classed('outline-rect', true)\n                    .attr('width', 800).attr('height', 60).attr('fill', '#fff').attr('stroke', 'gray');\n    \n    if(d3.select('#compare-button').empty() || d3.select('#compare-button').text() === \"Normal Mode\"){\n            let lineGen = d3.line()\n            .x((d, i)=> {\n                let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n                return x(i);\n            })\n            .y(d=> {\n            let y = d3.scaleLinear().domain([d.min, d.max])\n                y.range([60, 1]);\n                return y(d.mean);\n    });\n\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> d.data).join('g').classed('path-groups', true);\n    pathGroups.selectAll('*').remove();\n    let paths = pathGroups.append('path').attr('d', d=> { \n        let scale = d.bins[0].data[0].yScale\n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.mean === undefined){\n                b.mean = d.bins[i-1].mean;\n                d.missing = true;\n            }\n           \n            b.yScale = d3.scaleLinear().domain([b.min, b.max]).range([60, 1])\n            return b;\n        });\n        return lineGen(d.bins);\n    }).classed('path', true);\n\n    var areaG = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i)=> {\n        let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n        return x(i);\n    })\n    .y0(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.lowCon95);\n    })\n    .y1(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.upCon95); \n    });\n\n    let confGroups = innerWrap.selectAll('g.conf-groups').data(d=> d.data).join('g').classed('conf-groups', true);\n    confGroups.selectAll('*').remove();\n    let conf = confGroups.append('path').attr('d', d=> { \n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.upCon95 === NaN){\n                b.upCon95 = d.bins[i-1].upCon95;\n                d.missing = true;\n            }\n            if(b.lowCon95 === NaN){\n                b.lowCon95 = d.bins[i-1].lowCon95;\n                d.missing = true;\n            }\n\n            return b;\n        });\n        return areaG(d.bins);\n    }).classed('path', true);\n\n    paths.style('fill', 'none');\n    paths.style('stroke', d=> d.group.color);\n    paths.style('stroke-width', '2px');\n\n    conf.style('fill', d=> d.group.color);\n    conf.style('opacity', 0.15);\n\n    let yAxisG = innerWrap.append('g').classed('y-axis', true);\n\n    innerWrap.on('mousemove', function(d, i) {\n     \n        let scale = d3.scaleLinear().domain([d.data[0].bins[0].min, d.data[0].bins[0].max]).range([1, 60]);\n        let axisGroupTest = d3.select(this).select('.y-axis');\n        let axisGroup = axisGroupTest.empty() ? d3.select(this).append('g').classed('y-axis', true) : axisGroupTest;\n        \n        if(d3.select('#compare-button').empty() || d3.select('#compare-button').text()==='Normal Mode'){\n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)')\n            axisGroup.call(d3.axisLeft(scale).ticks(5));\n        }else{\n            let pathD = d3.select(this).select('.path-groups').selectAll('path');\n            let maxDiff = pathD.data().map(d=> d[0].maxDiff)[0];\n            \n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)');\n            let newScale = d3.scaleLinear().domain([maxDiff, 0]).range([0, 60]);\n            axisGroup.call(d3.axisLeft(newScale).ticks(5));\n        }\n\n    \n    }).on('mouseleave', function(){\n        let axisGroup = d3.select(this).select('.y-axis');\n        axisGroup.remove();\n    });\n    \n}else{\n\n    innerWrap.selectAll('.path-groups').remove();\n    innerWrap.selectAll('g.conf-groups').remove();\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> {\n        let startBins = d.data[0].bins;\n        let difArray = [];\n        for(let i = 1; i < d.data.length; i ++){\n            let diffs = []\n            d.data[i].bins.map((b, j)=>{\n                if(b.mean === undefined){\n                    b.mean = d.data[i].bins[j-1].mean;\n                }\n                if(startBins[j].mean === undefined){\n                    startBins[j].mean = startBins[j-1].mean;\n                }\n                let maxDiff = d.data[0].bins[0].max - d.data[0].bins[0].min;\n                diffs.push({'diff':Math.abs(startBins[j].mean - b.mean), 'maxDiff': maxDiff});\n            });\n            difArray.push(diffs);\n        }\n        return difArray;\n    }).join('g').classed('path-groups', true);\n\n    let lineGen = d3.line()\n        .x((d, i)=> {\n            let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n            return x(i);\n        })\n        .y(d=> {\n            let y = d3.scaleLinear().domain([0, d.maxDiff]).clamp(true);\n            y.range([60, 0]);\n            return y(d.diff);\n        });\n\n    let paths = pathGroups.append('path').attr('d', d=> { \n        return lineGen(d);\n    });\n\n    paths.style('fill', 'none');\n    paths.style('stroke', 'black');\n    paths.style('stroke-width', '2px');\n}\n\n/////////////////////////\nlet obsDistWrap = attWraps.selectAll('.observed-dist-wrap').data(d=> {\n  \n        let max = d3.max(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n        let min = d3.min(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n\n        let x = d3.scaleLinear().domain([min, max]).range([0, 200]);\n    \n        let histogram = d3.histogram()\n        .value(function(d) { return d.realVal; })  \n        .domain(x.domain())  \n        .thresholds(x.ticks(10)); \n        \n        let leafData = d.data.map(m=> {\n            let newLeaves = [...m.leaves].map(leaf => {\n                leaf.x = x;\n                leaf.group = m.group;\n                return leaf;\n            });\n            return {'binData':histogram(m.leaves), 'data': newLeaves, 'group': m.group, 'xScale': x};\n        });\n        return [{'data':leafData, 'xScale': x}];\n    }).join('g').classed('observed-dist-wrap', true);\n\n    obsDistWrap.attr('transform', 'translate(970, 0)');\n  \n    let xAxis = obsDistWrap.selectAll('g.axis-x').data(d=> [d]).join('g').classed('axis-x', true);\n    xAxis.attr('transform', 'translate(0, 50)')\n    xAxis.each((d, i, nodes)=> {\n        d3.select(nodes[i]).call(d3.axisBottom(d.xScale).ticks(5))\n    });\n\n    let distGroups = obsDistWrap.selectAll('.observed-group').data(d=> {\n        return d.data.map((m, i, n)=> {\n            m.index = i;\n            m.groupLength = n.length;\n            return m;\n        });\n    }).join('g').classed('observed-group', true);\n\n    let lines = distGroups.selectAll('.line').data(d => {\n            let mean = d3.mean(d.data.map(r=> r.realVal))\n            let vals = {'mean': mean, 'group':d.group, 'x':d.xScale}\n            return [vals];\n    }).join('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.mean)-1.5)+',0)')\n    .attr('height', 50).attr('width', 3).attr('fill', d=> d.group.color).style('opacity', '0.4')\n\n    let circWrap = distGroups.selectAll('.circ-wrap').data((d, i)=> [d]).join('g').classed('circ-wrap', true).attr('transform', (d, i, n)=> {\n        let move = d3.scaleLinear().domain([0, d.groupLength]).range([0, 60]);\n        return 'translate(0,'+(move(d.index+0.5))+')'});\n\n    let distCirc = circWrap.selectAll('circle.disDots').data(d=> d.data).join('circle').attr('r', 3)\n    .attr('cx', (d, i) => {\n        return d.x(d.realVal);\n    }).attr('cy', (d, i, n)=> {\n        return 0;\n    }).attr('fill', d=> d.group.color);\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales) {\n\n    let attributeHeight = 50;\n\n    let selectedSpecies = pathData.flatMap(p => p.filter(f => f.leaf === true).map(n => n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node => selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n    ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f => f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f => f.type === 'hide-attribute').map(m => m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc => {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m => m.field) : null;\n\n    ////IF THE SELECTED DIV IS THERE ALREADY USE THAT/////\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    ///////////////////////\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', () => sortPaths(sortByDistanceButton));\n\n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m => m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n    let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n    let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d => d).attr('id', (d, i) => 'radio-' + i).classed(\"form-check-input\", true);\n    radioDiv.append('label').text(d => d).property('for', (d, i) => 'radio-' + i).classed(\"form-check-label\", true);\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty() ? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    svg.selectAll('*').remove();\n\n    let branchFrequency = pathData.flatMap(row => row.flatMap(f => f.node)).reduce(function(acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n            acc[curr] = 1;\n        } else {\n            acc[curr] += 1;\n        }\n        return acc;\n    }, {});\n\n    ///RENDERING SELECTED PATHS////\n    if (pathData.length === 1) {\n\n        /////////////////////////////////////////////////\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', (d, i) => 'translate(0,20)');\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        selectedGroups.on('mouseover', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => {\n                return d.map(m => m.node).indexOf(f.data.node) > -1;\n            }).classed('hover', true);\n            treeLinks.filter(f => d.map(m => m.node).indexOf(f.data.node) > -1).classed('hover', true);\n            return d3.select(this).classed('hover', true);\n        }).on('mouseout', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n            let treeLinks = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n            return d3.select(this).classed('hover', false);\n        });\n\n        let speciesTitle = selectedGroups.append('text').text(d => {\n            let string = d.filter(f => f.leaf === true)[0].label;\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        });\n\n        speciesTitle.attr('x', 25).attr('y', 15);\n\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(150, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', 1000)\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        circle.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        let speciesNodeLabel = nodeGroups.filter(f => f.label != undefined).append('text').text(d => {\n            let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n            return string;\n        }).attr('x', 10).attr('y', 5);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(0,' + (i * 60) + ')');\n\n        let nodes = selectedGroups.select('.time-line').selectAll('.node');\n        nodes.on('mouseover', (d, i) => {\n\n            let nearest = otherPaths.filter(path => {\n                let nodearray = path.flatMap(f => f.node);\n                return nodearray.indexOf(d.node) > -1;\n            });\n\n            let nearestA = nearest[0];\n            let nearestB = nearest[1];\n           \n        });\n\n        //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(10,' + (i * ((attributeHeight + 5) * (Object.keys(d[1].attributes).length + 1))) + ')');\n\n        drawContAtt(attributeGroups);\n        drawDiscreteAtt(attributeGroups, scales, false, false);\n\n        //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attributeWrapper.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n      \n        return pathData;\n\n    } else if(pathData.length > 1 && pathData.length < 5) {\n       \n        let commonNodeStart = getCommonNodes(pathData);\n        renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency);\n\n        /////END PATH RENDER///////\n        let attWrap = svg.append('g').classed('attribute-wrapper', true);\n        let attributeData = commonNodeStart[commonNodeStart.length - 1].children.map(ch => {\n            return [...commonNodeStart].concat(ch);\n        });\n\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attDataComb = attData[0].map((att, i)=> {\n            let species = pathData[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < attData.length; index++ ){\n                let species = pathData[index].filter(f=> f.leaf === true)[0].label;\n                let last = attData[index][i].length - 1\n                attData[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': attData[index][i]})\n            }\n            return attribute;\n        });\n\n        function findMaxState(states, offset){\n            let maxP = d3.max(states.map(v=> v.realVal));\n            let notMax = states.filter(f=> f.realVal != maxP);\n            let winState = states[states.map(m=> m.realVal).indexOf(maxP)]\n            winState.other = notMax;\n            winState.offset = offset;\n    \n            return winState;\n        }\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n\n       let attGroups = attWrap.selectAll('g').data(mappedDis).join('g').classed('attr', true);\n       attGroups.attr('transform', (d, i) => 'translate(145,' + (i * (attributeHeight + 10)) + ')');\n\n       attGroups.append('text')\n        .text(d=> d.label)\n        .style('text-anchor', 'end')\n        .style('font-size', 11)\n        .attr('transform', 'translate(0,'+(attributeHeight/2)+')');\n\n       let wrapRect = attGroups.append('rect').attr('width', 1010);\n       wrapRect.attr('height', attributeHeight);\n       wrapRect.style('fill', '#fff');\n       wrapRect.style('stroke', 'gray');\n       wrapRect.style('opacity', 0.5);\n\n       attGroups.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n     \n       let speciesGrp = attGroups.selectAll('g').data(d=> {\n            d.data = d.data.map(m=> {\n                m.type = d.type;\n                return m;\n            });\n            return d.data;\n        }).join('g').classed('species', true);\n\n       let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n           return y(d.realVal) + d.offset;\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([attributeHeight-2, 1]);\n           return y(d.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n           d3.select(n[i]).classed('selected', true);\n       }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).classed('selected', false);\n       });\n\n       let disGroup = speciesGrp.filter(sp=> {\n        return sp.type === 'discrete';\n        });\n\n       let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n       branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        });\n\n        let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 5, 2]);\n            return y(d.realVal) + d.offset;\n        }).attr('cx', 5);\n\n        bCirc.attr('fill', (d, i)=> d.color);\n\n        let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n        otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n                return y(c.realVal);\n            }).attr('fill', (c)=> c.color).style('opacity', 0.1);\n\n        otherCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n\n        bCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n        \n        /////AXIS ON HOVER////\n        branchGrpDis.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let conGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'continuous';\n        });\n\n        let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n        branchGrpCon.attr('transform', (d)=> {\n         let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n             let distance = x(d.edgeMove);\n             return 'translate('+distance+', 0)';\n         });\n\n         /////AXIS ON HOVER////\n        branchGrpCon.on('mouseover', (d, i, n)=> {\n            let y = d.yScale;\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let MeanRect = branchGrpCon.append('rect');\n   \n        MeanRect.attr('width', 10).attr('height', 3);\n        MeanRect.attr('y', (d, i) => {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0])\n            return y(d.realVal);\n        });\n\n        let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n        confiBars.attr('width', 10).attr('height', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.lowerCI95) - y(d.upperCI95);\n        });\n\n        confiBars.attr('y', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.upperCI95);\n        })\n        confiBars.style('opacity', 0.1);\n\n        //tranforming elements\n        svg.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(0, 60)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n\n\n    }else{\n       \n        /////////\n        //getting common node\n        ///\n\n        let maxBranch = d3.max(pathData.map(p => p.length));\n        let longestBranch = pathData.filter(path => path.length === maxBranch)[0];\n        let startBranch = longestBranch.filter(f=> f.leaf != true);\n        let commonNodeStart = startBranch;\n        //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n        pathData.map(path => {\n            commonNodeStart = [...path].filter(f => {\n                return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n        });\n\n        svg.remove();\n        let remove = selectedTool.append('g').classed('x-icon', true);\n        remove.attr('transform', 'translate(15, 10)');\n        remove.append('circle').attr('r', 7).attr('fill', '#fff');\n        remove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n        remove.style('cursor', 'pointer');\n        remove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales);\n        });        \n\n        /////////\n        renderDistibutions(pathData, selectedDiv, scales);\n        selectedDiv.style('height', '550px');\n\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n    }\n    \n}\n\nfunction sortPaths(sortButton) {\n    if (sortButton.text() === 'Sort Most to Least') {\n        sortButton.text('Sort Least to Most');\n    } else {\n        sortButton.text('Sort Most to Least');\n    }\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport * as d3Array from 'd3-array'\nimport {pathSelected, renderComparison} from './selectedPaths';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport {filterMaster, nodeFilter, getLatestData, leafStateFilter, getScales} from './filterComponent';\nimport { drawBranchPointDistribution } from './distributionView';\nimport { dropDown } from './buttonComponents';\nimport { groupedView } from './viewControl';\n\nconst dimensions = {\n    rectWidth: 15,\n    rectHeight: 40,\n    collapsedHeight: 20,\n}\n\nexport function drawPathsAndAttributes(pathData, main){\n\n    let scales = getScales();\n\n    let nodeTooltipFlag = true;\n\n    let collapsed = d3.select('#scrunch').attr('value');\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(pathData, main);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n  \n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n    let attData = formatAttributeData(pathData, scales, shownAttributes);\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (shownAttributes.length + 1))) +')');\n    \n    let cGroups = drawContAtt(predictedAttrGrps, collapsed);\n    let dGroups = drawDiscreteAtt(predictedAttrGrps, collapsed, false);\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, pathData, (shownAttributes.length * attributeHeight));\n\n    let leafStates = d3.selectAll('.discrete-leaf');\n    leafStates.on('click', (d, i)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#state-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.winState);\n            d3.select(\"#state-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-state\").on('click', ()=> {\n                leafStateFilter(d, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-state\").on('click', ()=> {\n                let data = getLatestData();\n                let test = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState === d.winState;\n                });\n\n                let notIt = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState != d.winState;\n                });\n            \n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test, notIt, scales);\n\n            });\n\n        }});\n\n    return pathGroups;\n\n}\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 25)');\n        ///////////////////////////////////\n}\nexport function renderPaths(pathData, main){\n\n    let scales = getScales();\n\n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    \n    let nodeTooltipFlag = false;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n    let circleScale = d3.scaleLog().range([6, 12]).domain([1, d3.max(Object.values(branchFrequency))]);\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.attr('y', -8);\n\n    //////////\n    ///Selecting species\n    /////////\n    let pathAdd = pathGroups.append('g').classed(\"fas fa-search-plus\", true);\n    pathAdd.attr('transform', 'translate(15, 10)');\n    pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathAdd.append('text').text('+').attr('transform', 'translate(-5, 5)');\n    pathAdd.style('cursor', 'pointer');\n\n    pathAdd.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected([d], notIt.data(), scales);\n        }\n    });\n\n    /////////\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       let string = d.filter(f=> f.leaf === true)[0].node;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 25).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', 1000)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> {\n        return d}).join('g').attr('class', (d, i, n)=> {\n            return d3.select(n[n.length - 1]).data()[0].node + \" node\";\n        });\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 10)';});\n\n    nodeGroups.on('click', (d, i, n)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#branch-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.node);\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-node\").on('click', ()=> {\n                nodeFilter(d.node, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-node\").on('click', ()=> {\n                let data = getLatestData();\n                let test = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) > -1;\n                });\n                let notIt = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) === -1;\n                });\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n                pathSelected(test.data(), notIt.data(), scales);\n            });\n        }\n    });\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n}\nexport function renderAttributes(attributeWrapper, data, collapsed){\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> {\n        return data[i]}).join('g');\n    predictedAttrGrps.classed('predicated-attr-groups', true);\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n\n    let attrLabel = predictedAttrGrps.append('text').text(d=> {\n        return d[d.length - 1].label ? d[d.length - 1].label : d[d.length - 1].attrLabel\n    });\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    return predictedAttrGrps;\n}\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 1 : 18;\n        p.change = test;\n    })\n}\nasync function continuousPaths(innerTimeline, collapsed){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? dimensions.collapsedHeight : dimensions.rectHeight;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n        let y = d.scales.yScale;\n        y.range([height, 0]);\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.values.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> d[0].color);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\nexport function drawContAtt(predictedAttrGrps, collapsed){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return (d[d.length - 1] != undefined) ? d[d.length - 1].type === 'continuous' : d.type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? dimensions.collapsedHeight : dimensions.rectHeight;\n\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, collapsed);\n ////////\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n    // let innerRect = innerBars.append('rect').classed('attribute-inner-bar', true);\n    // innerRect.attr('height', attributeHeight).attr('width', dimensions.rectWidth);\n\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n       \n        let y = d.scales.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.values.lowerCI95) - y(d.values.upperCI95);\n        let barHeight = (collapsed === 'true') ? dimensions.collapsedHeight : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.scales.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(d.values.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.values.realVal);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.values.realVal);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', dimensions.rectWidth).attr('height', 4)\n        .attr('transform', (d, i)=> {\n            let y = d.scales.yScale;\n            y.range([attributeHeight, 0]);\n            return 'translate(0, '+ y(d.values.realVal) +')';})\n        .attr('fill', d=> d.color).classed('val-bar', true);\n    }\n\n    /////AXIS ON HOVER////\n    innerBars.on('mouseover', (d, i, n)=> {\n        let y = d.scales.yScale;\n        y.range([0, attributeHeight]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n        let f = d3.format(\".3f\");\n        tool.html('mean: '+f(d.values.realVal) +\"</br>\"+\"</br>\"+ 'upperCI: '+ f(d.values.upperCI95) +\"</br>\"+\"</br>\"+ 'lowerCI: '+ f(d.values.lowerCI95))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        tool.style('height', 'auto');\n       \n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('g.y-axis')\n        d3.select(n[i]).select('g.y-axis').remove();\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    return attributeNodesCont;\n   \n}\nexport function findMaxState(states, offset){\n    let maxP = d3.max(states.map(v=> v.values.realVal));\n    let notMax = states.filter(f=> f.values.realVal != maxP);\n    let winState = states[states.map(m=> m.values.realVal).indexOf(maxP)]\n    winState.other = notMax;\n    winState.offset = offset;\n    return winState;\n}\n    //BEGIN TEST\nfunction drawLeaves(attWraps, groupBy){\n    //THIS IS HARD CODED AND SHOULD NOT BE\n\n    let numSpecies = 100;\n    let height = 40;\n    //CONTINUOUS \n    let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap-first.continuous').data(d=> {\n            let totalVal = attWraps.data().filter(f=> f.label === d.label).map(m=> m.data);\n            let totalArray = totalVal.flatMap(p=> p.flatMap(f=> f.paths[f.paths.length - 1].realVal));\n            let max = d3.max(totalArray);\n            let min = d3.min(totalArray);\n            let totalMean = d3.mean(totalArray);\n        \n            let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n            let newVal = d.data.map((m, i)=> {\n                m.index = i;\n                return {'value': m.paths[m.paths.length - 1].values.realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n            });\n            let groupMean = d3.mean(newVal.map(v=> v.value));\n            return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n        }).join('g').classed('observe-wrap-first continuous', true);\n        \n        leafWraps.attr('transform', 'translate(850, 0)');\n        \n        let xAxis = leafWraps.append('g').classed('axis-x', true);\n        xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n        xAxis.each((d, i, nodes)=> {\n            d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n        });\n        \n        let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n        \n        let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n        \n        let distCircGroupOut = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n        let distcirclesOut = distCircGroupOut.selectAll('circle').data(d=> d.dotVals).join('circle');\n        distcirclesOut.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n        //DISCRETE//\n        let leafWrapsD = attWraps.filter(f=> f.type === 'discrete').selectAll('g.observe-wrap-first.discrete').data(d=> {\n          return [d];\n        }).join('g').classed('observe-wrap-first discrete', true);\n\n        let rects = leafWrapsD.filter(f=> {\n            return f.label != groupBy;\n        }).selectAll('rect').data(d=> {\n            let groupedData = d3Array.groups(d.data.map(m=> m.paths[m.paths.length - 1]), d=> d.state);\n            groupedData.sort((a, b)=> b[1].length - a[1].length)\n            return groupedData;\n        }).join('rect').attr('height', 15).attr('width', (d, i, n)=>{\n            let scale = d3.scaleLinear().domain([0, d3.sum(d3.selectAll(n).data().map(m=> m[1].length))])\n            .range([5, 170]);\n            d.width = scale(d[1].length);\n            return scale(d[1].length);\n        });\n\n        rects.attr('x', (d, i, n)=> {\n            if(i === 0){ return 0}\n            else {\n                d3.selectAll(n).filter((f, j)=> j< i);\n                let move = d3.sum(d3.selectAll(n).filter((f, j)=> j< i).data().map(m=> m.width));\n                return move;}\n        }).attr('y', 12)\n\n        rects.attr('fill', d=> d[1][0].color);\n\n        rects.on('mouseover', (d, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            \n            tool.html(d[0] + \"</br>\" + d[1].length)\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY + 20) + \"px\");\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 0.3);\n          \n        }).on('mouseout', (s, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 1)\n        })\n\n        leafWrapsD.attr('transform', 'translate(850, 0)');\n\n        let ratio = leafWrapsD.filter(f=> f.label === groupBy)\n            .selectAll('text').data(d=> [d]).join('text').text(d=> {\n                let paths = d.data[d.data.length - 1].paths;\n                return `${paths[paths.length - 1].state}: ${d.data.length} / ${numSpecies}`\n            });\n        ratio.style('text-anchor', 'middle')\n        ratio.style('font-size', '12px')\n        ratio.attr('x', 90).attr('y', 25)\n        \n    }\nexport function drawGroups(stateBins, scales){\n    \n    let groupedBool = d3.select('#show-drop-div-group').attr('value', 'grouped');\n    \n    let height = 40;\n    let selectedTool = d3.select('#selected');\n    selectedTool.selectAll('*').remove();\n \n    let main = d3.select('#main');\n    main.style('padding-top', 0);\n\n    d3.select('#toolbar').append('text').text(stateBins[0].field)\n\n    let splitOnArray = [{'field':'None'}].concat(scales.filter(f=> (f.field != stateBins[0].field) && f.type === 'discrete'));\n    let dropOptions = dropDown(d3.select('#toolbar'), splitOnArray, 'Split On','show-drop-div-group');\n\n    ////THIS SPLITS THE DATA////\n    dropOptions.on('click', (d, i, n)=> {\n        d3.select('#toolbar').append('text').text(d.field);\n        \n        if(d.type === 'discrete'){\n            let newBins = stateBins.map(state=> {\n                let newBinData = d.scales.map(sc=> {\n                    let field = sc.field;\n                    let name = sc.scaleName;\n                    let newData = state.data.filter(pa=> {\n                        let leaf = pa.filter(le=> le.leaf === true)[0];\n                        return leaf.attributes[field].winState === name;\n                    });\n                    return {'field': field, 'state': name, 'data': newData }\n                });\n                state.data = newBinData;\n                return state;\n            });\n\n            //////RENDERING NEED TO SEPARATE OUT/////\n           \n           let main = d3.select('#main');\n           main.selectAll('*').remove();\n           main.style('padding-top', '40px');\n           let firstGroupDiv = main.selectAll('div.first-group').data(newBins).join('div').classed('first-group', true);\n           \n           let firstGroupSvg = firstGroupDiv.append('svg');\n           firstGroupSvg.attr('height', s=> (s.data.length*270));\n           let firstGroup = firstGroupSvg.append('g');\n          \n           let firstLabel = firstGroup.append('text').text(f=> f.state).attr('transform', 'translate(10, 10)');\n\n           let secondGroup = firstGroup.selectAll('g.second-group').data(g=> {\n               let newGroups = g.data.map((m)=>{\n                   let newM = {};\n                   newM.first = [g.field, g.state];\n                   newM.second = [m.field, m.state];\n                   newM.data = m.data\n                   newM.leaves = m.data.flatMap(path=> path.filter(f=> f.leaf === true));\n                   return newM\n               });\n               return newGroups}).join('g').classed('second-group', true);\n\n           secondGroup = secondGroup.filter(f=> f.data.length > 0);\n           secondGroup.attr('transform', (s, i)=> 'translate(30,'+(20 + (i * 270))+')');\n\n           secondGroup.each((s, i, n)=> {\n            let branchBar = drawBranchPointDistribution(s.data, d3.select(n[i]));\n            branchBar.select('rect').attr('x', -80).attr('fill','gray');\n            branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n            \n            branchBar.select('.leaf-label').append('text').text((t, i) =>': '+ t.data.length).attr('transform', 'translate(45, 0)');\n            branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n    \n            branchBar.select('line').attr('stroke', '#fff');\n\n            let groupLabels = d3.select(n[i]).append('g');\n\n            //groupLabels.\n            let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n            pathAdd.attr('transform', 'translate(-10, 15)');\n            pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n            pathAdd.append('text').text('+').attr('transform', 'translate(-5, 3)').attr('fill', 'gray');\n        \n            pathAdd.style('cursor', 'pointer');\n\n            pathAdd.on('click', ()=> {\n                let other = d3.selectAll(n).filter((f,j)=> j != i);\n                renderComparison(s, other.data(), d3.select('#selected'), scales);\n            });\n\n            let stateLabel = groupLabels.append('text').text((s, i)=> s.second[1]);\n            stateLabel.attr('transform', (d, i)=> 'translate(3, 20)');\n            stateLabel.attr('fill', '#fff');\n           });\n\n           let innerGroup = secondGroup.filter(f=> f.data.length > 0).append('g').classed('inner-wrap', true);\n           innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n       \n           let attWraps = innerGroup.selectAll('.att-wrapper').data((d)=> {\n               let atts = formatAttributeData(d.data, scales, null);\n             \n               let attDataComb = atts[0].map((att, i)=> {\n                  \n                   let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n\n                   att[att.length - 1].offset = 0;\n                   let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n                   for(let index = 1; index < atts.length; index++ ){\n                       let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                       let last = atts[index][i].length - 1\n                       atts[index][i][last].offset = (index * 8);\n                       attribute.data.push({'species': species, 'paths': atts[index][i]});\n                   }\n                   \n                   return attribute;\n               });\n\n              let mappedDis = attDataComb.map(dis=> {\n                  dis.data = dis.data.map((spec, i)=> {\n                      spec.paths = spec.paths.map(m=> {\n                            if(dis.type === 'discrete'){\n                                let offset = 5 * i;\n                                let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                                return maxProb;\n                            }else{\n                                return m;\n                            }\n                        });\n                   return spec;\n                  });\n        \n                  dis.leaves = dis.data.flatMap(f=> f.paths.filter(p=> p.leaf === true));\n                  return dis;\n              });\n              return mappedDis;\n           }).join('g').classed('att-wrapper', true);\n\n           let innerWrapRect = attWraps.append('rect').attr('width', 800);\n\n            innerWrapRect.attr('height', height);\n            innerWrapRect.style('fill', '#fff');\n            innerWrapRect.style('stroke', 'gray');\n\n            attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n            wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n            svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n            let labels = attWraps.append('text')\n            .text(d=> d.label)\n            .style('text-anchor', 'end')\n            .style('font-size', 11)\n            labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n////WORKING ON STATE SHIFT VIEW///////\n            let shiftWraps = attWraps.filter(f=> f.type === 'discrete').selectAll('g.shift-wrap').data(d=> {\n       \n                let test = d.data.flatMap(m=> m.paths.filter((f, i)=> {\n                    if(i===0) return (i === 0);\n                    if(i > 0) return (m.paths[i-1].state != f.state)\n                    if(i < m.paths.length - 1) return (m.paths[i+1].state != f.state);\n                }));\n             \n                return [test];\n            }).join('g').classed('shift-wrap', true);\n\n            shiftWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxisShift = shiftWraps.append('g').classed('axis-x', true);\n            xAxisShift.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxisShift.each((d, i, nodes)=> {\n                let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 200]);\n                d3.select(nodes[i]).call(d3.axisBottom(x).ticks(5));\n            });\n\n            let circGroupShift = shiftWraps.append('g').attr('transform', 'translate(0, 20)');\n\n            let shiftCircles = circGroupShift.selectAll('circle.shift').data(d=> d).join('circle').classed('shift', true);\n            shiftCircles.attr('r', 4).attr('cx', (d, i)=> {\n                let x = d3.scaleLinear().domain([0,maxTimeKeeper[0]]).range([0, 200]);\n                return x(d.combLength)\n            });\n            shiftCircles.attr('fill', d=> d.color).style('opacity', 0.4);\n\n//////DRAW OBSERVED DISTRIBUTIONS/////\n            let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap').data(d=> {\n                let totalVal = attWraps.data().filter(f=> f.label === d.label).flatMap(m=> m.leaves.map(l=> l.realVal));\n                let max = d3.max(totalVal);\n                let min = d3.min(totalVal);\n                let totalMean = d3.mean(totalVal);\n\n                let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n                let newVal = d.leaves.map((m, i)=> {\n                    m.index = i;\n                    return {'value': m.realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n                });\n                let groupMean = d3.mean(newVal.map(v=> v.value));\n                return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n            }).join('g').classed('observe-wrap', true);\n\n            leafWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxis = leafWraps.append('g').classed('axis-x', true);\n            xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxis.each((d, i, nodes)=> {\n                d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n            });\n\n            let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n\n            let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n\n            let distCircGroup = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n            let distcircles = distCircGroup.selectAll('circle').data(d=> d.dotVals).join('circle');\n            distcircles.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n            distcircles.on('mouseover', (d, i, n)=> {\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n           \n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n\n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n\n            ////DRAW SPECIES GROUPS IN THE ATTRIBUTES\n\n            let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n                d.data = d.data.map(m=> {\n                    m.type = d.type;\n                    return m;\n                });\n                return d.data;\n            }).join('g').classed('species', true);\n\n            let lineGenD = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                    })\n                .y(d=> {\n                    let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n                    return y(d.realVal);\n                });\n\n            let lineGenC = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                })\n                .y(d=> {\n                    let y = d.scales.yScale;\n                    y.range([height-2, 1]);\n                    return y(d.values.realVal) + 2;\n                });\n\n            let innerStatePaths = speciesGrp.append('path')\n                .attr(\"d\", d=> {\n                        return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n                    })\n                .attr(\"class\", (d, i)=> {\n                        return d.species + \" inner-line\"})\n                .style('stroke-width', 0.7)\n                .style('fill', 'none')\n                .style('stroke', 'gray');\n\n            innerStatePaths.on('mouseover', (d, i, n)=> {\n               \n                d3.select(n[i]).classed('selected', true);\n                distcircles.filter(f=> f.species === d.species).classed('selected', true).style('opacity', 1);\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n                \n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n            let disGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'discrete';\n            });\n\n            let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n            branchGrpDis.attr('transform', (d)=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                    let distance = x(d.combLength);\n                    return 'translate('+distance+', 0)';\n            });\n\n            let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n                let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n                return y(d.realVal);\n            }).attr('cx', 5);\n\n            bCirc.classed('win-state', true);\n\n            bCirc.attr('fill', (d, i, n)=> {\n                if(i === 0){\n                    return d.color;\n                }else if(i === n.length - 1){\n                    if(d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }else{\n                    if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }\n            });\n\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n    branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     });\n     confiBars.style('opacity', 0.1);\n           \n           //drawGroups(stateBins, scales);\n    }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        selectedTool.select('#show-drop-div-group').classed('show', false);\n    });\n    /////END SPLIT VIEW//////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    svg.selectAll('*').remove();\n\n    svg.attr('height', (stateBins.length * (height + 20)));\n    svg.append('g').attr('transform', 'translate(500, 40)').append('text').text(stateBins[0].field)\n\n    let wrappers = svg.selectAll('.grouped').data(stateBins).join('g').classed('grouped', true);\n    wrappers.each((d, i, n)=> {\n        let branchBar = drawBranchPointDistribution(d.data, d3.select(n[i]));\n        branchBar.select('rect').attr('x', -80).attr('fill','gray');\n        branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n        \n        branchBar.select('.leaf-label').append('text').text((d, i) =>': '+ d.data.length).attr('transform', 'translate(45, 0)');\n        branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n\n        branchBar.select('line').attr('stroke', '#fff');\n    });\n\n    let groupLabels = wrappers.append('g');\n   \n\n     //groupLabels.\n     let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n     pathAdd.attr('transform', 'translate(20, -5)');\n     pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n     pathAdd.append('text').text('+').attr('transform', 'translate(5, 3)').attr('fill', 'gray');\n \n     pathAdd.style('cursor', 'pointer');\n\n     pathAdd.on('click', (d, i, n)=> {\n         let other = d3.selectAll(n).filter((f,j)=> j != i);\n         renderComparison(d, other.data(), d3.select('#selected'), scales);\n     });\n\n     groupLabels.append('text').text((d, i)=> d.state);\n     groupLabels.attr('transform', (d, i)=> 'translate(40, 16)');\n     groupLabels.style('text-anchor', 'end');\n     groupLabels.attr('fill', '#fff');\n\n    let innerGroup = wrappers.append('g').classed('inner-wrap', true);\n    innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n    let attWraps = innerGroup.selectAll('.att-wrapper').data((d, i)=> {\n        let atts = formatAttributeData(d.data, scales, null);\n\n       \n        let attDataComb = atts[0].map((att, i)=> {\n            let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < atts.length; index++ ){\n                let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                let last = atts[index][i].length - 1;\n                atts[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': atts[index][i]})\n            }\n            return attribute;\n        });\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n       return mappedDis;\n    }).join('g').classed('att-wrapper', true);\n\n    let innerWrapRect = attWraps.append('rect').attr('width', 800);\n    innerWrapRect.attr('height', height);\n    innerWrapRect.style('fill', '#fff');\n    innerWrapRect.style('stroke', 'gray');\n\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n    wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n    \n    svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n       //END EXPERIMENT\n    drawLeaves(attWraps, stateBins[0].field);\n\n    let labels = attWraps.append('text')\n    .text(d=> d.label)\n    .style('text-anchor', 'end')\n    .style('font-size', 11)\n    labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n    let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n        d.data = d.data.map(m=> {\n            m.type = d.type;\n            return m;\n        });\n        return d.data;\n    }).join('g').classed('species', true);\n\n    let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n           return y(d.values.realVal);\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([height-2, 1]);\n           return y(d.values.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n        d3.select(n[i]).classed('selected', true);\n    }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).classed('selected', false);\n    });\n\n    let disGroup = speciesGrp.filter(sp=> {\n     return sp.type === 'discrete';\n     });\n\n    let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n     });\n\n    let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n         let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n         //return y(d.realVal) + d.offset;\n         return y(d.values.realVal);\n     }).attr('cx', 5);\n\n     bCirc.classed('win-state', true);\n\n     bCirc.attr('fill', (d, i, n)=> {\n        if(i === 0 || i === n.length - 1){\n            return d.color;\n            /*\n        }else if(i === n.length - 1){\n            if(d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }*/\n        }else{\n            if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }\n        }\n     });\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n     branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     })\n     confiBars.style('opacity', 0.1);\n\n     /////HIGHLIGHTING NODES IN A TREE ON HOVER//////\n     d3.selectAll('.att-wrapper').selectAll('.branch').on('mouseover', (d, i, n)=> {\n         let treeNode  = d3.select('#sidebar').selectAll('.node');\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', true);\n      \n    }).on('mouseout', (d, i, n)=> {\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', false);\n    })\n     \n}\nexport function drawDiscreteAtt(predictedAttrGrps, collapsed, bars){\n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n   // discreteAtt.selectAll('*').remove();\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        \n        // let disct = d.map(m=> {\n        //     console.log('m', d, m)\n        //     let test = (m.leaf == true) ? m.states.map(s=> {\n        //         s.combLength = m.combLength;\n        //         s.color = m.color;\n        //         return s;\n        //     }) : m;\n        //     return test;\n        // });\n        let disct = d;\n       \n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n             return disct.map(m=> m.leaf ? m : m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return distance + 7;})\n    .y(d=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        return d.value ? y(d.value) : y(1);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", (d, i)=> d[0].species + \" inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;\n    });\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g');\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        if(d[0]){\n           // let distance = (moveMetric === 'move') ? d[0].move : x(d[0].combLength);\n           let distance = x(d[0].combLength);\n            return 'translate('+distance+', 0)';\n        }else{\n           // let distance = (moveMetric === 'move') ? d.move : x(d.combLength);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('rect').attr('width', dimensions.rectWidth).attr('height', attributeHeight).attr('opacity', 0);\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n        /////AXIS ON HOVER////\n    attributeNodesDisc.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, attributeHeight]);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n        })\n\n    attributeNodesDisc.attr('class', (d, i, n)=> {\n        let path = d3.selectAll(n).data();\n        return path[path.length - 1].species;\n    }).classed('attribute-node-discrete', true);\n\n    if(bars === false){\n\n        let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n            \n            return d;\n        }).join('circle').classed('dots', true);\n        \n        stateDots.attr('cx', 10).attr('cy', (d)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n            return d.realVal? y(d.realVal) : y(d.value);\n        }).attr('r', 2);\n        \n        stateDots.style('fill', (d, i, n)=> {\n           \n            /*\n            let speciesPath = d3.selectAll('.attribute-node-discrete.'+ d.species)//.filter(f=> f.type === 'discrete');\n           \n            let nodeArray = speciesPath.data().map(m=> {\n                return m.node ? m.node : m[0].node;\n            });\n            let index = nodeArray.indexOf(d.node);\n           \n            */\n            //return d.color\n            return 'gray';\n        });\n    \n        stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n/*\n        let maxDots = stateDots.filter((f, i, n)=> {\n           \n            return f.realVal === d3.max(d3.selectAll(n).data().map(m=> m.realVal));\n        });\n*/\n        \n\n        ////NEED TO ADD COLOR ON STATE CHANGE////\n    \n        stateDots.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n        ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n    \n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }else{\n        attributeNodesDisc.filter((att, i)=> {\n            return att[0] != undefined;}).append('rect').attr('height', attributeHeight).attr('width', dimensions.rectWidth).attr('fill', '#fff')\n        let stateBars = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dis-rect').data(d=> {\n            return d;\n        }).join('rect').classed('dis-rect', true);\n\n        stateBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         \n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            return y(d.realVal);\n        });\n\n        stateBars.attr('fill', (d, i)=> d.color);\n        stateBars.attr('opacity', '0.7');\n        stateBars.attr('stroke', '#fff');\n        stateBars.attr('transform', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            let probability = d3.selectAll(n).data().sort((a, b)=> b.realVal - a.realVal);\n            let chosenIn = probability.map(p=> p.state).indexOf(d.state);\n         \n            if(chosenIn === 0){\n                    return 'translate(0,0)';\n            }else{\n                ///need to make this a reduce function///\n                let valueAdd = 0;\n                    for(let step = 0; step < chosenIn; step++){\n                        valueAdd = valueAdd + probability[step].realVal;\n                    }\n                return 'translate(0,'+(y(valueAdd))+')';\n            }\n        });\n\n        stateBars.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n\n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }\n\n    return attributeNodesDisc;\n}\n\n","import '../styles/index.scss';\n\nimport * as d3 from \"d3\";\nimport {dataMaster, calculatedScalesKeeper} from './index';\nimport { updateMainView } from './viewControl';\n\nexport let filterMaster = [];\n\nexport function removeFilter(filterId, scales){\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n    let filterIndex = dataFilters.map(f=> f.filterId).indexOf(filterId);\n\n    if(filterIndex != dataFilters.length - 1){\n   \n        let baseData = filterIndex === 0? dataMaster[0] : dataFilters[filterIndex - 1].data;\n    \n        let testData = [...baseData];\n\n        let filterToolbar = d3.select(\"#toolbar\");\n\n        let badges = filterToolbar.selectAll('.filter-tag').remove();\n  \n        for(let i = filterIndex + 1; i < dataFilters.length; i ++){\n       \n            let fun = dataFilters[i].filterFunction;\n            if(dataFilters[i].attributeType === 'continuous'){\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].predictedFilter, dataFilters[i].observedFilter);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'c-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }else{//discrete\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].fromState, dataFilters[i].toState);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'd-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }\n        }\n    }\n    let newFilterMaster = filterMaster.filter(f=> f.filterId != filterId);\n\n    filterMaster = newFilterMaster;\n}\n\nexport function addFilter(filterType, attType, filterId, filFunction, oldData, newData, extra){\n    let filterOb = {'filterType': filterType, 'attributeType': attType, 'filterId': filterId, 'filterFunction':filFunction, 'before-data': oldData, 'data': newData}\n    if(extra != null){\n        extra.forEach(ex=> {\n            filterOb[ex[0]] = ex[1];\n        });\n    }\n    filterMaster.push(filterOb);\n    return filterOb;\n}\n\nexport function getLatestData(){\n    let data = filterMaster.length > 0 ? filterMaster[filterMaster.length - 1].data : dataMaster[0];\n    return data;\n}\n\nexport function getScales(){\n    return calculatedScalesKeeper[calculatedScalesKeeper.length - 1];\n}\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, main, scales){\n    console.log(filterButton, main, scales)\n\n    let filterDiv = d3.select('#filter-tab');\n    let data = getLatestData();\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        //move metric is 'edgeLength'\n\n        //renderAttToggles(filterDiv, data, scales);\n        stateFilter(filterDiv, filterButton, data, main, scales);\n        queryFilter(filterDiv, filterButton, data, main, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\nfunction addFilterTag(data, scales){\n\n    let filterToolbar = d3.select('#toolbar');\n\n    if(data.attributeType === 'continuous'){\n\n        let formater = d3.format(\".2s\");\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        d3.select(button).datum(data);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        let label = button.append('h6').text(data.selectedOption + \"  Predicted: \"+ formater(data.predictedFilter[0]) + \"-\" + formater(data.predictedFilter[1]) + \" Observed: \" + formater(data.observedFilter[0]) + \"-\" + formater(data.observedFilter[1]));\n        let xSpan = label.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> data.attribute != f.attribute);\n            ////YOU NEED TO CHANGE THIS TO REMOVE FILTER FUNCTION\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'discrete'){\n     \n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(data.state[0]);\n        button.append('i').classed('fas fa-arrow-right', true);\n        button.append('h6').text(data.state[1] + '  ');\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'branch'){\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(' At Branch: ' + data.nodeId);\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }\n    \n}\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n              \n                    //let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n                    let data = getLatestData();\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filId = 'd-'+filterMaster.filter(f=> f.attributeType === 'discrete').length;\n                    let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n                    updateMainView('Summary View');\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR////\n                    addFilterTag(filterOb, scales);\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    let filId = 'c-'+filterMaster.filter(f=> f.attributeType === 'continuous').length;\n                    let filterOb = addFilter('data-filter', 'continuous', filId, continuousFilter, [...data], [...test], [['selectedOption', selectedOption], ['predictedFilter', predictedFilter], ['observedFilter', observedFilter]]);\n\n                    updateMainView('Summary View');\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    addFilterTag(filterOb, scales);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\nexport function nodeFilter(selectedNode, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path.map(node => node.node).indexOf(selectedNode) > -1;\n    });\n\n    let filId = 'b-'+filterMaster.filter(f=> f.attributeType === 'branch').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'branch', filId, nodeFilter, [...data], [...test], [['nodeId', selectedNode]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\nexport function leafStateFilter(selectedState, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path[path.length - 1].attributes[selectedState.label].winState === selectedState.winState;\n    });\n\n    let filId = 'l-'+filterMaster.filter(f=> f.attributeType === 'leaf').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'leaf', filId, nodeFilter, [...data], [...test], [['leafState', [selectedState.label, selectedState.winState]]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n}\nfunction discreteFilter(data, selectedOption, fromState, toState){\n    if(selectedOption != undefined){\n        return data.filter(path=> {\n            let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n                let states = node.attributes[selectedOption].states;\n                if(fromState === 'Any'){\n                    return true;\n                }else{\n                    return states.filter(st=> st.state === fromState).length > 0 && states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n                }\n            });\n            let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n            let win = node.attributes[selectedOption].winState;\n            if(toState === 'Any'){\n                return true;\n            }else{\n                return win === toState;\n            }\n            });\n            return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n        });\n    }\n}\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, scales){\n\n    let moveMetric = 'edgeLength';\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n         \n             updateMainView('Summary View');\n\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                updateMainView('Summary View');\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, scales){\n\n    console.log(normedPaths, scales.map(m=> m.field))\n\n    ////NEED TO GET RID OF TOGGLE SVG\n   // let keys = Object.keys(normedPaths[0][0].attributes);\n   let keys = scales.map(m=> m.field);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths], 'data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n    \n        updateMainView(\"Summary View\");\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {drawPathsAndAttributes, drawDiscreteAtt, drawGroups} from './renderPathView';\nimport {toggleFilters, getLatestData} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport { collapsed, calculatedScalesKeeper } from '.';\nimport { dropDown } from './buttonComponents';\nimport { cladesGroupKeeper, chosenCladesGroup, cladeKeeper } from './cladeMaker';\nimport { binGroups, renderDistStructure } from './distributionView';\n\n\nexport function findBrushedNodes(){\n    let brushes = d3.select('#toolbar').selectAll('.brush-span');\n    let brushData =  [];\n    brushes.each(e => brushData.push(e))\n  \n    let nodes = brushData.flatMap(m=> m.nodes);\n    return nodes;\n}\nexport function toolbarControl(toolbar, main, calculatedScales){\n\n    let viewArray = [{'field':'Summary View'},{'field':'Path View'},{'field':'Pair View'}, /*{'field':'Clade View'}*/ ];\n\n    let viewDrop = dropDown(toolbar, viewArray, viewArray[0].field, 'change-view');\n\n    viewDrop.on('click', (d, i, n)=> {\n        let group = chosenCladesGroup[chosenCladesGroup.length - 1];\n        updateMainView(d.field, group.groups);\n        d3.select('.dropdown.change-view').select('button').node().value = d.field;\n        d3.select('.dropdown.change-view').select('button').text(d.field)\n        d3.select('#change-view').classed('show', false);\n    });\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, main, calculatedScales));\n    ///LENGTH BUTTON CODE\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, main, calculatedScales));\n\n    let discreteViewButton = toolbar.append('button').attr('id', 'discrete-view');\n    discreteViewButton.attr('class', 'btn btn-outline-secondary').text('Switch to Discrete Bars');\n    discreteViewButton.attr('value', false);\n    \n    discreteViewButton.on('click', ()=> {\n        let discretePredictedGroups = d3.selectAll('.predicated-attr-groups');\n        if(discreteViewButton.text() === 'Switch to Discrete Bars'){\n            discreteViewButton.text('Switch to Discrete Dots');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, true);\n        }else{\n            discreteViewButton.text('Switch to Discrete Bars');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, false);\n        }\n    });\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> {\n        if(m.type === 'discrete'){\n            optionArray.push(m);\n        }\n    });\n\n    let dropOptions = dropDown(toolbar, optionArray, 'Group By', 'show-drop-div-group');\n    toolbar.select('#show-drop-div-group').attr('value', 'ungrouped');\n\n    d3.select('.dropdown.show-drop-div-group').select('button').style('display', 'none')\n\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            let data = getLatestData();\n            let stateBins = d.scales.map(m=> {\n                return {'field': m.field, 'state': m.scaleName, 'data': []}});\n           \n            stateBins.map(state=> {\n               state.data = data.filter(paths=> {\n                    let node = paths.filter(no=> no.leaf === true);\n                        return node[0].attributes[state.field].winState === state.state;\n                });\n            });\n           d3.select('#main').selectAll('*').remove();\n           drawGroups(stateBins, calculatedScales);\n        }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        toolbar.select('#show-drop-div-group').classed('show', false);\n    });\n\n    /////ATTRIBUTE DROP DOWN\n    let attributeOptions = calculatedScales.map(m=> m.field);\n    let checkedAttributes = attributeOptions.length > 11 ? attributeOptions.slice(0, 8) : attributeOptions;\n\n    let dropdiv = toolbar.append('div').classed(`dropdown attribute-show`, true);\n    dropdiv.style('display', 'inline-block')\n    let button = dropdiv.append('button').classed('btn dropbtn btn-secondary dropdown-toggle', true).text('Shown Attributes');\n    let dropContent = dropdiv.append('div').attr('id', 'attribute-show').classed('dropdown-content', true);\n    let dropUl = dropContent.append('ul');\n    \n    let attoptions = dropUl.selectAll('li').data(attributeOptions).join('li')\n    let checkBox = attoptions.append('input').attr('type', 'checkbox');\n    attoptions.append('text').text(d=> ` ${d}`);\n\n    let checkedDefault = attoptions.filter(f=> checkedAttributes.indexOf(f) > -1).select('input');\n    checkedDefault.each((d, i, n) => n[i].checked = true);\n\n    button.on('click', (d, i, n)=> {\n        if(dropContent.classed('show')){\n            dropContent.classed('show', false);\n            updateMainView('Summary View', chosenCladesGroup[chosenCladesGroup.length - 1].groups)\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n\n    // /////CLADE VIEW////\n    // let cladePickerDrop = dropDown(toolbar, cladesGroupKeeper, `Clades Shown: ${cladesGroupKeeper[0].field}`, 'change-clade');\n    // d3.select('#change-clade').selectAll('a').on('click', (d, i, n)=> {\n    //     d3.select('.dropdown.change-clade').select('button').text(`Clades Shown: ${d.field}`)\n    //     chosenCladesGroup.push(d)\n    //     updateMainView('Summary View', d.groups);\n    // });\n    // if(cladesGroupKeeper.length === 0){\n    //     d3.select('.dropdown.change-clade').select('button').text(d.field);\n    // }\n\n    /////ATTRIBUTE DROP DOWN\n    let cladeOptions = cladeKeeper;\n   // let checkedClades = attributeOptions.length > 11 ? attributeOptions.slice(0, 2) : attributeOptions;\n\n    let dropdivClade = toolbar.append('div').classed(`dropdown clade-show`, true);\n    dropdivClade.style('display', 'inline-block')\n    let buttonClade = dropdivClade.append('button').classed('btn dropbtn btn-secondary dropdown-toggle', true).text('Shown Clades');\n\n    let dropContentClade = dropdivClade.append('div').attr('id', 'clade-show').classed('dropdown-content', true);\n    let dropUlClade = dropContentClade.append('ul');\n\n    let options = updateCladeDrop(dropUlClade, cladeOptions);\n\n    buttonClade.on('click', (d, i, n)=> {\n        if(dropContentClade.classed('show')){\n            dropContentClade.classed('show', false);\n           \n           let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n            return li[j].checked === true});\n          \n            let groups = test.data().map((m=> {\n            let names = m.nodes.map(path => path[path.length - 1].node);\n            let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n             \n            let group = binGroups(data, m.field, calculatedScalesKeeper[0], 8);\n            return {'label': m.field, 'paths': data, 'groupBins': group};\n    \n           }));\n\n           d3.select('#summary-view').remove();\n           \n           renderDistStructure(main, groups);  \n\n        }else{\n            dropContentClade.classed('show', true);\n        }\n    });\n}\n\nexport function updateCladeDrop(dropUl, cladeOptions){\n\n    let options = dropUl.selectAll('li').data(cladeOptions).join('li')\n    let checkBox = options.selectAll('input').data(d=> [d]).join('input').attr('type', 'checkbox');\n    options.selectAll('text').data(d=> [d]).join('text').text(d=> ` ${d.field}`);\n    \n    if(cladeOptions.length < 1){\n        d3.select('.dropdown.clade-show').select('button').classed('hidden', true);\n    }else{\n        d3.select('.dropdown.clade-show').select('button').classed('hidden', false);\n    }\n\n    return options;\n    \n    // let checkedDefault = options.filter(f=> checkedAttributes.indexOf(f) > -1).select('input');\n}\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, main, calculatedScales){\n\n    let data = getLatestData();\n   \n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }\n}","import {dataMaster, nestedData, calculatedScalesKeeper} from './index';\nimport { updateDropdown } from './buttonComponents';\nimport * as d3 from \"d3\";\nimport { addingEdgeLength, assignPosition, renderTree, renderTreeButtons, traitColorDropDown } from './sidebarComponent';\nimport { maxTimeKeeper } from './dataFormat';\nimport { getLatestData, getScales } from './filterComponent';\nimport { renderDistStructure, binGroups } from './distributionView';\nimport { updateMainView } from './viewControl';\nimport { pullPath } from './pathCalc';\nimport { updateCladeDrop } from './toolbarComponent';\n\nexport const cladesGroupKeeper = []\nexport const chosenCladesGroup = []\nexport const cladeKeeper = []\n\n\n\nexport function growSidebarRenderTree(){\n\n    let cladeBool = null;\n    let sidebar = d3.select('#sidebar');\n\n    sidebar.classed('clade-view', true);\n    d3.select('#main').classed('clade-view', true);\n\n    console.log('ths is firing')\n\n    sidebar.select('.tree-svg').selectAll('*').remove();\n    sidebar.select('.button-wrap').selectAll('*').remove();\n\n    traitColorDropDown(getScales(), sidebar.select('.button-wrap'), growSidebarRenderTree);\n\n    let x = sidebar.select('.button-wrap').append('div')\n    .style('position', 'absolute')\n    .style('right', '5px')\n    .style('top', '18px')\n    .append('i')\n    .classed('close fas fa-times', true)\n    .style('padding-right', '10px');\n\n    x.on('click', ()=> {\n     \n        sidebar.classed('clade-view', false);\n        d3.select('#main').classed('clade-view', false);\n\n        sidebar.selectAll('*').remove();\n\n        ////REDRAW SIDEBAR\n        renderTreeButtons(getLatestData(), sidebar, false);\n        renderTree(sidebar, null, true, false);\n\n    });\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 400,\n        height : (getLatestData().length * 7),\n        lengthHeight: 500,\n    }\n   \n    renderCladeTree(sidebar, null, dimensions);\n\n    let leaf = sidebar.select('.tree-svg').selectAll('.node--leaf');\n    let nodes = sidebar.select('.tree-svg').selectAll('.node');\n    let link = sidebar.select('.tree-svg').selectAll('.link');\n\n    let nodeData = getLatestData();\n  \n    function  findCommonNode(path1, path2){\n\n        let common = path1.filter(f=> path2.map(m=> m.node).indexOf(f.node) > -1);\n\n        let subtreeFinder = [nestedData[0]];\n\n        common.map(m=> m.node).map((m, i)=> {\n            if(i > 0){\n                let child = subtreeFinder[subtreeFinder.length - 1].children.filter(f=> {\n                    return f.node === m})[0];\n                subtreeFinder.push(child)\n            }\n        })\n\n        let paths = pullPath([subtreeFinder[subtreeFinder.length - 1]], subtreeFinder[subtreeFinder.length - 1].children, [], [], 0);\n        let nodeNames = paths.flatMap(path => path.map(p=> p.node))\n        nodes.filter(f=> nodeNames.indexOf(f.data.node) > -1).select('circle').attr('fill', 'orange');\n        link.filter(f=> nodeNames.filter((n)=> n != common[common.length - 1].node).indexOf(f.data.node) > -1).style('stroke', 'orange');\n\n        let wrap = sidebar.select('.button-wrap').append('div').classed(\"input-group mb-3\", true).style('width', '300px');\n        \n        let textInput = wrap.append('input').attr('type', 'text')\n        .classed('form-control', true)\n        .attr('placeholder', 'Clade Name')\n        .style('margin-right', 0)\n        .style('margin-left', '5px')\n        .style('margin-top', '5px')\n        .property('aria-describedby', \"basic-addon2\");\n\n        let button = wrap.append('div').classed('input-group-append', true).append('button').attr('type', 'button').classed('btn btn-outline-secondary', true);\n        button.text('Add Clade');\n        button.on('click', ()=> {\n            let name = textInput.node().value != \"\" ? textInput.node().value : `Clade-${cladeKeeper.length + 1}`\n            addClade(name, paths);\n            growSidebarRenderTree();\n            let ul = d3.select('div#clade-show').selectAll('ul');\n            updateCladeDrop(ul, cladeKeeper)\n        });\n        \n    }\n   \n    labelTree(leaf);\n\n    leaf.on('click', (d, i, n)=> {\n        d3.select(n[i]).select('circle').attr('fill', 'orange').attr('r', '5');\n        if(cladeBool === null){\n            cladeBool = d;\n        }else{\n            let dat1 = nodeData.filter(f=> f[f.length-1].node === cladeBool.data.node)[0];\n            let dat2 = nodeData.filter(f=> f[f.length-1].node === d.data.node)[0];\n\n            findCommonNode(dat1, dat2);\n            cladeBool = null;\n        }\n    });\n\n   sidebar.select('.tree-svg').classed('clade-view', true).append('g').classed('overlay-brush', true);\n\n}\n\nexport function addClade(name, nodes){\n    console.log('in add clade',name, nodes)\n    cladeKeeper.push({field: name, nodes: nodes})\n}\n\nexport function addCladeGroup(name, clades, nodes){\n    cladesGroupKeeper.push({field: name, names: clades, groups:nodes});\n    return {field: name, names: clades, groups:nodes};\n}\n\nexport function removeCladeGroup(clades){\n    cladeKeeper = cladeKeeper.filter(f=> f.groupKey != clades.groupKey);\n}\n\nexport function groupDataByAttribute(scales, data, groupAttr){\n\n\n    let groupKeys = scales.filter(f=> f.field === groupAttr)[0].scales.map(s=> s.scaleName);\n\n    let branchBinCount = d3.median(data.map(m=> m.length)) - d3.min(data.map(m=> m.length))\n   \n    return groupKeys.map(group => {\n        let paths = data.filter(path => {\n            return group.includes(path[path.length - 1].attributes[groupAttr].values[groupAttr]);\n        });\n    \n        let groupBins = binGroups(paths, group, scales, branchBinCount);\n        return {'label': group, 'paths': paths, 'groupBins': groupBins};\n    });\n    \n}\n\nexport function groupDataByClade(scales, data, cladeInfo){\n\n    let branchBinCount = d3.median(data.map(m=> m.length)) - d3.min(data.map(m=> m.length))\n   \n    return cladeInfo.groups.map(group => {\n        let paths = data.filter(path=> {\n            return group.nodes.indexOf(path[path.length - 1]) > -1;\n        });\n\n        let groupBins = binGroups(paths, group, scales, branchBinCount);\n        return {'label': group.clade, 'paths': paths, 'groupBins': groupBins}\n    });\n    \n}\n\nexport async function drawTreeForGroups(div){\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 620,\n        height : (getLatestData().length * 7),\n        lengthHeight: 800,\n    }\n\n   \n    renderCladeTree(div, null, dimensions);\n\n    let leaf = div.select('.tree-svg').selectAll('.node--leaf');\n    labelTree(leaf);\n\n   \n    div.select('.tree-svg').classed('clade-view', true).append('g').classed('overlay-brush', true);\n}\n\nfunction createNewCladeGroup(div, scales){\n    let cladeNames = []\n    let clades = []\n    d3.selectAll('.clade-name').each((e, i, n)=> {\n       cladeNames.push(n[i].value);\n       let rectTest = d3.select(`.rect-${i + 1}`).node().getBoundingClientRect();\n       let nodes = div.select('.tree-svg.clade-view').selectAll('.node--leaf').filter((f, j, node)=> {\n           let circPos = node[j].getBoundingClientRect();\n           return circPos.y >= rectTest.y-4 && circPos.y <= ((rectTest.y + rectTest.height) - 4);\n       })\n       nodes.select('circle').attr('fill', 'red');\n       clades.push({'clade': n[i].value , 'nodes': nodes.data().map(m=> m.data)})\n    });\n \n    let groupName = d3.select('.group-name').node().value;\n    let chosenGroup = addCladeGroup(groupName, cladeNames, clades);\n    updateDropdown(cladesGroupKeeper, 'change-clade');\n    let groups = groupDataByClade(scales, getLatestData(), chosenGroup);\n\n    d3.select('.dropdown.change-clade').select('button').text(`Clades Shown: ${chosenGroup.field}`);\n\n    updateMainView('Summary View', groups);\n    renderTree(d3.select('#sidebar'), null, true, false)\n}\n\nfunction cladeToolbar(div, scales){\n\n    let toolBar = div.append('div').classed('clade-toolbar', true);\n    let textInput = toolBar.append('input')\n    .classed('group-name', true)\n    .attr('type', 'text')\n    .attr('value', 'Name Your Group');\n  \n    let addCladeGroupButton = toolBar.append('button').text('Add Clade Group');\n    addCladeGroupButton.on('click', ()=> createNewCladeGroup(div, scales));\n\n    let inputGroup = toolBar.append('div').classed('input-group input-number-group', true);\n    let minusButton = inputGroup.append('button').text('-');\n   \n    let numberText = inputGroup.append('input')\n        .attr('value', 3)\n        .attr('min', 0)\n        .attr('max', 10)\n        .attr('type', 'number')\n        .classed('input-number', true);\n\n    let plusButton = inputGroup.append('button').text('+');\n\n    let nameWrap = inputGroup.append('div').classed('name-input-wrap', true);\n    minusButton.on('click', ()=> {\n        let num = numberText.attr('value');\n        numberText.attr('value', +num - 1);\n        addTextInputForGroups(+numberText.attr('value'), nameWrap);\n    });\n\n    plusButton.on('click', ()=> {\n        let num = numberText.attr('value');\n        numberText.attr('value', +num + 1);\n        addTextInputForGroups(+numberText.attr('value'), nameWrap);\n    });\n\n    addTextInputForGroups(+numberText.attr('value'), nameWrap);\n\n    function addTextInputForGroups(index, nameWrap){\n       \n        nameWrap.selectAll('*').remove();\n        d3.selectAll('.overlay-brush').selectAll('rect').remove();\n        for(let ind = 0; ind < index; ind = ind + 1){\n            nameWrap.append('input')\n            .classed('clade-name', true)\n            .attr('value', `Group ${ind+1}`)\n            .attr('type', 'text');\n\n            let rectGroup = d3.select('.overlay-brush').append('g').classed(`group-${ind}`, true)\n\n            let rect = rectGroup.append('rect')\n            .classed(`rect-${ind + 1}`, true)\n            .attr('height', 100)\n            .attr('width', 910)\n            .attr('opacity', 0.3)\n            .attr('transform',  (d, i, n)=> `translate(${0},${((800 / index) * ind)})`);\n\n            let rectSizer = rectGroup.append('rect').attr('class', `handle-${ind}`)\n            .attr('width', 700)\n            .attr('height', 20)\n            .attr('y', rect.node().getBoundingClientRect().y + 20)\n            .attr('opacity', 0)\n            .call(d3.drag()\n            .on('drag', function(){\n                let dragPos = d3.mouse(this);\n                let dragY = d3.event.y\n                d3.select(this).attr('y', dragPos[1]);\n                let height = +d3.select(`.rect-${ind + 1}`).attr('height')\n                let rectY = d3.select(`.rect-${ind + 1}`).node().getBoundingClientRect().bottom;\n                d3.select(`.rect-${ind + 1}`).attr('height', height + (dragY-rectY) + 70);\n            }));\n            \n            rect.call(d3.drag().on('drag', function(){\n                let dragPos = d3.mouse(this);\n                let dragY = d3.event.y\n                d3.select(this).attr('y', dragPos[1]);\n                let rectH = d3.select(`.rect-${ind + 1}`).node().getBoundingClientRect().height;\n                d3.select(`.handle-${ind}`).attr('y', dragY + (rectH - 20));\n            }))\n        }\n    }\n}\n\nfunction labelTree(nodes){\n    nodes.append('text')\n    .text(d=> d.data.node)\n    .attr('font-size', 9)\n    .attr('x', 4)\n    .attr('y', 2)\n}\n\nexport async function createCladeView(div, scales){\n    drawTreeForGroups(div);\n    cladeToolbar(div, scales);\n}\n\nexport function renderCladeTree(sidebar, att, dimensions){\n\n\n     addingEdgeLength(0, nestedData[0]);\n    \n    let treeFun = data => {\n        const root = d3.hierarchy(data);\n        return d3.tree().size([dimensions.width, dimensions.height])(root);\n      }\n\n    let treenodes = treeFun(nestedData[0]);\n\n    let sidebarTest = sidebar.select('svg');\n    let treeSvg = sidebarTest.empty() ? sidebar.append(\"svg\") : sidebarTest;\n    treeSvg.classed('tree-svg', true);\n\n    console.log(dimensions.height, dimensions.margin.top, dimensions.margin.bottom)\n\n    let gTest = treeSvg.select('g.tree-g');\n    let g = gTest.empty() ? treeSvg.append(\"g\").classed('tree-g', true) : gTest;\n   \n\n   \n        ////Break this out into other nodes////\n    updateCladeTree(treenodes, dimensions, treeSvg, g, att, true);\n    \n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n    return array;\n}\n\nexport function updateCladeTree(treenodes, dimensions, treeSvg, g, attrDraw, length){\n    \n    assignPosition(treenodes, 0);\n\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + (dimensions.height / 1.5));\n\n    findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, getLatestData().length])\n    g.attr('transform', `translate(30, ${dimensions.height / 1.9})`);\n\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n       \n           return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n           + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n           + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n           + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n     \n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants(), d => d.data.node)\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n    .duration(500)\n    .attr(\"transform\", function(d) { \n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n    });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)//f.data.attributes[attrDraw.field].winState === att.state;\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    })\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateCladeTree(treenodes, dimensions, treeSvg, g, attrDraw, lengthBool);\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n    return node;\n}","import '../styles/index.scss';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster, getLatestData, getScales} from './filterComponent';\nimport { pullPath } from './pathCalc';\nimport { renderTree } from './sidebarComponent';\nimport { chosenCladesGroup } from './cladeMaker';\nimport { updateMainView } from './viewControl';\n\nconst dimensions = {\n    height: 80,\n    observedWidth : 200,\n    predictedWidth : 900,\n    margin : 20,\n    squareDim : 15,\n    timeRange: 895\n}\n\nconst brushColors = [\n    ['#64B5F6', '#F39C12'],\n    ['#6A1B9A', '#FDD835'],\n]\n\nconst compareColors = ['#546E7A', '#5D4037']\n\nconst defaultBarColor = '#baaaaa'//#DCD4D4';\n\nlet colorBool = 0;\nconst selectedClades = [[]];\n\nexport function groupDistributions(pathData, mainDiv, groupAttr){\n\n    let scales = getScales();\n\n    let groupKeys = scales.filter(f=> f.field === groupAttr)[0].scales.map(s=> s.scaleName)\n  \n    let branchBinCount = d3.median(pathData.map(m=> m.length)) - d3.min(pathData.map(m=> m.length))\n   \n    let pathGroups = groupKeys.map(group => {\n        let paths = pathData.filter(path => {\n            return group.includes(path[path.length - 1].attributes[groupAttr].values[groupAttr]);\n        });\n\n        let groupBins = binGroups(paths, group, scales, branchBinCount);\n        return {'label': group, 'paths': paths, 'groupBins': groupBins}\n    });\n\n    renderDistStructure(mainDiv, pathGroups);\n}\nexport function binGroups(pathData, groupLabel, scales, branchCount){\n\n    console.log('bin groups', pathData, groupLabel, scales, branchCount)\n\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n    \n    let keys = scales.map(s=> s.field).filter(f=> attrHide.indexOf(f) === -1);\n\n    let newNormed = [...pathData];\n    let keysToHide = attrHide.length > 0 ? scales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    formatAttributeData(newNormed, scales, keysToHide);\n\n    let maxBranch = d3.max(newNormed.map(p=> p.length)) - 1;\n  \n    let max = maxTimeKeeper[0]\n\n    let normBins = new Array(branchCount).fill().map((m, i)=> {\n            let step = max / branchCount;\n            let base = (i * step);\n            let top = ((i + 1)* step);\n            return {'base': base, 'top': top, 'binI': i , 'step':step}\n    });\n\n    let internalNodes = newNormed.map(path => path.filter(node=> (node.leaf != true) && (node.root != true)));\n    let leafNodes = newNormed.flatMap(path => path.filter(node=> node.leaf === true));\n    let rootNodes = newNormed.flatMap(path => path.filter(node=> node.root === true));\n\n    normBins.map((n, i)=> {\n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n                return node.combLength > n.base && node.combLength <= n.top;\n        } ));\n        n.data = edges;\n        return n;\n    });\n\n    let sortedBins = keys.map(key=> {\n        let scale = scales.filter(f=> f.field === key)[0];\n    \n        let mapNorm = normBins.map(bin => {\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    return d.attributes[key];\n                })\n            }else{\n                bin.fData = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        });\n       \n        let leafAttr = leafNodes.map(m=> m.attributes[key]);\n        let leafData = {'data': leafAttr};\n   \n        if(scale.type === 'continuous'){\n            let x = d3.scaleLinear().domain([scale.min, scale.max]).range([0, dimensions.height]);\n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.values.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n  \n            mapNorm.map((n, i, nodeArray)=> {\n                n.type = scale.type;\n                n.bins = histogram(n.data);\n                n.domain = [scale.max, scale.min];\n                n.bins.count = branchCount;\n                n.bins.groupLabel = groupLabel;\n\n                if(d3.mean(n.bins.map(m=> m.length)) === 0){\n                    if(i === 0){\n                         n.bins = histogram(rootNodes.map(m=> m.attributes[key]));\n                         n.data = rootNodes.map(m=> m.attributes[key]);\n                         n.bins.count = branchCount;\n\n                    }else{\n                        n.bins = nodeArray[i-1].bins;\n                        n.data = nodeArray[i-1].data;\n                    }\n                }\n                return n;\n            });\n\n            //Histogram for observed////\n            let maxO = d3.max(leafAttr.flatMap(v=> +v.values.realVal));\n            let minO = d3.min(leafAttr.flatMap(v=> +v.values.realVal));\n            let xO = d3.scaleLinear().domain([minO, maxO]).range([0, dimensions.height])\n\n            let histogramO = d3.histogram()\n            .value(function(d) { \n                return +d.values.realVal; })  \n            .domain(xO.domain())  \n            .thresholds(xO.ticks(20)); \n\n            leafData.bins = histogramO(leafAttr);\n      \n            let newK = {'key': key, \n                    'branches': [...mapNorm], \n                    'type': scale.type, \n                    'leafData': leafData, \n                    'rootData': rootNodes.map(m=> m.attributes[key])[0]}\n   \n            return newK;\n\n        }else{\n            //HANDLING DISCRETE//\n            let states = leafAttr[0].scales.scales;\n           \n            let stateKeys = states[0].state? states.map(s=> s.state) : states.map(s=> s.scaleName)\n          \n            let rootNode = rootNodes[0].attributes[key]\n            rootNode.bins = d3.entries(rootNodes[0].attributes[key].values).map(m=> {       \n                let states = [{'state': m.key, 'value':m.value}];\n                return {state: states, branchCount:branchCount, color : scale.stateColors.filter(f=> f.state === m.key)[0], max:80};\n               });\n            \n            mapNorm.bins = null\n            leafData.bins = states.map(s=> {\n                return leafAttr.filter(f=> s.scaleName.includes(f.states.state))});\n   \n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.height]);\n            let y = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n\n            let histogram = d3.histogram()\n            .value(function(d) { return d.value; })  \n            .domain(y.domain())  \n            .thresholds(y.ticks(10)); \n  \n            mapNorm.map((n, i, nodeArray)=> {\n                \n                let colors = scale.stateColors;\n                n.bins = stateKeys.map(state=> {\n                    let test = n.data.flatMap(m=> Object.entries(m.values).filter(f=> f[0] === state))\n                    .map(m=> {\n                        return {'state': m[0], 'value':m[1]}\n                    });\n                    \n                    return {state: test, branchCount:branchCount, histogram: histogram(test), color : colors.filter(f=> f.state === state)[0], max:80};\n                });\n                //IF WE DONT HAVE ANY BRANCHES< WE ASSUME THAT THEY ARE THE SAME AS THE PREVIOUS\n                if(n.bins[0].state.length === 0){\n                    if(i === 0){\n                        n.bins = d3.entries(rootNode.values).map(m=> {\n                            let histo = histogram([+m.value]).map(h=>{\n                                if(m.value <= h.x1 && m.value >= h.x0){\n                                    h.push(+m.value);\n                                }\n                                return h;\n                             });\n                             let states = [{'state': m.key, 'value':m.value}];\n                             return {state: states, branchCount:branchCount, histogram: histo, color : colors.filter(f=> f.state === m.key)[0], max:80};\n                            });\n                        \n                    }else{\n                        n.bins = nodeArray[i-1].bins;\n                    }\n                }\n\n                n.type = scale.type;\n                return n;\n            });\n\n            let newK = {'key': key, \n                        'branches': [...mapNorm], \n                        'type': scale.type, \n                        'leafData': leafData, \n                        'rootData': rootNodes.map(m=> m.attributes[key])[0],\n                        'stateKeys': stateKeys,\n                        'maxCount': d3.max(mapNorm.map(n=> n.data.length))\n                    }\n            return newK;\n        }\n    });\n\n    sortedBins.group = groupLabel;\n    sortedBins.branchCount = branchCount;\n    sortedBins.keys = keys;\n    return sortedBins;\n}\nexport function drawBranchPointDistribution(data, svg){\n\n    let branchBar = svg.append('g').classed('branch-bar', true);\n    branchBar.append('rect').classed('point-dis-rect', true)\n        .attr('height', 25)\n        .attr('x', -10)\n        .attr('y', -10)\n       .attr('fill', 'none')\n\n    let binWrap = branchBar.append('g').attr('transform', 'translate(102, -10)');\n\n    branchBar.append('line')\n        .attr('y1', 2)\n        .attr('y2', 2)\n        .attr('x1', '100')\n        .attr('x2', dimensions.predictedWidth)\n        .attr('stroke', 'gray')\n        .attr('stroke-width', .25);\n\n    branchBar.append('text').text('Root').attr('transform', 'translate(70, 7)');\n    let leafLabel = branchBar.append('g').classed('leaf-label', true).attr('transform', `translate(${dimensions.predictedWidth + 200}, 7)`);\n    leafLabel.append('text').text('Leaves');\n\n    let nodeLengthArray = [];\n    let nodeDuplicateCheck = []\n\n    data.paths.map(path=> {\n        path.filter(n=> n.leaf != true).map(node=> {\n            if(nodeDuplicateCheck.indexOf(node.node) == -1){\n                nodeDuplicateCheck.push(node.node);\n                nodeLengthArray.push({'node': node.node, 'eMove': node.combLength });\n            }\n        })\n    });\n\n    let bPointScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n    let pointGroups = branchBar.selectAll('g.branch-points').data(nodeLengthArray)\n        .join('g').attr('class', (d, i)=> d.node).classed('branch-points', true);\n\n    pointGroups.attr('transform', (d, i) => {\n        return `translate(${(105 + bPointScale(d.eMove))}, 0)`});\n    pointGroups.append('circle').attr('r', 5).attr('fill', '#fff').attr('opacity', 0.5);\n\n    let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n    \n    let binsRects = binWrap\n        .selectAll('rect.bin')\n        .data(data.groupBins[0].branches.map(m=> m.range))\n        .join('rect')\n        .classed('bin', true);\n\n    binsRects.attr('width', (d, i, n)=> {\n        return x(d[1]) - x(d[0]);\n    }).attr('height', 20);\n\n    binsRects.attr('transform', (d, i, n)=> {\n        let step = x(d[1]) - x(d[0]);\n        return `translate(${step*i},0)`});\n\n    binsRects.attr('fill', 'gray').attr('stroke-width', 2).attr('stroke', 'white');\n\n    let axis = d3.axisBottom(x);\n    let axGroup = branchBar.append('g').call(axis)\n    axGroup.attr('transform', 'translate(103, 10)');\n    axGroup.select('path').attr('stroke-width', 0);\n\n    return branchBar;\n}\n\nexport function drawGroupLabels(pathData, svg, groupLabel){\n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n    let cladeLabel = svg.append('g').classed('clade-label', true).attr('transform', 'translate(10, 0)');\n    cladeLabel.append('rect')\n        .attr('width', 50)\n        .attr('height', (pathData.keys.length * (dimensions.height+ 15)))\n        .attr('fill', 'gray')\n        .style('opacity', 0.2)\n        .on('mouseover', (d, i)=>{\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f=> {\n                if(f.data.leaf){\n                    let test = d3.entries(f.data.attributes).filter(f=> groupLabel.includes(f.key))[0].value;\n                    return groupLabel.includes(test.states.state);\n                }else{\n                    let test = d3.entries(f.data.attributes).filter(f=> groupLabel.includes(f.key))[0];\n                    let testest = d3.entries(test.value.values).filter((f, i, n)=> {\n                        let max = d3.max(n.map(m=> m.value));\n                        return f.value === max;\n                    })[0];\n                    return groupLabel == testest.key;\n                }\n            }).classed('hover clade', true);\n        \n        treeLinks.filter(f=> {\n            if(f.data.leaf){\n                let test = d3.entries(f.data.attributes).filter(f=> groupLabel.includes(f.key))[0].value;\n                return groupLabel.includes(test.states.state);\n            }else{\n                let test = d3.entries(f.data.attributes).filter(f=> groupLabel.includes(f.key))[0]\n                let testest = d3.entries(test.value.values).filter((f, i, n)=> {\n                    let max = d3.max(n.map(m=> m.value));\n                    return f.value === max;\n                })[0];\n                return groupLabel == testest.key;\n            }\n        }).classed('hover clade', true);\n        let species = d.paths.map(m=> m[m.length - 1].label);\n        }).on('mouseout', (d, i)=> {\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.classed('hover clade', false);\n            treeLinks.classed('hover clade', false);\n        });\n\n    cladeLabel.append('text').text(d=> d.label)\n    .style('text-anchor', 'middle')\n    .attr('transform', `translate(23, ${(shownAttributes.length * (dimensions.height+ 15)/2)}), rotate(-90)`);\n\n    return cladeLabel;\n}\n/**\n * \n * @param {*} mainDiv \n * @param {*} pathGroups \n */\nexport function renderDistStructure(mainDiv, pathGroups){\n\n    let compareTooltipFlag = false;\n   \n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n   \n    let groupWrap = mainDiv.append('div').attr('id', 'summary-view');\n    let groupDivs = groupWrap.selectAll('.group-div').data(pathGroups).join('div').classed('group-div', true);\n\n    groupDivs.each((d, i, node)=> {\n       let filteredAttributes = d.groupBins.filter(f=> {\n           return shownAttributes.indexOf(f.key) > -1;\n       });\n\n        let group = d3.select(node[i]);\n        group.style('text-align', 'center');\n        group.append('text').text(d.label);\n        group.append('text').text(` : ${d.paths.length} Paths` );\n\n        //////Starting something new/////\n      \n        let svg = group.append('svg');\n        svg.attr('class', 'main-summary-view');\n        svg.attr('id', `${d.label}-svg`);\n        svg.attr('height', (shownAttributes.length * (dimensions.height + 5))+ 50);\n    \n        let branchBar = drawBranchPointDistribution(d, svg);\n        branchBar.attr('transform', 'translate(55, 10)');\n\n        group.classed(d.label, true);\n    \n        let branchScale = d3.scaleLinear().domain([0, d.groupBins.branchCount]).range([0, dimensions.timeRange]);\n        let pointGroups = branchBar.selectAll('g.branch-points');\n      \n        let wrap = svg.append('g').classed('summary-wrapper', true);\n        wrap.attr('transform', 'translate(70, 50)');\n    \n        let binnedWrap = wrap.selectAll('.attr-wrap').data(filteredAttributes).join('g').attr('class', d=> d.key + ' attr-wrap');\n    \n        binnedWrap.attr('transform', (d, i, n)=>  {\n                if(i === 0){\n                    return 'translate(0,0)';\n                }else{\n                    let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                    let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                    d.sum = sum;\n                    return `translate(0, ${sum})`;\n                }\n        });\n\n        let label = binnedWrap.append('text')\n        .text(d=> d.key);\n\n        label.filter(f=> f.type === 'continuous')\n        .attr('y', 40)\n        .attr('x', 80)\n        .style('text-anchor', 'end')\n        .style('font-size', 11);\n\n        label.filter(f=> f.type === 'discrete')\n        .attr('y', (d, i)=> 3)\n        .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n        .style('text-anchor', 'middle')\n        .style('font-size', 11)\n        .attr('transform', 'rotate(-90)');\n    \n        let groupLabelBars = drawGroupLabels(d.groupBins, svg, d.label);\n\n            groupLabelBars.on('click', (d, i, n)=> {\n                if(compareTooltipFlag){\n                    compareTooltipFlag = false;\n                    d3.select(\"#compare-tooltip\").classed(\"hidden\", true);\n                }else{\n                   \n                    compareTooltipFlag = true;\n                    d3.select(\"#compare-tooltip\")\n                    .style(\"left\", (d3.event.pageX) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\")\n                    .select(\"#value\")\n                    .text(d.node);\n                    d3.select(\"#compare-tooltip\").classed(\"hidden\", false);\n        \n                    d3.select('#select-for-compare').on('click', ()=> {\n\n                        compareTooltipFlag = false;\n                        d3.select(\"#compare-tooltip\").classed(\"hidden\", true);\n                        d3.select(n[i]).select('rect').attr('fill', '#F5B041');\n                        selectedClades[selectedClades.length - 1].push(Object.assign({},d));\n                        if(selectedClades[selectedClades.length - 1].length > 1){\n                \n                            mainDiv.selectAll('*').remove();\n                            mainDiv.select('#compare-wrap').remove();\n                            renderDistributionComparison(mainDiv, selectedClades[selectedClades.length - 1], branchScale, pathGroups);\n                                //renderDistStructure(mainDiv, pathGroups.filter(p=> p.label != d.label))\n                        }\n                    });\n                 }\n            });\n           \n       // });\n        renderDistibutions(binnedWrap, branchScale, pointGroups);\n    });\n}\n\nfunction renderDistributionComparison(div, data, branchScale, pathGroups){\n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n  \n    let divWrap = div.append('div').attr('id', 'compare-wrap');\n\n    let groupHeader = divWrap.append('div').classed('compare-header', true).style('margin', 'auto');\n\n    let textDiv = groupHeader.append('div').attr('height', 50).attr('width', 200).style('margin-left', '460px');\n    let branchPointSvg  = groupHeader.append('svg');\n\n    let pointData = {paths: data[0].paths.concat(data[1].paths), groupBins: data[0].groupBins}\n    let branchBar = drawBranchPointDistribution(pointData, branchPointSvg);\n    branchBar.attr('transform', 'translate(-30, 10)')\n\n    branchBar.selectAll('rect.bin').attr('stroke', '#DCD4D4').attr('stroke-width', '3px');\n    let pointGroups = branchBar.selectAll('g.branch-points');\n  \n    let xOut = groupHeader.append('div')\n    .style('position', 'absolute')\n    .style('left', '5px')\n    .style('top', '65px')\n    .append('i')\n    .classed('close fas fa-times', true)\n    .style('padding-left', '10px');\n    \n    xOut.on('click', (d, i, n)=> {\n        divWrap.remove();\n        selectedClades.push(new Array());\n        updateMainView('Summary View', chosenCladesGroup[chosenCladesGroup.length-1].groups);\n        d3.select('#sidebar').selectAll('.node').remove();\n        d3.select('#sidebar').selectAll('.link').remove();\n        renderTree(d3.select('#sidebar'), null, true);\n    });\n\n    if(data.length > 1){\n\n        renderTree(d3.select('#sidebar'), null, true);\n\n        d3.select('#toolbar').selectAll('.brush-span').remove();\n       \n        let selectedNodes = Array.from(new Set(data.flatMap(f=> f.paths).flatMap(p=> p.map(m=> m.node))));\n   \n        let testNodes = d3.select('#sidebar').selectAll('.node').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n        let testLinks = d3.select('#sidebar').selectAll('.link').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n\n        testNodes.attr('opacity', 0.3)\n        testLinks.attr('opacity', 0.3)\n\n        let pathsListOne = Array.from(new Set(data[0].paths.flatMap(p=> p.map(m=> m.node))));\n        let pathsListTwo = Array.from(new Set(data[1].paths.flatMap(p=> p.map(m=> m.node))));\n\n        let testNodesOne = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n        let testLinksOne = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n\n        testNodesOne.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[0])\n        testLinksOne.attr('opacity', .8).style('stroke', compareColors[0])\n\n        let testNodesTwo = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n        let testLinksTwo = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n\n        testNodesTwo.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[1])\n        testLinksTwo.attr('opacity', .8).style('stroke', compareColors[1])\n\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-left', true)\n        .style('margin-right', '10px');\n\n        data.forEach((d, i)=> {\n        textDiv.append('span')\n            .text(d.label)\n            .classed('badge badge-secondary', true)\n            .style('padding', '5px')\n            .style('margin-bottom', '7px')\n            .style('background', compareColors[i])\n        });\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-right', true)\n        .style('margin-left', '10px');\n        \n    }\n    let svg = divWrap.append('svg').attr('class', 'compare-svg').style('padding-top', '50px');\n\n    ////COMBINEDATA///\n    if(data.length > 1){\n        console.log('data',data)\n        let startBins = data[0].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let mapBins = data[1].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let combined = startBins.map((d, i, n)=> {\n         \n            d.branches = [...d.branches].map((b, j)=> {\n                \n                b.bins = [{key:data[0].label, value: b.bins, index:0},\n                          {key:data[1].label, value: mapBins[i].branches[j].bins, index:1}\n                         ];\n             \n                b.data = [{key: data[0].label, \n                            value: b.data.map(m=>{\n                                    m.groupKey = data[0].label;\n                                    m.index = 0;\n                                    return m;\n                                    }), \n                            index: 0},\n                        \n                        { key: data[1].label, \n                            value : mapBins[i].branches[j].data.map(m=> {\n                                    m.groupKey = data[1].label;\n                                    m.index = 1;\n                                    return m;\n                            }), \n                         index: 1 }];\n                return b;\n            });\n          \n           if(d.type === 'continuous'){\n\n            d.leafData.data = [{key: data[0].label, \n                value: d.leafData.data.map(m=>{\n                        m.groupKey = data[0].label;\n                        m.index = 0;\n                        return m;\n                        }), \n                index: 0},\n            \n            { key: data[1].label, \n                value : mapBins[i].leafData.data.map(m=> {\n                        m.groupKey = data[1].label;\n                        m.index = 1;\n                        return m;\n                }), \n             index: 1 }];\n\n             d.leafData.bins = [{key:data[0].label, value: d.leafData.bins, index:0},\n             {key:data[1].label, value: mapBins[i].leafData.bins, index:1}\n                ];\n\n\n\n           }else{\n\n            d.leafData.data = [{key: data[0].label, \n                value: d.leafData.data.map(m=>{\n                        m.groupKey = data[0].label;\n                        m.index = 0;\n                        return m;\n                        }), \n                index: 0},\n            \n            { key: data[1].label, \n                value : mapBins[i].leafData.data.map(m=> {\n                        m.groupKey = data[1].label;\n                        m.index = 1;\n                        return m;\n                }), \n             index: 1 }];\n\n             d.leafData.bins = [\n                \n                {key:data[0].label, keys: d.stateKeys, value: d.leafData.bins, index:0},\n                {key:data[1].label, keys: d.stateKeys, value: mapBins[i].leafData.bins, index:1}\n\n                ];\n\n           }\n           \n           \n            return d;\n        });\n\n        let wrap = svg.append('g').attr('class', 'group-wrap').attr('transform', 'translate(30, 10)');\n        let binnedWrap = wrap.selectAll('.attr-wrap').data(combined).join('g').classed('attr-wrap', true);\n        svg.attr('height', (combined.length * (dimensions.height + 5)));\n        \n        binnedWrap.attr('transform', (d, i, n)=>  {\n            if(i === 0){\n                    return 'translate(0,0)';\n            }else{\n                let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                d.sum = sum;\n                return `translate(0, ${sum})`;\n            }\n        });\n\n        let label = binnedWrap.append('text')\n            .text(d=> d.key);\n    \n            label.filter(f=> f.type === 'continuous')\n            .attr('y', 40)\n            .attr('x', 80)\n            .style('text-anchor', 'end')\n            .style('font-size', 11);\n    \n            label.filter(f=> f.type === 'discrete')\n            .attr('y', (d, i)=> 3)\n            .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n            .style('text-anchor', 'middle')\n            .style('font-size', 11)\n            .attr('transform', 'rotate(-90)');\n\n        /////FROM DISCRETE DRAW\n\n        let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n        predictedWrap.attr('transform', 'translate(25, 0)');\n        predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n        //ROOT RENDERING\n        let root = predictedWrap.selectAll('g.root').data(d=> {\n            return [d.rootData]}).join('g').classed('root', true);\n        root.attr('transform', `translate(60,0)`);\n\n        let contRoot = root.filter(f=> f.type === \"continuous\");\n        contRoot.append('rect')\n            .attr('height', dimensions.height)\n            .attr('width', 12)\n            .attr('fill', '#fff')\n            .style('stroke-width', '0.5px')\n            .style('stroke', 'black')\n    \n        let rootRange = contRoot.append('rect')\n            .attr('width', 12)\n            .attr('height', d=> {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return newy(d.values.lowerCI95) - newy(+d.values.upperCI95)\n            }).attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return 'translate(0,'+newy(+d.values.upperCI95)+')'\n            }).style('opacity', 0.5)//.attr('fill', \"rgba(133, 193, 233)\")\n            .attr('fill', defaultBarColor);\n    \n        let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n        \n        rootAv.attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([dimensions.height, 0]);\n                let mean = +d.values.realVal;\n                return 'translate(0,'+newy(mean)+')';\n        }).attr('fill', '#004573');\n    \n           // Discrete Root\n        let disRoot = root.filter(f=> f.type === \"discrete\");\n        let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n            return d.bins}).join('g').classed('root-state-groups', true);\n    \n        rootStateGroups.append('text')\n            .text((d, i)=> d.color.state)\n            .attr('y', 10)\n            .attr('x', -3)\n            .style('font-size', 10)\n            .style('text-anchor', 'end');\n    \n        rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n        rootStateGroups.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim)\n            .attr('fill', '#fff').attr('opacity', 1);\n    \n        let rootRects = rootStateGroups.append('rect')\n            .classed('color-rect', true)\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim);\n    \n        rootRects.attr('fill', (d, i)=> {\n                return `rgba(89, 91, 101, ${d.state[0].value})`;\n            }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n    \n        let winStateRoot = disRoot.selectAll('g.root-state-groups')\n            .filter((f, j, n)=>{\n                let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n                return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n            }).classed('win', true);\n    \n        winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            });\n\n        ////BRANCHES\n        let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n            return d.branches}).join('g').classed('branch-bin', true);\n    \n        branchGroup.attr('transform', (d, i, n)=> {\n            let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0\n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange])\n                return 'translate('+(100 + (branchScale(i)) + x(step)) +', 0)'});\n\n        let discreteDist = branchGroup.filter(f=> f.type === 'discrete').append('g');\n\n        discreteDist.attr('transform', 'translate(5, 0)');\n\n        let discreteMiddleGroups = discreteDist.selectAll('g.middle-group')\n            .data(d=> {\n                let bins = d.bins.map(b=> {\n                    b.key = d.key;\n                    return b;\n                })\n                return bins})\n            .join('g')\n            .classed('middle-group', true)\n            .attr('transform', (d, i)=> { \n                let move = d.index === 0 ? -(dimensions.squareDim/2) : 0 ;\n                return `translate(${move}, 0)`});\n\n        let stateRects = discreteMiddleGroups\n        .selectAll('rect.state-rect')\n        .data(d=> {\n            let bins = d.value.map(v=> {\n                v.key = d.key;\n                return v;\n            })\n            return bins})\n        .join('rect')\n        .classed('state-rect', true)\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim/2);\n\n        stateRects.attr('fill', (d, i, n)=> {\n            let sum = d3.sum(d.state.map(m=> m.value))\n            let av = sum / d.state.length;\n            let scale = d3.scaleLinear().domain([0, 1]).range([0, 1]);\n            return `rgba(89, 91, 101, ${scale(av)})`;\n        }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n\n        stateRects.attr('transform', (d, i)=> {\n            return `translate(0, ${(3.5+(i*(dimensions.squareDim+2)))})`\n        });\n\n        let discreteBinGroups = discreteDist.selectAll('g.group')\n                .data(d=> d.bins)\n                .join('g')\n                .classed('group', true)\n                .attr('transform', (d, i)=> { \n                    let move = d.index === 0 ? (-40 - (dimensions.squareDim/2)) : (dimensions.squareDim/2)\n                    return `translate(${move}, 0)`});\n\n        let stateBarsPredicted = discreteBinGroups.selectAll('g.histo-bars')\n            .data(d=> {\n                let binvalue = d.value.map(v=> {\n                    v.index = d.index;\n                    return v;\n                })\n            return binvalue}).join('g')\n        .classed('histo-bars', true);\n\n        stateBarsPredicted.attr('transform', (d, i)=> {\n            let dev = d3.deviation(d.state.map(m=> m.value));\n            let mean = d3.mean(d.state.map(m=> m.value));\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 40]).clamp(true);\n            let xMove = d.index === 0 ? (40 - x(mean)) : 0;\n            return `translate(${xMove}, ${3.5+(i*(dimensions.squareDim+2))})`\n        });\n\n        let bars = stateBarsPredicted.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', (d, i, n)=> {\n        let dev = d3.deviation(d.state.map(m=> m.value));\n        let mean = d3.mean(d.state.map(m=> m.value));\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 40]).clamp(true);\n            return x(mean)\n        })\n        .attr('fill', d=> d.color.color)\n        .attr('opacity', 0.3);\n\n        stateRects.on('mouseover', (d, i, n)=> {\n           \n            let sum = d3.sum(d.state.map(m=> m.value))\n            let av = sum / d.state.length;\n            let tool = d3.select('#tooltip');\n            tool.transition()\n                .duration(200)\n                .style(\"opacity\", .9);\n            \n            let f = d3.format(\".3f\");\n              \n            tool.html(`${d.key} </br> ${d.state[0].state} : ${f(av)}`)\n                .style(\"left\", (d3.event.pageX - 40) + \"px\")\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n    \n        }).on('mouseout', ()=>{\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n        });\n\n        discreteMiddleGroups.each((d, i, node)=>{\n            let maxBin = 0;\n            let maxState = null;\n            d.value.map(m=> {\n                if(d3.sum(m.state.flatMap(s=> s.value)) > maxBin){\n                    maxBin = d3.sum(m.state.flatMap(s=> s.value));\n                    maxState = m.color.state;\n                }\n            });\n      \n            let winStates = d3.select(node[i]).selectAll('rect.state-rect')\n                .filter((f, j, n)=>{\n                    return f.color.state === maxState;\n                }).classed('win', true)\n                .attr('fill', (c)=> {\n                    return c.color.color;\n                }).attr('opacity', (c)=>{\n                    let sum = d3.sum(c.state.flatMap(s=> s.value));\n                    return sum/c.state.length;\n                })\n        });\n    \n        //////PREDICTED CONTINUOUS\n\n          //CONTIN PREDICTED\n        let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n        continDist.on('mouseover', (d, i, node)=> {\n            let newData = d.data;\n            let list = newData[0].value.concat(newData[1].value).map(m=> m.node);\n            let selected = pointGroups.filter(p=> {\n                return list.indexOf(p.node) > -1}).classed('selected', true);\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n            let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n            let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        }).on('mouseout', (d, i, node)=> {\n            d3.selectAll(\".branch-points.selected\").classed('selected', false);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            d3.select(node[i]).select('.y-axis').remove();\n        });\n\n        let continBinGroups = continDist.selectAll('g.group').data(d=> {\n            return d.bins;\n        }).join('g').attr('class', d=> `g-${d.index} group`)//.classed('group', true);\n\n        continBinGroups.each((d, i, nodes)=> {\n            d.maxCount = d3.sum(d.value.map(m=> m.length));\n            d.value.maxCount = d3.sum(d.value.map(m=> m.length));\n            let distrib = d3.select(nodes[i])\n                .selectAll('g')\n                .data([d.value.map(v=> {\n                    v.maxCount = d3.sum(d.value.map(m=> m.length))\n                    v.index = d.index;\n                    return v;\n                })])\n                .join('g')\n                .classed('distribution', true);\n            distrib.attr('transform', (d,i,n)=> {\n                if(d[0].index === 0){\n                    return 'translate(0, 0) rotate(90)'\n                }else{\n                    return 'translate(11, '+dimensions.height+') rotate(-90)'\n                }\n               });\n            let path = distrib.append('path').attr('d', d.index === 0 ? mirrorlineGen : lineGen);\n            path.attr(\"fill\", (v, i, n)=> {\n                return defaultBarColor})\n            .attr('opacity', 0.4)\n            .style('stroke', compareColors[d.index]);\n        });\n\n        let contRect = continBinGroups.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 10)\n        .style('fill', '#fff')\n        .style('stroke', 'gray');\n\n    let rangeRectWrap = continDist.selectAll('g.range-wrap').data(d=> {\n        return d.data;\n    }).join('g').classed('range-wrap', true);\n    \n    let rangeRect = rangeRectWrap.selectAll('rect.range').data((d,i)=> {\n        let newData = d.value.map(m=> {\n            m.range = d.range;\n            m.gindex = i;\n            return m;\n        })\n        return newData;\n    }).join('rect').classed('range', true);\n\n    let avRect = continDist.selectAll('rect.av-rect').data(d=> d.data)\n        .join('rect').classed('av-rect', true).attr('width', 10).attr('height', (d, i)=> {\n        if(d.value != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n    \n    avRect.attr('transform', (d, i) => {\n        if(d.value != undefined){\n            let newy = d.value[0].scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = d3.mean(d.value.map(m=> +m.values.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', (d)=>compareColors[d.index]);\n\n     //////START BRANCH EXPERIMENT\n     let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n     brush.on('end', brushedComparison);\n\n     continDist.append(\"g\")\n     .classed('continuous-branch-brush', true)\n     .attr(\"class\", \"brush\")\n     .call(brush);\n\n     //////BRUSH FOR COMPARISON/////\n\n     function brushedComparison(){\n\n        let data = d3.select(this.parentNode).data()[0]\n\n        let maxCounts = data.bins.map(m => m.maxCount);\n       \n        var s = d3.event.selection;\n        var zero = d3.format(\".3n\");\n    \n        let index = d3.select('#toolbar').selectAll('.brush-span').size();\n        let classLabel = index === 0 ? 'one' : 'two';\n    \n        if(s != null){\n            let treeTest = d3.select('#sidebar').selectAll('.node').filter(f=> {\n                return f.data.leaf === true});\n    \n            \n            let y = d3.scaleLinear().domain([data.domain[0], data.domain[1]]).range([0, dimensions.height])\n            let attribute = data.key;\n            let brushedVal = [y.invert(s[1]), y.invert(s[0])];\n    \n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n            let nodes = data.data.map(m=> m.value.filter(f=> {\n                return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n            }));\n\n\n            let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n\n            let descendBins = continDist.filter(f=> {\n                return (f.index > data.index) && (f.key === data.key)});\n                \n            \n\n            nodes.forEach((n, i)=> {\n               \n                if(n.length > 0){\n                    let test = d3.select(this.parentNode).select(`.g-${i}`)\n                    let groupDis = test.append('g').classed('distribution-too', true);\n                    \n                    let histo = continuousHistogram(n)\n                    histo.maxCount = maxCounts[i];\n\n                    let names = n.map(m=> m.node);\n                   \n                    groupDis\n                    .data([histo]);\n\n                    groupDis.append('path')\n                    .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                    .style('stroke', compareColors[i])\n                    .style('fill', compareColors[i])\n                    .style('fill-opacity', 0.8);\n\n                    groupDis.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n                    let otherDis = otherBins\n                    .select(`.g-${i}`).each((o, j, oNode)=> {\n                        let oHisto = continuousHistogram(o.data.filter(f=> f.index === i)[0].value.filter(f=> names.indexOf(f.node) > -1));\n                        oHisto.maxCount = o.bins[i].maxCount;\n                        let oDist = d3.select(oNode[j]).append('g').classed('distribution-too', true);\n                        oDist.data([oHisto])\n                        .append('path')\n                        .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                        .style('stroke', compareColors[i])\n                        .style('fill', compareColors[i])\n                        .style('fill-opacity', 0.8);\n                        oDist.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n                    });\n\n                    let otherDesDis = descendBins\n                    .select(`.g-${i}`).each((o, j, oNode)=> {\n\n                        let oHisto = continuousHistogram(o.data.filter(f=> f.index === i)[0].value\n                                    .filter(f=> (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1])));\n                        oHisto.maxCount = o.bins[i].maxCount;\n\n                        let oDist = d3.select(oNode[j]).append('g').classed('distribution-too', true);\n                        oDist.data([oHisto])\n                        .append('path')\n                        .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                        .style('stroke', compareColors[i])\n                        .style('fill', compareColors[i])\n                        .style('fill-opacity', 0.8);\n                        oDist.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n\n                    });\n                  \n                }\n            });\n\n             let nodesFlat = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n            }));\n\n           \n            let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n            }));\n    \n            let selectedNodes = brushedNodes(nodesFlat, notNodes, data, brushedVal, classLabel);\n            let selectedBranch = selectedNodes[0];\n            let secondGrp = selectedNodes[1];\n            let antiSelected = selectedNodes[2];\n            let antiSecond = selectedNodes[3];\n    \n            if(index < 2){\n                let doesItExist = d3.select('#toolbar').selectAll('.brush-span').filter((f, i, n)=> {\n                    return d3.select(n[i]).attr('value') == `${data.bins.groupLabel}-${data.key}`;\n                });\n    \n                if(doesItExist.size() === 0){\n    \n                    d3.select(this).select('.selection')\n                    .style('fill', `${brushColors[index][0]}`)\n                    .attr('stroke', `${brushColors[index][0]}`)\n                    .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                    .attr('stroke', brushColors[index][1])\n                    .attr('stroke-width', 2);\n    \n                    let badge = d3.select('#toolbar')\n                        .append('span')\n                        .attr('class', classLabel)\n                        .attr('id', classLabel)\n                        .classed('brush-span', true)\n                        .classed(`${data.bins.groupLabel}`, true)\n                        .classed('badge badge-secondary', true)\n                        .style('background', brushColors[index][0])\n                        .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                        .datum({brush:this, nodes: nodes})\n                        .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n    \n                    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        let classy = index === 0 ? 'one' : 'two';\n                        \n                        d3.select(d.brush).call(brush.move, null);\n                        d3.select(n[i].parentNode).remove();\n                        d3.select(d.brush).select('.overlay').attr('stroke-width', 0);\n                        descendBins.selectAll('.distribution-too').remove();\n                        otherBins.selectAll('.distribution-too').remove();\n                        d3.select(d.brush.parentNode).selectAll('.distribution-too').remove();\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed-second', false);\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed', false);\n                    });\n    \n                }else{\n\n                    doesItExist.text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                    let xOut = doesItExist.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                        d3.select(n[i].parentNode).remove();\n                    });\n                   \n                    d3.select(doesItExist.datum()).call(brush.move, null);\n                    d3.select(doesItExist.datum()).select('.overlay').attr('stroke-width', 0)\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll(`${data.bins.groupLabel}`)\n                        .selectAll('.second-branch')\n                        .classed('second-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.selected-branch')\n                        .classed('selected-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-second')\n                        .classed('anti-brushed-second', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-branch')\n                        .classed('anti-brushed-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n    \n                    let label = doesItExist.attr('id');\n    \n                    index = label === 'one' ? 0 : 1;\n    \n                    d3.select(this).select('.selection')\n                        .style('fill', `${brushColors[index][0]}`)\n                        .attr('stroke', `${brushColors[index][0]}`)\n                        .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                        .attr('stroke', brushColors[index][1])\n                        .attr('stroke-width', 2);\n\n                        let nodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n                        }))\n                       \n                        let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n                        }));\n\n                        doesItExist.datum({brush: this, nodes: nodes})\n    \n                    brushedNodes(nodes, notNodes, data, brushedVal, label);\n                    \n                }\n    \n            }else{\n    \n                d3.select('#toolbar').selectAll('.brush-span').filter((f, i)=> i === 0).remove();\n    \n                let classLabel = colorBool === 0 ? 'one': 'two';\n    \n                d3.select('#toolbar')\n                    .append('span')\n                    .attr('class', )\n                    .classed('brush-span', true)\n                    .classed('badge badge-secondary', true)\n                    .style('background', brushColors[colorBool][0])\n                    .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                    .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n\n                colorBool === 0 ? colorBool = 1 : colorBool = 0;\n                secondGrp.classed(classLabel, true);\n                selectedBranch.classed(classLabel, true);\n            }\n    \n        }else{\n            d3.selectAll(`.${data.key}.brushed-branch`).classed('brushed-branch', false);\n            d3.selectAll(`.${data.key}.brushed-second`).classed('brushed-second', false);\n        }\n     }\n    \n\n    ///OBSERVED/////\n    let observedWrap = binnedWrap.append('g').classed('observed', true);\n    observedWrap.attr('transform', (d, i, n)=> {\n        return 'translate('+ (dimensions.predictedWidth + 150) +', 0)'});\n\n    ////OBSERVED CONTIUOUS/////\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n    contOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, -15)`);\n\n    let compContGroups = contOb.selectAll('g.cont-groups').data(d=> d.leafData.bins).join('g').classed('cont-groups', true);\n\n    let contBars = compContGroups.selectAll('g.ob-bars').data(d=> {\n        let value = d.value.map(m=> {\n            m.index = d.index;\n            return m;\n        });\n        return value}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(dimensions.height - dimensions.margin), 0])\n        return y(Object.keys(d).length - 2)\n    })\n    .attr('fill', d=> compareColors[d.index]).attr('fill-opacity', .4);\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let y = d3.scaleLinear()\n            .domain([0, Object.keys(d).length])\n            .range([(dimensions.height - dimensions.margin), 0]);\n\n     let movey = dimensions.height - y(Object.keys(d).length - 2);\n     return 'translate('+(movex * i)+', '+movey+')'});\n\n contOb.each((d, i, nodes)=> {\n\n     let xvalues = d.leafData.data[0].value.map(m=> {\n         return +m.values.realVal});\n     let x = d3.scaleLinear()\n         .domain([d3.min(xvalues), d3.max(xvalues)])\n         .range([0, dimensions.observedWidth]);\n\n     let y = d3.scaleLinear()\n         .domain([0, d3.max(d.leafData.bins[0].value.map(b=> Object.keys(b).length)) - 2])\n         .range([(dimensions.height - dimensions.margin), 0]);\n     \n     d3.select(nodes[i])\n         .append('g')\n         .classed('x-axis', true)\n         .call(d3.axisBottom(x))\n         .attr('transform', 'translate(0, '+dimensions.height+')')\n\n     d3.select(nodes[i]).append('g')\n         .classed('y-axis', true)\n         .call(d3.axisLeft(y).ticks(4))\n         .attr('transform', 'translate(0, '+dimensions.margin+')');\n\n         d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n         d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n\n         d3.select(nodes[i])\n         .append('g')\n         .classed('x-axis-label', true)\n         .append('text').text('Frequency')\n         .attr('transform', `translate(-20, ${dimensions.height- 10}) rotate(-90)`)\n         .style('font-size', '10px');\n });\n \n        ////Observed Discrete////\n        let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n        discOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, 5)`);\n\n        let compDisGroups = discOb.selectAll('g.dis-groups').data(d=> d.leafData.bins).join('g').classed('dis-groups', true);\n\n        let discBars = compDisGroups.selectAll('g.ob-bars').data(d=> {\n            \n            return d.keys.map((key, i)=>{\n                return {state: key, data: d.value[i], max: d3.sum(d.value[i].map(b=> b.length)), index: d.index}\n            });\n        }).join('g').classed('ob-bars', true);\n        let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n            let width = dimensions.observedWidth / n.length;\n            return width/2;\n        }).attr('height', (d, i, n)=> {\n           \n            let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10): 0;\n            let y = d3.scaleLinear().domain([0, d.max]).range([0, (height)])\n            return y(d.data.length);\n        }).attr('fill', (d, i) => {\n            return d.data[0] != undefined ? d.data[0].color : '#fff';\n        }).attr('opacity', 0.3);\n\n        discBars.attr('transform', (d, i, n)=> {\n            let movex = dimensions.observedWidth / n.length;\n            let offSet = movex / 2\n            let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10) : 0;\n            let y = d3.scaleLinear().domain([0, d.max]).range([0, (height-5)])\n            let movey = (height-2) - y(d.data.length);\n            let finalMove = d.index === 0 ? 'translate('+(movex * i)+', '+movey+')' : 'translate('+(offSet+(movex * i))+', '+movey+')';\n            return finalMove;\n        })\n\n        dRects.on('mouseover', (d, i, n)=> {\n            let state = d3.select('g.'+d[0].label).selectAll('g.state');\n            state.filter(f=> {\n                return f[0].state === d[0].winState}).attr('opacity', 0.8);\n            state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n            d3.select(n[i]).attr('opacity', 0.9);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).attr('opacity', 0.3);\n            let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n        });\n\n        discOb.each((d, i, nodes)=> {\n                \n                let xPoint = d3.scalePoint().domain(d.stateKeys).range([0, dimensions.observedWidth]).padding(.6)\n                let height = d.stateKeys ? (d.stateKeys.length * dimensions.squareDim - 10) : 0;\n                let y = d3.scaleLinear().domain([0, d.leafData.data.length]).range([(height), 0]);\n                d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4))//.attr('transform', 'translate(0, '+height+')');\n                d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n\n                d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n                d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n        });\n\n\n\n    }\n\n}\n\n/**\n * \n * @param {*} binnedWrap \n * @param {*} branchScale \n * @param {*} pointGroups \n */\n\nexport function renderDistibutions(binnedWrap, branchScale, pointGroups){\n\n    let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n    predictedWrap.attr('transform', 'translate(25, 0)');\n    predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n    //ROOT RENDERING\n    let root = predictedWrap.selectAll('g.root').data(d=> {\n        return [d.rootData]}).join('g').classed('root', true);\n    root.attr('transform', `translate(60,0)`);\n\n    let contRoot = root.filter(f=> f.type === \"continuous\");\n    contRoot.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 12)\n        .attr('fill', '#fff')\n        .style('stroke-width', '0.5px')\n        .style('stroke', 'black')\n\n    let rootRange = contRoot.append('rect')\n        .attr('width', 12)\n        .attr('height', d=> {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            return newy(d.values.lowerCI95) - newy(+d.values.upperCI95)\n        }).attr('transform', (d, i) => {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            return 'translate(0,'+newy(+d.values.upperCI95)+')'\n        }).style('opacity', 0.5).attr('fill', defaultBarColor);\n\n    let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n    \n    rootAv.attr('transform', (d, i) => {\n            let newy = d.scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = +d.values.realVal;\n            return 'translate(0,'+newy(mean)+')';\n    }).attr('fill', '#004573');\n\n       // Discrete Root\n    let disRoot = root.filter(f=> f.type === \"discrete\");\n    let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n        return d.bins}).join('g').classed('root-state-groups', true);\n\n    rootStateGroups.append('text')\n        .text((d, i)=> d.color.state)\n        .attr('y', 10)\n        .attr('x', -3)\n        .style('font-size', 10)\n        .style('text-anchor', 'end');\n\n    rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n    rootStateGroups.append('rect')\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim)\n        .attr('fill', '#fff').attr('opacity', 1);\n\n    let rootRects = rootStateGroups.append('rect')\n        .classed('color-rect', true)\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim);\n\n    rootRects.attr('fill', (d, i)=> {\n            return `rgba(89, 91, 101, ${d.state[0].value})`;\n        }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n\n    let winStateRoot = disRoot.selectAll('g.root-state-groups')\n        .filter((f, j, n)=>{\n            let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n            return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n        }).classed('win', true);\n\n    winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n            return c.color.color;\n        }).attr('opacity', (c)=>{\n            let sum = d3.sum(c.state.flatMap(s=> s.value));\n            return sum/c.state.length;\n        })\n\n\n    /////BRANCHES\n    let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n        return d.branches}).join('g').classed('branch-bin', true);\n\n    branchGroup.attr('transform', (d, i, n)=> {\n        let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange])\n            return 'translate('+(100 + (branchScale(i)) + x(step)) +', 0)'});\n\n    let discreteDist = branchGroup.filter(f=> f.type === 'discrete');\n\n    /////////EXPERIMENT////////\n    let stateBarsPredicted = discreteDist.selectAll('g.histo-bars')\n        .data(d=> {\n            let bins = d.bins.map(m=> {\n                m.index = d.index;\n                return m\n            });\n            return bins}).join('g')\n        .classed('histo-bars', true);\n  \n//stateBarsPredicted.attr('transform', (d, i)=> `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`);\n    stateBarsPredicted.attr('transform', (d, i, n)=> {\n        return `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`});\n\n    let bars = stateBarsPredicted.append('rect')\n              .attr('height', dimensions.squareDim)\n              .attr('width', (d, i, n)=> {\n                let dev = d3.deviation(d.state.map(m=> m.value));\n                let mean = d3.mean(d.state.map(m=> m.value));\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n                return x(mean)\n              })\n              .attr('fill', d=> d.color.color)\n              .attr('opacity', 0.3)\n\n    // let devDotHigh = stateBarsPredicted.append('circle')\n    //           .attr('cy', dimensions.squareDim / 2)\n    //           .attr('cx', (d, i, n)=> {\n    //             let dev = d3.deviation(d.state.map(m=> m.value));\n    //             let mean = d3.mean(d.state.map(m=> m.value));\n    //             let x = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n    //             return x(mean + dev)\n    //           })\n    //           .attr('r', 2)\n    //           .attr('fill', d=> d.color.color)\n    //           .attr('opacity', 1)\n\n    // let devDotLow = stateBarsPredicted.append('circle')\n    //           .attr('cy', dimensions.squareDim / 2)\n    //           .attr('cx', (d, i, n)=> {\n    //             let dev = d3.deviation(d.state.map(m=> m.value));\n                \n    //             let mean = d3.mean(d.state.map(m=> m.value));\n    //             let x = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n    //             return x(mean - dev)\n    //           })\n    //           .attr('r', 2)\n    //           .attr('fill', d=> d.color.color)\n    //           .attr('opacity', 1)\n\n    /////////END XPERIMENT////////\n\n    let stateBinsPredicted = discreteDist.selectAll('g.state-bins')\n        .data(d=> d.bins).join('g')\n        .classed('state-bins', true);\n\n    stateBinsPredicted.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n\n    stateBinsPredicted.append('rect')\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim)\n        .attr('fill', '#fff').attr('opacity', 1);\n\n    let stateRects = stateBinsPredicted.append('rect')\n        .classed('state-rect', true)\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim);\n\n    stateRects.attr('fill', (d, i, n)=> {\n        let sum = d3.sum(d.state.map(m=> m.value))\n        let av = sum / d.state.length;\n        let scale = d3.scaleLinear().domain([0, 1]).range([0, 1]);\n        return `rgba(89, 91, 101, ${scale(av)})`;\n    }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n\n    stateRects.on('mouseover', (d, i, n)=> {\n        let sum = d3.sum(d.state.map(m=> m.value))\n        let av = sum / d.state.length;\n        let tool = d3.select('#tooltip');\n        tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n        \n        let f = d3.format(\".3f\");\n          \n        tool.html(`${d.state[0].state} : ${f(av)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        tool.style('height', 'auto');\n\n    }).on('mouseout', ()=>{\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    discreteDist.each((d, i, node)=>{\n        let maxBin = 0;\n        let maxState = null;\n        d.bins.map(m=> {\n            if(d3.sum(m.state.flatMap(s=> s.value)) > maxBin){\n                maxBin = d3.sum(m.state.flatMap(s=> s.value));\n                maxState = m.color.state;\n            }\n        });\n  \n        let winStates = d3.select(node[i]).selectAll('g.state-bins')\n            .filter((f, j, n)=>{\n                return f.color.state === maxState;\n            }).classed('win', true);\n\n        winStates.select('rect.state-rect').attr('fill', (c)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            })\n    });\n\n    let disWrap = predictedWrap.filter(f=> f.type === 'discrete')\n    let pathKeeper = []\n    disWrap.each((d, i, node)=> {\n        let winPosArray = [];\n        d3.select(node[i]).selectAll('.win').each((r, j, n)=>{\n            winPosArray.push([n[j].getBoundingClientRect().x,(n[j].getBoundingClientRect().y + 10)])\n            winPosArray.push([n[j].getBoundingClientRect().x + 15,(n[j].getBoundingClientRect().y + 10)])\n        });\n        pathKeeper.push([...winPosArray]);\n        let lineThing = d3.line();\n        winPosArray[winPosArray.length -1][1] = winPosArray[winPosArray.length -1][1] + 2;\n        winPosArray[winPosArray.length -2][1] = winPosArray[winPosArray.length -2][1] + 2;\n        d.win = winPosArray;\n    });\n\n    disWrap.each((e, i, n)=> {\n        let lineThing = d3.line();\n        d3.select(n[i]).select('.win-line').append('path').attr('d', (d)=> lineThing(d.win))\n        .attr('transform', 'translate(-75, -'+n[i].getBoundingClientRect().y+')')\n        .attr('fill', 'none')\n        .attr('stroke', `rgba(200, 203, 219, .9)`)\n        .attr('stoke-width', 1)\n    });\n\n    //CONTIN PREDICTED\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    continDist.on('mouseover', (d, i, node)=> {\n        let list = d.data.map(m=> m.node);\n        let selected = pointGroups.filter(p=> {\n            return list.indexOf(p.node) > -1}).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n        let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n        let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    continDist.each((d, i, nodes)=> {\n        let distrib = d3.select(nodes[i])\n            .selectAll('g')\n            .data([d.bins])\n            .join('g')\n            .classed('distribution', true);\n\n        distrib.attr('transform', 'translate(11, '+dimensions.height+') rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", defaultBarColor).attr('fill-opacity', .4)//.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', defaultBarColor);\n    });\n\n    let contRect = continDist.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 10)\n        .style('fill', 'none')\n        .style('stroke', 'gray');\n\n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        })\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.scales.yScale != undefined){\n            let newy = d.scales.yScale;\n            newy.range([80, 0]);\n            return newy(d.values.lowerCI95) - newy(d.values.upperCI95)\n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n        let newy = d.scales.yScale;\n        newy.range([80, 0]);\n        return 'translate(0,'+newy(d.values.upperCI95)+')'\n    });\n\n    //rangeRect.attr('fill', \"rgba(133, 193, 233, .05)\");\n    rangeRect.attr('fill', defaultBarColor).attr('opacity', 0.5)\n\n    let avRect = continDist.append('rect').attr('width', 10).attr('height', (d, i)=> {\n        if(d.data[0] != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n\n    avRect.attr('transform', (d, i) => {\n        if(d.data[0] != undefined){\n            let newy = d.data[0].scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = d3.mean(d.data.map(m=> +m.values.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', '#004573');\n\n     //////START BRANCH EXPERIMENT\n     let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n     brush.on('end', brushed);\n\n     continDist.append(\"g\")\n     .classed('continuous-branch-brush', true)\n     .attr(\"class\", \"brush\")\n     .call(brush);\n \n     function brushed(){\n\n        let data = d3.select(this.parentNode).data()[0]\n        var s = d3.event.selection;\n        var zero = d3.format(\".3n\");\n\n       // console.log(d3.sum(data.bins.map(m=> m.length)))\n    \n        let index = d3.select('#toolbar').selectAll('.brush-span').size();\n        let classLabel = index === 0 ? 'one' : 'two';\n    \n        if(s != null){\n            let treeTest = d3.select('#sidebar').selectAll('.node').filter(f=> {\n                return f.data.leaf === true});\n    \n            if(treeTest.empty()){\n                renderTree(d3.select('#sidebar'), null, true);\n            }\n\n            let y = d3.scaleLinear().domain([data.domain[0], data.domain[1]]).range([0, dimensions.height])\n           \n            let attribute = data.key;\n            let brushedVal = [y.invert(s[1]), y.invert(s[0])];\n    \n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n            let nodes = data.data.filter(f=> {\n                return (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1]);\n            });\n           \n            let test = continuousHistogram(nodes);\n\n           // console.log(test, )\n           \n            test.maxCount = d3.sum(data.bins.map(m=> m.length));\n\n            //////EXPERIMENTING WITH BRUSH DRAW DISTRIBUTIONS////\n            let brushedDist = d3.select(this.parentNode)\n            .selectAll('g.distribution-too')\n            .data([test])\n            .join('g')\n            .classed('distribution-too', true);\n\n            brushedDist.attr('transform', 'translate(0, 0) rotate(90)');\n            let path = brushedDist.append('path').attr('d', mirrorlineGen);\n            path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n            .style('stroke', brushColors[index][0]);\n\n            let nodeNames = nodes.map(m=> m.node);\n\n            let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n            otherBins.each((b, i, n)=> {\n                \n                let test = continuousHistogram(b.data.filter(f=> nodeNames.indexOf(f.node) > -1) );\n               \n                test.maxCount = d3.sum(b.bins.map(m=> m.length));\n              \n                let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n                .data([test])\n                .join('g')\n                .classed('distribution-too', true);\n\n                otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n                let path = otherDist.append('path').attr('d', mirrorlineGen);\n                path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n    \n            });\n\n            let descendBins = continDist.filter(f=> {\n                return (f.index > data.index) && (f.key === data.key)});\n\n            descendBins.each((b, i, n)=> {\n\n                let test = b.data.filter(f=> {\n                    return (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1]);\n                    });\n\n                 let testH = continuousHistogram(test);\n               \n                 testH.maxCount = d3.sum(b.bins.map(m=> m.length));\n              \n                let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n                .data([testH])\n                .join('g')\n                .classed('distribution-too', true);\n\n                otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n                let path = otherDist.append('path').attr('d', mirrorlineGen);\n                path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n\n            })\n          \n            ////END DISTRIBUTION///\n           \n            let notNodes = data.data.filter(f=> {\n                return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n            });\n\n            let selectedNodes = brushedNodes(nodes, notNodes, data, brushedVal, classLabel);\n            let selectedBranch = selectedNodes[0];\n            let secondGrp = selectedNodes[1];\n            let antiSelected = selectedNodes[2];\n            let antiSecond = selectedNodes[3];\n    \n            if(index < 2){\n    \n                let doesItExist = d3.select('#toolbar').selectAll('.brush-span').filter((f, i, n)=> {\n                    return d3.select(n[i]).attr('value') == `${data.bins.groupLabel}-${data.key}`;\n                });\n    \n                if(doesItExist.size() === 0){\n    \n                    d3.select(this).select('.selection')\n                    .style('fill', `${brushColors[index][0]}`)\n                    .attr('stroke', `${brushColors[index][0]}`)\n                    .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                    .attr('stroke', brushColors[index][1])\n                    .attr('stroke-width', 2);\n    \n                    let badge = d3.select('#toolbar')\n                        .append('span')\n                        .attr('class', classLabel)\n                        .attr('id', classLabel)\n                        .classed('brush-span', true)\n                        .classed(`${data.bins.groupLabel}`, true)\n                        .classed('badge badge-secondary', true)\n                        .style('background', brushColors[index][0])\n                        .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                        .datum({brush:this, nodes: nodes})\n                        .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n    \n                    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                       \n                        let classy = index === 0 ? 'one' : 'two';\n                        \n                        d3.select(d.brush).call(brush.move, null);\n                        d3.select(n[i].parentNode).remove();\n                        d3.select(d.brush).select('.overlay').attr('stroke-width', 0);\n                        descendBins.selectAll('.distribution-too').remove();\n                        otherBins.selectAll('.distribution-too').remove();\n                        d3.select(d.brush.parentNode).select('.distribution-too').remove();\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed-second', false);\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed', false);\n                    });\n    \n                }else{\n    \n                    doesItExist.text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                    let xOut = doesItExist.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                        d3.select(n[i].parentNode).remove();\n                    });\n                   \n                    d3.select(doesItExist.datum().brush).call(brush.move, null);\n                    d3.select(doesItExist.datum().brush).select('.overlay').attr('stroke-width', 0)\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll(`${data.bins.groupLabel}`)\n                        .selectAll('.second-branch')\n                        .classed('second-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.selected-branch')\n                        .classed('selected-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-second')\n                        .classed('anti-brushed-second', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-branch')\n                        .classed('anti-brushed-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    let label = doesItExist.attr('id');\n    \n                    index = label === 'one' ? 0 : 1;\n    \n                    d3.select(this).select('.selection')\n                        .style('fill', `${brushColors[index][0]}`)\n                        .attr('stroke', `${brushColors[index][0]}`)\n                        .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                        .attr('stroke', brushColors[index][1])\n                        .attr('stroke-width', 2);\n\n                       \n                    let nodes = data.data.filter(f=> {\n                        return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n                    });\n\n                    let notNodes = data.data.filter(f=> {\n                        return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n                    });\n\n                    doesItExist.datum({brush:this, nodes: nodes})\n                    brushedNodes(nodes, notNodes, data, brushedVal, label);\n                    \n                }\n    \n            }else{\n    \n                d3.select('#toolbar').selectAll('.brush-span').filter((f, i)=> i === 0).remove();\n    \n                let classLabel = colorBool === 0 ? 'one': 'two';\n    \n                d3.select('#toolbar')\n                    .append('span')\n                    .attr('class', )\n                    .classed('brush-span', true)\n                    .classed('badge badge-secondary', true)\n                    .style('background', brushColors[colorBool][0])\n                    .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                    .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                colorBool === 0 ? colorBool = 1 : colorBool = 0;\n                secondGrp.classed(classLabel, true);\n                selectedBranch.classed(classLabel, true);\n            }\n    \n        }else{\n            d3.selectAll(`.${data.key}.brushed-branch`).classed('brushed-branch', false);\n            d3.selectAll(`.${data.key}.brushed-second`).classed('brushed-second', false);\n        }\n     }\n\n     ///OBSERVED/////\n     let observedWrap = binnedWrap.append('g').classed('observed', true);\n     observedWrap.attr('transform', (d, i, n)=> {\n         return 'translate('+ (dimensions.predictedWidth + 150) +', 0)'});\n\n    ////OBSERVED CONTIUOUS/////\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n    contOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, -15)`);\n\n    let contBars = contOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(dimensions.height - dimensions.margin), 0])\n        return y(Object.keys(d).length - 2)\n    })\n    .attr('fill', defaultBarColor).attr('fill-opacity', .5);\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let y = d3.scaleLinear()\n            .domain([0, Object.keys(d).length])\n            .range([(dimensions.height - dimensions.margin), 0]);\n\n        let movey = dimensions.height - y(Object.keys(d).length - 2);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    contOb.each((d, i, nodes)=> {\n\n        let xvalues = d.leafData.data.map(m=> {\n            return +m.values.realVal});\n        let x = d3.scaleLinear()\n            .domain([d3.min(xvalues), d3.max(xvalues)])\n            .range([0, dimensions.observedWidth]);\n\n        let y = d3.scaleLinear()\n            .domain([0, d3.max(d.leafData.bins.map(b=> Object.keys(b).length)) - 2])\n            .range([(dimensions.height - dimensions.margin), 0]);\n        \n        d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis', true)\n            .call(d3.axisBottom(x))\n            .attr('transform', 'translate(0, '+dimensions.height+')')\n\n        d3.select(nodes[i]).append('g')\n            .classed('y-axis', true)\n            .call(d3.axisLeft(y).ticks(4))\n            .attr('transform', 'translate(0, '+dimensions.margin+')');\n\n            d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n            d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n\n            d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis-label', true)\n            .append('text').text('Frequency')\n            .attr('transform', `translate(-20, ${dimensions.height- 10}) rotate(-90)`)\n            .style('font-size', '10px');\n    });\n    \n    ////Observed Discrete////\n    let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n    discOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, 5)`)\n    let discBars = discOb.selectAll('g.ob-bars').data(d=> {\n        return d.stateKeys.map((key, i)=>{\n            return {state: key, data: d.leafData.bins[i], max: d3.sum(d.leafData.bins.map(b=> b.length))}\n        });\n    }).join('g').classed('ob-bars', true);\n    let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10): 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height)])\n        return y(d.data.length);\n    }).attr('fill', (d, i) => {\n        return d.data[0] != undefined ? d.data[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    discBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10) : 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height-5)])\n        let movey = (height-5) - y(d.data.length);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    dRects.on('mouseover', (d, i, n)=> {\n        let state = d3.select('g.'+d[0].label).selectAll('g.state');\n        state.filter(f=> {\n            return f[0].state === d[0].winState}).attr('opacity', 0.8);\n        state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n        d3.select(n[i]).attr('opacity', 0.9);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).attr('opacity', 0.3);\n        let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n    });\n\n    discOb.each((d, i, nodes)=> {\n           \n            let xPoint = d3.scalePoint().domain(d.stateKeys).range([0, dimensions.observedWidth]).padding(.6)\n            let height = d.stateKeys ? (d.stateKeys.length * dimensions.squareDim - 10) : 0;\n            let y = d3.scaleLinear().domain([0, d.leafData.data.length]).range([(height), 0]);\n            d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4))//.attr('transform', 'translate(0, '+height+')');\n            d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n\n            d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n            d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n    });\n\n}\n\nfunction brushedNodes(nodes, notNodes, data, brushedVal, classLabel){\n   \n    let nodeNames = nodes.map(m=> m.node);\n    let notNodeNames = notNodes.map(m=> m.node);\n\n    let timeNodes = d3.extent(nodes.map(m=> m.combLength));\n    let treeNode = d3.select('#sidebar').selectAll('.node');\n\n    let selectedBranch = treeNode.filter(f=> {\n        return nodeNames.indexOf(f.data.node) > -1;\n    }).classed('brushed-branch', true);\n\n    let notNodeSelectedBranch = treeNode.filter(f=> notNodeNames.indexOf(f.data.node) > -1).classed('anti-brushed', true);\n\n    let test = pullPath([], selectedBranch.data(), [], [], 0);\n    let notTest = pullPath([], notNodeSelectedBranch.data(), [], [], 0);\n\n    let testtest = test.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values.realVal >= brushedVal[0] && f.data.attributes[data.key].values.realVal <= brushedVal[1];\n    }).map(m=> m.data.node);\n\n    let notTestTest = notTest.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values.realVal < brushedVal[0] || f.data.attributes[data.key].values.realVal > brushedVal[1];\n    }).map(m=> m.data.node);\n    \n    let secondGrp = treeNode.filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n    let secondLinks = d3.select('#sidebar').selectAll('.link')\n        .filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n    \n    selectedBranch.classed(`${data.key}`, true).classed(classLabel, true).classed('brushed-branch', true);\n   \n    let notNodeSecondGrp = treeNode\n        .filter(f=> (notNodeNames.indexOf(f.data.node) === -1 )&& (notTestTest.indexOf(f.data.node) > -1))\n        .classed('anti-brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n\n    let secondAntiLinks = d3.select('#sidebar').selectAll('.link')\n            .filter((f, j)=> (notNodeNames.indexOf(f.data.node) === -1)&&(notTestTest.indexOf(f.data.node) > -1));\n    secondAntiLinks.classed('anti-brushed-second', true).classed(`${data.key}`, true).classed(classLabel, true);\n    notNodeSelectedBranch.classed('anti-brushed', true).classed(classLabel, true).classed(classLabel, true);\n\n    return [selectedBranch, secondGrp, notNodeSelectedBranch, notNodeSecondGrp];\n}\n\nfunction continuousHistogram(data){\n    \n    let x = data[0].yScale;\n    let histogram = d3.histogram()\n            .value(function(d) { return d.values.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n\n    return histogram(data);\n}\n\nlet mirrorlineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n      \n        let y = d3.scaleLinear().domain([n.length - 1, 0]).range([0, dimensions.height]).clamp(true);\n        \n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = n.maxCount ? n.maxCount : d.maxCount;\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        \n        return x(dat); \n});\n\nvar lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, n.length - 1]).range([0, dimensions.height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = d.maxCount? d.maxCount : d3.sum(n.map(m=> m.length))\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        return x(dat); \n    });\n\n\n","import { pairPaths, maxTimeKeeper } from \"./dataFormat\";\nimport { dropDown } from \"./buttonComponents\";\nimport * as d3 from \"d3\";\nimport * as slide from 'd3-simple-slider';\nimport { renderTree } from \"./sidebarComponent\";\nimport { speciesTest, dataMaster } from \".\";\nimport { findBrushedNodes } from \"./toolbarComponent\";\n\nexport function rankingControl(data){\n    let rankDiv = d3.select('#pair-rank').classed('hidden', false);\n    rankDiv.selectAll('*').remove();\n\n    let defaultW = [1, 1, 1];\n  \n    let weightPicker = rankDiv\n      .append('svg')\n      .attr('width', 800)\n      .attr('height', 100)\n      .append('g')\n      .attr('transform', 'translate(10,10)');\n\n     weightPicker\n    .append(\"svg:image\")\n    .attr('width', 200)\n    .attr('height', 140)\n    .attr('y', -50)\n    .attr(\"xlink:href\", \"./public/mini-diagram.gif\");\n\n    weightPicker.append('text').text('Distance').attr('font-size', 10).attr('x', 85).attr('y', 60);\n    weightPicker.append('text').text('Delta').attr('font-size', 10).attr('x', 66).attr('y', 20);\n    weightPicker.append('text').text('Closeness').attr('font-size', 10).attr('x', 195).attr('y', 22);\n\n    let labels = ['Distance', 'Delta', 'Closeness'];\n\n    weightPicker.selectAll('text.labels').data(labels).join('text').classed('labels', true)\n    .text(d=> d)\n    .attr('y', 10)\n    .attr('x', (d, i)=> (300+(260 * i)));\n\n  \n    defaultW.forEach((color, i) => {\n      var slider = slide\n        .sliderBottom()\n        .min(-1)\n        .max(1)\n        .step(.1)\n        .width(210)\n        .default(defaultW[i])\n        .displayValue(false)\n        .fill('#7FB3D5')\n        .on('end', num => {\n         defaultW[i] = num;\n       \n         updateRanking(pairPaths(data), d3.select('.attr-drop.dropdown').select('button').attr('value'), defaultW);\n        });\n  \n      weightPicker\n        .append('g')\n        .attr('transform', `translate(${300+(260 * i)}, 20)`)\n        .call(slider);\n\n      weightPicker.selectAll('.tick')\n      .filter(f=> f < 0).select('text')\n      .attr('fill', 'red')\n      .attr('opacity', 0.6);\n    });\n}\nexport function generatePairs(data){\n\n        let pairs = pairPaths(data);\n     \n        let weights = [1, 1, 1];\n\n        let attKeys = d3.entries(pairs[0].p1[0].attributes)\n                    .filter(f=> f.value.type === 'continuous')\n                    .map(m=> {\n                        return {'field': m.key, 'value': m.key }\n                    });\n        \n        let drop = d3.select('.attr-drop.dropdown')\n          .selectAll('a').empty() ? dropDown(d3.select('#toolbar'), attKeys, `Trait: ${attKeys[0].field}`, 'attr-drop') : d3.select('.attr-drop.dropdown').selectAll('a');\n        \n        d3.select('.attr-drop.dropdown').select('button').attr('value', attKeys[0].field);\n\n        drop.on('click', (d, i, n)=> {\n            updateRanking(pairPaths(data), d.field, weights);\n            renderTree(d3.select('#sidebar'), null, true, d.field);\n            d3.select('.attr-drop.dropdown').select('button').attr('value', d.field);\n            d3.select('.attr-drop.dropdown').select('button').text(`Trait: ${d.field}`);\n            d3.select('#attr-drop').classed('show', false);\n        });\n\n        updateRanking([...pairs], attKeys[0].field, weights);\n}\nexport function updateRanking(pairs, field, weights){\n\n  console.log('pairs',pairs, field)\n  \n    let deltaMax = d3.max([...pairs].map(m=> m.deltas.filter(f=> f.key === field)[0]).map(m=> m.value));\n    let closeMax = d3.max([...pairs].map(m=> m.closeness.filter(f=> f.key === field)[0]).map(m=> m.value));\n    let distMax = d3.max([...pairs].map(d=> d.distance))\n    let deltaScale = d3.scaleLinear().domain([0, deltaMax]).range([0, 1]);\n    let closeScale = d3.scaleLinear().domain([closeMax, 0]).range([0, 1]);\n    let distScale = d3.scaleLinear().domain([0, distMax]).range([0, 1]);\n\n    let pickedPairs = [...pairs].map(p=> {\n        p.delta = p.deltas.filter(d=> d.key === field)[0];\n        p.closeness = p.closeness.filter(d=> d.key === field)[0];\n        p.deltaRank = deltaScale(p.delta.value);\n        p.closenessRank = closeScale(p.closeness.value);\n        p.distanceRank = distScale(p.distance);\n        p.totalRank = (weights[0] * p.distanceRank) + (weights[1] * p.deltaRank) + (weights[2] * p.closenessRank);\n        return p;\n    })\n\n    let sortedPairs = pickedPairs.sort((a, b)=> b.totalRank - a.totalRank).slice(0, 40);\n    sortedPairs = sortedPairs.filter((f, i)=> i%2 === 0)\n    drawSorted(sortedPairs, field);\n}\n\nfunction drawSorted(pairs, field){\n\n  let pairColor = ['#FF5733', '#129BF5'];\n\n  let nodes = findBrushedNodes();\n  //console.log('nodes from brush',nodes.map(m=> m.species))\n   \n    let width = 600;\n    let height = 100;\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, width]);\n\n    d3.select('#main').selectAll('*').remove()\n    let svg = d3.select('#main').append('svg');\n    svg.attr('height', pairs.length * 150)\n    let wrap = svg.append('g');\n    wrap.attr('transform', 'translate(20, 100)')\n    let pairWraps = wrap.selectAll('g.pair-wrap').data(pairs).join('g').classed('pair-wrap', true);\n    pairWraps.attr('transform', (d, i)=> `translate(50,${i*150})`);\n    pairWraps.append('rect')\n        .attr('width', (d, i)=> {\n            return width - xScale(d.common.combLength);\n        })\n        .attr('height', height)\n        .attr('x', d=> xScale(d.common.combLength))\n        .attr('stroke-width', 1).attr('stroke', 'black')\n        .attr('fill', '#fff');\n\n    pairWraps.append('text').text((d, i)=> {\n        return `${d.p1[d.p1.length - 1].node} + ${d.p2[d.p2.length - 1].node}`\n    }).attr('y', -10);\n\n    let scoreWrap = pairWraps.append('g').classed('score-wrap', true);\n    let scoreGroups = scoreWrap.selectAll('g.score').data((d, i)=> {\n        return [\n         {label: 'Distance', value: d.distance, score: d.distanceRank}, \n         {label: 'Delta', value: d.delta.value, score: d.deltaRank},\n         {label: 'Closeness', value: d.closeness.value, score: d.closenessRank}\n        ];\n    }).join('g').classed('score', true);\n\n    let scoreLabel = scoreWrap.append('g').attr('transform', `translate(650, 10)`);\n    scoreLabel.append('rect').attr('width', 200).attr('height', 40).attr('fill', 'gray').attr('y', 45).attr('opacity', .1)\n    scoreLabel.append('text').text('Score').attr('y', 20).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Value').attr('y', 40).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreLabel.append('text').text('Total Score').attr('y', 60).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Rank').attr('y', 80).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreGroups.attr('transform', (d, i, n)=> {\n       return  i === 0 ? `translate(${(670)},0)` : \n       `translate(${(660+(d3.sum(d3.selectAll(n).filter((f, j)=> i > j).data().map(m=> m.label.length * 6)))+ (i*30))},0)`;\n    });\n    var zero = d3.format(\".3n\");\n    scoreGroups.append('text').text((d, i)=>  d.label).style('font-size', 10).attr('y', 10);;\n    scoreGroups.append('text').text((d, i)=> zero(d.score)).style('font-size', 10).attr('y', 30);\n    scoreGroups.append('text').text((d, i)=> zero(d.value)).style('font-size', 10).attr('y', 50);\n\n    scoreLabel.append('text').text((d, i, n)=> zero(d.closenessRank + d.distanceRank + d.deltaRank)).style('font-size', 10).attr('y', 60).attr('x', 115);\n    scoreLabel.append('text').text((d, i)=> i+1).style('font-size', 10).attr('y', 80).attr('x', 115);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, width]);\n       let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n        let y = d.attributes[field].scales.yScale;\n        y.range([height, 0]);\n        return y(d.attributes[field].values.realVal);\n    });\n\n    //BEGIN EXPERIOMENTING////]\n\n    let pairGroupN = pairWraps.selectAll('g.pair-neighbor').data((d, i, n)=> {\n      let species1 = d.p1.map(n=> n.node);\n      let species2 = d.p2.map(n=> n.node);\n      let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n\n\n      let neighbors = labels.flatMap(m=> {\n          let start = speciesTest[0].indexOf(m);\n          let ne = speciesTest[0].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n          return ne;\n      });\n      \n      let speciesNames = [species1[species1.length-1], species2[species2.length-1]];\n\n      ////EXPERIMENTING WITH NODES////\n      let neighPaths = dataMaster[0].filter(f=> \n        (neighbors.indexOf(f[f.length - 1].node)) > -1 && (speciesNames.indexOf(f[f.length - 1].node) === -1));\n  \n      let labeledN = [...neighPaths].map(path=> {\n        let name = path[path.length - 1].node;\n        return path.map(p=> {\n          p.name = name;\n          return p\n        })\n      });\n  \n      let spec1N = labeledN.map(m => m.filter(f=> species1.indexOf(f.node) > -1));\n      let spec2N = labeledN.map(m => m.filter(f=> species2.indexOf(f.node) > -1));\n  \n      let closest1 = spec1N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n  \n      let closest2 = spec2N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n  \n      let wholeClosest1 = labeledN.filter(f=> f[f.length-1].node === closest1[closest1.length - 1].name)[0];\n      let wholeClosest2 = labeledN.filter(f=> f[f.length-1].node === closest2[closest2.length - 1].name)[0];\n     \n      return [wholeClosest1, wholeClosest2];\n\n    }).join('g').classed('pair-neighbor', true).attr('opacity', 0);\n\n      let innerPathsN = pairGroupN.append('path')\n      .attr(\"d\", lineGen)\n      .attr(\"class\", \"inner-line-n\")\n      .attr('fill', 'none')\n      .attr('stroke-width', 1)\n      .style('stroke', 'rgba(160, 141, 184, .9)');\n     \n      let branchesN = pairGroupN.selectAll('g.branch-n').data(d=> d).join('g').classed('branch-n', true);\n      branchesN.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n      branchesN.filter(f=> f.leaf != true).append('rect').attr('width', 10).attr('height', (d)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n      }).attr('fill', 'rgba(160, 141, 184, .2)').attr('y', (d, i)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.upperCI95);\n      });\n  \n      branchesN.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n          return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n      }).attr('opacity', 0.5);\n\n      branchesN.filter((b, i, n)=> {\n        return i === (n.length - 1);\n      }).append('text').text(d=> d.node)\n        .attr('fill', 'rgba(160, 141, 184, 1)')\n        .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return (y(d.attributes[field].values.realVal) - 4);\n        }).attr('x', 3).style('font-size', 10);\n\n\n\n\n////////////////////////////END EXPERIMENT///////\n\n    let pairGroup = pairWraps.selectAll('g.pair').data(d=> [d.p1, d.p2]).join('g').classed('pair', true);\n\n    let innerPaths = pairGroup.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d, i)=> pairColor[i])\n   // .style('stroke', 'rgb(165, 185, 198)');\n\n   let brushedPaths = innerPaths.filter(f=> {\n    let nodeTest = f.filter(n=> nodes.map(m=> m.node).indexOf(n.node) > -1)\n    return nodeTest.length > 0}).style('stroke', '#64B5F6').style('stroke-width', '5px');\n\n   //console.log('brushed',brushedPaths, nodes.map(m=> m.node))\n    let branches = pairGroup.selectAll('g.branch').data(d=> d).join('g').classed('branch', true);\n    branches.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n    branches.filter(f=> f.leaf != true).append('rect')\n    .classed('range', true)\n    .attr('width', 10)\n    .attr('height', (d)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n    }).attr('fill', 'rgba(165, 185, 198, .5)')\n    .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.upperCI95);\n    });\n\n    let chosenNodes = branches.filter(f=> {\n      return nodes.map(m=> m.node).indexOf(f.node) > -1\n    }).selectAll('rect.range').attr('fill', '#64B5F6')\n\n    branches.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n        return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n    });\n\n    pairWraps.append('rect').attr('width', (d, i)=> {\n        return xScale(d.common.combLength)})\n        .attr('height', height)\n        .attr('fill', '#fff').style('opacity', 0.7);\n        let yAxisG = pairWraps.append('g').classed('y-axis', true);\n        let xAxisG = pairWraps.append('g').classed('x-axis', true);\n        xAxisG.call(d3.axisBottom(xScale).ticks(10));\n        xAxisG.attr('transform', `translate(0, ${height})`)\n\n    pairWraps.on('mouseover', (d, i, n)=> {\n       \n        let species1 = d.p1.map(n=> n.node);\n        let species2 = d.p2.map(n=> n.node);\n        let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n        let neighbors = labels.flatMap(m=> {\n            let start = speciesTest[0].indexOf(m);\n            let ne = speciesTest[0].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n            return ne;\n        });\n        \n        let neighNodes = []//dataMaster[0].filter(f=> neighbors.indexOf(f[f.length -1].node) > -1).flatMap(m=> m.map(f=> f.node))\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        let pairNode1 = treeNode.filter(f=> {\n            return species1.indexOf(f.data.node) > -1;\n        }).classed('hover one', true);\n\n        let pairNode2 = treeNode.filter(f=> {\n          return species2.indexOf(f.data.node) > -1;\n      }).classed('hover two', true);\n\n        treeLinks.filter(f=> species1.indexOf(f.data.node) > -1).classed('hover one', true);\n        treeLinks.filter(f=> species2.indexOf(f.data.node) > -1).classed('hover two', true);\n       // treeNode.filter(f=> neighNodes.indexOf(f.data.node) > -1).classed('hover-neighbor', true);\n        //Hiding Others\n        treeNode.filter(f=> (neighNodes.indexOf(f.data.node) === -1) && (species1.concat(species2).indexOf(f.data.node) === -1)).classed('hover-not', true);\n        //Coloring Neighbors\n       // treeLinks.filter(f=> neighNodes.indexOf(f.data.node) > -1).classed('hover-neighbor', true);\n        //Hiding Others\n        treeLinks.filter(f=> (neighNodes.indexOf(f.data.node) === -1) && (species1.concat(species2).indexOf(f.data.node) === -1)).classed('hover-not', true);\n        \n        let speciesNames = [species1[species1.length-1], species2[species2.length-1]]\n       // d3.select(n[i]).selectAll('.pair-neighbor').attr('opacity', 1);\n        return d3.select(this).classed('hover', true);\n    })\n    .on('mouseleave', (d, i, n)=>{\n\n      d3.select(n[i]).selectAll('.pair-neighbor').attr('opacity', 0);\n\n        let treeNode  = d3.select('#sidebar').selectAll('.node')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n        return d3.select(n[i]).classed('hover', false);\n    });\n\n    let axisGroup = pairWraps.append('g').classed('y-axis', true);\n  \n    axisGroup.each((d, i, n)=> {\n        let scale = d.p1[0].attributes[field].scales.yScale;\n        d3.select(n[i]).call(d3.axisLeft(scale).ticks(5));\n    });\n\n    let mouseG = pairWraps.append(\"g\")\n    .attr(\"class\", \"mouse-over-effects\");\n\n  mouseG.append(\"path\") // this is the black vertical line to follow mouse\n    .attr(\"class\", \"mouse-line\")\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"1px\")\n    .style(\"opacity\", \"0\");\n\n   var mousePerLine = mouseG.selectAll('.mouse-per-line')\n   .data((d, i)=> {\n\n    return [d.p1, d.p2]})\n   .join(\"g\")\n   .attr(\"class\", \"mouse-per-line\");\n\n mousePerLine.append(\"circle\")\n   .attr(\"r\", 7)\n   .style(\"stroke\", function(d) {\n     return 'red';\n   })\n   .style(\"fill\", \"none\")\n   .style(\"stroke-width\", \"1px\")\n   .style(\"opacity\", \"0\");\n\n  mousePerLine.append(\"text\").attr('class', 'value')\n   .attr(\"transform\", \"translate(10,3)\");\n\n  mousePerLine.append(\"text\").attr('class', 'species')\n   .attr(\"transform\", \"translate(10,3)\");\n\nmouseG.append('svg:rect') // append a rect to catch mouse movements on canvas\n      .attr('width', width) // can't catch mouse events on a g element\n      .attr('height', height)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .on('mouseout', function() { // on mouse out hide line, circles and text\n        d3.selectAll(\".mouse-line\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"0\");\n      })\n      .on('mouseover', (d, i, n)=> { // on mouse in show line, circles and text\n        d3.select(n[i].parentNode).selectAll('.mouse-line')\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"1\");\n\n          \n      })\n      .on('mousemove', (dat, i, n)=> { // mouse moving over canvas\n        var mouse = d3.mouse(n[i]);\n       \n        d3.select(n[i].parentNode).select('.mouse-line')\n          .attr(\"d\", function() {\n            var d = \"M\" + mouse[0] + \",\" + height;\n            d += \" \" + mouse[0] + \",\" + 0;\n            return d;\n          });\n       \n          d3.select(n[i].parentNode).selectAll('.mouse-per-line')\n          .attr(\"transform\", function(d, j, node) {\n         \n            var xDate = xScale.invert(mouse[0]),\n                bisect = d3.bisector(function(d) { return d.edgeLength; }).right,\n                idx = bisect(d.values, xDate);\n            \n            let line = n[i].parentNode.parentNode.getElementsByClassName('inner-line');\n          \n            var beginning = 0,\n                end = line[j].getTotalLength(),\n                target = null\n\n            while (true){\n               target = Math.floor((beginning + end) / 2);\n               var pos = line[j].getPointAtLength(target);\n              if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n                  break;\n              }\n              if (pos.x > mouse[0])      end = target;\n              else if (pos.x < mouse[0]) beginning = target;\n              else break; //position found\n            }\n            let y = dat.p1[0].attributes[field].scales.yScale;\n          \n            d3.select(node[j]).select('text.value')\n              .text(y.invert(pos.y).toFixed(2))\n              .style('font-size', 11)\n              .attr('y', ()=> {\n                  return j === 0 ? 10 : -10;\n                });\n\n            d3.select(node[j]).select('text.species')\n                .text(d[d.length-1].node)\n                .style('font-size', 11)\n                .attr('y', ()=> {\n                    return j === 0 ? 19 : -19;\n                  });\n              \n            return \"translate(\" + mouse[0] + \",\" + pos.y +\")\";\n          });\n      });\n\n\n   \n}","import * as d3 from \"d3\";\nimport { renderDistibutions, groupDistributions, renderDistStructure, binGroups } from './distributionView';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport { getLatestData } from \"./filterComponent\";\nimport { generatePairs, rankingControl } from \"./pairView\";\nimport { drawTreeForGroups, createCladeView, chosenCladesGroup } from \"./cladeMaker\";\nimport { calculatedScalesKeeper } from \".\";\n\nexport let groupedView = false;\n\nexport function updateMainView(d, groups){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n    let moveMetric = 'edgeLength';\n\n    let scales = calculatedScalesKeeper[0];\n\n    main.selectAll('*').remove();\n\n    let view = d3.select('#view-pheno').text()\n   \n    if(d != 'Pair View' && view === 'View Phenogram'){\n        d3.select('.dropdown.attr-drop').remove();\n    }\n  \n    if(d === 'Path View' || d === null){\n        d3.select('#pair-rank').classed('hidden', true);\n        drawPathsAndAttributes(data, main);\n\n        document.getElementById(\"scrunch\").disabled = false;\n        document.getElementById(\"discrete-view\").disabled = false;\n\n        d3.select('#scrunch').classed('hidden', false);\n        d3.select('#discrete-view').classed('hidden', false);\n\n    }else if(d === 'Summary View'){\n\n        d3.select('#pair-rank').classed('hidden', true);\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n        if(groups){\n            renderDistStructure(main, groups)\n        }else{\n           // groupDistributions(data, main, null);\n           renderDistStructure(main, data);\n        }\n    }else if(d === 'Pair View'){\n        rankingControl(data);\n        generatePairs(data);\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n    // }else if(d === 'Clade View'){\n    //     d3.select('#pair-rank').classed('hidden', true);\n    //     createCladeView(main, scales);\n\n    //     document.getElementById(\"scrunch\").disabled = true;\n    //     document.getElementById(\"discrete-view\").disabled = true;\n\n    //     d3.select('#scrunch').classed('hidden', true);\n    //     d3.select('#discrete-view').classed('hidden', true);\n\n    }else{\n        console.error('field not found');\n    }\n}\nexport function initialViewLoad(scales, dataName){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(data.length > 50){\n\n        renderDistStructure(main, chosenCladesGroup[chosenCladesGroup.length - 1].groups);\n        \n        d3.select('#view-toggle').text('View Paths');\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n    }else{\n        drawPathsAndAttributes(data, main);\n        d3.select('#view-toggle').text('View Summary');\n\n        document.getElementById(\"scrunch\").disabled = false;\n        document.getElementById(\"discrete-view\").disabled = false;\n\n        d3.select('#scrunch').classed('hidden', false);\n        d3.select('#discrete-view').classed('hidden', false);\n      \n    }\n\n}\n\n","import '../styles/index.scss';\nimport * as d3 from \"d3\";\n\nimport {dataMaster, nestedData, collapsed} from './index';\nimport {getScales} from './filterComponent';\nimport {getNested} from './pathCalc';\nimport { dropDown } from './buttonComponents';\nimport { updateRanking } from './pairView';\nimport { pairPaths, maxTimeKeeper } from './dataFormat';\nimport { cladesGroupKeeper, chosenCladesGroup, growSidebarRenderTree } from './cladeMaker';\n\n\nexport function buildTreeStructure(paths, edges){\n   \n    let root = paths[0][0];\n    let nestedData = getNested(root, edges);\n    return nestedData;\n}\n\nexport function traitColorDropDown(scales, sidebar, renderCallback){\n\n    let optionArray  = reduce2DropArray(scales);\n\n    let dropOptions = dropDown(sidebar, optionArray, `Color By Value`,'show-drop-div-sidebar');\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            //renderTree(sidebar, d, true, false);\n            renderCallback(sidebar, d, true, false)\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`)\n        }else if(d.type === 'continuous'){\n           // renderTree(sidebar, d, true, false);\n            renderCallback(sidebar, d, true, false)\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`);\n        }else{\n            renderCallback(sidebar, null, true, false)\n           // renderTree(sidebar, null, false, false);\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Color By Value`);\n        }\n    sidebar.select('#show-drop-div-sidebar').classed('show', false);\n    });\n\n}\n\nexport function reduce2DropArray(startArray){\n    return  startArray.reduce(function(array, scale){\n        array.push(scale);\n        return array; \n    }, [{'field':'None'}]); \n}\n\nexport function renderTreeButtons(normedPaths, sidebar){\n\n    let scales = getScales();\n\n    ///SIDBAR STUFF\n    sidebar = sidebar.append('div').classed('button-wrap', true);\n\n    traitColorDropDown(scales, sidebar, renderTree);\n\n    let phenoOptions = reduce2DropArray(scales.filter(f=> f.type != 'discrete'));\n \n      ///BUTTON FOR PHENOGRAM VIEW. MAYBE MOVE THIS TO SIDEBAR\n    let phenogramButton = d3.select('#sidebar').select('.button-wrap').append('button').text('View Phenogram');\n    phenogramButton.classed('btn btn-outline-secondary', true).attr('id', 'view-pheno'); \n    phenogramButton.on('click', ()=> {\n          if(phenogramButton.text() === 'View Phenogram'){\n            if(d3.select('.attr-drop.dropdown').select('button').empty()){\n                let drop = dropDown(d3.select('#toolbar'), phenoOptions, `Trait: ${phenoOptions[1].field}`, 'attr-drop');\n                d3.select('.attr-drop.dropdown').select('button').attr('value', phenoOptions[1].field);\n                d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Color By Value`);\n                drop.on('click', (d, i, n)=> {\n                    if(d3.select('.dropdown.change-view').select('button').node().value === \"View Pairs\"){\n                        updateRanking(pairPaths(normedPaths), d.field);\n                    }\n                    renderTree(d3.select('#sidebar'), null, true, d.field);\n                    d3.select('.attr-drop.dropdown').select('button').text(`Trait: ${d.field}`);\n                    d3.select('.attr-drop.dropdown').select('button').attr('value')\n                    d3.select('.attr-drop.dropdown').select('button').attr('value', d.field);\n                    d3.select('#attr-drop').classed('show', false);\n                });\n                renderTree(d3.select('#sidebar'), null, true, d3.select('.attr-drop.dropdown').select('button').attr('value'))\n              }else{\n    \n                renderTree(d3.select('#sidebar'), null, true, d3.select('.attr-drop.dropdown').select('button').attr('value'))\n              }\n              phenogramButton.text('View Phylogeny');\n          }else{\n            ////ADD THE HIDE BUTTON HERE \n            let view = d3.select('.dropdown.change-view').select('button').text();\n           \n            if(view != \"Pair View\"){\n                d3.select('.dropdown.attr-drop').remove();\n            }\n            renderTree(d3.select('#sidebar'), null, true, false);\n            phenogramButton.text('View Phenogram');\n\n          }\n    })\n\n    let cladeButton = sidebar.append('button').attr('id', 'clade-maker');\n    cladeButton.attr('class', 'btn btn-outline-secondary').text('Clade View');\n    cladeButton.on('click', ()=> growSidebarRenderTree());\n}\n\nfunction uncollapseSub(d){\n    d.children = d._children;\n    d._children = null;\n    if(d.children){\n        d.children.map(c=> uncollapseSub(c));\n    }    \n}\n\nfunction collapseSub(d){\n    if(d.children) {\n        d._children = d.children\n        d._children.forEach(collapseSub)\n        d.children = null\n    }  \n}\n\nfunction collapseTree(treeData){\n\n    let leaves = getLeaves(treeData, []);\n\n    return stepDown(treeData);\n\n    function stepDown(node){\n        let leaves = getLeaves(node, []);\n        \n        let ids = new Set(leaves.map(m=> m.data.attributes.Clade.values.Clade));\n        if(ids.size > 1){\n            node.children.map(n=> stepDown(n))\n        }else{\n            node.branchPoint = true;\n            node.clade = Array.from(ids)[0]\n            collapseSub(node);\n            return node;\n        }\n        return node;\n    }\n    \n    function getLeaves(node, array){\n        if(node.children != undefined ){\n            node.children.map(n=> getLeaves(n, array))\n        }else{\n            array.push(node);\n        };\n        return array;\n    }\n}\n\nexport function assignPosition(node, position) {\n    if (node.children === undefined || node.children === null){\n        \n        position = position + 1.5;\n        node.position = position;\n        return position;\n    }else{\n        let positionArray = []\n        node.children.forEach((child) => {\n            position = assignPosition(child, position);\n            positionArray.push(position);\n        });\n        node.options = positionArray;\n        node.position = d3.max(positionArray);\n        return position;\n    }\n}\n\nexport function addingEdgeLength(edge, data){\n    data.combEdge = data.edgeLength + edge;\n    if(data.children){\n        data.children.forEach(chil=> {\n            addingEdgeLength(data.combEdge, chil);\n        });\n    }\n}\n\nexport function renderTree(sidebar, att, uncollapse, pheno){\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 260,\n        height : 520,\n        lengthHeight: 800,\n    }\n\n    let lengthBool = true;\n\n    // declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([dimensions.height, dimensions.width]);\n\n    addingEdgeLength(0, nestedData[0]);\n    \n    //  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData[0]);\n\n    // maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let groupedBool = d3.select('#show-drop-div-group').attr('value');\n\n    let sidebarTest = sidebar.select('svg');\n    let treeSvg = sidebarTest.empty() ? sidebar.append(\"svg\") : sidebarTest;\n    treeSvg.classed('tree-svg', true);\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + dimensions.margin.top + dimensions.margin.bottom);\n\n\n    let gTest = treeSvg.select('g.tree-g');\n    let g = gTest.empty() ? treeSvg.append(\"g\").classed('tree-g', true) : gTest;\n    g.attr(\"transform\",\n      \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\");\n\n    if(groupedBool === \"ungrouped\" && uncollapse === false){\n        if((cladesGroupKeeper.length > 0) && (chosenCladesGroup[chosenCladesGroup.length - 1].field != 'Clade Attribute)')){\n            let newNodes = collapseTree(treenodes);\n            updateTree(newNodes, dimensions, treeSvg, g, att, lengthBool, uncollapse);\n        }else{\n            updateTree(treenodes, dimensions, treeSvg, g, att, lengthBool, pheno, uncollapse);\n        }\n        \n    }else{\n        ////Break this out into other nodes////\n        updateTree(treenodes, dimensions, treeSvg, g, att, lengthBool, pheno, uncollapse);\n    }\n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n    return array;\n}\n\nexport function updateTree(treenodes, dimensions, treeSvg, g, attrDraw, length, pheno, uncollapse){\n\n    d3.select('.pheno-y-axis').remove();\n    d3.select('.pheno-x-axis').remove();\n    \n    assignPosition(treenodes, 0);\n\n   // console.log('treeNodes', treenodes)\n\n    let branchCount = findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, 1])\n\n    if(length){   \n        g.attr('transform', 'translate(20, 265)');\n        treeSvg.attr('height', 800);\n        yScale.range([500, 0]).domain([0, branchCount.length])\n        xScale.range([0, dimensions.width + 10]);\n    } \n    if(pheno){\n        treeSvg.attr('height', 800);\n        xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain())\n        yScale.domain([0, maxTimeKeeper[0]]).range([0, 500])\n    }\n\n    // adds the links between the nodes\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n        if((length && pheno === undefined) || (length && pheno === false)){\n           return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n           + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n           + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n           + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n        }else{\n            return \"M\" + xScale(d.data.attributes[pheno].values.realVal) + \",\" + yScale(d.data.combEdge)\n            + \" \" + xScale(d.parent.data.attributes[pheno].values.realVal) + \",\" + yScale(d.parent.data.combEdge);\n        }       \n    });\n\n    if(pheno){\n        \n        link.style('opacity', 0.3);\n        g.attr('transform', 'translate(30, 50)');\n\n        let x = xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain()).range([0, (dimensions.width+20)]);\n        let xAxis = d3.axisBottom(x);\n        g.append('g').classed('pheno-x-axis', true).call(xAxis).attr('transform', 'translate(0, 510)').select('path').attr('stroke-width', 0);\n\n        let y = d3.scaleLinear().domain([0,maxTimeKeeper[0]]).range([0, dimensions.height -20]);\n        let yAxis = d3.axisLeft(y);\n        g.append('g').classed('pheno-y-axis', true).call(yAxis).attr('transform', 'translate(0, 2)').select('path').attr('stroke-width', 0);;\n    }\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants(), d => d.data.node)\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n    .duration(500)\n    .attr(\"transform\", function(d) { \n        if(length && pheno === undefined || pheno === false){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n        }else{\n\n           return \"translate(\" + (xScale(d.data.attributes[pheno].values.realVal) - 5) + \",\" + yScale(d.data.combEdge) + \")\"; \n        }\n    });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)//f.data.attributes[attrDraw.field].winState === att.state;\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    })\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateTree(treenodes, dimensions, treeSvg, g, attrDraw, lengthBool, uncollapse);\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n\n    if(uncollapse){\n       \n        // let groups = chosenCladesGroup[chosenCladesGroup.length - 1];\n        \n        // let groupGroup = treeSvg.selectAll('.clade-rects')\n        // .data(groups.groups)\n        // .join('g')\n        // .attr('class', d=> d.label)\n        // .classed('clade-rects', true)\n    \n        // let rect = groupGroup.append('rect');\n        // rect.attr('width', 20);\n        // rect.attr('height', (d, i)=> {\n        //     return d.paths.length * 6;\n        // });\n        // groupGroup.each((d, i, node)=> {\n       \n        //     let first = d.paths.map(m=> m[m.length-1].node);\n        //     let test = treeSvg.selectAll('.node--leaf').filter((f)=> {\n        //         return first.indexOf(f.data.node) > -1});\n        //     let leafSort = test.data().sort((a, b)=> {\n        //         return a.x - b.x;\n        //     });\n        //     console.log(leafSort[0].data.node)\n\n        //     let chosenNode = test.filter(f=> {\n        //         return f.data.node === leafSort[leafSort.length - 1].data.node;\n        //     });\n\n        //     console.log(chosenNode.data())\n     \n        //     d3.select(node[i]).attr('transform', `translate(300, ${yScale(leafSort[0].position)})`)\n        // })\n\n     \n      \n        \n    }\n\n    return node;\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {loadData} from './dataLoad';\nimport {calculateNewScales, rootAttribute, combineLength} from './dataFormat';\nimport {allPaths, pullPath, getPathRevised, getPath} from './pathCalc';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {toolbarControl} from './toolbarComponent';\nimport { initialViewLoad } from './viewControl';\nimport { groupDataByClade, groupDataByAttribute, addCladeGroup, cladesGroupKeeper, chosenCladesGroup, cladeKeeper} from './cladeMaker';\nimport { binGroups } from './distributionView';\n\nexport const dataMaster = [];\nexport const savedSelected = [];\nexport const collapsed = false;\nexport const nestedData = [];\nexport const speciesTest = [];\nexport const calculatedScalesKeeper = [];\n\nexport const colorKeeper = [\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n]\n\nexport const attributeList = [];\n\nlet discreteTraitList = ['Clade', 'Group', 'island/mainland']\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nwrap.select('#selected').classed('hidden', true);\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar');\nwrap.select('#filter-tab').classed('hidden', true);\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n\n////DATA LOADING////\n\nappLaunch();\n\nasync function appLaunch(){\n\n//     dataLoadAndFormat('geospiza-edges.json', 'geospiza-edge-lengths.json', 'geospiza-leaf-data.csv', 'geospiza-res.json', 'Geospiza').then((centData)=> {\n      \n//         toolbarControl(toolbarDiv, main, centData[1]);\n//         wrap.select('#filter-tab').classed('hidden', true);\n//         renderTreeButtons(centData[0], sidebar, false);\n//         renderTree(sidebar, null, true, false);\n//         /// LOWER ATTRIBUTE VISUALIZATION ///\n//         initialViewLoad(centData[1], 'Geospiza');\n//     });\n\n    // dataLoadAndFormat('centrarchid-edges.json', 'centrarchid-edge-lengths.json', 'centrarchid-leaf-data.csv', 'centrarchid-res.json', 'Centrarchid').then((centData)=> {\n      \n    //         toolbarControl(toolbarDiv, main, centData[1]);\n    //         wrap.select('#filter-tab').classed('hidden', true);\n    //         renderTreeButtons(centData[0], sidebar, false);\n    //         renderTree(sidebar, null, true, false);\n    //         /// LOWER ATTRIBUTE VISUALIZATION ///\n    //         initialViewLoad(centData[1], 'Centrarchid');\n    // });\n\n//     dataLoadAndFormat('anolis-edges.json', 'anolis-edge-lengths.json', 'anolis-leaf-data.csv', 'anolis-res.json', 'Anolis').then((centData)=> {\n      \n//         toolbarControl(toolbarDiv, main, centData[1]);\n        \n//         renderTreeButtons(centData[0], sidebar, false);\n//         renderTree(sidebar, null, true, false);\n//         /// LOWER ATTRIBUTE VISUALIZATION ///\n//         initialViewLoad(centData[1]);\n// });\n\n\n\ndataLoadAndFormatMultinet('anolis_edges.csv', 'anolis_internal.csv', 'anolis_leaf.csv', 'Anolis').then(centData=> {\n    \n    toolbarControl(toolbarDiv, main, centData[1]);\n   \n    renderTree(sidebar, null, true, false);\n    renderTreeButtons(centData[0], sidebar, false);\n    /// LOWER ATTRIBUTE VISUALIZATION ///\n    initialViewLoad(centData[1]);\n});\n\n}\n\nasync function dataLoadAndFormatMultinet(edgeFile, internalFile, leafFile, dataName){\n\n    console.log('dataname',dataName)\n\n        //helper function to create array of unique elements\n        Array.prototype.unique = function() {\n            return this.filter(function (value, index, self) { \n                return self.indexOf(value) === index;\n            });\n        }\n\n        let attributeList = []\n\n        let edges = await loadData(d3.csv, `./data/${edgeFile}`, 'edge');\n        let internal = await loadData(d3.csv, `./data/${internalFile}`, '');\n        let leaves = await loadData(d3.csv, `./data/${leafFile}`, '');\n    \n    \n        ///Creating attribute list to add estimated values in //\n    \n        leaves.columns.filter(f=> (f != 'species') && (f != 'label') && (f != '_key') && (f != 'length')).forEach((d, i)=> {\n    \n            if(discreteTraitList.indexOf(d) > -1){\n                attributeList.push({field: d, type: 'discrete'});\n            }else{\n                attributeList.push({field: d, type:'continuous'});\n            }\n    \n        });\n    \n        let calculatedAtt = internal.map((row, i)=> {\n            let newRow = {};\n            attributeList.forEach((att)=>{\n                newRow[att.field] = {};\n                newRow[att.field].field = att.field;\n                newRow[att.field].type = att.type;\n                let values = {}\n                d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                    if(att.type === 'continuous'){\n                       \n                        if(m.key.includes('upperCI')){\n                            values.upperCI95 = +m.value;\n                        }else if(m.key.includes('lowerCI')){\n                            values.lowerCI95 = +m.value;\n                        }else{\n                            values.realVal = +m.value;\n                        }\n                    }else{\n                         values[m.key] = m.value;   \n                    }\n                });\n                newRow[att.field].values = values;\n            });\n            newRow.node = row.label;\n            newRow.length = row.length;\n            newRow.leaf = false;\n            return newRow;\n        });\n\n        let calcLeafAtt = leaves.map((row, i)=> {\n            let newRow = {};\n            attributeList.forEach((att)=>{\n                newRow[att.field] = {};\n                newRow[att.field].field = att.field;\n                newRow[att.field].type = att.type;\n                let values = {}\n                d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                    if(att.type === 'continuous'){\n                        values.realVal = +m.value;\n                    }else{\n                        values[m.key] = m.value;   \n                    }\n                });\n                newRow[att.field].values = values;\n            });\n            newRow.node = row.label;\n            newRow.label = row.label;\n            newRow.length = row.length;\n            newRow.leaf = true;\n            return newRow;\n        })\n\n        let calculatedScales = calculateNewScales(calculatedAtt, attributeList.map(m=> m.field), colorKeeper);\n    \n        let matchedEdges = edges.map((edge, i)=> {\n\n            let indexTo = +edge._to.match(/(\\d+)/)[0];\n            let indexFrom = +edge._from.match(/(\\d+)/)[0];\n\n            let attrib = edge._to.includes(\"internal\") ? calculatedAtt[indexTo] : calcLeafAtt[indexTo];\n            let fromNode = edge._from.includes(\"internal\") ? calculatedAtt[indexFrom] : calcLeafAtt[indexFrom];\n\n            if(attrib){\n                Object.keys(attrib).filter(f=> (f != 'node') && (f != 'label') && (f != 'length') && (f != 'leaf')).map((att, i)=>{\n                    let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                    attrib[att].scales = scales;\n                    return att;\n                })\n            }\n            let newEdge = {\n                V1: fromNode.node,\n                V2: attrib.node,\n                node: attrib.node,\n                leaf: attrib.leaf,\n                edgeLength: +attrib.length,\n                attributes: attrib ? attrib : null\n            }\n            return newEdge;\n        });\n    \n        let paths = allPaths(matchedEdges, matchedEdges.filter(f=> f.leaf === true), \"V1\", \"V2\")\n            .map((path, i)=> {\n                let root = path[0];\n                let attrib = calculatedAtt.filter(f=> f.node === root.node)[0];\n                if(attrib){\n                    Object.keys(attrib).filter(f=> (f != 'node') && (f != 'label') && (f != 'length') && (f != 'leaf')).map((att, i)=>{\n                        let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                        attrib[att].scales = scales;\n                        return att;\n                    })\n                }\n                let rooted = {\n                    V1: null,\n                    V2: attrib.node,\n                    node: attrib.node,\n                    leaf: attrib.leaf,\n                    root: true,\n                    edgeLength: 0,\n                    attributes: attrib ? attrib : null\n                }\n                path[0] = rooted;\n                return path;\n            });\n\n      \n        let normedPaths = combineLength(paths);\n\n        console.log('before bin',dataName)\n        let group = binGroups(normedPaths, dataName, calculatedScales, 8);\n        let chosenClade = addCladeGroup(dataName, ['Whole Set'], [{'label': dataName, 'paths': normedPaths, 'groupBins': group}]);\n        chosenCladesGroup.push(chosenClade)    \n\n        calculatedScalesKeeper.push(calculatedScales);\n        dataMaster.push(normedPaths);\n        nestedData.push(buildTreeStructure(normedPaths, matchedEdges));\n        speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.node));\n    \n        return [normedPaths, calculatedScales];\n}\n\n\nasync function dataLoadAndFormat(edgeFile, edgeLengthFile, leafCharFile, resFile, dataName){\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edges = await loadData(d3.json, `./public/data/${edgeFile}`, 'edge');\n    let leafChar = await loadData(d3.csv, `./public/data/${leafCharFile}`, '');\n    let edgeLen = await loadData(d3.json, `./public/data/${edgeLengthFile}`, 'edge');\n    let char = await loadData(d3.json, `./public/data/${resFile}`, '');\n\n    ///Creating attribute list to add estimated values in //\n\n    leafChar.columns.filter(f=> f != 'species').forEach((d, i)=> {\n\n        if(discreteTraitList.indexOf(d) > -1){\n            attributeList.push({field: d, type: 'discrete'});\n        }else{\n            attributeList.push({field: d, type:'continuous'});\n        }\n\n    });\n\n    edges.rows = edges.rows.filter(f=> f.From != \"\").map((edge, i)=> {\n        edge.edgeLength = edgeLen.rows[i].x;\n        return edge;\n    });  \n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.From);\n   \n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.To) == -1 );\n\n    let calculatedAtt = char.rows.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                   \n                    if(m.key.includes('upperCI')){\n                        values.upperCI95 = m.value;\n                    }else if(m.key.includes('lowerCI')){\n                        values.lowerCI95 = m.value;\n                    }else{\n                        values.realVal = m.value;\n                    }\n                }else{\n                     values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.nodeLabels;\n        return newRow;\n    });\n\n  \n    let calculatedScales = calculateNewScales(calculatedAtt, attributeList.map(m=> m.field), colorKeeper);\n\n    let matchedEdges = edges.rows.map((edge, i)=> {\n        let attrib = calculatedAtt.filter(f=> f.node === edge.To)[0]\n        if(attrib){\n            Object.keys(attrib).filter(f=> f != 'node').map((att, i)=>{\n                \n                let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                attrib[att].scales = scales;\n                return att;\n                \n            })\n        }\n        let newEdge = {\n            V1: edge.From,\n            V2: edge.To,\n            node: edge.To,\n            edgeLength: edge.edgeLength,\n            attributes: attrib ? attrib : null\n        }\n        return newEdge;\n    });\n\n\n    let calcLeafAtt = leafChar.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                    values.realVal = m.value;\n                }else{\n                    values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.species;\n        newRow.label = row.species;\n        \n        return newRow;\n    })\n\n\n    let matchedLeaves = leaves.map((leaf, i)=>{\n        let attrib = calcLeafAtt.filter(f=> f.node === leaf.To)[0]\n        if(attrib){\n            Object.keys(attrib).map((att, i)=>{\n                if(att!='node' && att != 'label'){\n                    let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                    attrib[att].scales = scales;\n                    return att;\n                }\n            });\n        }\n        let newEdge = {\n            V1: leaf.From,\n            V2: leaf.To,\n            node: leaf.To,\n            edgeLength: leaf.edgeLength,\n            attributes: attrib ? attrib : null,\n            group: null,\n            leaf: true\n        }\n        return newEdge;\n    });\n\n    let all = matchedEdges.filter(f=> f.attributes != null);\n\n    let paths = allPaths(all, matchedLeaves, \"V1\", \"V2\");\n    \n    let addedRoot = rootAttribute(paths, calculatedAtt, calculatedScales);\n\n    let normedPaths = combineLength(addedRoot);\n\n    if(cladesGroupKeeper.length === 0){\n        let attArray = calculatedScales.map(m=> m.field)\n        if(attArray.indexOf('Clade') > -1){\n            let groupData = groupDataByAttribute(calculatedScales, normedPaths, 'Clade');\n            let chosenClade = addCladeGroup('Clade Attribute', groupData.map(m=> m.label), groupData);\n            chosenCladesGroup.push(chosenClade)\n\n        }else{\n            let group = binGroups(normedPaths, dataName, calculatedScales, 8);\n            let chosenClade = addCladeGroup(dataName, ['Whole Set'], [{'label': dataName, 'paths': normedPaths, 'groupBins': group}]);\n            chosenCladesGroup.push(chosenClade)\n        }\n    }\n    \n\n    calculatedScalesKeeper.push(calculatedScales);\n    dataMaster.push(normedPaths);\n    nestedData.push(buildTreeStructure(normedPaths, all.concat(matchedLeaves)));\n    speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.node));\n\n    return [normedPaths, calculatedScales];\n}\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}