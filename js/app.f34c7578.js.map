{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/dataLoad.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/buttonComponents.js","webpack:///./src/scripts/cladeMaker.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/renderPathView.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/pairView.js","webpack:///./src/scripts/viewControl.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","loadData","readFunction","fileString","type","String","maxTimeKeeper","pairPaths","pathData","field","flatMap","path","filter","f","map","pair","verts","test","lastNode","p1Index","p2Index","p1","p2","distance","node","indexOf","common","d3","edgeLength","deltas","range","combLength","binCount","binStep","bins","Array","one","top","bottom","two","b","attributes","valdiffs","Math","abs","values","realVal","calculateDelta","closeness","leaf1","leaf","leaf2","calculateCloseness","calculateNewScales","keyList","colorKeeper","attData","color","undefined","max","upperCI95","min","lowerCI95","domain","clamp","scaleCat","sc","rootAttribute","paths","calculatedAtt","calculatedScales","rootAtt","keys","att","scales","root","combineLength","maxTime","formatAttributeData","filterArray","speciesLabel","species","catColor","move","edgeMove","label","yScale","satScale","colorScale","state","states","winState","stateColors","includes","attrLabel","st","console","error","allPaths","edgeArray","leafArray","source","target","le","getPath","pathKeeper","ed","reverse","pullPath","pathArray","nodes","arrayOfArray","nameArray","depth","forEach","childArray","id","children","assign","flag","dropDown","div","optionArray","dropText","dropId","dropdiv","append","classed","style","button","text","dropContent","attr","options","selectAll","join","on","raise","cladesGroupKeeper","chosenCladesGroup","addCladeGroup","clades","names","groups","groupDataByAttribute","groupAttr","log","groupKeys","scaleName","branchBinCount","group","groupBins","binGroups","drawTreeForGroups","renderCladeTree","margin","right","left","width","height","lengthHeight","select","createNewCladeGroup","cladeNames","each","e","rectTest","getBoundingClientRect","circPos","y","chosenGroup","cladeInfo","clade","groupDataByClade","getLatestData","updateMainView","renderTree","cladeToolbar","toolBar","inputGroup","minusButton","numberText","plusButton","nameWrap","addTextInputForGroups","index","remove","ind","rectGroup","rect","dragPos","this","dragY","rectY","rectH","num","sidebar","dimensions","treemap","size","addingEdgeLength","nestedData","treenodes","sidebarTest","treeSvg","empty","gTest","g","updateCladeTree","attrDraw","assignPosition","array","stepDown","child","findDepth","xScale","link","descendants","transition","duration","combEdge","position","parent","leaves","notleaves","scale","tool","html","charAt","toUpperCase","pageX","pageY","branchNodes","branchPoint","triangle","uncollapseSub","collapseSub","lengthBool","observedWidth","predictedWidth","squareDim","timeRange","brushColors","compareColors","defaultBarColor","colorBool","selectedClades","groupDistributions","mainDiv","renderDistStructure","groupLabel","branchCount","attrHide","filterMaster","attribute","newNormed","keysToHide","normBins","fill","step","internalNodes","leafNodes","rootNodes","edges","base","sortedBins","mapNorm","bin","fData","binI","leafAttr","leafData","x","histogram","thresholds","ticks","nodeArray","count","maxO","v","minO","xO","histogramO","stateKeys","rootNode","colors","entries","histo","h","x1","x0","drawBranchPointDistribution","svg","branchBar","binWrap","nodeLengthArray","nodeDuplicateCheck","bPointScale","pointGroups","eMove","binsRects","branches","axis","axGroup","pathGroups","shownAttributes","checked","filteredAttributes","branchScale","wrap","binnedWrap","selected","sum","cladeLabel","treeNode","treeLinks","testest","drawGroupLabels","divWrap","groupHeader","textDiv","branchPointSvg","concat","selectedNodes","from","Set","testNodes","testLinks","pathsListOne","pathsListTwo","testNodesOne","testLinksOne","testNodesTwo","testLinksTwo","startBins","mapBins","combined","groupKey","predictedWrap","rootData","contRoot","newy","disRoot","rootStateGroups","maxVal","branchGroup","discreteDist","discreteMiddleGroups","stateRects","av","stateBarsPredicted","mean","xMove","maxBin","maxState","continDist","newData","list","continBinGroups","maxCount","distrib","mirrorlineGen","lineGen","gindex","brush","extent","parentNode","selection","zero","classLabel","brushedVal","invert","nodeNames","continuousHistogram","pathGroup","brushedNodes","selectedBranch","secondGrp","doesItExist","datum","notNodes","renderDistributionComparison","renderDistibutions","stateBinsPredicted","disWrap","winPosArray","win","lineThing","rangeRect","brushedDist","otherDist","testH","observedWrap","contOb","contBars","movex","xvalues","discOb","discBars","dRects","xPoint","padding","notNodeNames","notNodeSelectedBranch","notTest","testtest","notTestTest","notNodeSecondGrp","curve","y0","y1","dat","selectedPaths","comparisonKeeper","pathSelected","selectedPath","otherPaths","selectedDiv","main","drawPathsAndAttributes","commonNodes","selectedSpecies","treeNodes","attrFilter","selectedToolTest","selectedTool","sortByDistanceDiv","sortByDistanceButton","sortButton","attrKeys","attrSortWrap","radioDiv","radio","svgTest","branchFrequency","row","reduce","acc","curr","selectWrap","circleScale","selectedGroups","addRemoveBubble","string","timelines","nodeGroups","hovers","nearest","attributeWrapper","attributeGroups","renderAttributes","drawContAtt","drawDiscreteAtt","sorted","sort","a","high","highLeaves","low","lowLeaves","commonNodeStart","maxBranch","thresh","chil","parentBase","scaledParentMove","parentScale","level","getCommonNodes","pathBars","childNodeWrap","childNodes","line","commonHover","renderSelectedTopology","attWrap","ch","mappedDis","offset","last","dis","spec","maxP","notMax","other","findMaxState","attGroups","wrapRect","speciesGrp","lineGenD","attributeHeight","lineGenC","branchGrpDis","sp","bCirc","otherCirc","branchGrpCon","MeanRect","confiBars","dataMaster","renderSelectedView","commonNode","chosenPath","pathIndex","sortOtherPaths","pathRemove","renderComparison","buttonGroupTest","buttonGroup","usedColors","groupColor","newColor","find","compareButtonTest","compareButton","comparisonCombined","newAtt","com","atts","added","standard","variance","first","second","filteredComp","selectedTest","attWraps","sqrt","meanStandard","sigma2","upCon95","lowCon95","exit","attWrapsEnter","enter","merge","innerWrap","missing","areaG","confGroups","conf","NaN","axisGroupTest","axisGroup","maxDiff","newScale","difArray","diffs","diff","obsDistWrap","newLeaves","xAxis","distGroups","groupLength","rectWidth","rectHeight","collapsedHeight","nodeTooltipFlag","collapsed","pathWrapTest","pathWrap","pathAdd","notIt","nodeFilter","renderPaths","attKeys","attrMove","predictedAttrGrps","attribWrap","sizeAndMove","selectedState","filterType","addFilterTag","addFilter","attributeType","nodeList","leafStateFilter","innerTimeline","change","innerPaths","continuousAtt","continuousPaths","attributeNodesCont","innerBars","drawGroups","stateBins","splitOnArray","newBins","newBinData","pa","firstGroupSvg","firstGroup","secondGroup","newM","groupLabels","stateLabel","innerGroup","innerWrapRect","wrappers","shiftWraps","xAxisShift","shiftCircles","leafWraps","totalVal","totalMean","newVal","groupMean","distcircles","dotVals","w","groupBy","totalArray","leafWrapsD","rects","groupedData","d3Array","ratio","drawLeaves","bars","discreteAtt","innerTimelineDis","statePath","disct","attributeNodesDisc","stateDots","endStateDot","stateBars","probability","chosenIn","valueAdd","toolbarControl","toolbar","normedPaths","pathView","viewArray","filterButton","filterDiv","moveMetric","selectWrapper","attButton","stateChange","attProps","selectedOption","optKeys","button1","button2","submit","fromState","classList","toState","discreteFilter","filterOb","continRanges","ranges","brushBars","xBrush","handle","brushGroup","selections","_groups","__brush","predictedFilter","observedFilter","lastFilter","continuousFilter","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","queryFilter","toggleFilters","scrunchButton","toggleScrunch","discreteViewButton","discretePredictedGroups","dropOptions","no","attributeOptions","checkedAttributes","updateRanking","pairs","weights","deltaMax","closeMax","distMax","deltaScale","closeScale","distScale","sortedPairs","delta","deltaRank","closenessRank","distanceRank","totalRank","pairColor","brushes","brushData","pairWraps","scoreWrap","scoreGroups","score","scoreLabel","pairGroupN","species1","species2","neighbors","start","speciesTest","speciesNames","labeledN","spec1N","spec2N","closest1","closest2","branchesN","pairGroup","xAxisG","neighNodes","mouseG","mousePerLine","mouse","xDate","bisect","getElementsByClassName","beginning","end","getTotalLength","floor","pos","getPointAtLength","toFixed","drawSorted","calculatedScalesKeeper","document","getElementById","disabled","rankDiv","defaultW","weightPicker","slider","slide","default","displayValue","rankingControl","drop","generatePairs","createCladeView","removeFilter","filterId","dataFilters","filterIndex","testData","fun","filterFunction","newTestData","newFilterMaster","attType","filFunction","oldData","extra","ex","filterToolbar","formater","nodeId","selectedNode","predicted","observed","numb","filterPred","filterObs","selectorDiv","selectId","dropDownWrapper","buildTreeStructure","getNested","V1","renderTreeButtons","treeViewButton","phenogramButton","_children","positionArray","edge","uncollapse","pheno","groupedBool","updateTree","treeData","getLeaves","ids","Clade","collapseTree","yAxis","savedSelected","attributeList","toolbarDiv","then","unique","self","edgeLen","char","rows","From","edgeSource","To","leafChar","newRow","nodeLabels","matchedEdges","attrib","V2","calcLeafAtt","matchedLeaves","all","addedRoot","groupData","chosenClade"],"mappings":"aACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAKlC,IAFGe,GAAqBA,EAAoBhB,GAEtCO,EAASC,QACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrBiB,EAAG,GAGAZ,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU8B,QAGnC,IAAIC,EAASH,EAAiB5B,GAAY,CACzCK,EAAGL,EACHgC,GAAG,EACHF,QAAS,IAUV,OANAhB,EAAQd,GAAUW,KAAKoB,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAG/DK,EAAOC,GAAI,EAGJD,EAAOD,QAKfJ,EAAoBO,EAAInB,EAGxBY,EAAoBQ,EAAIN,EAGxBF,EAAoBS,EAAI,SAASL,EAASM,EAAMC,GAC3CX,EAAoBY,EAAER,EAASM,IAClC5B,OAAO+B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEX,EAAoBgB,EAAI,SAASZ,GACX,oBAAXa,QAA0BA,OAAOC,aAC1CpC,OAAO+B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DrC,OAAO+B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKzC,OAAO0C,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBzC,OAAO+B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBS,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAL,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASgB,EAAQC,GAAY,OAAO/C,OAAOC,UAAUC,eAAeC,KAAK2C,EAAQC,IAGzG7B,EAAoB8B,EAAI,yBAExB,IAAIC,EAAaC,OAAqB,aAAIA,OAAqB,cAAK,GAChEC,EAAmBF,EAAW5C,KAAKuC,KAAKK,GAC5CA,EAAW5C,KAAOf,EAClB2D,EAAaA,EAAWG,QACxB,IAAI,IAAIvD,EAAI,EAAGA,EAAIoD,EAAWlD,OAAQF,IAAKP,EAAqB2D,EAAWpD,IAC3E,IAAIU,EAAsB4C,EAI1B1C,EAAgBJ,KAAK,CAAC,IAAI,IAEnBM,I,8QCrJF,SAAe0C,EAAtB,sC,qDAAO,WAAwBC,EAAcC,EAAYC,GAAlD,sGACcF,EAAaC,GAD3B,cACChE,EADD,QAEEiE,KAAOC,OAAOD,GAFhB,kBAGIjE,GAHJ,2C,4kBCAA,IAAMmE,EAAgB,GAGtB,SAASC,EAAUC,EAAUC,GAGhC,OAAOD,EAASE,SAAQ,SAACC,EAAMlE,GAK3B,OAJY+D,EAASI,QAAO,SAACC,EAAGlD,GAAJ,OAASA,GAAKlB,KACtBqE,KAAI,SAAClB,GACrB,MAAO,CAAC,GAAMe,EAAM,GAAMf,MAEhBkB,KAAI,SAAAzC,GAU1B,IAAqB0C,EACbC,EAEAC,EACAC,EAEAC,EACAC,EAEAC,EACAC,EAfI,OAJAjD,EAAEkD,UAUNP,GADaD,EATgB1C,GAUhBiD,GAAGR,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAE1BP,EAAOF,EAAKM,GAAGT,QAAO,SAAAC,GAAC,OAA6B,GAA1BG,EAAMS,QAAQZ,EAAEW,SAC1CN,EAAWD,EAAKA,EAAKtE,OAAS,GAAG6E,KAEjCL,EAAUJ,EAAKM,GAAGP,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAAMC,QAAQP,GAC1CE,EAAUL,EAAKO,GAAGR,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAAMC,QAAQP,GAE1CG,EAAKN,EAAKM,GAAGT,QAAO,SAACC,EAAGpE,GAAJ,OAASA,GAAK0E,KAClCG,EAAKP,EAAKO,GAAGV,QAAO,SAACC,EAAGpE,GAAJ,OAASA,GAAK2E,KAEtCL,EAAKW,OAASX,EAAKM,GAAGF,GAEfQ,IAAON,EAAGP,KAAI,SAAAzC,GAAC,OAAGA,EAAEuD,eAAeD,IAAOL,EAAGR,KAAI,SAAAzC,GAAC,OAAGA,EAAEuD,gBAtBtDvD,EAAEwD,OAyBd,SAAwBd,EAAMN,GAE1B,IAAIO,EAAQD,EAAKO,GAAGR,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAE1BP,EAAOF,EAAKM,GAAGT,QAAO,SAAAC,GAAC,OAA6B,GAA1BG,EAAMS,QAAQZ,EAAEW,SAC1CN,EAAWD,EAAKA,EAAKtE,OAAS,GAAG6E,KAEjCL,EAAUJ,EAAKM,GAAGP,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAAMC,QAAQP,GAC1CE,EAAUL,EAAKO,GAAGR,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAAMC,QAAQP,GAE1CG,EAAKN,EAAKM,GAAGT,QAAO,SAACC,EAAGpE,GAAJ,OAASA,GAAK0E,KAClCG,EAAKP,EAAKO,GAAGV,QAAO,SAACC,EAAGpE,GAAJ,OAASA,GAAK2E,KAGlCU,EAAQxB,EAAc,GAAKe,EAAG,GAAGU,WACjCC,EAAWL,IAAO,CAACN,EAAG1E,OAAQ2E,EAAG3E,SACjCsF,EAAUH,EAAQE,EAElBE,EAAO,EAAI,IAAIC,MAAMH,EAAS,IAAIlB,KAAI,SAACvC,EAAG9B,GAC1C,MAAO,CAAC,OAAU4E,EAAG,GAAGU,WAActF,EAAEwF,EAAU,IAAOZ,EAAG,GAAGU,YAAetF,EAAE,GAAGwF,MAiC3F,OAtBIC,GARAA,EAAOA,EAAKpB,KAAI,SAACvC,EAAG9B,GAChB,IAAI2F,EAAMf,EAAGT,QAAO,SAAAC,GAAC,OAAIA,EAAEkB,YAAcxD,EAAE8D,KAASxB,EAAEkB,YAAcxD,EAAE+D,UAClEC,EAAMjB,EAAGV,QAAO,SAAAC,GAAC,OAAIA,EAAEkB,YAAcxD,EAAE8D,KAASxB,EAAEkB,YAAcxD,EAAE+D,UAGtE,OAFA/D,EAAE6D,IAAMA,EACR7D,EAAEgE,IAAMA,EACDhE,MAGCuC,KAAI,SAAC0B,EAAG/F,GAQhB,OAPoB,IAAjB+F,EAAEJ,IAAIzF,SACL6F,EAAEJ,IAAMF,EAAKzF,EAAE,GAAG2F,KAEF,IAAjBI,EAAED,IAAI5F,SACL6F,EAAED,IAAML,EAAKzF,EAAE,GAAG8F,KAGfC,KAGMb,IAAWN,EAAG,GAAGoB,YACjB7B,QAAO,SAAAC,GAAC,MAAqB,eAAjBA,EAAE5B,MAAMmB,QACpBU,KAAI,SAAAzC,GACD,IAAIG,EAAOH,EAAEkB,IACTmD,EAAWR,EAAKpB,KAAI,SAAC0B,EAAG/F,GACxB,OAAOkG,KAAKC,IAAIJ,EAAEJ,IAAI,GAAGK,WAAWjE,GAAMqE,OAAOC,QAAUN,EAAED,IAAI,GAAGE,WAAWjE,GAAMqE,OAAOC,YAGhG,OADAzE,EAAEY,MAAQ0C,IAAOe,GACVrE,KA1ER0E,CAAe1E,GAC1BA,EAAE2E,UAgFd,SAA4BjC,EAAMN,GAEjC,IAAIwC,EAAQlC,EAAKM,GAAGT,QAAO,SAAAhB,GAAC,OAAc,IAAXA,EAAEsD,QAAe,GAAGT,WAC/CU,EAAQpC,EAAKO,GAAGV,QAAO,SAAAhB,GAAC,OAAc,IAAXA,EAAEsD,QAAe,GAAGT,WAEnD,OAAOd,IAAWsB,GAAOrC,QAAO,SAAAC,GAAC,MAAoB,eAAjBA,EAAE5B,MAAMmB,QAAuBU,KAAI,SAAAzC,GAInE,OAFAA,EAAEY,MAAQ0D,KAAKC,IAAIvE,EAAEY,MAAM4D,OAAOC,QAAUK,EAAM9E,EAAEkB,KAAKsD,OAAOC,SAEzDzE,KAzFc+E,CAAmB/E,GAE1BA,QA2FZ,SAASgF,EAAmBZ,EAAYa,EAASC,GAEpD,OAAOD,EAAQxC,KAAI,SAACvC,EAAG9B,GAEnB,IAAI+G,EAAUf,EAAW/B,SAAQ,SAAAG,GAAC,OAAGA,EAAEtC,MACnCkF,EAA0BC,MAAlBH,EAAY9G,GAAkB8G,EAAY9G,GAAG,GAAK8G,EAAY,GAAG,GAE7E,GAAsB,cAAnBC,EAAQ,GAAGpD,KAAqB,CAE/B,IAAIuD,EAAMhC,IAAO6B,EAAQ9C,SAAQ,SAAArC,GAAC,OAAGA,EAAEwE,OAAOe,cAC1CC,EAAMlC,IAAO6B,EAAQ9C,SAAQ,SAAArC,GAAC,OAAGA,EAAEwE,OAAOiB,cACnCnC,IAAQ6B,EAAQ9C,SAAQ,SAAArC,GAAC,OAAGA,EAAEwE,OAAOC,YAEhD,MAAO,CACH,MAASvE,EACT,KAAO,aACP,IAAOoF,EACP,IAAQE,EACR,OAAUlC,MAAiBG,MAAM,CAAC,EAAG,KAAKiC,OAAO,CAACF,EAAKF,IAAMK,OAAM,GACnE,SAAYrC,MAAiBG,MAAM,CAAC,EAAG,KAAKiC,OAAO,CAACF,EAAKF,IACzD,WAAchC,MAAiBG,MAAM,CAAC2B,EAAO,YAAYM,OAAO,CAACF,EAAKF,IACtE,SAAYF,GAGhB,IAAIQ,EAAWtC,IAAQ6B,EAAQ,GAAGX,QAClC,MAAO,CACH,MAAStE,EACT,KAAO,WACP,YAAe0F,EAASnD,KAAI,SAACoD,EAAIvG,GAC7B,MAAO,CAAC,MAASuG,EAAI,MAASX,EAAY5F,GAAG,OAEjD,SAAY8F,EACZ,OAAUQ,EAASnD,KAAI,SAAAoD,GAKvB,MAAO,CACH,MAAS3F,EACT,UANY2F,EAOZ,IALM,EAMN,IALM,EAMN,OAAUvC,MAAiBG,MAAM,CAAC,GAAI,IAAIiC,OAAO,CAN3C,EADA,YAqJnB,SAASI,EAAcC,EAAOC,EAAeC,GAEhD,IAAIC,EAAUF,EAAczD,QAAO,SAAAC,GAAC,OAAGA,EAAEW,OAAS4C,EAAM,GAAG,GAAG5C,QAAM,GAMpE,OAJA5E,OAAO4H,KAAKD,GAAS3D,QAAO,SAAAC,GAAC,MAAQ,QAALA,KAAaC,KAAI,SAAA2D,GAC7CF,EAAQE,GAAKC,OAASJ,EAAiB1D,QAAO,SAAAC,GAAC,OAAGA,EAAEJ,QAAUgE,KAAK,MAGhEL,EAAMtD,KAAI,SAAClB,EAAGnD,GAGjB,OAFAmD,EAAE,GAAG6C,WAAa8B,EAClB3E,EAAE,GAAG+E,MAAO,EACL/E,KAKR,SAASgF,EAAcR,GAE1B,IAAIS,EAAUT,EAAMtD,KAAI,SAAAH,GAAI,OAAGgB,IAAOhB,EAAKG,KAAI,SAAAlB,GAAC,OAAGA,EAAEgC,kBAAc,GAEnE,OADAtB,EAAcrD,KAAK4H,GACZT,EAAMtD,KAAI,SAAAH,GACb,OAAOA,EAAKG,KAAI,SAACU,EAAM/E,EAAGgD,GAGtB,OAFA+B,EAAKqD,QAAUA,EACfrD,EAAKO,WAAaJ,IAAOlC,EAAEmB,QAAO,SAACC,EAAGlD,GAAJ,OAASlB,GAAKkB,KAAGmD,KAAI,SAAAzC,GAAC,OAAGA,EAAEuD,eACtDJ,QA8EZ,SAASsD,EAAoBtE,EAAUkE,EAAQK,GAElD,IAAIP,EAAuB,MAAfO,EAAsBnI,OAAO4H,KAAKhE,EAAS,GAAG,GAAGiC,YAAY7B,QAAO,SAAAC,GAAC,MAAQ,QAALA,KAAckE,EAsElG,OApEcvE,EAASM,KAAI,SAAAH,GACvB,OAAO6D,EAAK1D,KAAI,SAACvB,GACb,OAAOoB,EAAKG,KAAI,SAACzC,GACb,IAAI2G,EAAerE,EAAKA,EAAKhE,OAAS,GAAG6E,KAEzC,GAA8B,eAA3BnD,EAAEoE,WAAWlD,GAAKa,KAgBjB,OAfA/B,EAAEoE,WAAWlD,GAAK0F,QAAUD,EAC5B3G,EAAEoE,WAAWlD,GAAKkE,MAAQiB,EAAO9D,QAAO,SAAAC,GAAC,OAAGA,EAAEJ,QAAUlB,KAAK,GAAG2F,SAChE7G,EAAEoE,WAAWlD,GAAK4F,KAAO9G,EAAEuG,cAC3BvG,EAAEoE,WAAWlD,GAAKwC,WAAa1D,EAAE0D,WACjC1D,EAAEoE,WAAWlD,GAAKiC,KAAOnD,EAAEmD,KAC3BnD,EAAEoE,WAAWlD,GAAK6F,SAAW/G,EAAEuD,WAC/BvD,EAAEoE,WAAWlD,GAAKqC,WAAavD,EAAEuD,WACjCvD,EAAEoE,WAAWlD,GAAK8F,MAAQ9F,EAC1BlB,EAAEoE,WAAWlD,GAAK+F,OAASjH,EAAEoE,WAAWlD,GAAKmF,OAAOY,OACpDjH,EAAEoE,WAAWlD,GAAKgG,SAAWlH,EAAEoE,WAAWlD,GAAKmF,OAAOa,SACtDlH,EAAEoE,WAAWlD,GAAKiG,WAAanH,EAAEoE,WAAWlD,GAAKmF,OAAOc,WACrDnH,EAAE6E,OACD7E,EAAEoE,WAAWlD,GAAK2D,KAAO7E,EAAE6E,MAE/B7E,EAAEoE,WAAWlD,GAAK2D,KAAO7E,EAAE6E,KACpB7E,EAAEoE,WAAWlD,GAClB,GAA8B,aAA3BlB,EAAEoE,WAAWlD,GAAKa,KAAoB,CAC3C,GAAG/B,EAAE6E,KAAK,CACOvB,IAAWtD,EAAEoE,WAAWlD,GAAKsD,QAE1CxE,EAAEoE,WAAWlD,GAAK2D,KAAO7E,EAAE6E,KAC3B,IAAIuC,EAAQpH,EAAEoE,WAAWlD,GAczB,OAbAkG,EAAMC,OAAS,CAACjF,MAAOlB,EAAKkG,MAAOpH,EAAEoE,WAAWlD,GAAKsD,OAAOtD,IAC5DkG,EAAMR,QAAUD,EAChBS,EAAME,SAAWtH,EAAEoE,WAAWlD,GAAKsD,OAAOtD,GAAQlB,EAAEoE,WAAWlD,GAAKsD,OAAOtD,GAAOoC,IAAWtD,EAAEoE,WAAWlD,GAAKsD,QAC/G4C,EAAMhC,MAAQpF,EAAEoE,WAAWlD,GAAKmF,OAAOkB,YAAYhF,QAAO,SAAAC,GACtD,OAAOA,EAAE4E,MAAMI,SAASJ,EAAME,aAAY,GAAGlC,MAGjDgC,EAAMN,KAAO9G,EAAE0D,WACf0D,EAAM1D,WAAa1D,EAAE0D,WACrB0D,EAAMjE,KAAOnD,EAAEmD,KACfiE,EAAML,SAAW/G,EAAEuD,WACnB6D,EAAM7D,WAAavD,EAAEuD,WACrB6D,EAAMK,UAAYvG,EACXkG,EAIP,OAFapH,EAAEoE,WAAWlD,GAAKmG,OAASrH,EAAEoE,WAAWlD,GAAKmG,OAAS/D,IAAWtD,EAAEoE,WAAWlD,GAAKsD,SAElF/B,KAAI,SAACiF,EAAIpI,GAanB,OAZAoI,EAAGN,MAAQM,EAAGxG,IACdwG,EAAG9G,MAAQ8G,EAAG9G,MAEd8G,EAAGtC,MAAQpF,EAAEoE,WAAWlD,GAAKmF,OAAOkB,YAAYhF,QAAO,SAAAC,GAAC,OAAGA,EAAE4E,QAAUM,EAAGxG,OAAK,GAE/EwG,EAAGZ,KAAO9G,EAAE0D,WACZgE,EAAGhE,WAAa1D,EAAE0D,WAClBgE,EAAGvE,KAAOnD,EAAEmD,KACZuE,EAAGX,SAAW/G,EAAEuD,WAChBmE,EAAGnE,WAAavD,EAAEuD,WAClBmE,EAAGD,UAAYvG,EACfwG,EAAGd,QAAUD,EACNe,KAKfC,QAAQC,MAAM,qC,0WCvc3B,SAASC,EAASC,EAAWC,EAAWC,EAAQC,GACnD,OAAOF,EAAUtF,KAAI,SAAAyF,GAAE,OA4DpB,SAASC,EAAQL,EAAWjD,EAAMuD,EAAYJ,EAAQC,GAEzD,IAAI3F,EAAOwF,EAAUvF,QAAO,SAAA8F,GACxB,OAAOA,EAAGJ,KAAYpD,EAAKmD,MAG/B,OAAG1F,EAAKhE,OAAS,GACb8J,EAAWxJ,KAAK0D,EAAK,IACd6F,EAAQL,EAAWxF,EAAK,GAAI8F,EAAYJ,EAAQC,KAEvDG,EAAWxJ,KAAK,CAAC,MAAQ,EAAM,KAAQiG,EAAKmD,GAAS,WAAc,IAC5DI,EAAWE,WAvEIH,CAAQL,EAAWI,EAAI,CAACA,GAAKF,EAAQC,MAoF5D,SAASM,EAASC,EAAWC,EAAOC,EAAcC,EAAWC,GAehE,OAbAH,EAAMI,SAAQ,SAAC1F,EAAM/E,GAgBzB,IAAkB0K,EAfV3F,EAAKyF,MAAQA,EACbzF,EAAK4F,GAAKH,EAAQ,IAAMxK,EAeXiH,OADHyD,EAZE3F,EAAK6F,WAeS,GAArBF,EAAWxK,QAdZkK,EAAU5J,KAAKL,OAAO0K,OAAO,GAAI9F,IACjCoF,EAAS,EAAIC,GAAL,EAAqBrF,EAAK6F,UAAWN,EAAcC,EAAWC,EAAM,KAE5ED,EAAU/J,KAAKuE,EAAKrF,KAAKqF,MACzBA,EAAK+F,MAAO,EACZR,EAAa9J,KAAb,YAAsB4J,GAAtB,CAAiCjK,OAAO0K,OAAO,GAAG9F,UAGnDuF,E,oDCzGJ,SAASS,EAASC,EAAKC,EAAaC,EAAUC,GACjD,IAAIC,EAAUJ,EAAIK,OAAO,OAAOC,QAAlB,mBAAsCH,IAAU,GAC9DC,EAAQG,MAAM,UAAW,gBACzB,IAAIC,EAASJ,EAAQC,OAAO,UAAUC,QAAQ,6CAA6C,GAAMG,KAAKP,GAClGQ,EAAcN,EAAQC,OAAO,OAAOM,KAAK,KAAMR,GAAQG,QAAQ,oBAAoB,GACvFI,EAAYL,OAAO,KAAKI,KAAK,QAAQE,KAAK,YAAa,IACvD,IAAIC,EAAUF,EAAYG,UAAU,KAAKnM,KAAKuL,GAAaa,KAAK,KAAKL,MAAK,SAAA3J,GAAC,OAAGA,EAAEkC,SAYhF,OAVA4H,EAAQG,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GAAP,OAAY0I,EAAYJ,QAAQ,QAAQ,MAE5DE,EAAOO,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACnB0I,EAAYJ,QAAQ,QACnBI,EAAYJ,QAAQ,QAAQ,GAE5BI,EAAYJ,QAAQ,QAAQ,MAGpCM,EAAQI,QACDJ,E,4TCXJ,IAAMK,EAAoB,GACpBC,EAAoB,GAQ1B,SAASC,EAAcpK,EAAMqK,EAAQ/B,GAExC,OADA4B,EAAkBzL,KAAK,CAACwD,MAAOjC,EAAMsK,MAAOD,EAAQE,OAAOjC,IACpD,CAACrG,MAAOjC,EAAMsK,MAAOD,EAAQE,OAAOjC,GAOxC,SAASkC,EAAqBtE,EAAQvI,EAAM8M,GAE/CjD,QAAQkD,IAAI,SAAUxE,GAEtB,IAAIyE,EAAYzE,EAAO9D,QAAO,SAAAC,GAAC,OAAGA,EAAEJ,QAAUwI,KAAW,GAAGvE,OAAO5D,KAAI,SAAA/C,GAAC,OAAGA,EAAEqL,aAEzEC,EAAiB1H,IAAUxF,EAAK2E,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAAWgF,IAAOxF,EAAK2E,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAE/E,OAAOwM,EAAUrI,KAAI,SAAAwI,GACjB,IAAIlF,EAAQjI,EAAKyE,QAAO,SAAAD,GACpB,OAAO2I,EAAMzD,SAASlF,EAAKA,EAAKhE,OAAS,GAAG8F,WAAWwG,GAAWpG,OAAOoG,OAGzEM,EAAYC,EAAUpF,EAAOkF,EAAO5E,EAAQ2E,GAChD,MAAO,CAAC,MAASC,EAAO,MAASlF,EAAO,UAAamF,MAqBtD,SAAeE,EAAtB,kC,iDAAO,WAAiChC,GAAjC,sFASHiC,EAAgBjC,EAAK,KAPD,CAChBkC,OAAS,CAACtH,IAAK,GAAIuH,MAAO,GAAItH,OAAQ,GAAIuH,KAAM,IAChDC,MAAQ,IACRC,OAAS,IACTC,aAAc,MAKd9G,EAAOuE,EAAIwC,OAAO,aAAa3B,UAAU,eACnCpF,EAuHJ4E,OAAO,QACZI,MAAK,SAAA3J,GAAC,OAAGA,EAAEpC,KAAKqF,QAChB4G,KAAK,YAAa,GAClBA,KAAK,IAAK,GACVA,KAAK,IAAK,GAzHXX,EAAIwC,OAAO,aAAalC,QAAQ,cAAc,GAAMD,OAAO,KAAKC,QAAQ,iBAAiB,GAdtF,4C,sBAiBP,SAASmC,EAAoBzC,EAAK/C,GAC9B,IAAIyF,EAAa,GACbtB,EAAS,GACblH,IAAa,eAAeyI,MAAK,SAACC,EAAG5N,EAAGgD,GACrC0K,EAAWlN,KAAKwC,EAAEhD,GAAGwC,OACrB,IAAIqL,EAAW3I,IAAA,gBAAmBlF,EAAI,IAAK+E,OAAO+I,wBAC9CzD,EAAQW,EAAIwC,OAAO,wBAAwB3B,UAAU,eAAe1H,QAAO,SAACC,EAAGlD,EAAG6D,GAClF,IAAIgJ,EAAUhJ,EAAK7D,GAAG4M,wBACtB,OAAOC,EAAQC,GAAKH,EAASG,EAAE,GAAKD,EAAQC,GAAOH,EAASG,EAAIH,EAASP,OAAU,KAEvFjD,EAAMmD,OAAO,UAAU7B,KAAK,OAAQ,OACpCS,EAAO5L,KAAK,CAAC,MAASwC,EAAEhD,GAAGwC,MAAQ,MAAS6H,EAAM3K,OAAO2E,KAAI,SAAAzC,GAAC,OAAGA,EAAElC,aAGtE,IDtE2BuL,EAAaE,ECuEpC8C,EAAc9B,EADFjH,IAAU,eAAeH,OAAOvC,MACLkL,EAAYtB,GDvE5BnB,ECwEZgB,EDxEyBd,ECwEN,eDvElCjG,IAAA,WAAciG,IAAUU,UAAU,KAAKnM,KAAKuL,GAAaa,KAAK,KAAKL,MAAK,SAAA3J,GAAC,OAAGA,EAAEkC,SCwE9E,IAAIsI,EAjDD,SAA0BrE,EAAQvI,EAAMwO,GAE3C,IAAItB,EAAiB1H,IAAUxF,EAAK2E,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAAWgF,IAAOxF,EAAK2E,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAE/E,OAAOgO,EAAU5B,OAAOjI,KAAI,SAAAwI,GACxB,IAAIlF,EAAQjI,EAAKyE,QAAO,SAAAD,GACpB,OAAO2I,EAAMxC,MAAMrF,QAAQd,EAAKA,EAAKhE,OAAS,KAAO,KAGrD4M,EAAYC,EAAUpF,EAAOkF,EAAO5E,EAAQ2E,GAChD,MAAO,CAAC,MAASC,EAAMsB,MAAO,MAASxG,EAAO,UAAamF,MAuClDsB,CAAiBnG,EAAQoG,KAAiBJ,GAEvD/I,IAAU,0BAA0BsI,OAAO,UAAU/B,KAArD,wBAA2EwC,EAAYjK,QAEvFsK,GAAe,eAAgBhC,GAE/BiC,GAAWrJ,IAAU,YAAa,MAAM,GAAM,GAGlD,SAASsJ,EAAaxD,EAAK/C,GAEvB,IAAIwG,EAAUzD,EAAIK,OAAO,OAAOC,QAAQ,iBAAiB,GACzCmD,EAAQpD,OAAO,SAC9BC,QAAQ,cAAc,GACtBK,KAAK,OAAQ,QACbA,KAAK,QAAS,mBAEW8C,EAAQpD,OAAO,UAAUI,KAAK,mBACpCM,GAAG,SAAS,kBAAK0B,EAAoBzC,EAAK/C,MAE9D,IAAIyG,EAAaD,EAAQpD,OAAO,OAAOC,QAAQ,kCAAkC,GAC7EqD,EAAcD,EAAWrD,OAAO,UAAUI,KAAK,KAE/CmD,EAAaF,EAAWrD,OAAO,SAC9BM,KAAK,QAAS,GACdA,KAAK,MAAO,GACZA,KAAK,MAAO,IACZA,KAAK,OAAQ,UACbL,QAAQ,gBAAgB,GAEzBuD,EAAaH,EAAWrD,OAAO,UAAUI,KAAK,KAE9CqD,EAAWJ,EAAWrD,OAAO,OAAOC,QAAQ,mBAAmB,GAenE,SAASyD,EAAsBC,EAAOF,GAElCA,EAASjD,UAAU,KAAKoD,SACxB/J,IAAa,kBAAkB2G,UAAU,QAAQoD,SACjD,IAJ2C,eAInCC,GACJJ,EAASzD,OAAO,SACfC,QAAQ,cAAc,GACtBK,KAAK,QAFN,gBAEwBuD,EAAI,IAC3BvD,KAAK,OAAQ,QAEd,IAAIwD,EAAYjK,IAAU,kBAAkBmG,OAAO,KAAKC,QAAxC,gBAAyD4D,IAAO,GAE5EE,EAAOD,EAAU9D,OAAO,QAC3BC,QADU,eACM4D,EAAM,IAAK,GAC3BvD,KAAK,SAAU,KACfA,KAAK,QAAS,KACdA,KAAK,UAAW,IAChBA,KAAK,aAAc,SAAC7J,EAAG9B,EAAGgD,GAAP,0BAAyB,EAAzB,IAAgC,IAAMgM,EAASE,EAA/C,QAEJC,EAAU9D,OAAO,QAAQM,KAAK,QAA9B,iBAAiDuD,IAChEvD,KAAK,QAAS,KACdA,KAAK,SAAU,IACfA,KAAK,IAAKyD,EAAKrK,OAAO+I,wBAAwBE,EAAI,IAClDrC,KAAK,UAAW,GAChBrL,KAAK4E,MACL6G,GAAG,QAAQ,WACR,IAAIsD,EAAUnK,IAASoK,MACnBC,EAAQrK,IAAS8I,EACrB9I,IAAUoK,MAAM3D,KAAK,IAAK0D,EAAQ,IAClC,IAAI/B,GAAUpI,IAAA,gBAAmBgK,EAAM,IAAKvD,KAAK,UAC7C6D,EAAQtK,IAAA,gBAAmBgK,EAAM,IAAKnK,OAAO+I,wBAAwBjI,OACzEX,IAAA,gBAAmBgK,EAAM,IAAKvD,KAAK,SAAU2B,GAAUiC,EAAMC,GAAS,QAG1EJ,EAAK9O,KAAK4E,MAAU6G,GAAG,QAAQ,WAC3B,IAAIsD,EAAUnK,IAASoK,MACnBC,EAAQrK,IAAS8I,EACrB9I,IAAUoK,MAAM3D,KAAK,IAAK0D,EAAQ,IAClC,IAAII,EAAQvK,IAAA,gBAAmBgK,EAAM,IAAKnK,OAAO+I,wBAAwBR,OACzEpI,IAAA,kBAAqBgK,IAAOvD,KAAK,IAAK4D,GAASE,EAAQ,UAnCvDP,EAAM,EAAGA,EAAMF,EAAOE,GAAY,EAAE,EAApCA,GAlBZP,EAAY5C,GAAG,SAAS,WACpB,IAAI2D,EAAMd,EAAWjD,KAAK,SAC1BiD,EAAWjD,KAAK,SAAU+D,EAAM,GAChCX,GAAuBH,EAAWjD,KAAK,SAAUmD,MAGrDD,EAAW9C,GAAG,SAAS,WACnB,IAAI2D,EAAMd,EAAWjD,KAAK,SAC1BiD,EAAWjD,KAAK,SAAU+D,EAAM,GAChCX,GAAuBH,EAAWjD,KAAK,SAAUmD,MAGrDC,GAAuBH,EAAWjD,KAAK,SAAUmD,G,iDA2D9C,WAA+B9D,EAAK/C,GAApC,gFACH+E,EAAkBhC,GAClBwD,EAAaxD,EAAK/C,GAFf,4C,sBAKA,SAASgF,EAAgB0C,EAAS3H,EAAK4H,GAG1C,IAAIC,EAAU3K,MACb4K,KAAK,CAACF,EAAWtC,OAAQsC,EAAWvC,QAErC0C,GAAiB,EAAGC,GAAW,IAG/B,IAAIC,EAAY/K,IAAa8K,GAAW,IAGxCC,EAAYJ,EAAQI,GAEpB,IAAIC,EAAcP,EAAQnC,OAAO,OAC7B2C,EAAUD,EAAYE,QAAUT,EAAQtE,OAAO,OAAS6E,EAC5DC,EAAQ7E,QAAQ,YAAY,GAC5B6E,EAAQxE,KAAK,QAASiE,EAAWvC,MAAQuC,EAAW1C,OAAOE,KAAOwC,EAAW1C,OAAOC,OACnFxB,KAAK,SAAUiE,EAAWtC,OAASsC,EAAW1C,OAAOtH,IAAMgK,EAAW1C,OAAOrH,QAE9E,IAAIwK,EAAQF,EAAQ3C,OAAO,YACvB8C,EAAID,EAAMD,QAAUD,EAAQ9E,OAAO,KAAKC,QAAQ,UAAU,GAAQ+E,EACtEC,EAAE3E,KAAK,YACL,aAAeiE,EAAW1C,OAAOE,KAAO,IAAMwC,EAAW1C,OAAOtH,IAAM,KAwBrE,SAAS2K,EAAgBN,EAAWL,EAAYO,EAASG,EAAGE,EAAUtQ,GAEzEuQ,GAAeR,EAAW,GAE3B,IAAIzL,EAAO6J,MAlBP,SAAmBtJ,EAAM2L,IAC5B,SAASC,EAAS3N,GACG,MAAdA,EAAE4H,SACD5H,EAAE4H,SAASH,SAAQ,SAAAmG,GACfD,EAASC,MAGbF,EAAMlQ,KAAKwC,IAGnB2N,CAAS5L,GAUS8L,CAAUZ,EAAW,IACvC,IAAIa,EAAS5L,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAGuK,EAAWvC,QAAQ9F,OAAM,GAC/F,IAAIsB,EAAS3D,MAAiBG,MAAM,CAACuK,EAAWtC,OAAQ,IAAIhG,OAAO,CAAC,EAAG,IAEpEpH,IACCoQ,EAAE3E,KAAK,YAAa,sBACpBwE,EAAQxE,KAAK,SAAU,KACvB9C,EAAOxD,MAAM,CAAC,IAAK,IAAIiC,OAAO,CAAC,EAAG9C,EAAKtE,OAAO,KAC9C4Q,EAAOzL,MAAM,CAAC,EAAG,OAIrB,IAAI0L,EAAOT,EAAEzE,UAAU,SACtBnM,KAAMuQ,EAAUe,cAAczN,MAAM,IACpCuI,KAAK,QACLH,KAAK,QAAS,QAEfoF,EAAKE,aACJC,SAAS,KACTvF,KAAK,KAAK,SAAS7J,GAEb,MAAO,IAAMgP,EAAOhP,EAAEpC,KAAKyR,UAAY,IAAMtI,EAAO/G,EAAEsP,UACpD,KAAON,EAAOhP,EAAEpC,KAAKyR,UAAYL,EAAOhP,EAAEuP,OAAO3R,KAAKyR,WAAa,EAAI,IAAMtI,EAAO/G,EAAEsP,UACtF,IAAON,EAAOhP,EAAEuP,OAAO3R,KAAKyR,UAAa,IAAMtI,EAAO/G,EAAEsP,UACxD,IAAMN,EAAOhP,EAAEuP,OAAO3R,KAAKyR,UAAY,IAAMtI,EAAO/G,EAAEuP,OAAOD,aAKtE,IAAIrM,EAAOuL,EAAEzE,UAAU,SACtBnM,KAAKuQ,EAAUe,eAAe,SAAAlP,GAAC,OAAIA,EAAEpC,KAAKqF,QAC1C+G,KAAK,KACLH,KAAK,SAAS,SAAS7J,GACxB,MAAO,QACNA,EAAE8I,SAAW,kBAAoB,kBAGlC7F,EAAK8G,UAAU,UAAUnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,MAAIgK,KAAK,UACzCH,KAAK,IAAK,GAEb5G,EAAKkM,aACJC,SAAS,KACTvF,KAAK,aAAa,SAAS7J,GAEpB,MAAO,aAAegP,EAAOhP,EAAEpC,KAAKyR,UAAY,IAAMtI,EAAO/G,EAAEsP,UAAY,OAInF,GAAe,MAAZZ,EAAiB,CAChB,IAAIc,EAASvM,EAAKZ,QAAO,SAAAnB,GAAC,OAAmB,IAAhBA,EAAEtD,KAAK+G,QAChC8K,EAAYxM,EAAKZ,QAAO,SAAAnB,GAAC,OAAkB,GAAfA,EAAEtD,KAAK+G,QAEvC,GAAqB,aAAlB+J,EAAS7M,KACR6M,EAASrH,YAAYsB,SAAQ,SAAAzC,GACdsJ,EAAOnN,QAAO,SAAAC,GACrB,OAAO4D,EAAIgB,MAAMI,SAAShF,EAAE1E,KAAKsG,WAAWwK,EAASxM,OAAOiF,OAAOD,UACpEwE,OAAO,UACL7B,KAAK,OAAQ3D,EAAIhB,OACtBuK,EAAU1F,UAAU,UAAUF,KAAK,OAAQ,eAE9C,CACD,IAAI6F,EAAQhB,EAAS3H,OACrB2I,EAAMnM,MAAM,CAAC,OAAQ,YACrBiM,EAAO9D,OAAO,UAAU7B,KAAK,QAAQ,SAAC7J,EAAG9B,GACrC,OAAOwR,EAAM1P,EAAEpC,KAAKsG,WAAWwK,EAASxM,OAAOoC,OAAOC,kBAI9DtB,EAAK8G,UAAU,UAAUF,KAAK,OAAQ,QAG1C5G,EAAKgH,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GACxB,IAAI2E,EAAQzC,IAAU,mBAAmB2G,UAAU,UAWnD,GAVa3G,IAAU,sBAAsB2G,UAAU,kBAChD1H,QAAO,SAAAC,GAAC,OAAGA,EAAEW,OAASjD,EAAEpC,KAAKqF,QAAMuG,QAAQ,YAAY,GAE1C3D,EAAMxD,QAAO,SAAAD,GAE7B,OADYA,EAAKG,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QACdC,QAAQlD,EAAEpC,KAAKqF,OAAS,KACtCuG,QAAQ,SAAS,GACNO,UAAU,KAAK1H,QAAO,SAAAmM,GAAC,OAAGA,EAAEvL,OAASjD,EAAEpC,KAAKqF,QAAMuG,QAAQ,YAAY,GACpFpG,IAAUlC,EAAEhD,IAAIsL,QAAQ,mBAAmB,GAExCxJ,EAAEpC,KAAKkJ,MAAM,CACZ,IAAI6I,EAAOvM,IAAU,YACrBuM,EAAKR,aACJC,SAAS,KACT3F,MAAM,UAAW,IAElBkG,EAAKC,KAAL,UAAa5P,EAAEpC,KAAKkJ,MAAM+I,OAAO,GAAGC,cAAgB9P,EAAEpC,KAAKkJ,MAAMrF,MAAM,KACtEgI,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MACtCL,EAAKlG,MAAM,SAAU,YAG1BQ,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAa,gBAAgBoG,QAAQ,SAAS,GAC9CpG,IAAa,cAAcoG,QAAQ,YAAY,GAC/CpG,IAAUlC,EAAEhD,IAAIsL,QAAQ,mBAAmB,GAEhCpG,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAEXxG,EAAKZ,QAAO,SAAAC,GAAC,OAA6B,GAA1BA,EAAE1E,KAAKkL,SAAS1K,UAE7C6E,EAAK8G,UAAU,QAAQoD,SACvBlK,EAAK8G,UAAU,aAAaoD,SAE5B,IAAI8C,EAAchN,EAAKZ,QAAO,SAAAnB,GAAC,OAAqB,IAAlBA,EAAEgP,eACpCD,EAAYpE,MAAK,SAAC5H,EAAG/F,EAAGgD,GACpB,GAAkB,OAAf+C,EAAE6E,SAAkB,CACnB,IAAIqH,EAAW/M,IAAUlC,EAAEhD,IAAIqL,OAAO,QAAQC,QAAQ,YAAY,GAAMK,KAAK,IAAKzG,MAAYvB,KAAKuB,KAAmB4K,KAAK,QAC3HmC,EAAStG,KAAK,YAAd,4CACAsG,EAAStG,KAAK,OAAQ,QAAQJ,MAAM,UAAW,IACpCrG,IAAUlC,EAAEhD,IAAI6L,UAAU,QAAQnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,MAAIgK,KAAK,QAAQL,KAAK1F,EAAEoI,OAC1ExC,KAAK,YAAa,wBAG/BoG,EAAYvE,OAAO,UAAU7B,KAAK,OAAQ,OAAOA,KAAK,IAAK,KAC3DoG,EAAYhG,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACV,MAAdlB,EAAE8I,SACDsH,cAAcpQ,GAEdqQ,YAAYrQ,GAEhB,IAAIsQ,EAAmD,iBAAtClN,IAAU,iBAAiBuG,OAC5C8E,EAAgBN,EAAWL,EAAYO,EAASG,EAAGE,EAAU4B,MAIjErN,EAAKiH,QACLjH,EAAK8G,UAAU,UAAUG,QAEzB,OAAOjH,EAjKPwL,CAAgBN,EAAWL,EAAYO,EAASG,EAAGtI,GAAK,G,qVC/N5D,IAAM4H,EAAa,CACftC,OAAQ,GACR+E,cAAgB,IAChBC,eAAiB,IACjBpF,OAAS,GACTqF,UAAY,GACZC,UAAW,KAGTC,EAAc,CAChB,CAAC,UAAW,WACZ,CAAC,UAAW,YAGVC,EAAgB,CAAC,UAAW,WAE5BC,EAAkB,UAEpBC,EAAY,EAEVC,EAAiB,CAAC,IAEjB,SAASC,EAAmB/O,EAAUgP,EAAS9K,EAAQuE,GAE1D,IAAIE,EAAYzE,EAAO9D,QAAO,SAAAC,GAAC,OAAGA,EAAEJ,QAAUwI,KAAW,GAAGvE,OAAO5D,KAAI,SAAA/C,GAAC,OAAGA,EAAEqL,aAEzEC,EAAiB1H,IAAUnB,EAASM,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAAWgF,IAAOnB,EAASM,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAWvF8S,EAAoBD,EATHrG,EAAUrI,KAAI,SAAAwI,GAC3B,IAAIlF,EAAQ5D,EAASI,QAAO,SAAAD,GACxB,OAAO2I,EAAMzD,SAASlF,EAAKA,EAAKhE,OAAS,GAAG8F,WAAWwG,GAAWpG,OAAOoG,OAGzEM,EAAYC,EAAUpF,EAAOkF,EAAO5E,EAAQ2E,GAChD,MAAO,CAAC,MAASC,EAAO,MAASlF,EAAO,UAAamF,OAKtD,SAASC,EAAUhJ,EAAUkP,EAAYhL,EAAQiL,GAEpD,IAAIC,EAAWC,GAAajP,QAAO,SAAAC,GAAC,MAAc,mBAAXA,EAAET,QAA2BU,KAAI,SAAAzC,GAAC,OAAGA,EAAEyR,aAE1EtL,EAAOE,EAAO5D,KAAI,SAAA/C,GAAC,OAAGA,EAAE0C,SAAOG,QAAO,SAAAC,GAAC,OAA4B,IAAzB+O,EAASnO,QAAQZ,MAE3DkP,EAAY,EAAIvP,GAChBwP,EAAaJ,EAASjT,OAAS,EAAI+H,EAAO9D,QAAO,SAAAC,GAAC,OAAkC,IAA/B+O,EAASnO,QAAQZ,EAAEJ,UAAeK,KAAI,SAAAzC,GAAC,OAAGA,EAAEoC,SAAS,KAE9GqE,EAAoBiL,EAAWrL,EAAQsL,GAEvBrO,IAAOoO,EAAUjP,KAAI,SAAAlB,GAAC,OAAGA,EAAEjD,WAA3C,IAEIgH,EAAMrD,EAAc,GAEpB2P,EAAW,IAAI9N,MAAMwN,GAAaO,OAAOpP,KAAI,SAACzC,EAAG5B,GAC7C,IAAI0T,EAAOxM,EAAMgM,EAGjB,MAAO,CAAC,KAFIlT,EAAI0T,EAEM,KADV1T,EAAI,GAAI0T,EACc,KAAQ1T,EAAI,KAAO0T,MAGzDC,EAAgBL,EAAUjP,KAAI,SAAAH,GAAI,OAAIA,EAAKC,QAAO,SAAAY,GAAI,OAAiB,GAAbA,EAAK0B,MAA+B,GAAb1B,EAAKmD,WACtF0L,EAAYN,EAAUrP,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAAY,GAAI,OAAiB,IAAdA,EAAK0B,WAC9DoN,EAAYP,EAAUrP,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAAY,GAAI,OAAiB,IAAdA,EAAKmD,WAElEsL,EAASnP,KAAI,SAACrB,EAAGhD,GACb,IAAI8T,EAAQH,EAAc1P,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAAY,GAC9C,OAAOA,EAAKO,WAAatC,EAAE+Q,MAAQhP,EAAKO,YAActC,EAAE4C,UAGhE,OADA5C,EAAEtD,KAAOoU,EACF9Q,KAGX,IAAIgR,EAAajM,EAAK1D,KAAI,SAAAvB,GACtB,IAAI0O,EAAQvJ,EAAO9D,QAAO,SAAAC,GAAC,OAAGA,EAAEJ,QAAUlB,KAAK,GAE3CmR,EAAUT,EAASnP,KAAI,SAAA6P,GAQvB,OAPGA,EAAIxU,KAAKQ,OAAS,EACjBgU,EAAIC,MAAQD,EAAIxU,KAAK2E,KAAI,SAAAvC,GACrB,OAAOA,EAAEkE,WAAWlD,MAGxBoR,EAAIC,MAAQ,GAET,CAAC,KAAQD,EAAIC,MAAO,MAAS,CAACD,EAAIH,KAAMG,EAAItO,KAAM,MAASsO,EAAIE,KAAM,IAAOtR,MAGnFuR,EAAWT,EAAUvP,KAAI,SAAAzC,GAAC,OAAGA,EAAEoE,WAAWlD,MAC1CwR,EAAW,CAAC,KAAQD,GAExB,GAAkB,eAAf7C,EAAM7N,KAAsB,CAC3B,IAAI4Q,EAAIrP,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CAAC,EAAGuK,EAAWtC,SAEzEkH,EAAYtP,MACf1C,OAAM,SAASV,GAAK,OAAOA,EAAEsE,OAAOC,WACpCiB,OAAOiN,EAAEjN,UACTmN,WAAWF,EAAEG,MAAM,KAEpBT,EAAQ5P,KAAI,SAACrB,EAAGhD,EAAG2U,GAkBf,OAjBA3R,EAAEW,KAAO6N,EAAM7N,KACfX,EAAEyC,KAAO+O,EAAUxR,EAAEtD,MACrBsD,EAAEsE,OAAS,CAACkK,EAAMtK,IAAKsK,EAAMpK,KAC7BpE,EAAEyC,KAAKmP,MAAQ1B,EACflQ,EAAEyC,KAAKwN,WAAaA,EAEqB,IAAtC/N,IAAQlC,EAAEyC,KAAKpB,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,aACf,IAANF,GACEgD,EAAEyC,KAAO+O,EAAUX,EAAUxP,KAAI,SAAAzC,GAAC,OAAGA,EAAEoE,WAAWlD,OAClDE,EAAEtD,KAAOmU,EAAUxP,KAAI,SAAAzC,GAAC,OAAGA,EAAEoE,WAAWlD,MACxCE,EAAEyC,KAAKmP,MAAQ1B,IAGhBlQ,EAAEyC,KAAOkP,EAAU3U,EAAE,GAAGyF,KACxBzC,EAAEtD,KAAOiV,EAAU3U,EAAE,GAAGN,OAGzBsD,KAIX,IAAI6R,EAAO3P,IAAOmP,EAASpQ,SAAQ,SAAA6Q,GAAC,OAAIA,EAAE1O,OAAOC,YAC7C0O,EAAO7P,IAAOmP,EAASpQ,SAAQ,SAAA6Q,GAAC,OAAIA,EAAE1O,OAAOC,YAC7C2O,EAAK9P,MAAiBoC,OAAO,CAACyN,EAAMF,IAAOxP,MAAM,CAAC,EAAGuK,EAAWtC,SAEhE2H,EAAa/P,MAChB1C,OAAM,SAASV,GACZ,OAAQA,EAAEsE,OAAOC,WACpBiB,OAAO0N,EAAG1N,UACVmN,WAAWO,EAAGN,MAAM,KAUrB,OARAJ,EAAS7O,KAAOwP,EAAWZ,GAEhB,CAAC,IAAOvR,EACX,WAAgBmR,GAChB,KAAQzC,EAAM7N,KACd,SAAY2Q,EACZ,SAAYT,EAAUxP,KAAI,SAAAzC,GAAC,OAAGA,EAAEoE,WAAWlD,MAAM,IAMzD,IAAImG,EAASoL,EAAS,GAAGpM,OAAOA,OAE5BiN,EAAYjM,EAAO,GAAGD,MAAOC,EAAO5E,KAAI,SAAA/C,GAAC,OAAGA,EAAE0H,SAASC,EAAO5E,KAAI,SAAA/C,GAAC,OAAGA,EAAEqL,aAExEwI,EAAWtB,EAAU,GAAG7N,WAAWlD,GACvCqS,EAAS1P,KAAOP,IAAW2O,EAAU,GAAG7N,WAAWlD,GAAKsD,QAAQ/B,KAAI,SAAAzC,GAEhE,MAAO,CAACoH,MADK,CAAC,CAAC,MAASpH,EAAEkB,IAAK,MAAQlB,EAAEY,QAClB0Q,YAAYA,EAAalM,MAAQwK,EAAMrI,YAAYhF,QAAO,SAAAC,GAAC,OAAGA,EAAE4E,QAAUpH,EAAEkB,OAAK,GAAIoE,IAAI,OAGpH+M,EAAQxO,KAAO,KACf6O,EAAS7O,KAAOwD,EAAO5E,KAAI,SAAA/C,GACvB,OAAO+S,EAASlQ,QAAO,SAAAC,GAAC,OAAG9C,EAAEqL,UAAUvD,SAAShF,EAAE6E,OAAOD,aAErD9D,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAGuK,EAAWtC,SAA5E,IACIU,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAE9CmP,EAAYtP,MACf1C,OAAM,SAASV,GAAK,OAAOA,EAAEU,SAC7B8E,OAAO0G,EAAE1G,UACTmN,WAAWzG,EAAE0G,MAAM,KA8CpB,OA3CAT,EAAQ5P,KAAI,SAACrB,EAAGhD,EAAG2U,GAEf,IAAIS,EAAS5D,EAAMrI,YA8BnB,OA7BAnG,EAAEyC,KAAOyP,EAAU7Q,KAAI,SAAA2E,GACnB,IAAIxE,EAAOxB,EAAEtD,KAAKuE,SAAQ,SAAArC,GAAC,OAAGzB,OAAOkV,QAAQzT,EAAEwE,QAAQjC,QAAO,SAAAC,GAAC,OAAGA,EAAE,KAAO4E,QAC1E3E,KAAI,SAAAzC,GACD,MAAO,CAAC,MAASA,EAAE,GAAI,MAAQA,EAAE,OAGrC,MAAO,CAACoH,MAAOxE,EAAM0O,YAAYA,EAAasB,UAAWA,EAAUhQ,GAAOwC,MAAQoO,EAAOjR,QAAO,SAAAC,GAAC,OAAGA,EAAE4E,QAAUA,KAAO,GAAI9B,IAAI,OAGrG,IAA3BlE,EAAEyC,KAAK,GAAGuD,MAAM9I,SAEX8C,EAAEyC,KADG,IAANzF,EACUkF,IAAWiQ,EAAS/O,QAAQ/B,KAAI,SAAAzC,GACrC,IAAI0T,EAAQd,EAAU,EAAE5S,EAAEY,QAAQ6B,KAAI,SAAAkR,GAIlC,OAHG3T,EAAEY,OAAS+S,EAAEC,IAAM5T,EAAEY,OAAS+S,EAAEE,IAC/BF,EAAE/U,MAAMoB,EAAEY,OAEP+S,KAGV,MAAO,CAACvM,MADK,CAAC,CAAC,MAASpH,EAAEkB,IAAK,MAAQlB,EAAEY,QAClB0Q,YAAYA,EAAasB,UAAWc,EAAOtO,MAAQoO,EAAOjR,QAAO,SAAAC,GAAC,OAAGA,EAAE4E,QAAUpH,EAAEkB,OAAK,GAAIoE,IAAI,OAKnHyN,EAAU3U,EAAE,GAAGyF,MAIhCzC,EAAEW,KAAO6N,EAAM7N,KACRX,KAGA,CAAC,IAAOF,EACP,WAAgBmR,GAChB,KAAQzC,EAAM7N,KACd,SAAY2Q,EACZ,SAAYT,EAAUxP,KAAI,SAAAzC,GAAC,OAAGA,EAAEoE,WAAWlD,MAAM,GACjD,UAAaoS,EACb,SAAYhQ,IAAO+O,EAAQ5P,KAAI,SAAArB,GAAC,OAAGA,EAAEtD,KAAKQ,eAS9D,OAHA8T,EAAWnH,MAAQoG,EACnBe,EAAWd,YAAcA,EACzBc,EAAWjM,KAAOA,EACXiM,EAEJ,SAAS0B,EAA4BhW,EAAMiW,GAE9C,IAAIC,EAAYD,EAAItK,OAAO,KAAKC,QAAQ,cAAc,GACtDsK,EAAUvK,OAAO,QAAQC,QAAQ,kBAAkB,GAC9CK,KAAK,SAAU,IACfA,KAAK,KAAM,IACXA,KAAK,KAAM,IACZA,KAAK,OAAQ,QAEjB,IAAIkK,EAAUD,EAAUvK,OAAO,KAAKM,KAAK,YAAa,uBAEtDiK,EAAUvK,OAAO,QACZM,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,KAAM,OACXA,KAAK,KAAMiE,EAAW0C,gBACtB3G,KAAK,SAAU,QACfA,KAAK,eAAgB,KAE1BiK,EAAUvK,OAAO,QAAQI,KAAK,QAAQE,KAAK,YAAa,oBACxCiK,EAAUvK,OAAO,KAAKC,QAAQ,cAAc,GAAMK,KAAK,YAAvD,oBAAiFiE,EAAW0C,eAAiB,IAA7G,SACNjH,OAAO,QAAQI,KAAK,UAE9B,IAAIqK,EAAkB,GAClBC,EAAqB,GAEzBrW,EAAKiI,MAAMtD,KAAI,SAAAH,GACXA,EAAKC,QAAO,SAAAnB,GAAC,OAAa,GAAVA,EAAEyD,QAAcpC,KAAI,SAAAU,IACa,GAA1CgR,EAAmB/Q,QAAQD,EAAKA,QAC/BgR,EAAmBvV,KAAKuE,EAAKA,MAC7B+Q,EAAgBtV,KAAK,CAAC,KAAQuE,EAAKA,KAAM,MAASA,EAAKO,oBAKnE,IAAI0Q,EAAc9Q,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAGuK,EAAW4C,YAClFyD,EAAcL,EAAU/J,UAAU,mBAAmBnM,KAAKoW,GACzDhK,KAAK,KAAKH,KAAK,SAAS,SAAC7J,EAAG9B,GAAJ,OAAS8B,EAAEiD,QAAMuG,QAAQ,iBAAiB,GAEvE2K,EAAYtK,KAAK,aAAa,SAAC7J,EAAG9B,GAC9B,0BAAqB,IAAMgW,EAAYlU,EAAEoU,OAAzC,WACJD,EAAY5K,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,OAAQ,QAAQA,KAAK,UAAW,IAE/E,IAAI4I,EAAIrP,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAGuK,EAAW4C,YAExE2D,EAAYN,EACXhK,UAAU,YACVnM,KAAKA,EAAKoN,UAAU,GAAGsJ,SAAS/R,KAAI,SAAAzC,GAAC,OAAGA,EAAEyD,UAC1CyG,KAAK,QACLR,QAAQ,OAAO,GAEpB6K,EAAUxK,KAAK,SAAS,SAAC7J,EAAG9B,EAAGgD,GAC3B,OAAOuR,EAAEzS,EAAE,IAAMyS,EAAEzS,EAAE,OACtB6J,KAAK,SAAU,IAElBwK,EAAUxK,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAC/B,IAAI0Q,EAAOa,EAAEzS,EAAE,IAAMyS,EAAEzS,EAAE,IACzB,0BAAoB4R,EAAK1T,EAAzB,UAEJmW,EAAUxK,KAAK,OAAQ,QAAQA,KAAK,eAAgB,GAAGA,KAAK,SAAU,SAEtE,IAAI0K,EAAOnR,IAAcqP,GACrB+B,EAAUV,EAAUvK,OAAO,KAAK/K,KAAK+V,GAIzC,OAHAC,EAAQ3K,KAAK,YAAa,sBAC1B2K,EAAQ9I,OAAO,QAAQ7B,KAAK,eAAgB,GAErCiK,EA8DJ,SAAS5C,EAAoBD,EAASwD,GAEzC,IAAIC,EAAkBtR,IAAU,mBAAmB2G,UAAU,SAAS1H,QAAO,SAACC,EAAGpE,EAAGgD,GAAP,OAA6B,IAAjBA,EAAEhD,GAAGyW,WAAkB/W,OAEhGqT,EAAQ1H,OAAO,OAAOM,KAAK,KAAM,gBACvBE,UAAU,cAAcnM,KAAK6W,GAAYzK,KAAK,OAAOR,QAAQ,aAAa,GAE1FqC,MAAK,SAAC7L,EAAG9B,EAAG+E,GAEnB,IAAI2R,EAAqB5U,EAAEgL,UAAU3I,QAAO,SAAAC,GACxC,OAAOoS,EAAgBxR,QAAQZ,EAAEtB,MAAQ,KAGxC+J,EAAQ3H,IAAUH,EAAK/E,IAC3B6M,EAAMtB,MAAM,aAAc,UAC1BsB,EAAMxB,OAAO,QAAQI,KAAK3J,EAAE8G,OAC5BiE,EAAMxB,OAAO,QAAQI,KAArB,aAAgC3J,EAAE6F,MAAMzH,OAAxC,WAIA,IAAIyV,EAAM9I,EAAMxB,OAAO,OACvBsK,EAAIhK,KAAK,QAAS,qBAClBgK,EAAIhK,KAAK,KAAT,UAAkB7J,EAAE8G,MAApB,SACA+M,EAAIhK,KAAK,SAAW6K,EAAgBtW,QAAU0P,EAAWtC,OAAS,GAAK,IAEvE,IAAIsI,EAAYF,EAA4B5T,EAAG6T,GAC/CC,EAAUjK,KAAK,YAAa,qBAE5BkB,EAAMvB,QAAQxJ,EAAE8G,OAAO,GAEvB,IAAI+N,EAAczR,MAAiBoC,OAAO,CAAC,EAAGxF,EAAEgL,UAAUoG,cAAc7N,MAAM,CAAC,EAAGuK,EAAW4C,YACzFyD,EAAcL,EAAU/J,UAAU,mBAElC+K,EAAOjB,EAAItK,OAAO,KAAKC,QAAQ,mBAAmB,GACtDsL,EAAKjL,KAAK,YAAa,qBAEvB,IAAIkL,EAAaD,EAAK/K,UAAU,cAAcnM,KAAKgX,GAAoB5K,KAAK,KAAKH,KAAK,SAAS,SAAA7J,GAAC,OAAGA,EAAEgB,IAAM,gBAE3G+T,EAAWlL,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAC5B,GAAS,IAANhD,EACC,MAAO,iBAEP,IAAI8W,EAAW5R,IAAalC,GAAGmB,QAAO,SAACC,EAAGlD,GAAJ,OAAQA,EAAIlB,KAAGN,OACjDqX,EAAM7R,IAAO4R,EAAS7S,SAAQ,SAAA3C,GAAC,MAAc,eAAXA,EAAEqC,KAAuBiM,EAAWtC,OAAO,EAAKhM,EAAE4T,UAAUhV,QAAQ0P,EAAW2C,UAAU,OAE/H,OADAzQ,EAAEiV,IAAMA,EACR,uBAAuBA,EAAvB,QAIZ,IAAInO,EAAQiO,EAAWxL,OAAO,QAC7BI,MAAK,SAAA3J,GAAC,OAAGA,EAAEgB,OAEZ8F,EAAMzE,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QAClBgI,KAAK,IAAK,IACVA,KAAK,IAAK,IACVJ,MAAM,cAAe,OACrBA,MAAM,YAAa,IAEpB3C,EAAMzE,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAClBgI,KAAK,KAAK,SAAC7J,EAAG9B,GAAJ,OAAS,KACnB2L,KAAK,KAAK,SAAA7J,GAAC,OAAMA,EAAEoT,UAAUhV,OAAS0P,EAAW2C,UAAW,KAC5DhH,MAAM,cAAe,UACrBA,MAAM,YAAa,IACnBI,KAAK,YAAa,eA1HpB,SAAyB5H,EAAU4R,EAAK1C,GAE3C,IAAIuD,EAAkBtR,IAAU,mBAAmB2G,UAAU,SAAS1H,QAAO,SAACC,EAAGpE,EAAGgD,GAAP,OAA6B,IAAjBA,EAAEhD,GAAGyW,WAAkB/W,OAE5GsX,EAAarB,EAAItK,OAAO,KAAKC,QAAQ,eAAe,GAAMK,KAAK,YAAa,oBAgDhF,OA/CAqL,EAAW3L,OAAO,QACbM,KAAK,QAAS,IACdA,KAAK,SAAW5H,EAASgE,KAAK7H,QAAU0P,EAAWtC,OAAQ,KAC3D3B,KAAK,OAAQ,QACbJ,MAAM,UAAW,IACjBQ,GAAG,aAAa,SAACjK,EAAG9B,GACjB,IAAIiX,EAAY/R,IAAU,YAAY2G,UAAU,SAC5CqL,EAAahS,IAAU,YAAY2G,UAAU,SACjDoL,EAAS9S,QAAO,SAAAC,GACZ,GAAGA,EAAE1E,KAAK+G,KAAK,CACX,IAAIjC,EAAOU,IAAWd,EAAE1E,KAAKsG,YAAY7B,QAAO,SAAAC,GAAC,OAAG6O,EAAW7J,SAAShF,EAAEtB,QAAM,GAAGN,MACnF,OAAOyQ,EAAW7J,SAAS5E,EAAKyE,OAAOD,OAEvC,IAAIxE,EAAOU,IAAWd,EAAE1E,KAAKsG,YAAY7B,QAAO,SAAAC,GAAC,OAAG6O,EAAW7J,SAAShF,EAAEtB,QAAM,GAC5EqU,EAAUjS,IAAWV,EAAKhC,MAAM4D,QAAQjC,QAAO,SAACC,EAAGpE,EAAGgD,GACtD,IAAIkE,EAAMhC,IAAOlC,EAAEqB,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UAC7B,OAAO4B,EAAE5B,QAAU0E,KACpB,GACH,OAAO+L,GAAckE,EAAQrU,OAElCwI,QAAQ,eAAe,GAE9B4L,EAAU/S,QAAO,SAAAC,GACb,GAAGA,EAAE1E,KAAK+G,KAAK,CACX,IAAIjC,EAAOU,IAAWd,EAAE1E,KAAKsG,YAAY7B,QAAO,SAAAC,GAAC,OAAG6O,EAAW7J,SAAShF,EAAEtB,QAAM,GAAGN,MACnF,OAAOyQ,EAAW7J,SAAS5E,EAAKyE,OAAOD,OAEvC,IAAIxE,EAAOU,IAAWd,EAAE1E,KAAKsG,YAAY7B,QAAO,SAAAC,GAAC,OAAG6O,EAAW7J,SAAShF,EAAEtB,QAAM,GAC5EqU,EAAUjS,IAAWV,EAAKhC,MAAM4D,QAAQjC,QAAO,SAACC,EAAGpE,EAAGgD,GACtD,IAAIkE,EAAMhC,IAAOlC,EAAEqB,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UAC7B,OAAO4B,EAAE5B,QAAU0E,KACpB,GACH,OAAO+L,GAAckE,EAAQrU,OAElCwI,QAAQ,eAAe,GACZxJ,EAAE6F,MAAMtD,KAAI,SAAAzC,GAAC,OAAGA,EAAEA,EAAE1B,OAAS,GAAG0I,YAC3CmD,GAAG,YAAY,SAACjK,EAAG9B,GAClB,IAAIiX,EAAY/R,IAAU,YAAY2G,UAAU,SAC5CqL,EAAahS,IAAU,YAAY2G,UAAU,SACjDoL,EAAS3L,QAAQ,eAAe,GAChC4L,EAAU5L,QAAQ,eAAe,MAGzC0L,EAAW3L,OAAO,QAAQI,MAAK,SAAA3J,GAAC,OAAGA,EAAE8G,SACpC2C,MAAM,cAAe,UACrBI,KAAK,YAFN,wBAEqC6K,EAAgBtW,QAAU0P,EAAWtC,OAAQ,IAAI,EAFtF,mBAIO0J,EAwEkBI,CAAgBtV,EAAEgL,UAAW6I,EAAK7T,EAAE8G,OAE1CmD,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GAC9BkC,IAAUlC,EAAEhD,IAAIwN,OAAO,QAAQ7B,KAAK,OAAQ,WAE5CkH,EAAeA,EAAe3S,OAAS,GAAGM,KAAKL,OAAO0K,OAAO,GAAG/I,IAC7D+Q,EAAeA,EAAe3S,OAAS,GAAGA,OAAS,IAElD6S,EAAQlH,UAAU,KAAKoD,SACvB8D,EAAQvF,OAAO,iBAAiByB,SAchD,SAAsCjE,EAAKtL,EAAMiX,EAAaJ,GAE1D,IAAIC,EAAkBtR,IAAU,mBAAmB2G,UAAU,SAAS1H,QAAO,SAACC,EAAGpE,EAAGgD,GAAP,OAA6B,IAAjBA,EAAEhD,GAAGyW,WAAkB/W,OAE5G2X,EAAUrM,EAAIK,OAAO,OAAOM,KAAK,KAAM,gBAEvC2L,EAAcD,EAAQhM,OAAO,OAAOC,QAAQ,kBAAkB,GAAMC,MAAM,SAAU,QAEpFgM,EAAUD,EAAYjM,OAAO,OAAOM,KAAK,SAAU,IAAIA,KAAK,QAAS,KAAKJ,MAAM,cAAe,SAC/FiM,EAAkBF,EAAYjM,OAAO,OAGrCuK,EAAYF,EADA,CAAC/N,MAAOjI,EAAK,GAAGiI,MAAM8P,OAAO/X,EAAK,GAAGiI,OAAQmF,UAAWpN,EAAK,GAAGoN,WACzB0K,GACvD5B,EAAUjK,KAAK,YAAa,sBAE5BiK,EAAU/J,UAAU,YAAYF,KAAK,SAAU,WAAWA,KAAK,eAAgB,OAC/E,IAAIsK,EAAcL,EAAU/J,UAAU,mBAoBtC,GAlBWyL,EAAYjM,OAAO,OAC7BE,MAAM,WAAY,YAClBA,MAAM,OAAQ,OACdA,MAAM,MAAO,QACbF,OAAO,KACPC,QAAQ,qBAAsB,MAC9BC,MAAM,eAAgB,QAElBQ,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACpBqU,EAAQpI,SACR1F,QAAQkD,IAAIoG,GACZA,EAAerS,KAAK,IAAIkF,OACxB4I,GAAe,eAAgBpC,EAAkBA,EAAkBhM,OAAO,GAAGoM,QAC7EpH,IAAU,YAAY2G,UAAU,SAASoD,SACzC/J,IAAU,YAAY2G,UAAU,SAASoD,SACzCV,GAAWrJ,IAAU,YAAa,MAAM,MAGzCxF,EAAKQ,OAAS,EAAE,CAEfqO,GAAWrJ,IAAU,YAAa,MAAM,GAExC,IAAIwS,EAAgBhS,MAAMiS,KAAK,IAAIC,IAAIlY,EAAKuE,SAAQ,SAAAG,GAAC,OAAGA,EAAEuD,SAAO1D,SAAQ,SAAAd,GAAC,OAAGA,EAAEkB,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,aAErF8S,EAAY3S,IAAU,YAAY2G,UAAU,SAAS1H,QAAO,SAAAC,GAAC,OAA2C,IAAxCsT,EAAc1S,QAAQZ,EAAE1E,KAAKqF,SAC7F+S,EAAY5S,IAAU,YAAY2G,UAAU,SAAS1H,QAAO,SAAAC,GAAC,OAA2C,IAAxCsT,EAAc1S,QAAQZ,EAAE1E,KAAKqF,SAEjG8S,EAAUlM,KAAK,UAAW,IAC1BmM,EAAUnM,KAAK,UAAW,IAE1B,IAAIoM,EAAerS,MAAMiS,KAAK,IAAIC,IAAIlY,EAAK,GAAGiI,MAAM1D,SAAQ,SAAAd,GAAC,OAAGA,EAAEkB,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,aACxEiT,EAAetS,MAAMiS,KAAK,IAAIC,IAAIlY,EAAK,GAAGiI,MAAM1D,SAAQ,SAAAd,GAAC,OAAGA,EAAEkB,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,aAExEkT,EAAe/S,IAAU,YAAY2G,UAAU,SAAS1H,QAAO,SAAAC,GAAC,OAAG2T,EAAa/S,QAAQZ,EAAE1E,KAAKqF,OAAS,KACxGmT,EAAehT,IAAU,YAAY2G,UAAU,SAAS1H,QAAO,SAAAC,GAAC,OAAG2T,EAAa/S,QAAQZ,EAAE1E,KAAKqF,OAAS,KAE5GkT,EAAatM,KAAK,UAAW,IAAIE,UAAU,UAAUF,KAAK,OAAQ+G,EAAc,IAChFwF,EAAavM,KAAK,UAAW,IAAIJ,MAAM,SAAUmH,EAAc,IAE/D,IAAIyF,EAAejT,IAAU,YAAY2G,UAAU,SAAS1H,QAAO,SAAAC,GAAC,OAAG4T,EAAahT,QAAQZ,EAAE1E,KAAKqF,OAAS,KACxGqT,EAAelT,IAAU,YAAY2G,UAAU,SAAS1H,QAAO,SAAAC,GAAC,OAAG4T,EAAahT,QAAQZ,EAAE1E,KAAKqF,OAAS,KAE5GoT,EAAaxM,KAAK,UAAW,IAAIE,UAAU,UAAUF,KAAK,OAAQ+G,EAAc,IAChF0F,EAAazM,KAAK,UAAW,IAAIJ,MAAM,SAAUmH,EAAc,IAG/D6E,EAAQlM,OAAO,KACdC,QAAQ,qBAAqB,GAC7BC,MAAM,eAAgB,QAEvB7L,EAAK+K,SAAQ,SAAC3I,EAAG9B,GACjBuX,EAAQlM,OAAO,QACVI,KAAK3J,EAAE8G,OACP0C,QAAQ,yBAAyB,GACjCC,MAAM,UAAW,OACjBA,MAAM,gBAAiB,OACvBA,MAAM,aAAcmH,EAAc1S,OAGvCuX,EAAQlM,OAAO,KACdC,QAAQ,sBAAsB,GAC9BC,MAAM,cAAe,QAG1B,IAAIoK,EAAM0B,EAAQhM,OAAO,OAAOM,KAAK,QAAS,eAG9C,GAAGjM,EAAKQ,OAAS,EAAE,KAEXmY,EAAY3Y,EAAK,GAAGoN,UAAU3I,QAAO,SAAAC,GAAC,OAAGoS,EAAgBxR,QAAQZ,EAAEtB,MAAQ,KAC3EwV,EAAU5Y,EAAK,GAAGoN,UAAU3I,QAAO,SAAAC,GAAC,OAAGoS,EAAgBxR,QAAQZ,EAAEtB,MAAQ,KACzEyV,EAAWF,EAAUhU,KAAI,SAACvC,EAAG9B,EAAGgD,GAyBhC,OAvBAlB,EAAEsU,SAAW,EAAItU,EAAEsU,UAAU/R,KAAI,SAAC0B,EAAG7E,GAqBjC,OAnBA6E,EAAEN,KAAO,CAAC,CAAC3C,IAAIpD,EAAK,GAAGkJ,MAAOpG,MAAOuD,EAAEN,KAAMuJ,MAAM,GACzC,CAAClM,IAAIpD,EAAK,GAAGkJ,MAAOpG,MAAO8V,EAAQtY,GAAGoW,SAASlV,GAAGuE,KAAMuJ,MAAM,IAGxEjJ,EAAErG,KAAO,CAAC,CAACoD,IAAKpD,EAAK,GAAGkJ,MACZpG,MAAOuD,EAAErG,KAAK2E,KAAI,SAAAzC,GAGV,OAFAA,EAAE4W,SAAW9Y,EAAK,GAAGkJ,MACrBhH,EAAEoN,MAAQ,EACHpN,KAEfoN,MAAO,GAEX,CAAElM,IAAKpD,EAAK,GAAGkJ,MACXpG,MAAQ8V,EAAQtY,GAAGoW,SAASlV,GAAGxB,KAAK2E,KAAI,SAAAzC,GAGhC,OAFAA,EAAE4W,SAAW9Y,EAAK,GAAGkJ,MACrBhH,EAAEoN,MAAQ,EACHpN,KAElBoN,MAAO,IACTjJ,KAEJjE,KAIP+U,EADOlB,EAAItK,OAAO,KAAKM,KAAK,QAAS,cAAcA,KAAK,YAAa,qBACnDE,UAAU,cAAcnM,KAAK6Y,GAAUzM,KAAK,KAAKR,QAAQ,aAAa,GAC5FqK,EAAIhK,KAAK,SAAW4M,EAASrY,QAAU0P,EAAWtC,OAAS,IAE3DuJ,EAAWlL,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAChC,GAAS,IAANhD,EACK,MAAO,iBAEX,IAAI8W,EAAW5R,IAAalC,GAAGmB,QAAO,SAACC,EAAGlD,GAAJ,OAAQA,EAAIlB,KAAGN,OACjDqX,EAAM7R,IAAO4R,EAAS7S,SAAQ,SAAA3C,GAAC,MAAc,eAAXA,EAAEqC,KAAuBiM,EAAWtC,OAAO,EAAKhM,EAAE4T,UAAUhV,QAAQ0P,EAAW2C,UAAU,OAE/H,OADAzQ,EAAEiV,IAAMA,EACR,uBAAuBA,EAAvB,QAIR,IAAInO,EAAQiO,EAAWxL,OAAO,QACzBI,MAAK,SAAA3J,GAAC,OAAGA,EAAEgB,OAEZ8F,EAAMzE,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QAClBgI,KAAK,IAAK,IACVA,KAAK,IAAK,IACVJ,MAAM,cAAe,OACrBA,MAAM,YAAa,IAEpB3C,EAAMzE,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAClBgI,KAAK,KAAK,SAAC7J,EAAG9B,GAAJ,OAAS,KACnB2L,KAAK,KAAK,SAAA7J,GAAC,OAAMA,EAAEoT,UAAUhV,OAAS0P,EAAW2C,UAAW,KAC5DhH,MAAM,cAAe,UACrBA,MAAM,YAAa,IACnBI,KAAK,YAAa,eAIvB,IAAI8M,EAAgB5B,EAAWxL,OAAO,KAAKC,QAAQ,aAAa,GAChEmN,EAAc9M,KAAK,YAAa,oBAChC8M,EAActU,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAAqB0H,OAAO,KAAKC,QAAQ,YAAY,GAGhF,IAAIpD,EAAOuQ,EAAc5M,UAAU,UAAUnM,MAAK,SAAAoC,GAC9C,MAAO,CAACA,EAAE4W,aAAY5M,KAAK,KAAKR,QAAQ,QAAQ,GACpDpD,EAAKyD,KAAK,YAAV,mBAEA,IAAIgN,EAAWzQ,EAAK/D,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QACjCgV,EAAStN,OAAO,QACXM,KAAK,SAAUiE,EAAWtC,QAC1B3B,KAAK,QAAS,IACdA,KAAK,OAAQ,QACbJ,MAAM,eAAgB,SACtBA,MAAM,SAAU,SAELoN,EAAStN,OAAO,QAC3BM,KAAK,QAAS,IACdA,KAAK,UAAU,SAAA7J,GACZ,IAAI8W,EAAO9W,EAAEmG,OAAOY,OAEpB,OADA+P,EAAKvT,MAAM,CAAEuK,EAAWtC,OAAS,EAAI,IAC9BsL,EAAK9W,EAAEsE,OAAOiB,WAAauR,GAAM9W,EAAEsE,OAAOe,cAClDwE,KAAK,aAAa,SAAC7J,EAAG9B,GACrB,IAAI4Y,EAAO9W,EAAEmG,OAAOY,OAEpB,OADA+P,EAAKvT,MAAM,CAAEuK,EAAWtC,OAAS,EAAI,IAC9B,eAAesL,GAAM9W,EAAEsE,OAAOe,WAAW,OACjDoE,MAAM,UAAW,IACnBI,KAAK,OAAQgH,GAELgG,EAAStN,OAAO,QAAQM,KAAK,QAAS,IAAIA,KAAK,SAAU,GAE/DA,KAAK,aAAa,SAAC7J,EAAG9B,GACrB,IAAI4Y,EAAO9W,EAAEmG,OAAOY,OAGpB,OAFA+P,EAAKvT,MAAM,CAACuK,EAAWtC,OAAQ,IAExB,eAAesL,GADV9W,EAAEsE,OAAOC,SACY,OACtCsF,KAAK,OAAQ,WAGhB,IAAIkN,EAAU3Q,EAAK/D,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAC5BmV,EAAkBD,EAAQhN,UAAU,uBAAuBnM,MAAK,SAAAoC,GAChE,OAAOA,EAAE2D,QAAOqG,KAAK,KAAKR,QAAQ,qBAAqB,GAE3DwN,EAAgBzN,OAAO,QAClBI,MAAK,SAAC3J,EAAG9B,GAAJ,OAAS8B,EAAEkF,MAAMgC,SACtB2C,KAAK,IAAK,IACVA,KAAK,KAAM,GACXJ,MAAM,YAAa,IACnBA,MAAM,cAAe,OAE1BuN,EAAgBnN,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,6BAAyB,IAAKA,GAAG4P,EAAW2C,UAAU,GAAtD,QAClCuG,EAAgBzN,OAAO,QAClBM,KAAK,SAAUiE,EAAW2C,WAC1B5G,KAAK,QAASiE,EAAW2C,WACzB5G,KAAK,OAAQ,QAAQA,KAAK,UAAW,GAE1BmN,EAAgBzN,OAAO,QAClCC,QAAQ,cAAc,GACtBK,KAAK,SAAUiE,EAAW2C,WAC1B5G,KAAK,QAASiE,EAAW2C,WAEpB5G,KAAK,QAAQ,SAAC7J,EAAG9B,GACnB,kCAA4B8B,EAAEkH,MAAM,GAAGxG,MAAvC,QACDmJ,KAAK,eAAgB,IAAKA,KAAK,SAFtC,2BAImBkN,EAAQhN,UAAU,uBAChC1H,QAAO,SAACC,EAAGlD,EAAG8B,GACX,IAAI+V,EAAS7T,IAAOA,IAAalC,GAAGtD,OAAO2E,KAAI,SAAAzC,GAAC,OAAGA,EAAEoH,MAAM,GAAGxG,UAC9D,OAAO4B,EAAE4C,MAAMgC,QAAU9D,IAAalC,GAAGtD,OAAOyE,QAAO,SAAAvC,GAAC,OAAGA,EAAEoH,MAAM,GAAGxG,QAAUuW,KAAQ,GAAG/R,MAAMgC,SAClGsC,QAAQ,OAAO,GAETkC,OAAO,mBAAmB7B,KAAK,QAAQ,SAAC9J,EAAG7B,GAChD,OAAO6B,EAAEmF,MAAMA,SAChB2E,KAAK,WAAW,SAAC9J,GAEhB,OADUqD,IAAOrD,EAAEmH,MAAM/E,SAAQ,SAAA3C,GAAC,OAAGA,EAAEkB,UAC5BX,EAAEmH,MAAM9I,UAI3B,IAAI8Y,EAAcP,EAAc5M,UAAU,gBAAgBnM,MAAK,SAAAoC,GAC3D,OAAOA,EAAEsU,YAAWtK,KAAK,KAAKR,QAAQ,cAAc,GAExD0N,EAAYrN,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GACjC,IAAI0Q,EAAO1Q,EAAE9C,OAAS,IAAM4B,EAAEuD,MAAM,GAAKvD,EAAEuD,MAAM,IAAM,EAAI,EACvDkP,EAAIrP,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAGuK,EAAW4C,YACxE,MAAO,cAAc,IAAOmE,EAAY3W,GAAMuU,EAAEb,IAAQ,UAEhE,IAAIuF,EAAeD,EAAY7U,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAAqB0H,OAAO,KAExE4N,EAAatN,KAAK,YAAa,mBAE/B,IAAIuN,EAAuBD,EAAapN,UAAU,kBAC7CnM,MAAK,SAAAoC,GAKF,OAJWA,EAAE2D,KAAKpB,KAAI,SAAA0B,GAElB,OADAA,EAAEjD,IAAMhB,EAAEgB,IACHiD,QAGd+F,KAAK,KACLR,QAAQ,gBAAgB,GACxBK,KAAK,aAAa,SAAC7J,EAAG9B,GACnB,IAAI0I,EAAmB,IAAZ5G,EAAEkN,OAAgBY,EAAW2C,UAAU,EAAK,EACvD,0BAAoB7J,EAApB,WAEJyQ,EAAaD,EAChBrN,UAAU,mBACVnM,MAAK,SAAAoC,GAKF,OAJWA,EAAEU,MAAM6B,KAAI,SAAAyQ,GAEnB,OADAA,EAAEhS,IAAMhB,EAAEgB,IACHgS,QAGdhJ,KAAK,QACLR,QAAQ,cAAc,GACtBK,KAAK,SAAUiE,EAAW2C,WAC1B5G,KAAK,QAASiE,EAAW2C,UAAU,GAEpC4G,EAAWxN,KAAK,QAAQ,SAAC7J,EAAG9B,EAAGgD,GAC3B,IACIoW,EADMlU,IAAOpD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UACpBV,EAAEkH,MAAM9I,OACnBsR,EAAQtM,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,IACtD,kCAA4BmM,EAAM4H,GAAlC,QACDzN,KAAK,eAAgB,IAAKA,KAAK,SALlC,2BAOAwN,EAAWxN,KAAK,aAAa,SAAC7J,EAAG9B,GAC7B,6BAAwB,IAAKA,GAAG4P,EAAW2C,UAAU,GAArD,QAGJ,IAQI8G,EARoBJ,EAAapN,UAAU,WACtCnM,MAAK,SAAAoC,GAAC,OAAGA,EAAE2D,QACXqG,KAAK,KACLR,QAAQ,SAAS,GACjBK,KAAK,aAAa,SAAC7J,EAAG9B,GACnB,IAAI0I,EAAmB,IAAZ5G,EAAEkN,OAAgB,GAAMY,EAAW2C,UAAU,EAAO3C,EAAW2C,UAAU,EACpF,0BAAoB7J,EAApB,WAE+BmD,UAAU,gBAChDnM,MAAK,SAAAoC,GAKN,OAJmBA,EAAEU,MAAM6B,KAAI,SAAAyQ,GAEvB,OADAA,EAAE9F,MAAQlN,EAAEkN,MACL8F,QAEGhJ,KAAK,KAC1BR,QAAQ,cAAc,GAEvB+N,EAAmB1N,KAAK,aAAa,SAAC7J,EAAG9B,GAC3BkF,IAAapD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UAAzC,IACI8W,EAAOpU,IAAQpD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UACjC+R,EAAIrP,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAAKkC,OAAM,GAEzDgS,EAAoB,IAAZzX,EAAEkN,MAAe,GAAKuF,EAAE+E,GAAS,EAC7C,0BAAoBC,EAApB,aAA8B,IAAKvZ,GAAG4P,EAAW2C,UAAU,GAA3D,QAGO8G,EAAmBhO,OAAO,QAChCM,KAAK,SAAUiE,EAAW2C,WAC1B5G,KAAK,SAAS,SAAC7J,EAAG9B,EAAGgD,GAChBkC,IAAapD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UAAzC,IACI8W,EAAOpU,IAAQpD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UAEjC,OADI0C,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAAKkC,OAAM,EAClDgN,CAAE+E,MAEZ3N,KAAK,QAAQ,SAAA7J,GAAC,OAAGA,EAAEkF,MAAMA,SACzB2E,KAAK,UAAW,IAEjBwN,EAAWpN,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAE9B,IACIoW,EADMlU,IAAOpD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UACpBV,EAAEkH,MAAM9I,OACnBuR,EAAOvM,IAAU,YACrBuM,EAAKR,aACAC,SAAS,KACT3F,MAAM,UAAW,IAEtB,IAAInH,EAAIc,IAAU,OAElBuM,EAAKC,KAAL,UAAa5P,EAAEgB,IAAf,kBAA4BhB,EAAEkH,MAAM,GAAGA,MAAvC,cAAkD5E,EAAEgV,KAC/C7N,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MAC1CL,EAAKlG,MAAM,SAAU,WAEtBQ,GAAG,YAAY,WACH7G,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAGxB2N,EAAqBvL,MAAK,SAAC7L,EAAG9B,EAAG+E,GAC7B,IAAIyU,EAAS,EACTC,EAAW,KACf3X,EAAEU,MAAM6B,KAAI,SAAAzC,GACLsD,IAAOtD,EAAEoH,MAAM/E,SAAQ,SAAA3C,GAAC,OAAGA,EAAEkB,UAAUgX,IACtCA,EAAStU,IAAOtD,EAAEoH,MAAM/E,SAAQ,SAAA3C,GAAC,OAAGA,EAAEkB,UACtCiX,EAAW7X,EAAEoF,MAAMgC,UAIX9D,IAAUH,EAAK/E,IAAI6L,UAAU,mBACxC1H,QAAO,SAACC,EAAGlD,EAAG8B,GACX,OAAOoB,EAAE4C,MAAMgC,QAAUyQ,KAC1BnO,QAAQ,OAAO,GACjBK,KAAK,QAAQ,SAAC9J,GACX,OAAOA,EAAEmF,MAAMA,SAChB2E,KAAK,WAAW,SAAC9J,GAEhB,OADUqD,IAAOrD,EAAEmH,MAAM/E,SAAQ,SAAA3C,GAAC,OAAGA,EAAEkB,UAC5BX,EAAEmH,MAAM9I,aAQ/B,IAAIwZ,EAAaV,EAAY7U,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QAE1C+V,EAAW3N,GAAG,aAAa,SAACjK,EAAG9B,EAAG+E,GAC9B,IAAI4U,EAAU7X,EAAEpC,KACZka,EAAOD,EAAQ,GAAGnX,MAAMiV,OAAOkC,EAAQ,GAAGnX,OAAO6B,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAK3DiJ,GAJWiI,EAAY9R,QAAO,SAAAhB,GAC9B,OAAOyW,EAAK5U,QAAQ7B,EAAE4B,OAAS,KAAIuG,QAAQ,YAAY,GAC3CpG,IAAU,YAAY2G,UAAU,SAClB1H,QAAO,SAAAC,GAAC,OAAGwV,EAAK5U,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,mBAAmB,GAC5FpG,MAAiBoC,OAAOxF,EAAEwF,QAAQjC,MAAM,CAAC,EAAGuK,EAAWtC,UACpDpI,IAAUH,EAAK/E,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,OAC7F3I,GAAG,YAAY,SAACjK,EAAG9B,EAAG+E,GACrBG,IAAa,2BAA2BoG,QAAQ,YAAY,GAC5DpG,IAAa,oBAAoBoG,QAAQ,mBAAmB,GAC5DpG,IAAUH,EAAK/E,IAAIwN,OAAO,WAAWyB,YAGzC,IAAI4K,EAAkBH,EAAW7N,UAAU,WAAWnM,MAAK,SAAAoC,GACvD,OAAOA,EAAE2D,QACVqG,KAAK,KAAKR,QAAQ,SAAS,GAE9BuO,EAAgBlM,MAAK,SAAC7L,EAAG9B,EAAGqK,GAExBvI,EAAEU,MAAMsX,SAAW5U,IAAOpD,EAAEU,MAAM6B,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAC5C,IAAI6Z,EAAU7U,IAAUmF,EAAMrK,IACzB6L,UAAU,KACVnM,KAAK,CAACoC,EAAEU,MAAM6B,KAAI,SAAAyQ,GAGf,OAFAA,EAAEgF,SAAW5U,IAAOpD,EAAEU,MAAM6B,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WACtC4U,EAAE9F,MAAQlN,EAAEkN,MACL8F,OAEVhJ,KAAK,KACLR,QAAQ,gBAAgB,GAC7ByO,EAAQpO,KAAK,aAAa,SAAC7J,EAAE9B,EAAEgD,GAE3B,OAAkB,IAAflB,EAAE,GAAGkN,MACG,6BAEA,iBAAiBY,EAAWtC,OAAO,mBAGvCyM,EAAQ1O,OAAO,QAAQM,KAAK,IAAiB,IAAZ7J,EAAEkN,MAAcgL,EAAgBC,GACvEtO,KAAK,QAAQ,SAACmJ,EAAG9U,EAAGgD,GACrB,OAAO2P,KACVhH,KAAK,UAAW,IAChBJ,MAAM,SAAUmH,EAAc5Q,EAAEkN,WAGtB6K,EAAgBxO,OAAO,QACrCM,KAAK,SAAUiE,EAAWtC,QAC1B3B,KAAK,QAAS,IACdJ,MAAM,OAAQ,QACdA,MAAM,SAAU,QAEDmO,EAAW7N,UAAU,gBAAgBnM,MAAK,SAAAoC,GAC1D,OAAOA,EAAEpC,QACVoM,KAAK,KAAKR,QAAQ,cAAc,GAELO,UAAU,cAAcnM,MAAK,SAACoC,EAAE9B,GAM1D,OALc8B,EAAEU,MAAM6B,KAAI,SAAAzC,GAGtB,OAFAA,EAAEyD,MAAQvD,EAAEuD,MACZzD,EAAEsY,OAASla,EACJ4B,QAGZkK,KAAK,QAAQR,QAAQ,SAAS,GAEpBoO,EAAW7N,UAAU,gBAAgBnM,MAAK,SAAAoC,GAAC,OAAGA,EAAEpC,QACxDoM,KAAK,QAAQR,QAAQ,WAAW,GAAMK,KAAK,QAAS,IAAIA,KAAK,UAAU,SAAC7J,EAAG9B,GAC5E,OAAciH,MAAXnF,EAAEU,MACM,EAEA,KAIRmJ,KAAK,aAAa,SAAC7J,EAAG9B,GACzB,GAAciH,MAAXnF,EAAEU,MAAmB,CACpB,IAAIoW,EAAO9W,EAAEU,MAAM,GAAGyF,OAAOY,OAG7B,OAFA+P,EAAKvT,MAAM,CAACuK,EAAWtC,OAAQ,IAExB,eAAesL,EADX1T,IAAQpD,EAAEU,MAAM6B,KAAI,SAAAzC,GAAC,OAAIA,EAAEwE,OAAOC,aACZ,IAEjC,MAAO,oBAEZsF,KAAK,QAAQ,SAAC7J,GAAD,OAAK4Q,EAAc5Q,EAAEkN,UAGpC,IAAImL,EAAQjV,MAAYkV,OAAO,CAAC,CAAC,EAAG,GAAI,CAAC,GAAIxK,EAAWtC,UACxD6M,EAAMpO,GAAG,OAOT,WAEG,IAAIrM,EAAOwF,IAAUoK,KAAK+K,YAAY3a,OAAO,GAEzC4B,EAAI4D,IAASoV,UACbC,EAAOrV,IAAU,OAEjB8J,EAAQ9J,IAAU,YAAY2G,UAAU,eAAeiE,OACvD0K,EAAuB,IAAVxL,EAAc,MAAQ,MAEvC,GAAQ,MAAL1N,EAAU,CACM4D,IAAU,YAAY2G,UAAU,SAAS1H,QAAO,SAAAC,GAC3D,OAAuB,IAAhBA,EAAE1E,KAAK+G,QAEN2J,SACR7B,GAAWrJ,IAAU,YAAa,MAAM,GAG5C,IAAI8I,EAAI9I,MAAiBoC,OAAO,CAAC5H,EAAK4H,OAAO,GAAI5H,EAAK4H,OAAO,KAAKjC,MAAM,CAAC,EAAGuK,EAAWtC,SAEnFmN,GADY/a,EAAKoD,IACJ,CAACkL,EAAE0M,OAAOpZ,EAAE,IAAK0M,EAAE0M,OAAOpZ,EAAE,MAEzC2V,EAAY/R,IAAU,YAAY2G,UAAU,SAE5CxB,EAAQ3K,EAAKA,KAAKuE,SAAQ,SAAArC,GAAC,OAAGA,EAAEY,MAAM2B,QAAO,SAAAC,GAC7C,OAAQA,EAAEgC,OAAOC,SAAWoU,EAAW,IAAQrW,EAAEgC,OAAOC,SAAWoU,EAAW,SAK9EE,EAAYtQ,EAAMhG,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAEhB2U,EAAWvV,QAAO,SAAAC,GAAC,OAAGA,EAAE4K,QAAUtP,EAAKsP,OAAS5K,EAAEtB,KAAOpD,EAAKoD,OACpE6K,MAAK,SAAC5H,EAAG/F,EAAGgD,GAGlB,IAAIwB,EAAOuB,EAAErG,KAAK2E,KAAI,SAACzC,EAAGV,GAGtB,OAFAU,EAAE0T,MAAQsF,EAAoBhZ,EAAEY,MAAM2B,QAAO,SAAAC,GAAC,OAAGuW,EAAU3V,QAAQZ,EAAEW,UACrEnD,EAAEkY,SAAW5U,IAAOa,EAAEN,KAAKvE,GAAGsB,MAAM6B,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WACvC0B,KAQPiZ,EALY3V,IAAUlC,EAAEhD,IAAI6L,UAAU,sBACzCnM,KAAK8E,GACLsH,KAAK,KACLR,QAAQ,oBAAoB,GAEHO,UAAU,KAAKnM,MAAK,SAAAoC,GAK1C,MAAO,CAJKA,EAAEwT,MAAMjR,KAAI,SAAAkR,GAEpB,OADAA,EAAEvG,MAAQlN,EAAEkN,MACLuG,SAGVzJ,KAAK,KACN+O,EAAUlN,MAAK,SAACC,EAAG5N,EAAGsQ,GAClB,IAAItB,EAAQpB,EAAE,GAAGoB,MACN9J,IAAUoL,EAAEtQ,IAAIqL,OAAO,QAC7BM,KAAK,IAAe,IAAVqD,EAAcgL,EAAgBC,GACxCtO,KAAK,OAAQ8G,EAAYzD,GAAO,IAChCrD,KAAK,eAAgB,IACrBJ,MAAM,SAAUkH,EAAYzD,GAAO,IACxCzF,QAAQkD,IAAImB,EAAGoB,EAAOsB,GACtBuK,EAAUlP,KAAK,YAAuB,IAAVqD,EAAc,6BAAd,wBAA8DY,EAAWtC,OAAzE,uBAYxC,IAIIoK,EAAgBoD,EAAazQ,EAJlB3K,EAAKA,KAAKuE,SAAQ,SAAArC,GAAC,OAAGA,EAAEY,MAAM2B,QAAO,SAAAC,GAChD,OAAQA,EAAEgC,OAAOC,QAAUoU,EAAW,IAAQrW,EAAEgC,OAAOC,QAAUoU,EAAW,SAG9B/a,EAAM+a,EAAYD,GAChEO,EAAiBrD,EAAc,GAC/BsD,EAAYtD,EAAc,GACXA,EAAc,GAChBA,EAAc,GAE/B,GAAG1I,EAAQ,EAAE,CAET,IAAIiM,EAAc/V,IAAU,YAAY2G,UAAU,eAAe1H,QAAO,SAACC,EAAGpE,EAAGgD,GAC3E,OAAOkC,IAAUlC,EAAEhD,IAAI2L,KAAK,UAArB,UAAoCjM,EAAK+F,KAAKwN,WAA9C,YAA4DvT,EAAKoD,QAG5E,GAA0B,IAAvBmY,EAAYnL,OAAa,CAExB5K,IAAUoK,MAAM9B,OAAO,cACtBjC,MAAM,OADP,UACkBkH,EAAYzD,GAAO,KACpCrD,KAAK,SAFN,UAEmB8G,EAAYzD,GAAO,KACrCrD,KAAK,eAAgB,GAEtBzG,IAAUoK,MAAM9B,OAAO,YACtB7B,KAAK,SAAU8G,EAAYzD,GAAO,IAClCrD,KAAK,eAAgB,GAEVzG,IAAU,YACjBmG,OAAO,QACPM,KAAK,QAAS6O,GACd7O,KAAK,KAAM6O,GACXlP,QAAQ,cAAc,GACtBA,QALO,UAKI5L,EAAK+F,KAAKwN,aAAc,GACnC3H,QAAQ,yBAAyB,GACjCC,MAAM,aAAckH,EAAYzD,GAAO,IACvCrD,KAAK,QARE,UAQUjM,EAAK+F,KAAKwN,WARpB,YAQkCvT,EAAKoD,MAC9CoY,MAAM,CAACf,MAAM7K,KAAMjF,MAAOA,IAC1BoB,KAVO,UAUC/L,EAAK+F,KAAKwN,WAVX,aAU0BvT,EAAKoD,IAV/B,aAUuCyX,EAAKE,EAAW,IAVvD,cAUgEF,EAAKE,EAAW,MAE3EpP,OAAO,KAAKC,QAAQ,sBAAsB,GAAMC,MAAM,eAAgB,QAElFQ,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACpBkC,IAAUpD,GAAGxB,KAAK6Z,EAAMzR,KAAM,MAC9BxD,IAAUlC,EAAEhD,GAAGqa,YAAYpL,SAC3B/J,IAAUpD,GAAG0L,OAAO,YAAY7B,KAAK,eAAgB,UAGxD,CAGDsP,EAAYxP,KAAZ,UAAoB/L,EAAK+F,KAAKwN,WAA9B,aAA6CvT,EAAKoD,IAAlD,aAA0DyX,EAAKE,EAAW,IAA1E,cAAmFF,EAAKE,EAAW,MACxFQ,EAAY5P,OAAO,KAAKC,QAAQ,sBAAsB,GAAMC,MAAM,eAAgB,QAExFQ,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACpBkC,IAAUpD,GAAGxB,KAAK6Z,EAAMzR,KAAM,MAC9BxD,IAAUpD,GAAG0L,OAAO,YAAY7B,KAAK,eAAgB,GACrDzG,IAAUlC,EAAEhD,GAAGqa,YAAYpL,YAG/B/J,IAAU+V,EAAYC,SAAS5a,KAAK6Z,EAAMzR,KAAM,MAChDxD,IAAU+V,EAAYC,SAAS1N,OAAO,YAAY7B,KAAK,eAAgB,GAGvEsL,EAASpL,UAAT,WAAuBnM,EAAKoD,MACvB+I,UADL,UACkBnM,EAAK+F,KAAKwN,aACvBpH,UAAU,kBACVP,QAAQ,iBAAiB,GACzBA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GACfA,QANL,UAMgB5L,EAAKoD,MAAO,GAE5BmU,EAASpL,UAAT,WAAuBnM,EAAKoD,MACvB+I,UAAU,oBACVP,QAAQ,mBAAmB,GAC3BA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GACfA,QALL,UAKgB5L,EAAKoD,MAAO,GAExBmU,EAASpL,UAAT,WAAuBnM,EAAKoD,MAC3B+I,UAAU,wBACVP,QAAQ,uBAAuB,GAC/BA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GACfA,QALD,UAKY5L,EAAKoD,MAAO,GAExBmU,EAASpL,UAAT,WAAuBnM,EAAKoD,MAC3B+I,UAAU,wBACVP,QAAQ,uBAAuB,GAC/BA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GACfA,QALD,UAKY5L,EAAKoD,MAAO,GAG5B,IAAI8F,EAAQqS,EAAYtP,KAAK,MAE7BqD,EAAkB,QAAVpG,EAAkB,EAAI,EAE9B1D,IAAUoK,MAAM9B,OAAO,cAClBjC,MAAM,OADX,UACsBkH,EAAYzD,GAAO,KACpCrD,KAAK,SAFV,UAEuB8G,EAAYzD,GAAO,KACrCrD,KAAK,eAAgB,GAE1BzG,IAAUoK,MAAM9B,OAAO,YAClB7B,KAAK,SAAU8G,EAAYzD,GAAO,IAClCrD,KAAK,eAAgB,GAEtB,IAAItB,EAAQ3K,EAAKA,KAAKuE,SAAQ,SAAArC,GAAC,OAAGA,EAAEY,MAAM2B,QAAO,SAAAC,GAC7C,OAAQA,EAAEgC,OAAOC,SAAWoU,EAAW,IAAQrW,EAAEgC,OAAOC,SAAWoU,EAAW,SAG9EU,EAAWzb,EAAKA,KAAKuE,SAAQ,SAAArC,GAAC,OAAGA,EAAEY,MAAM2B,QAAO,SAAAC,GAChD,OAAQA,EAAEgC,OAAOC,QAAUoU,EAAW,IAAQrW,EAAEgC,OAAOC,QAAUoU,EAAW,SAGhFQ,EAAYC,MAAM,CAACf,MAAO7K,KAAMjF,MAAMA,IAE1CyQ,EAAazQ,EAAO8Q,EAAUzb,EAAM+a,EAAY7R,QAInD,CAED1D,IAAU,YAAY2G,UAAU,eAAe1H,QAAO,SAACC,EAAGpE,GAAJ,OAAe,IAANA,KAASiP,SAExE,IAAIuL,EAA2B,IAAd5H,EAAkB,MAAO,MAE1C1N,IAAU,YACLmG,OAAO,QACPM,KAAK,SACLL,QAAQ,cAAc,GACtBA,QAAQ,yBAAyB,GACjCC,MAAM,aAAckH,EAAYG,GAAW,IAC3CjH,KAAK,QANV,UAMsBjM,EAAK+F,KAAKwN,WANhC,YAM8CvT,EAAKoD,MAC9C2I,KAPL,UAOa/L,EAAK+F,KAAKwN,WAPvB,aAOsCvT,EAAKoD,IAP3C,aAOmDyX,EAAKE,EAAW,IAPnE,cAO4EF,EAAKE,EAAW,MAC1E7H,EAAJ,IAAdA,EAA8B,EAAgB,EAC9CoI,EAAU1P,QAAQkP,GAAY,GAC9BO,EAAezP,QAAQkP,GAAY,SAIvCtV,IAAA,WAAiBxF,EAAKoD,IAAtB,oBAA4CwI,QAAQ,kBAAkB,GACtEpG,IAAA,WAAiBxF,EAAKoD,IAAtB,oBAA4CwI,QAAQ,kBAAkB,MA5N7EoO,EAAWrO,OAAO,KACjBC,QAAQ,2BAA2B,GACnCK,KAAK,QAAS,SACdrL,KAAK6Z,IAxdKiB,CAA6BrI,EAASF,EAAeA,EAAe3S,OAAS,GAAIyW,OASzF0E,EAAmBxE,EAAYF,EAAaV,MAwrB7C,SAASoF,EAAmBxE,EAAYF,EAAaV,GAExD,IAAIwC,EAAgB5B,EAAWxL,OAAO,KAAKC,QAAQ,aAAa,GAChEmN,EAAc9M,KAAK,YAAa,oBAChC8M,EAActU,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAAqB0H,OAAO,KAAKC,QAAQ,YAAY,GAGhF,IAAIpD,EAAOuQ,EAAc5M,UAAU,UAAUnM,MAAK,SAAAoC,GAC9C,MAAO,CAACA,EAAE4W,aAAY5M,KAAK,KAAKR,QAAQ,QAAQ,GACpDpD,EAAKyD,KAAK,YAAV,mBAEA,IAAIgN,EAAWzQ,EAAK/D,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QACjCgV,EAAStN,OAAO,QACXM,KAAK,SAAUiE,EAAWtC,QAC1B3B,KAAK,QAAS,IACdA,KAAK,OAAQ,QACbJ,MAAM,eAAgB,SACtBA,MAAM,SAAU,SAELoN,EAAStN,OAAO,QAC3BM,KAAK,QAAS,IACdA,KAAK,UAAU,SAAA7J,GACZ,IAAI8W,EAAO9W,EAAEmG,OAAOY,OAEpB,OADA+P,EAAKvT,MAAM,CAAEuK,EAAWtC,OAAS,EAAI,IAC9BsL,EAAK9W,EAAEsE,OAAOiB,WAAauR,GAAM9W,EAAEsE,OAAOe,cAClDwE,KAAK,aAAa,SAAC7J,EAAG9B,GACrB,IAAI4Y,EAAO9W,EAAEmG,OAAOY,OAEpB,OADA+P,EAAKvT,MAAM,CAAEuK,EAAWtC,OAAS,EAAI,IAC9B,eAAesL,GAAM9W,EAAEsE,OAAOe,WAAW,OACjDoE,MAAM,UAAW,IAAKI,KAAK,OAAQgH,GAE7BgG,EAAStN,OAAO,QAAQM,KAAK,QAAS,IAAIA,KAAK,SAAU,GAE/DA,KAAK,aAAa,SAAC7J,EAAG9B,GACrB,IAAI4Y,EAAO9W,EAAEmG,OAAOY,OAGpB,OAFA+P,EAAKvT,MAAM,CAACuK,EAAWtC,OAAQ,IAExB,eAAesL,GADV9W,EAAEsE,OAAOC,SACY,OACtCsF,KAAK,OAAQ,WAGhB,IAAIkN,EAAU3Q,EAAK/D,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAC5BmV,EAAkBD,EAAQhN,UAAU,uBAAuBnM,MAAK,SAAAoC,GAChE,OAAOA,EAAE2D,QAAOqG,KAAK,KAAKR,QAAQ,qBAAqB,GAE3DwN,EAAgBzN,OAAO,QAClBI,MAAK,SAAC3J,EAAG9B,GAAJ,OAAS8B,EAAEkF,MAAMgC,SACtB2C,KAAK,IAAK,IACVA,KAAK,KAAM,GACXJ,MAAM,YAAa,IACnBA,MAAM,cAAe,OAE1BuN,EAAgBnN,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,6BAAyB,IAAKA,GAAG4P,EAAW2C,UAAU,GAAtD,QAClCuG,EAAgBzN,OAAO,QAClBM,KAAK,SAAUiE,EAAW2C,WAC1B5G,KAAK,QAASiE,EAAW2C,WACzB5G,KAAK,OAAQ,QAAQA,KAAK,UAAW,GAE1BmN,EAAgBzN,OAAO,QAClCC,QAAQ,cAAc,GACtBK,KAAK,SAAUiE,EAAW2C,WAC1B5G,KAAK,QAASiE,EAAW2C,WAEpB5G,KAAK,QAAQ,SAAC7J,EAAG9B,GACnB,kCAA4B8B,EAAEkH,MAAM,GAAGxG,MAAvC,QACDmJ,KAAK,eAAgB,IAAKA,KAAK,SAFtC,2BAImBkN,EAAQhN,UAAU,uBAChC1H,QAAO,SAACC,EAAGlD,EAAG8B,GACX,IAAI+V,EAAS7T,IAAOA,IAAalC,GAAGtD,OAAO2E,KAAI,SAAAzC,GAAC,OAAGA,EAAEoH,MAAM,GAAGxG,UAC9D,OAAO4B,EAAE4C,MAAMgC,QAAU9D,IAAalC,GAAGtD,OAAOyE,QAAO,SAAAvC,GAAC,OAAGA,EAAEoH,MAAM,GAAGxG,QAAUuW,KAAQ,GAAG/R,MAAMgC,SAClGsC,QAAQ,OAAO,GAETkC,OAAO,mBAAmB7B,KAAK,QAAQ,SAAC9J,EAAG7B,GAChD,OAAO6B,EAAEmF,MAAMA,SAChB2E,KAAK,WAAW,SAAC9J,GAEhB,OADUqD,IAAOrD,EAAEmH,MAAM/E,SAAQ,SAAA3C,GAAC,OAAGA,EAAEkB,UAC5BX,EAAEmH,MAAM9I,UAK3B,IAAI8Y,EAAcP,EAAc5M,UAAU,gBAAgBnM,MAAK,SAAAoC,GAC3D,OAAOA,EAAEsU,YAAWtK,KAAK,KAAKR,QAAQ,cAAc,GAExD0N,EAAYrN,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GACjC,IAAI0Q,EAAO1Q,EAAE9C,OAAS,IAAM4B,EAAEuD,MAAM,GAAKvD,EAAEuD,MAAM,IAAM,EAAI,EACvDkP,EAAIrP,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAGuK,EAAW4C,YACxE,MAAO,cAAc,IAAOmE,EAAY3W,GAAMuU,EAAEb,IAAQ,UAEhE,IAAIuF,EAAeD,EAAY7U,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAGxC0V,EAAqBJ,EAAapN,UAAU,gBAC3CnM,MAAK,SAAAoC,GAKF,OAJWA,EAAE2D,KAAKpB,KAAI,SAAAzC,GAElB,OADAA,EAAEoN,MAAQlN,EAAEkN,MACLpN,QAEGkK,KAAK,KACtBR,QAAQ,cAAc,GAG3B+N,EAAmB1N,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GACxC,0BAAoB4M,EAAW2C,UAA/B,aAA6C,IAAKvS,GAAG4P,EAAW2C,UAAU,GAA1E,QAEO8G,EAAmBhO,OAAO,QAC1BM,KAAK,SAAUiE,EAAW2C,WAC1B5G,KAAK,SAAS,SAAC7J,EAAG9B,EAAGgD,GACVkC,IAAapD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UAAzC,IACI8W,EAAOpU,IAAQpD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UAErC,OADQ0C,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,IAC3CkP,CAAE+E,MAEV3N,KAAK,QAAQ,SAAA7J,GAAC,OAAGA,EAAEkF,MAAMA,SACzB2E,KAAK,UAAW,IAT3B,IAsCI2P,EAAqBrC,EAAapN,UAAU,gBAC3CnM,MAAK,SAAAoC,GAAC,OAAGA,EAAE2D,QAAMqG,KAAK,KACtBR,QAAQ,cAAc,GAE3BgQ,EAAmB3P,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,6BAAyB,IAAKA,GAAG4P,EAAW2C,UAAU,GAAtD,QAErC+I,EAAmBjQ,OAAO,QACrBM,KAAK,SAAUiE,EAAW2C,WAC1B5G,KAAK,QAASiE,EAAW2C,WACzB5G,KAAK,OAAQ,QAAQA,KAAK,UAAW,GAE1C,IAAIwN,EAAamC,EAAmBjQ,OAAO,QACtCC,QAAQ,cAAc,GACtBK,KAAK,SAAUiE,EAAW2C,WAC1B5G,KAAK,QAASiE,EAAW2C,WAE9B4G,EAAWxN,KAAK,QAAQ,SAAC7J,EAAG9B,EAAGgD,GAC3B,IACIoW,EADMlU,IAAOpD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UACpBV,EAAEkH,MAAM9I,OACnBsR,EAAQtM,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,IACtD,kCAA4BmM,EAAM4H,GAAlC,QACDzN,KAAK,eAAgB,IAAKA,KAAK,SALlC,2BAOAwN,EAAWpN,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAC9B,IACIoW,EADMlU,IAAOpD,EAAEkH,MAAM3E,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UACpBV,EAAEkH,MAAM9I,OACnBuR,EAAOvM,IAAU,YACrBuM,EAAKR,aACAC,SAAS,KACT3F,MAAM,UAAW,IAEtB,IAAInH,EAAIc,IAAU,OAElBuM,EAAKC,KAAL,UAAa5P,EAAEkH,MAAM,GAAGA,MAAxB,cAAmC5E,EAAEgV,KAChC7N,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MAC1CL,EAAKlG,MAAM,SAAU,WAEtBQ,GAAG,YAAY,WACH7G,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAGxB0N,EAAatL,MAAK,SAAC7L,EAAG9B,EAAG+E,GACrB,IAAIyU,EAAS,EACTC,EAAW,KACf3X,EAAE2D,KAAKpB,KAAI,SAAAzC,GACJsD,IAAOtD,EAAEoH,MAAM/E,SAAQ,SAAA3C,GAAC,OAAGA,EAAEkB,UAAUgX,IACtCA,EAAStU,IAAOtD,EAAEoH,MAAM/E,SAAQ,SAAA3C,GAAC,OAAGA,EAAEkB,UACtCiX,EAAW7X,EAAEoF,MAAMgC,UAIX9D,IAAUH,EAAK/E,IAAI6L,UAAU,gBACxC1H,QAAO,SAACC,EAAGlD,EAAG8B,GACX,OAAOoB,EAAE4C,MAAMgC,QAAUyQ,KAC1BnO,QAAQ,OAAO,GAEZkC,OAAO,mBAAmB7B,KAAK,QAAQ,SAAC9J,GAC1C,OAAOA,EAAEmF,MAAMA,SAChB2E,KAAK,WAAW,SAAC9J,GAEhB,OADUqD,IAAOrD,EAAEmH,MAAM/E,SAAQ,SAAA3C,GAAC,OAAGA,EAAEkB,UAC5BX,EAAEmH,MAAM9I,aAI/B,IAAIqb,EAAU9C,EAActU,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QACrCqG,EAAa,GACjBuR,EAAQ5N,MAAK,SAAC7L,EAAG9B,EAAG+E,GAChB,IAAIyW,EAAc,GAClBtW,IAAUH,EAAK/E,IAAI6L,UAAU,QAAQ8B,MAAK,SAACtL,EAAGnB,EAAG8B,GAC7CwY,EAAYhb,KAAK,CAACwC,EAAE9B,GAAG4M,wBAAwByG,EAAGvR,EAAE9B,GAAG4M,wBAAwBE,EAAI,KACnFwN,EAAYhb,KAAK,CAACwC,EAAE9B,GAAG4M,wBAAwByG,EAAI,GAAIvR,EAAE9B,GAAG4M,wBAAwBE,EAAI,QAE5FhE,EAAWxJ,KAAX,UAAoBgb,IACJtW,MAChBsW,EAAYA,EAAYtb,OAAQ,GAAG,GAAKsb,EAAYA,EAAYtb,OAAQ,GAAG,GAAK,EAChFsb,EAAYA,EAAYtb,OAAQ,GAAG,GAAKsb,EAAYA,EAAYtb,OAAQ,GAAG,GAAK,EAChF4B,EAAE2Z,IAAMD,KAGZD,EAAQ5N,MAAK,SAACC,EAAG5N,EAAGgD,GAChB,IAAI0Y,EAAYxW,MAChBA,IAAUlC,EAAEhD,IAAIwN,OAAO,aAAanC,OAAO,QAAQM,KAAK,KAAK,SAAC7J,GAAD,OAAM4Z,EAAU5Z,EAAE2Z,QAC9E9P,KAAK,YAAa,mBAAmB3I,EAAEhD,GAAG8N,wBAAwBE,EAAE,KACpErC,KAAK,OAAQ,QACbA,KAAK,SAHN,2BAICA,KAAK,cAAe,MAIzB,IAAI+N,EAAaV,EAAY7U,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QAE1C+V,EAAW3N,GAAG,aAAa,SAACjK,EAAG9B,EAAG+E,GAC9B,IAAI6U,EAAO9X,EAAEpC,KAAK2E,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAKxBiJ,GAJWiI,EAAY9R,QAAO,SAAAhB,GAC9B,OAAOyW,EAAK5U,QAAQ7B,EAAE4B,OAAS,KAAIuG,QAAQ,YAAY,GAC3CpG,IAAU,YAAY2G,UAAU,SAClB1H,QAAO,SAAAC,GAAC,OAAGwV,EAAK5U,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,mBAAmB,GAC5FpG,MAAiBoC,OAAOxF,EAAEwF,QAAQjC,MAAM,CAAC,EAAGuK,EAAWtC,UACpDpI,IAAUH,EAAK/E,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,OAC7F3I,GAAG,YAAY,SAACjK,EAAG9B,EAAG+E,GACrBG,IAAa,2BAA2BoG,QAAQ,YAAY,GAC5DpG,IAAa,oBAAoBoG,QAAQ,mBAAmB,GAC5DpG,IAAUH,EAAK/E,IAAIwN,OAAO,WAAWyB,YAGzCyK,EAAW/L,MAAK,SAAC7L,EAAG9B,EAAGqK,GACnB,IAAI0P,EAAU7U,IAAUmF,EAAMrK,IACzB6L,UAAU,KACVnM,KAAK,CAACoC,EAAE2D,OACRqG,KAAK,KACLR,QAAQ,gBAAgB,GAE7ByO,EAAQpO,KAAK,YAAa,iBAAiBiE,EAAWtC,OAAO,iBAClDyM,EAAQ1O,OAAO,QAAQM,KAAK,IAAKsO,GACvCtO,KAAK,OAAQgH,GAAiBhH,KAAK,eAAgB,IACvDJ,MAAM,SAAUoH,MAGN+G,EAAWrO,OAAO,QAC5BM,KAAK,SAAUiE,EAAWtC,QAC1B3B,KAAK,QAAS,IACdJ,MAAM,OAAQ,QACdA,MAAM,SAAU,QAJrB,IAMIoQ,EAAYjC,EAAW7N,UAAU,cAAcnM,MAAK,SAAAoC,GAKpD,OAJcA,EAAEpC,KAAK2E,KAAI,SAAAzC,GAErB,OADAA,EAAEyD,MAAQvD,EAAEuD,MACLzD,QAEMkK,KAAK,QAAQR,QAAQ,SAAS,GAEnDqQ,EAAUhQ,KAAK,QAAS,IACxBgQ,EAAUhQ,KAAK,UAAU,SAAC7J,EAAG9B,GACzB,GAAsBiH,MAAnBnF,EAAEmG,OAAOY,OAAoB,CAC5B,IAAI+P,EAAO9W,EAAEmG,OAAOY,OAEpB,OADA+P,EAAKvT,MAAM,CAAC,GAAI,IACTuT,EAAK9W,EAAEsE,OAAOiB,WAAauR,EAAK9W,EAAEsE,OAAOe,WAEhD,OAAO,KAEZwE,KAAK,aAAa,SAAC7J,EAAG9B,GACrB,IAAI4Y,EAAO9W,EAAEmG,OAAOY,OAEpB,OADA+P,EAAKvT,MAAM,CAAC,GAAI,IACT,eAAeuT,EAAK9W,EAAEsE,OAAOe,WAAW,OAInDwU,EAAUhQ,KAAK,OAAQgH,GAAiBhH,KAAK,UAAW,IAE3C+N,EAAWrO,OAAO,QAAQM,KAAK,QAAS,IAAIA,KAAK,UAAU,SAAC7J,EAAG9B,GACxE,OAAgBiH,MAAbnF,EAAEpC,KAAK,GACC,EAEA,KAIRiM,KAAK,aAAa,SAAC7J,EAAG9B,GACzB,GAAgBiH,MAAbnF,EAAEpC,KAAK,GAAgB,CACtB,IAAIkZ,EAAO9W,EAAEpC,KAAK,GAAGuI,OAAOY,OAG5B,OAFA+P,EAAKvT,MAAM,CAACuK,EAAWtC,OAAQ,IAExB,eAAesL,EADX1T,IAAQpD,EAAEpC,KAAK2E,KAAI,SAAAzC,GAAC,OAAIA,EAAEwE,OAAOC,aACX,IAEjC,MAAO,oBAEZsF,KAAK,OAAQ,WAGf,IAAIwO,EAAQjV,MAAYkV,OAAO,CAAC,CAAC,EAAG,GAAI,CAAC,GAAIxK,EAAWtC,UACxD6M,EAAMpO,GAAG,OAOT,WAEG,IAAIrM,EAAOwF,IAAUoK,KAAK+K,YAAY3a,OAAO,GACzC4B,EAAI4D,IAASoV,UACbC,EAAOrV,IAAU,OAIjB8J,EAAQ9J,IAAU,YAAY2G,UAAU,eAAeiE,OACvD0K,EAAuB,IAAVxL,EAAc,MAAQ,MAEvC,GAAQ,MAAL1N,EAAU,CACM4D,IAAU,YAAY2G,UAAU,SAAS1H,QAAO,SAAAC,GAC3D,OAAuB,IAAhBA,EAAE1E,KAAK+G,QAEN2J,SACR7B,GAAWrJ,IAAU,YAAa,MAAM,GAG5C,IAAI8I,EAAI9I,MAAiBoC,OAAO,CAAC5H,EAAK4H,OAAO,GAAI5H,EAAK4H,OAAO,KAAKjC,MAAM,CAAC,EAAGuK,EAAWtC,SAGnFmN,GADY/a,EAAKoD,IACJ,CAACkL,EAAE0M,OAAOpZ,EAAE,IAAK0M,EAAE0M,OAAOpZ,EAAE,MAEzC2V,EAAY/R,IAAU,YAAY2G,UAAU,SAE5CxB,EAAQ3K,EAAKA,KAAKyE,QAAO,SAAAC,GACzB,OAAQA,EAAEgC,OAAOC,QAAUoU,EAAW,IAAQrW,EAAEgC,OAAOC,QAAUoU,EAAW,MAG5EjW,EAAOoW,EAAoBvQ,GAI/B7F,EAAKsV,SAAW5U,IAAOxF,EAAK+F,KAAKpB,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAG3C,IAAI0b,EAAc1W,IAAUoK,KAAK+K,YAChCxO,UAAU,sBACVnM,KAAK,CAAC8E,IACNsH,KAAK,KACLR,QAAQ,oBAAoB,GAE7BsQ,EAAYjQ,KAAK,YAAa,8BACnBiQ,EAAYvQ,OAAO,QAAQM,KAAK,IAAKqO,GAC3CrO,KAAK,OAAQ8G,EAAYzD,GAAO,IAAIrD,KAAK,eAAgB,IAC7DJ,MAAM,SAAUkH,EAAYzD,GAAO,IAEpC,IAAI2L,EAAYtQ,EAAMhG,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAEhB2U,EAAWvV,QAAO,SAAAC,GAAC,OAAGA,EAAE4K,QAAUtP,EAAKsP,OAAS5K,EAAEtB,KAAOpD,EAAKoD,OACpE6K,MAAK,SAAC5H,EAAG/F,EAAGgD,GAElB,IAAIwB,EAAOoW,EAAoB7U,EAAErG,KAAKyE,QAAO,SAAAC,GAAC,OAAGuW,EAAU3V,QAAQZ,EAAEW,OAAS,MAE9EP,EAAKsV,SAAW5U,IAAOa,EAAEN,KAAKpB,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAExC,IAAI2b,EAAY3W,IAAUlC,EAAEhD,IAAI6L,UAAU,sBACzCnM,KAAK,CAAC8E,IACNsH,KAAK,KACLR,QAAQ,oBAAoB,GAE7BuQ,EAAUlQ,KAAK,YAAa,8BACjBkQ,EAAUxQ,OAAO,QAAQM,KAAK,IAAKqO,GACzCrO,KAAK,OAAQ8G,EAAYzD,GAAO,IAAIrD,KAAK,eAAgB,IAC7DJ,MAAM,SAAUkH,EAAYzD,GAAO,OAItB0K,EAAWvV,QAAO,SAAAC,GAChC,OAAQA,EAAE4K,MAAQtP,EAAKsP,OAAW5K,EAAEtB,MAAQpD,EAAKoD,OACzC6K,MAAK,SAAC5H,EAAG/F,EAAGgD,GAEpBuG,QAAQkD,IAAI,SAAS1G,EAAErG,MACvB,IAIKoc,EAAQlB,EAJF7U,EAAErG,KAAKyE,QAAO,SAAAC,GACrB,OAAQA,EAAEgC,OAAOC,QAAUoU,EAAW,IAAQrW,EAAEgC,OAAOC,QAAUoU,EAAW,OAK/EqB,EAAMhC,SAAW5U,IAAOa,EAAEN,KAAKpB,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAE1C,IAAI2b,EAAY3W,IAAUlC,EAAEhD,IAAI6L,UAAU,sBACzCnM,KAAK,CAACoc,IACNhQ,KAAK,KACLR,QAAQ,oBAAoB,GAE7BuQ,EAAUlQ,KAAK,YAAa,8BACjBkQ,EAAUxQ,OAAO,QAAQM,KAAK,IAAKqO,GACzCrO,KAAK,OAAQ8G,EAAYzD,GAAO,IAAIrD,KAAK,eAAgB,IAC7DJ,MAAM,SAAUkH,EAAYzD,GAAO,OAMxC,IAAImM,EAAWzb,EAAKA,KAAKyE,QAAO,SAAAC,GAC5B,OAAQA,EAAEgC,OAAOC,QAAUoU,EAAW,IAAQrW,EAAEgC,OAAOC,QAAUoU,EAAW,MAG5E/C,EAAgBoD,EAAazQ,EAAO8Q,EAAUzb,EAAM+a,EAAYD,GAChEO,EAAiBrD,EAAc,GAC/BsD,EAAYtD,EAAc,GACXA,EAAc,GAChBA,EAAc,GAE/B,GAAG1I,EAAQ,EAAE,CAET,IAAIiM,EAAc/V,IAAU,YAAY2G,UAAU,eAAe1H,QAAO,SAACC,EAAGpE,EAAGgD,GAC3E,OAAOkC,IAAUlC,EAAEhD,IAAI2L,KAAK,UAArB,UAAoCjM,EAAK+F,KAAKwN,WAA9C,YAA4DvT,EAAKoD,QAG5E,GAA0B,IAAvBmY,EAAYnL,OAAa,CAExB5K,IAAUoK,MAAM9B,OAAO,cACtBjC,MAAM,OADP,UACkBkH,EAAYzD,GAAO,KACpCrD,KAAK,SAFN,UAEmB8G,EAAYzD,GAAO,KACrCrD,KAAK,eAAgB,GAEtBzG,IAAUoK,MAAM9B,OAAO,YACtB7B,KAAK,SAAU8G,EAAYzD,GAAO,IAClCrD,KAAK,eAAgB,GAEVzG,IAAU,YACjBmG,OAAO,QACPM,KAAK,QAAS6O,GACd7O,KAAK,KAAM6O,GACXlP,QAAQ,cAAc,GACtBA,QALO,UAKI5L,EAAK+F,KAAKwN,aAAc,GACnC3H,QAAQ,yBAAyB,GACjCC,MAAM,aAAckH,EAAYzD,GAAO,IACvCrD,KAAK,QARE,UAQUjM,EAAK+F,KAAKwN,WARpB,YAQkCvT,EAAKoD,MAC9CoY,MAAM,CAACf,MAAM7K,KAAMjF,MAAOA,IAC1BoB,KAVO,UAUC/L,EAAK+F,KAAKwN,WAVX,aAU0BvT,EAAKoD,IAV/B,aAUuCyX,EAAKE,EAAW,IAVvD,cAUgEF,EAAKE,EAAW,MAE3EpP,OAAO,KAAKC,QAAQ,sBAAsB,GAAMC,MAAM,eAAgB,QAElFQ,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACpBkC,IAAUpD,GAAGxB,KAAK6Z,EAAMzR,KAAM,MAC9BxD,IAAUlC,EAAEhD,GAAGqa,YAAYpL,SAC3B/J,IAAUpD,GAAG0L,OAAO,YAAY7B,KAAK,eAAgB,UAGxD,CAGDsP,EAAYxP,KAAZ,UAAoB/L,EAAK+F,KAAKwN,WAA9B,aAA6CvT,EAAKoD,IAAlD,aAA0DyX,EAAKE,EAAW,IAA1E,cAAmFF,EAAKE,EAAW,MACxFQ,EAAY5P,OAAO,KAAKC,QAAQ,sBAAsB,GAAMC,MAAM,eAAgB,QAExFQ,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACpBkC,IAAUpD,GAAGxB,KAAK6Z,EAAMzR,KAAM,MAC9BxD,IAAUpD,GAAG0L,OAAO,YAAY7B,KAAK,eAAgB,GACrDzG,IAAUlC,EAAEhD,GAAGqa,YAAYpL,YAG/B/J,IAAU+V,EAAYC,QAAQf,OAAO7Z,KAAK6Z,EAAMzR,KAAM,MACtDxD,IAAU+V,EAAYC,QAAQf,OAAO3M,OAAO,YAAY7B,KAAK,eAAgB,GAE7EsL,EAASpL,UAAT,WAAuBnM,EAAKoD,MACvB+I,UADL,UACkBnM,EAAK+F,KAAKwN,aACvBpH,UAAU,kBACVP,QAAQ,iBAAiB,GACzBA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GACfA,QANL,UAMgB5L,EAAKoD,MAAO,GAE5BmU,EAASpL,UAAT,WAAuBnM,EAAKoD,MACvB+I,UAAU,oBACVP,QAAQ,mBAAmB,GAC3BA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GACfA,QALL,UAKgB5L,EAAKoD,MAAO,GAExBmU,EAASpL,UAAT,WAAuBnM,EAAKoD,MAC3B+I,UAAU,wBACVP,QAAQ,uBAAuB,GAC/BA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GACfA,QALD,UAKY5L,EAAKoD,MAAO,GAExBmU,EAASpL,UAAT,WAAuBnM,EAAKoD,MAC3B+I,UAAU,wBACVP,QAAQ,uBAAuB,GAC/BA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GACfA,QALD,UAKY5L,EAAKoD,MAAO,GAE5B,IAAI8F,EAAQqS,EAAYtP,KAAK,MAE7BqD,EAAkB,QAAVpG,EAAkB,EAAI,EAE9B1D,IAAUoK,MAAM9B,OAAO,cAClBjC,MAAM,OADX,UACsBkH,EAAYzD,GAAO,KACpCrD,KAAK,SAFV,UAEuB8G,EAAYzD,GAAO,KACrCrD,KAAK,eAAgB,GAE1BzG,IAAUoK,MAAM9B,OAAO,YAClB7B,KAAK,SAAU8G,EAAYzD,GAAO,IAClCrD,KAAK,eAAgB,GAG1B,IAAItB,EAAQ3K,EAAKA,KAAKyE,QAAO,SAAAC,GACzB,OAAQA,EAAEgC,OAAOC,SAAWoU,EAAW,IAAQrW,EAAEgC,OAAOC,SAAWoU,EAAW,MAG9EU,EAAWzb,EAAKA,KAAKyE,QAAO,SAAAC,GAC5B,OAAQA,EAAEgC,OAAOC,QAAUoU,EAAW,IAAQrW,EAAEgC,OAAOC,QAAUoU,EAAW,MAGhFQ,EAAYC,MAAM,CAACf,MAAM7K,KAAMjF,MAAOA,IACtCyQ,EAAazQ,EAAO8Q,EAAUzb,EAAM+a,EAAY7R,QAInD,CAED1D,IAAU,YAAY2G,UAAU,eAAe1H,QAAO,SAACC,EAAGpE,GAAJ,OAAe,IAANA,KAASiP,SAExE,IAAIuL,EAA2B,IAAd5H,EAAkB,MAAO,MAE1C1N,IAAU,YACLmG,OAAO,QACPM,KAAK,SACLL,QAAQ,cAAc,GACtBA,QAAQ,yBAAyB,GACjCC,MAAM,aAAckH,EAAYG,GAAW,IAC3CjH,KAAK,QANV,UAMsBjM,EAAK+F,KAAKwN,WANhC,YAM8CvT,EAAKoD,MAC9C2I,KAPL,UAOa/L,EAAK+F,KAAKwN,WAPvB,aAOsCvT,EAAKoD,IAP3C,aAOmDyX,EAAKE,EAAW,IAPnE,cAO4EF,EAAKE,EAAW,MAC1E7H,EAAJ,IAAdA,EAA8B,EAAgB,EAC9CoI,EAAU1P,QAAQkP,GAAY,GAC9BO,EAAezP,QAAQkP,GAAY,SAIvCtV,IAAA,WAAiBxF,EAAKoD,IAAtB,oBAA4CwI,QAAQ,kBAAkB,GACtEpG,IAAA,WAAiBxF,EAAKoD,IAAtB,oBAA4CwI,QAAQ,kBAAkB,MAhP7EoO,EAAWrO,OAAO,KACjBC,QAAQ,2BAA2B,GACnCK,KAAK,QAAS,SACdrL,KAAK6Z,GAkPN,IAAI4B,EAAelF,EAAWxL,OAAO,KAAKC,QAAQ,YAAY,GAC9DyQ,EAAapQ,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAClC,MAAO,cAAe4M,EAAW0C,eAAiB,KAAM,UAG7D,IAAI0J,EAASD,EAAa5X,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QACvCqY,EAAOrQ,KAAK,YAAZ,oBAAsCiE,EAAW0C,eAAiB,IAAlE,WAEA,IAAI2J,EAAWD,EAAOnQ,UAAU,aAAanM,MAAK,SAAAoC,GAC9C,OAAOA,EAAEwS,SAAS7O,QAAOqG,KAAK,KAAKR,QAAQ,WAAW,GAE7C2Q,EAAS5Q,OAAO,QAAQM,KAAK,SAAS,SAAC7J,EAAG9B,EAAGgD,GAEtD,OADY4M,EAAWyC,cAAgBrP,EAAE9C,UAE1CyL,KAAK,UAAU,SAAC7J,EAAG9B,GAElB,OADQkF,MAAiBoC,OAAO,CAAC,EAAGnH,OAAO4H,KAAKjG,GAAG5B,SAASmF,MAAM,CAAEuK,EAAWtC,OAASsC,EAAW1C,OAAS,GACrGc,CAAE7N,OAAO4H,KAAKjG,GAAG5B,OAAS,MAEpCyL,KAAK,OAAQgH,GAAiBhH,KAAK,eAAgB,IAEpDsQ,EAAStQ,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAC9B,IAAIkZ,EAAQtM,EAAWyC,cAAgBrP,EAAE9C,OACrC8N,EAAI9I,MACHoC,OAAO,CAAC,EAAGnH,OAAO4H,KAAKjG,GAAG5B,SAC1BmF,MAAM,CAAEuK,EAAWtC,OAASsC,EAAW1C,OAAS,IAGrD,MAAO,aAAcgP,EAAQlc,EAAG,MADpB4P,EAAWtC,OAASU,EAAE7N,OAAO4H,KAAKjG,GAAG5B,OAAS,IACf,OAE/C8b,EAAOrO,MAAK,SAAC7L,EAAG9B,EAAGqK,GAEf,IAAI8R,EAAUra,EAAEwS,SAAS5U,KAAK2E,KAAI,SAAAzC,GAC9B,OAAQA,EAAEwE,OAAOC,WACjBkO,EAAIrP,MACHoC,OAAO,CAACpC,IAAOiX,GAAUjX,IAAOiX,KAChC9W,MAAM,CAAC,EAAGuK,EAAWyC,gBAEtBrE,EAAI9I,MACHoC,OAAO,CAAC,EAAGpC,IAAOpD,EAAEwS,SAAS7O,KAAKpB,KAAI,SAAA0B,GAAC,OAAG5F,OAAO4H,KAAKhC,GAAG7F,WAAW,IACpEmF,MAAM,CAAEuK,EAAWtC,OAASsC,EAAW1C,OAAS,IAErDhI,IAAUmF,EAAMrK,IACXqL,OAAO,KACPC,QAAQ,UAAU,GAClBhL,KAAK4E,IAAcqP,IACnB5I,KAAK,YAAa,gBAAgBiE,EAAWtC,OAAO,KAEzDpI,IAAUmF,EAAMrK,IAAIqL,OAAO,KACtBC,QAAQ,UAAU,GAClBhL,KAAK4E,IAAY8I,GAAG0G,MAAM,IAC1B/I,KAAK,YAAa,gBAAgBiE,EAAW1C,OAAO,KAErDhI,IAAUmF,EAAMrK,IAAIwN,OAAO,WAAW3B,UAAU,QAAQN,MAAM,YAAa,OAC3ErG,IAAUmF,EAAMrK,IAAIwN,OAAO,WAAW3B,UAAU,QAAQN,MAAM,YAAa,OAE3ErG,IAAUmF,EAAMrK,IACfqL,OAAO,KACPC,QAAQ,gBAAgB,GACxBD,OAAO,QAAQI,KAAK,aACpBE,KAAK,YAJN,yBAIqCiE,EAAWtC,OAAQ,GAJxD,kBAKC/B,MAAM,YAAa,WAI5B,IAAI6Q,EAAUL,EAAa5X,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAExCyY,EAAOzQ,KAAK,YAAZ,oBAAsCiE,EAAW0C,eAAiB,IAAlE,SACA,IAAI+J,EAAWD,EAAOvQ,UAAU,aAAanM,MAAK,SAAAoC,GAC9C,OAAOA,EAAEoT,UAAU7Q,KAAI,SAACvB,EAAK9C,GACzB,MAAO,CAACgJ,MAAOlG,EAAKpD,KAAMoC,EAAEwS,SAAS7O,KAAKzF,GAAIkH,IAAKhC,IAAOpD,EAAEwS,SAAS7O,KAAKpB,KAAI,SAAA0B,GAAC,OAAGA,EAAE7F,kBAEzF4L,KAAK,KAAKR,QAAQ,WAAW,GAC5BgR,EAASD,EAAShR,OAAO,QAAQM,KAAK,SAAS,SAAC7J,EAAG9B,EAAGgD,GAEtD,OADY4M,EAAWyC,cAAgBrP,EAAE9C,UAE1CyL,KAAK,UAAU,SAAC7J,EAAG9B,EAAGgD,GACrB,IAAIsK,EAASxL,EAAEpC,KAAK,GAAMoC,EAAEpC,KAAK,GAAGuI,OAAOkB,YAAYjJ,OAAS0P,EAAW2C,UAAY,GAAK,EAE5F,OADQrN,MAAiBoC,OAAO,CAAC,EAAGxF,EAAEoF,MAAM7B,MAAM,CAAC,EAAIiI,GAChDU,CAAElM,EAAEpC,KAAKQ,WACjByL,KAAK,QAAQ,SAAC7J,EAAG9B,GAChB,OAAoBiH,MAAbnF,EAAEpC,KAAK,GAAkBoC,EAAEpC,KAAK,GAAGsH,MAAQ,UACnD2E,KAAK,UAAW,IAEnB0Q,EAAS1Q,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAC9B,IAAIkZ,EAAQtM,EAAWyC,cAAgBrP,EAAE9C,OACrCoN,EAASxL,EAAEpC,KAAK,GAAMoC,EAAEpC,KAAK,GAAGuI,OAAOkB,YAAYjJ,OAAS0P,EAAW2C,UAAY,GAAM,EAG7F,MAAO,aAAc2J,EAAQlc,EAAG,MADnBsN,EAAO,EADZpI,MAAiBoC,OAAO,CAAC,EAAGxF,EAAEoF,MAAM7B,MAAM,CAAC,EAAIiI,EAAO,GACrCU,CAAElM,EAAEpC,KAAKQ,SACS,OAE/Coc,EAAOvQ,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAC1B,IAAIgG,EAAQ9D,IAAU,KAAKpD,EAAE,GAAG8G,OAAOiD,UAAU,WACjD7C,EAAM7E,QAAO,SAAAC,GACT,OAAOA,EAAE,GAAG4E,QAAUlH,EAAE,GAAGoH,YAAWyC,KAAK,UAAW,IAC1D3C,EAAM7E,QAAO,SAAAC,GAAC,OAAGA,EAAE,GAAG4E,OAASlH,EAAE,GAAGoH,YAAUyC,KAAK,UAAW,IAC9DzG,IAAUlC,EAAEhD,IAAI2L,KAAK,UAAW,OACjCI,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAI2L,KAAK,UAAW,IACpBzG,IAAU,KAAKpD,EAAE,GAAG8G,OAAOiD,UAAU,WAAWF,KAAK,UAAW,OAGhFyQ,EAAOzO,MAAK,SAAC7L,EAAG9B,EAAGqK,GAEX,IAAIkS,EAASrX,MAAgBoC,OAAOxF,EAAEoT,WAAW7P,MAAM,CAAC,EAAGuK,EAAWyC,gBAAgBmK,QAAQ,IAC1FlP,EAASxL,EAAEoT,UAAapT,EAAEoT,UAAUhV,OAAS0P,EAAW2C,UAAY,GAAM,EAC1EvE,EAAI9I,MAAiBoC,OAAO,CAAC,EAAGxF,EAAEwS,SAAS5U,KAAKQ,SAASmF,MAAM,CAAEiI,EAAS,IAC9EpI,IAAUmF,EAAMrK,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,IAClFxP,IAAUmF,EAAMrK,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAcqX,IAAS5Q,KAAK,YAAa,gBAAgB2B,EAAO,KAE7HpI,IAAUmF,EAAMrK,IAAIwN,OAAO,WAAW3B,UAAU,QAAQN,MAAM,YAAa,OAC3ErG,IAAUmF,EAAMrK,IAAIwN,OAAO,WAAW3B,UAAU,QAAQN,MAAM,YAAa,UAKvF,SAASuP,EAAazQ,EAAO8Q,EAAUzb,EAAM+a,EAAYD,GAErD,IAAIG,EAAYtQ,EAAMhG,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAC5B0X,EAAetB,EAAS9W,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAGlCkS,GADY/R,IAAUmF,EAAMhG,KAAI,SAAAzC,GAAC,OAAGA,EAAE0D,eAC3BJ,IAAU,YAAY2G,UAAU,UAE3CkP,EAAiB9D,EAAS9S,QAAO,SAAAC,GACjC,OAAOuW,EAAU3V,QAAQZ,EAAE1E,KAAKqF,OAAS,KAC1CuG,QAAQ,kBAAkB,GAEzBoR,EAAwBzF,EAAS9S,QAAO,SAAAC,GAAC,OAAGqY,EAAazX,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,gBAAgB,GAE5G9G,EAAO2F,EAAS,GAAI4Q,EAAerb,OAAQ,GAAI,GAAI,GACnDid,EAAUxS,EAAS,GAAIuS,EAAsBhd,OAAQ,GAAI,GAAI,GAE7Dkd,EAAWpY,EAAKP,SAAQ,SAAAxB,GAAC,OAAGA,KAAG0B,QAAO,SAAAC,GACtC,OAAOA,EAAE1E,KAAKsG,WAAWtG,EAAKoD,KAAKsD,OAAOC,SAAWoU,EAAW,IAAMrW,EAAE1E,KAAKsG,WAAWtG,EAAKoD,KAAKsD,OAAOC,SAAWoU,EAAW,MAChIpW,KAAI,SAAAzC,GAAC,OAAGA,EAAElC,KAAKqF,QAEd8X,EAAcF,EAAQ1Y,SAAQ,SAAAxB,GAAC,OAAGA,KAAG0B,QAAO,SAAAC,GAC5C,OAAOA,EAAE1E,KAAKsG,WAAWtG,EAAKoD,KAAKsD,OAAOC,QAAUoU,EAAW,IAAMrW,EAAE1E,KAAKsG,WAAWtG,EAAKoD,KAAKsD,OAAOC,QAAUoU,EAAW,MAC9HpW,KAAI,SAAAzC,GAAC,OAAGA,EAAElC,KAAKqF,QAEdiW,EAAY/D,EAAS9S,QAAO,SAAAC,GAAC,OAAwC,IAApCuW,EAAU3V,QAAQZ,EAAE1E,KAAKqF,OAAgB6X,EAAS5X,QAAQZ,EAAE1E,KAAKqF,OAAS,KAC1GuG,QAAQ,kBAAkB,GAC1BA,QAFW,UAEA5L,EAAKoD,MAAO,GACvBwI,QAAQkP,GAAY,GACPtV,IAAU,YAAY2G,UAAU,SAC7C1H,QAAO,SAAAC,GAAC,OAAwC,IAApCuW,EAAU3V,QAAQZ,EAAE1E,KAAKqF,OAAgB6X,EAAS5X,QAAQZ,EAAE1E,KAAKqF,OAAS,KACtFuG,QAAQ,kBAAkB,GAC1BA,QAHa,UAGF5L,EAAKoD,MAAO,GACvBwI,QAAQkP,GAAY,GAEzBO,EAAezP,QAAf,UAA0B5L,EAAKoD,MAAO,GAAMwI,QAAQkP,GAAY,GAAMlP,QAAQ,kBAAkB,GAEhG,IAAIwR,EAAmB7F,EAClB9S,QAAO,SAAAC,GAAC,OAA2C,IAAvCqY,EAAazX,QAAQZ,EAAE1E,KAAKqF,OAAkB8X,EAAY7X,QAAQZ,EAAE1E,KAAKqF,OAAS,KAC9FuG,QAAQ,uBAAuB,GAC/BA,QAHkB,UAGP5L,EAAKoD,MAAO,GACvBwI,QAAQkP,GAAY,GAOzB,OALsBtV,IAAU,YAAY2G,UAAU,SAC7C1H,QAAO,SAACC,EAAGlD,GAAJ,OAAiD,IAAvCub,EAAazX,QAAQZ,EAAE1E,KAAKqF,OAAgB8X,EAAY7X,QAAQZ,EAAE1E,KAAKqF,OAAS,KAC1FuG,QAAQ,uBAAuB,GAAMA,QAArD,UAAgE5L,EAAKoD,MAAO,GAAMwI,QAAQkP,GAAY,GACtGkC,EAAsBpR,QAAQ,gBAAgB,GAAMA,QAAQkP,GAAY,GAAMlP,QAAQkP,GAAY,GAE3F,CAACO,EAAgBC,EAAW0B,EAAuBI,GAG9D,SAASlC,EAAoBlb,GAEzB,IAAI6U,EAAI7U,EAAK,GAAGmJ,OAMhB,OALgB3D,MACP1C,OAAM,SAASV,GAAK,OAAOA,EAAEsE,OAAOC,WACpCiB,OAAOiN,EAAEjN,UACTmN,WAAWF,EAAEG,MAAM,IAErBF,CAAU9U,GAGrB,IAAIsa,EAAgB9U,MACf6X,MAAM7X,KACNqP,GAAE,SAACzS,EAAG9B,EAAGgD,GAIN,OAFQkC,MAAiBoC,OAAO,CAACtE,EAAE9C,OAAS,EAAG,IAAImF,MAAM,CAAC,EAAGuK,EAAWtC,SAAS/F,OAAM,EAEhFyG,CAAEhO,MAEZgd,IAAG,SAAAlb,GACA,OAAO,KAEVmb,IAAG,SAACnb,EAAG9B,EAAGgD,GACP,IAAIkE,EAAMlE,EAAE8W,SAAW9W,EAAE8W,SAAWhY,EAAEgY,SAClCoD,EAAMpb,EAAE5B,OACR0U,EAAQ5R,EAAE4R,MAAO5R,EAAE4R,MAAQ,EAG/B,OAFQ1P,MAAiBoC,OAAO,CAAC,EAAGJ,IAAM7B,MAAM,CAAC,EAAKuK,EAAW0C,eAAesC,EAAO,KAAMrN,OAAM,EAE5FgN,CAAE2I,MAGbjD,EAAU/U,MACT6X,MAAM7X,KACNqP,GAAE,SAACzS,EAAG9B,EAAGgD,GAEN,OADQkC,MAAiBoC,OAAO,CAAC,EAAGtE,EAAE9C,OAAS,IAAImF,MAAM,CAAC,EAAGuK,EAAWtC,SAAS/F,OAAM,EAChFyG,CAAEhO,MAEZgd,IAAG,SAAAlb,GACA,OAAO,KAEVmb,IAAG,SAACnb,EAAG9B,EAAGgD,GACP,IAAIkE,EAAMpF,EAAEgY,SAAUhY,EAAEgY,SAAW5U,IAAOlC,EAAEqB,KAAI,SAAAzC,GAAC,OAAGA,EAAE1B,WAClDgd,EAAMpb,EAAE5B,OACR0U,EAAQ5R,EAAE4R,MAAO5R,EAAE4R,MAAQ,EAE/B,OADQ1P,MAAiBoC,OAAO,CAAC,EAAGJ,IAAM7B,MAAM,CAAC,EAAKuK,EAAW0C,eAAesC,EAAO,KAAMrN,OAAM,EAC5FgN,CAAE2I,M,qXC/2DV,IAAIC,EAAgB,GAChBC,EAAmB,GAEvB,SAASC,EAAaC,EAAcC,EAAYtV,GAEnD,IAAIuV,EAActY,IAAU,gBACxBuY,EAAOvY,IAAU,YACrB,GAAqB,OAAjBoY,EAAuB,CAEvBH,EAAgB,GAEhBjY,IAAU,gBAAgB2G,UAAU,KAAKoD,SACzCuO,EAAYjS,MAAM,SAAU,GAC5BrG,IAAU,YAAYqG,MAAM,cAAe,OAC3C,IAAIkS,EAAOvY,IAAU,YACrBwY,GAAuB,EAAIH,GAAaE,EAAMxV,OAE3C,CAGH,IAAI0V,EAwgBL,SAA4B5Z,EAAUwZ,EAAYC,EAAavV,GAElE,IAEI2V,EAAkB7Z,EAASE,SAAQ,SAAAd,GAAC,OAAIA,EAAEgB,QAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEqC,QAAepC,KAAI,SAAArB,GAAC,OAAIA,EAAE+B,WAClF8Y,EAAY3Y,IAAU,YAAYsI,OAAO,OAAO3B,UAAU,SAC9DgS,EAAU1Z,QAAO,SAAAY,GAAI,OAAI6Y,EAAgB5Y,QAAQD,EAAKrF,KAAKqF,OAAS,KAAGuG,QAAQ,YAAY,GAG3F,IAAI6H,EAAWC,GAAajP,QAAO,SAAAC,GAAC,MAAe,mBAAXA,EAAET,QAA2BzD,OAAS,EAAIkT,GAAajP,QAAO,SAAAC,GAAC,MAAe,mBAAXA,EAAET,QAA2BU,KAAI,SAAAzC,GAAC,OAAIA,EAAEyR,aAAa,GAC5JyK,EAAa3K,EAASjT,OAAS,EAAI+H,EAAO9D,QAAO,SAAAsD,GACjD,OAAuC,IAAhC0L,EAASnO,QAAQyC,EAAGzD,UAC5BK,KAAI,SAAAzC,GAAC,OAAIA,EAAEoC,SAAS,KAGnB+Z,EAAmBP,EAAYhQ,OAAO,qBACtCwQ,EAAeD,EAAiB3N,QAAUoN,EAAYnS,OAAO,OAAOC,QAAQ,oBAAoB,GAAQyS,EAC5GC,EAAanS,UAAU,KAAKoD,SAG5B,IAAIgP,EAAoBD,EAAa3S,OAAO,OAAOE,MAAM,UAAW,gBACpE0S,EAAkB5S,OAAO,QAAQI,KAAK,cACtC,IAAIyS,EAAuBD,EAAkB5S,OAAO,UAAUC,QAAQ,4BAA4B,GAClG4S,EAAqBzS,KAAK,sBAC1ByS,EAAqBnS,GAAG,SAAS,WAsgBrC,IAAmBoS,EACW,wBADXA,EAtgBkCD,GAugBlCzS,OACX0S,EAAW1S,KAAK,sBAEhB0S,EAAW1S,KAAK,yBAvgBpB,IAAI2S,EAAWnW,EAAO5D,KAAI,SAAAzC,GAAC,OAAIA,EAAEoC,SAC7Bqa,EAAeL,EAAa3S,OAAO,OAAOE,MAAM,UAAW,gBAC/D8S,EAAahT,OAAO,MAAMI,KAAK,aAAaF,MAAM,UAAW,UAE7D,IAAI+S,EAAWD,EAAaxS,UAAU,kBAAkBnM,KAAK0e,GAAUtS,KAAK,OAAOR,QAAQ,2CAA2C,GAClIiT,EAAQD,EAASjT,OAAO,SAASM,KAAK,OAAQ,SAASzI,SAAS,OAAQ,wBAAwBA,SAAS,SAAS,SAAApB,GAAC,OAAIA,KAAG6J,KAAK,MAAM,SAAC7J,EAAG9B,GAAJ,MAAU,SAAWA,KAAGsL,QAAQ,oBAAoB,GAC7LgT,EAASjT,OAAO,SAASI,MAAK,SAAA3J,GAAC,OAAIA,KAAGoB,SAAS,OAAO,SAACpB,EAAG9B,GAAJ,MAAU,SAAWA,KAAGsL,QAAQ,oBAAoB,GAE1G,IAAIkT,EAAUhB,EAAYhQ,OAAO,kBAC7BmI,EAAM6I,EAAQpO,QAAUoN,EAAYnS,OAAO,OAAOC,QAAQ,cAAc,GAAQkT,EAEpF7I,EAAI9J,UAAU,KAAKoD,SAEnB,IAAIwP,EAAkB1a,EAASE,SAAQ,SAAAya,GAAG,OAAIA,EAAIza,SAAQ,SAAAG,GAAC,OAAIA,EAAEW,WAAO4Z,QAAO,SAASC,EAAKC,GAMzF,YALwB,IAAbD,EAAIC,GACXD,EAAIC,GAAQ,EAEZD,EAAIC,IAAS,EAEVD,IACR,IAGH,GAAwB,IAApB7a,EAAS7D,OAAc,CAGvB,IAAI4e,EAAanJ,EAAItK,OAAO,KAAKC,QAAQ,eAAe,GACxDwT,EAAWnT,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAU,qBAGvC,IAAI+e,EAAc7Z,MAAcG,MAAM,CAAC,EAAG,KAAKiC,OAAO,CAAC,EAAGpC,IAAO/E,OAAOiG,OAAOqY,MAE3EO,EAAiBF,EAAWjT,UAAU,UAAUnM,KAAKqE,GAAU+H,KAAK,KAAKR,QAAQ,SAAS,GAE/E0T,EAAe3T,OAAO,QAAQC,QAAQ,aAAa,GACzDK,KAAK,KAAM,GAKpBsT,EAAgBD,EAAgB/W,GAGhC+W,EAAejT,GAAG,aAAa,SAASjK,EAAG9B,GACvC,IAAIiX,EAAW/R,IAAU,YAAY2G,UAAU,SAC3CqL,EAAYhS,IAAU,YAAY2G,UAAU,SAKhD,OAJAoL,EAAS9S,QAAO,SAAAC,GACZ,OAAOtC,EAAEuC,KAAI,SAAAzC,GAAC,OAAIA,EAAEmD,QAAMC,QAAQZ,EAAE1E,KAAKqF,OAAS,KACnDuG,QAAQ,SAAS,GACpB4L,EAAU/S,QAAO,SAAAC,GAAC,OAAItC,EAAEuC,KAAI,SAAAzC,GAAC,OAAIA,EAAEmD,QAAMC,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,SAAS,GAC9EpG,IAAUoK,MAAMhE,QAAQ,SAAS,MACzCS,GAAG,YAAY,SAASjK,EAAG9B,GACXkF,IAAU,YAAY2G,UAAU,SAASP,QAAQ,SAAS,GACzDpG,IAAU,YAAY2G,UAAU,SAASP,QAAQ,SAAS,GAC1E,OAAOpG,IAAUoK,MAAMhE,QAAQ,SAAS,MAGzB0T,EAAe3T,OAAO,QAAQI,MAAK,SAAA3J,GAClD,IAAIod,EAASpd,EAAEqC,QAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEqC,QAAe,GAAGmC,MAC/C,OAAOsW,EAAOvN,OAAO,GAAGC,cAAgBsN,EAAO3b,MAAM,MAG5CoI,KAAK,IAAK,IAAIA,KAAK,IAAK,IAErC,IAAIwT,EAAYH,EAAe3T,OAAO,KAAKC,QAAQ,aAAa,GAChE6T,EAAUxT,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAU,uBAE1Bmf,EAAU9T,OAAO,QACxBM,KAAK,KAAM,GACXA,KAAK,KAAM,KACXA,KAAK,KAAM,IACXA,KAAK,KAAM,IAJhB,IAMIyT,EAAaD,EAAUtT,UAAU,SAASnM,MAAK,SAACoC,GAAD,OAAOA,KAAGgK,KAAK,KAAKR,QAAQ,QAAQ,GAEvF8T,EAAWzT,KAAK,aAAa,SAAC7J,GAG1B,MAAO,aAFCoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KACnCkP,CAAEzS,EAAE6G,UACc,WAGxByW,EAAW/T,OAAO,UAAUM,KAAK,KAAM,GAAGA,KAAK,KAAM,GAAGA,KAAK,KAAK,SAAA7J,GAC3E,OAAOid,EAAYN,EAAgB3c,EAAEiD,UACtC4G,KAAK,SAAS,SAAC7J,EAAG9B,GAAJ,MAAU,QAAU8B,EAAEiD,QAEhCgH,GAAG,aAAa,SAASjK,EAAG9B,GAC/B,IAAIqf,EAASD,EAAWjb,QAAO,SAAAnB,GAAC,OAAIA,EAAE+B,OAASjD,EAAEiD,QAClCG,IAAU,YAAY2G,UAAU,SACjB1H,QAAO,SAAAC,GAAC,OAAIA,EAAE1E,KAAKqF,OAASjD,EAAEiD,QAAMuG,QAAQ,mBAAmB,GAC7F,OAAO+T,EAAO/T,QAAQ,gBAAgB,MACvCS,GAAG,YAAY,SAASjK,EAAG9B,GAC1B,IAAIqf,EAASD,EAAWjb,QAAO,SAAAnB,GAAC,OAAIA,EAAE+B,OAASjD,EAAEiD,QAEjD,OADAG,IAAa,oBAAoBoG,QAAQ,mBAAmB,GACrD+T,EAAO/T,QAAQ,gBAAgB,MAGnB8T,EAAWjb,QAAO,SAAAC,GAAC,OAAe6C,MAAX7C,EAAEwE,SAAoByC,OAAO,QAAQI,MAAK,SAAA3J,GAEpF,OADaA,EAAE8G,MAAM+I,OAAO,GAAGC,cAAgB9P,EAAE8G,MAAMrF,MAAM,MAE9DoI,KAAK,IAAK,IAAIA,KAAK,IAAK,GAE3BqT,EAAerT,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAU,eAAsB,GAAJA,EAAU,OAE3Dgf,EAAexR,OAAO,cAAc3B,UAAU,SACpDE,GAAG,aAAa,SAACjK,EAAG9B,GAEtB,IAAIsf,EAAU/B,EAAWpZ,QAAO,SAAAD,GAE5B,OADgBA,EAAKD,SAAQ,SAAAG,GAAC,OAAIA,EAAEW,QACnBC,QAAQlD,EAAEiD,OAAS,KAGzBua,EAAQ,GACRA,EAAQ,MAO3B,IAAIC,EAAmBP,EAAe3T,OAAO,KAAKC,QAAQ,qBAAqB,GAC3EvE,EAAUsB,EAAoBtE,EAAUkE,EAAQ6V,GAChD0B,EAAkBC,GAAiBF,EAAkBxY,EAASkB,EAAQ,MAuD1E,OArDA+W,EAAerT,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAU,gBAAmBA,GAAK,IAAyBG,OAAO4H,KAAKjG,EAAE,GAAGkE,YAAY9F,OAAS,IAAO,OAEzIwf,GAAYF,GACZG,GAAgBH,EAAiBvX,GAAQ,GAIzC0N,EAAIpK,MAAM,SAA8E,IAAlExH,EAAS7D,OAASsf,EAAgB9f,OAAO2E,KAAI,SAAAzC,GAAC,OAAIA,EAAE,MAAI1B,QAAgB,GAAK,MACnGsd,EAAYjS,MAAM,SAA8E,IAAlExH,EAAS7D,OAASsf,EAAgB9f,OAAO2E,KAAI,SAAAzC,GAAC,OAAIA,EAAE,MAAI1B,QAAgB,GAAK,MAC3Gqf,EAAiB5T,KAAK,aAAa,SAAC7J,GAAD,MAAO,wBAC1CoD,IAAa,kBAAkBoG,QAAQ,iBAAiB,GAGxDiT,EAAMxS,GAAG,SAAS,SAACjK,EAAG9B,GAClB,IAAIyG,EAAO1C,EAASM,KAAI,SAAAU,GAAI,OAAIA,EAAKZ,QAAO,SAAArC,GAAC,OAAe,IAAXA,EAAE2E,QAAe,MAAI,GAClEmZ,EAAS,EAAIrC,GAAYsC,MAAK,SAASC,EAAG/Z,GAC1C,OAAO+Z,EAAE3b,QAAO,SAAAnB,GAAC,OAAe,IAAXA,EAAEyD,QAAe,GAAGT,WAAWlE,GAAGuE,QAAUN,EAAE5B,QAAO,SAAAnB,GAAC,OAAe,IAAXA,EAAEyD,QAAe,GAAGT,WAAWlE,GAAGuE,WAGjHoX,EAAOvY,IAAU,YAErBwY,GAAuBkC,EAAO1V,UAAWuT,EAAMxV,GAC/CwV,EAAKlS,MAAM,cAAe,SAE1B,IAAI5D,EAAQ8V,EAAKjQ,OAAO,sBAAsB3B,UAAU,UAEpDkU,EAAOpY,EAAMxD,QAAO,SAAAD,GAEpB,OADgBA,EAAKC,QAAO,SAAAY,GAAI,OAAkB,IAAdA,EAAK0B,QAAe,GACvCT,WAAWlE,GAAGuE,QAAUI,EAAKT,WAAWlE,GAAGuE,WAEhE0Z,EAAKzU,QAAQ,QAAQ,GAErB,IAAI0U,EAAaD,EAAKrgB,OAAO2E,KAAI,SAAAH,GAAI,OAAIA,EAAKC,QAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEqC,QAAe,GAAG1B,QAE9E8Y,EAAU1Z,QAAO,SAAAC,GAAC,OAAI4b,EAAWhb,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,QAAQ,GAE5E,IAAI2U,EAAMtY,EAAMxD,QAAO,SAAAD,GAEnB,OADgBA,EAAKC,QAAO,SAAAY,GAAI,OAAkB,IAAdA,EAAK0B,QAAe,GACvCT,WAAWlE,GAAGuE,QAAUI,EAAKT,WAAWlE,GAAGuE,WAEhE4Z,EAAI3U,QAAQ,OAAO,GAEnB,IAAI4U,EAAYD,EAAIvgB,OAAO2E,KAAI,SAAAH,GAAI,OAAIA,EAAKC,QAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEqC,QAAe,GAAG1B,QAE5E8Y,EAAU1Z,QAAO,SAAAC,GAAC,OAAI8b,EAAUlb,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,OAAO,GAE/D3D,EAAMxD,QAAO,SAAAD,GAEpB,OADgBA,EAAKC,QAAO,SAAAY,GAAI,OAAkB,IAAdA,EAAK0B,QAAe,GACvCT,WAAWlE,GAAGuE,UAAYI,EAAKT,WAAWlE,GAAGuE,WAE7DiF,QAAQ,QAAQ,MAGlBvH,EAEJ,GAAGA,EAAS7D,OAAS,GAAK6D,EAAS7D,OAAS,EAAG,KAE9CigB,EA9sBZ,SAAwBxY,GACpB,IAAIyY,EAAYlb,IAAOyC,EAAMtD,KAAI,SAAAlB,GAAC,OAAIA,EAAEjD,WAGpCigB,EAFgBxY,EAAMxD,QAAO,SAAAD,GAAI,OAAIA,EAAKhE,SAAWkgB,KAAW,GACpCjc,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAG7CkB,EAAMtD,KAAI,SAAAH,GACNic,EAAkB,EAAIjc,GAAMC,QAAO,SAAAC,GAC/B,OAAQ+b,EAAgB9b,KAAI,SAAAzC,GAAC,OAAIA,EAAEmD,QAAMC,QAAQZ,EAAEW,OAAS,EAAe,GAAVX,EAAEqC,WAG3E,IAAImE,EAAWjD,EAAMtD,KAAI,SAAAH,GAErB,IACImc,GAFJnc,GAAyB,IAAjBA,EAAK,GAAGuC,KAAiBvC,EAAKgG,UAAYhG,GAC7BG,KAAI,SAAAlB,GAAC,OAAIA,EAAE4B,QACTC,QAAQmb,EAAgBA,EAAgBjgB,OAAS,GAAG6E,MAE3E,OADab,EAAKC,QAAO,SAACC,EAAGpE,GAAJ,OAAUA,EAAIqgB,QAkB3C,OAdAF,EAAgBA,EAAgBjgB,OAAS,GAAG0K,SAAWA,EAASvG,KAAI,SAACH,EAAMlE,GACvE,IAAIkH,EAAMhC,IAAOhB,EAAKG,KAAI,SAAAlB,GAAC,OAAIA,EAAEwF,aAAawX,EAAgBA,EAAgBjgB,OAAS,GAAGyI,SAC1F,OAAOzE,EAAKG,KAAI,SAACic,EAAMpf,EAAG8B,GACtBsd,EAAKC,WAAaJ,EAAgBA,EAAgBjgB,OAAS,GAAGyI,SAC9D2X,EAAK5X,KAAO4X,EAAK3X,SAAWwX,EAAgBA,EAAgBjgB,OAAS,GAAGyI,SACxE2X,EAAKvM,KAAc,IAAN7S,EAAW,EAAI8B,EAAE9B,EAAI,GAAGyH,SAAWwX,EAAgBA,EAAgBjgB,OAAS,GAAGyI,SAC5F,IACI6X,EADctb,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KACrCob,CAAYN,EAAgBA,EAAgBjgB,OAAS,GAAGyI,UAG/E,OAFA2X,EAAKxP,OAAS5L,MAAiBoC,OAAO,CAAC,EAAGJ,IAAM7B,MAAM,CAAC,EAAI,IAAOmb,IAClEF,EAAKI,MAAQ1gB,EACNsgB,QAIRH,EA6qBmBQ,CAAe5c,IApoB7C,SAAgCoc,EAAiBxK,EAAK1N,EAAQwW,GAEtD,IAAIK,EAAanJ,EAAItK,OAAO,KAAKC,QAAQ,eAAe,GACxDwT,EAAWnT,KAAK,YAAa,oBAG7B,IAAIoT,EAAc7Z,MAAcG,MAAM,CAAC,EAAG,KAAKiC,OAAO,CAAC,EAAGpC,IAAO/E,OAAOiG,OAAOqY,MAE3EO,EAAiBF,EAAWjT,UAAU,UAAUnM,KAAK,CAACygB,IAAkBrU,KAAK,KAAKR,QAAQ,SAAS,GAEnGsV,EAAW5B,EAAe3T,OAAO,QAAQC,QAAQ,aAAa,GAClEsV,EAASjV,KAAK,KAAM,GACpBiV,EAASjV,KAAK,SAAW,GAAM,GAAKwU,EAAgBA,EAAgBjgB,OAAS,GAAG0K,SAAS1K,QAKzF+e,EAAgBD,EAAgB/W,GAGhC,IAAIkX,EAAYH,EAAe3T,OAAO,KAAKC,QAAQ,aAAa,GAChE6T,EAAUxT,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAU,uBAE1Bmf,EAAU9T,OAAO,QACxBM,KAAK,KAAM,GACXA,KAAK,MAAM,SAAC7J,EAAG9B,GAEZ,OADQkF,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAC3CkP,CAAEzS,EAAEA,EAAE5B,OAAS,GAAGyI,aAE5BgD,KAAK,KAAM,IACXA,KAAK,KAAM,IAPhB,IASIyT,EAAaD,EAAUtT,UAAU,SAASnM,MAAK,SAACoC,GAAD,OAAOA,KAAGgK,KAAK,KAAKR,QAAQ,QAAQ,GAEvF8T,EAAWzT,KAAK,aAAa,SAAC7J,GAG1B,MAAO,aAFCoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KACnCkP,CAAEzS,EAAE6G,UACc,WAGrCyW,EAAW9T,QAAQ,eAAe,GAElC,IAAIuV,EAAgBzB,EAAWjb,QAAO,SAAAtC,GAAC,OAAkBoF,MAAdpF,EAAE+I,YAAuBiB,UAAU,WAAWnM,MAAK,SAAAoC,GAAC,OAAIA,EAAE8I,YAAUkB,KAAK,KAAKR,QAAQ,SAAS,GAEtIwV,EAAaD,EAAchV,UAAU,UAAUnM,MAAK,SAAAoC,GAAC,OAAIA,KAAGgK,KAAK,KAAKR,QAAQ,QAAQ,GAC1FwV,EAAWnV,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAChC,MAAO,aAAelB,EAAEgP,OAAOhP,EAAE4G,MAAQ,KAAkB,GAAV5G,EAAE4e,MAAc,OAGrEG,EAAcxV,OAAO,QAAQM,KAAK,KAAK,SAAC7J,EAAG9B,EAAGgD,GAC1C,IAAIoH,EAAY,CAAC,CAAE,EAAK,EAAG,EAAK,GAAK,CAAE,EAAK,EAAG,EAAKpK,IAUpD,OATA8B,EAAEuC,KAAI,SAAAzC,GACFwI,EAAU5J,KAAK,CAAE,EAAKoB,EAAEkP,OAAOlP,EAAE8G,MAAO,EAAK9G,EAAE8e,WAExCxb,MACN6X,MAAM7X,KACNqP,GAAE,SAASzS,GACR,OAAOA,EAAEyS,KAEZvG,GAAE,SAAAlM,GAAC,OAAW,GAANA,EAAEkM,IACR+S,CAAK3W,MACbuB,KAAK,cAAe,OAAOA,KAAK,OAAQ,QAAQA,KAAK,SAAU,QAElEkV,EAAc9U,GAAG,aAAa,SAACjK,EAAG9B,GACd8B,EAAEuC,KAAI,SAAAzC,GAAC,OAAGA,EAAE4G,WAA5B,IACI6W,EAASD,EAAWjb,QAAO,SAAAnB,GAAC,OAAIA,EAAE+B,OAASjD,EAAEiD,QAC7Cic,EAAc,EAAIb,GAAiB9b,KAAI,SAAAxC,GAAC,OAAGA,EAAEkD,QAAM0S,OAAO3V,EAAEuC,KAAI,SAAArB,GAAC,OAAGA,EAAE+B,SACtEkS,EAAW/R,IAAU,YAAY2G,UAAU,SAC3CqL,EAAahS,IAAU,YAAY2G,UAAU,SAGjD,OAFAoL,EAAS9S,QAAO,SAAAC,GAAC,OAAI4c,EAAYhc,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,SAAS,GAC7E4L,EAAU/S,QAAO,SAAAC,GAAC,OAAI4c,EAAYhc,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,SAAS,GACvE+T,EAAO/T,QAAQ,gBAAgB,MACvCS,GAAG,YAAY,SAACjK,EAAG9B,GAClBkF,IAAa,UAAUoG,QAAQ,SAAS,MAG/B8T,EAAW/T,OAAO,UAAUM,KAAK,KAAM,GAAGA,KAAK,KAAM,GAAGA,KAAK,KAAK,SAAA7J,GAC3E,OAAOid,EAAYN,EAAgB3c,EAAEiD,UACtC4G,KAAK,SAAS,SAAC7J,EAAG9B,GAAJ,MAAU,QAAU8B,EAAEiD,QAEvB+b,EAAWzV,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,OAAQ,OAAOA,KAAK,IAAK,GAE7EI,GAAG,aAAa,SAASjK,EAAG9B,GAClC,IAAIqf,EAASD,EAAWjb,QAAO,SAAAnB,GAAC,OAAIA,EAAE+B,OAASjD,EAAEiD,QAClCG,IAAU,YAAY2G,UAAU,SACjB1H,QAAO,SAAAC,GAAC,OAAIA,EAAE1E,KAAKqF,OAASjD,EAAEiD,QAAMuG,QAAQ,mBAAmB,GAC7F,OAAO+T,EAAO/T,QAAQ,gBAAgB,MACvCS,GAAG,YAAY,SAASjK,EAAG9B,GAC1B,IAAIqf,EAASD,EAAWjb,QAAO,SAAAnB,GAAC,OAAIA,EAAE+B,OAASjD,EAAEiD,QAEjD,OADAG,IAAa,oBAAoBoG,QAAQ,mBAAmB,GACrD+T,EAAO/T,QAAQ,gBAAgB,MAG1CwV,EAAW3c,QAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEqC,QAAe4E,OAAO,QAAQI,MAAK,SAAA3J,GAAC,OAAIA,EAAE8G,SAAO+C,KAAK,IAAK,GAAGA,KAAK,IAAK,GAwiBjGsV,CAAuBd,EAAiBxK,EAAK1N,EAAQwW,GAGrD,IAAIyC,EAAUvL,EAAItK,OAAO,KAAKC,QAAQ,qBAAqB,GAKvDvE,GAJgBoZ,EAAgBA,EAAgBjgB,OAAS,GAAG0K,SAASvG,KAAI,SAAA8c,GACzE,OAAO,EAAIhB,GAAiB1I,OAAO0J,MAGzB9Y,EAAoBtE,EAAUkE,EAAQ6V,IAwBjDsD,EAvBera,EAAQ,GAAG1C,KAAI,SAAC2D,EAAKhI,GACnC,IAAIwI,EAAUzE,EAAS,GAAGI,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,QAAe,GAAGmC,MACzDZ,EAAIA,EAAI9H,OAAS,GAAGmhB,OAAS,EAE7B,IADA,IAAIhO,EAAY,CAAC,MAASrL,EAAIA,EAAI9H,OAAO,GAAG0I,MAAO,KAAOZ,EAAIA,EAAI9H,OAAO,GAAGyD,KAAM,KAAQ,CAAC,CAAC,QAAW6E,EAAS,MAASR,KACjHgH,EAAQ,EAAGA,EAAQjI,EAAQ7G,OAAQ8O,IAAS,CAChD,IAAIxG,EAAUzE,EAASiL,GAAO7K,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,QAAe,GAAGmC,MACzD0Y,EAAOva,EAAQiI,GAAOhP,GAAGE,OAAS,EACtC6G,EAAQiI,GAAOhP,GAAGshB,GAAMD,OAAkB,EAARrS,EAClCqE,EAAU3T,KAAKc,KAAK,CAAC,QAAWgI,EAAS,MAASzB,EAAQiI,GAAOhP,KAErE,OAAOqT,KAagBhP,KAAI,SAAAkd,GAa5B,OAZAA,EAAI7hB,KAAO6hB,EAAI7hB,KAAK2E,KAAI,SAACmd,EAAMxhB,GAU9B,OATGwhB,EAAK7Z,MAAQ6Z,EAAK7Z,MAAMtD,KAAI,SAAAzC,GAC3B,GAAgB,aAAb2f,EAAI5d,KAAoB,CACvB,IAAI0d,EAAS,EAAIrhB,EAEjB,OADc4B,EAAEqH,OAAQ,CAAC,QAAW,EAAK,MAASrH,EAAEsH,SAAU,MAAQtH,EAAEoF,MAAO,SAAYpF,EAAE+G,SAAU,OAAS/G,EAAEyf,OAAQ,MAAQ,GAf9I,SAAsBpY,EAAQoY,GAC1B,IAAII,EAAOvc,IAAO+D,EAAO5E,KAAI,SAAAyQ,GAAC,OAAGA,EAAEzO,YAC/Bqb,EAASzY,EAAO9E,QAAO,SAAAC,GAAC,OAAGA,EAAEiC,SAAWob,KACxCvY,EAAWD,EAAOA,EAAO5E,KAAI,SAAAzC,GAAC,OAAGA,EAAEyE,WAASrB,QAAQyc,IAIxD,OAHAvY,EAASyY,MAAQD,EACjBxY,EAASmY,OAASA,EAEXnY,EAQ2I0Y,CAAahgB,EAAGyf,GAG1J,OAAOzf,KAGR4f,KAEDD,KAGPM,EAAYX,EAAQrV,UAAU,KAAKnM,KAAK0hB,GAAWtV,KAAK,KAAKR,QAAQ,QAAQ,GACjFuW,EAAUlW,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAU,iBAAwB,GAAJA,EAA8B,OAExF6hB,EAAUxW,OAAO,QACfI,MAAK,SAAA3J,GAAC,OAAGA,EAAE8G,SACX2C,MAAM,cAAe,OACrBA,MAAM,YAAa,IACnBI,KAAK,YAAa,mBAEpB,IAAImW,EAAWD,EAAUxW,OAAO,QAAQM,KAAK,QAAS,MACtDmW,EAASnW,KAAK,SAxQK,IAyQnBmW,EAASvW,MAAM,OAAQ,QACvBuW,EAASvW,MAAM,SAAU,QACzBuW,EAASvW,MAAM,UAAW,IAE1BsW,EAAUxW,OAAO,QAAQC,QAAQ,QAAQ,GAAMK,KAAK,KAAM,GAAGA,KAAK,KAAM,IAAIA,KAAK,KAAM,MAAMA,KAAK,KAAM,IAExG,IAAIoW,EAAaF,EAAUhW,UAAU,KAAKnM,MAAK,SAAAoC,GAK1C,OAJAA,EAAEpC,KAAOoC,EAAEpC,KAAK2E,KAAI,SAAAzC,GAEhB,OADAA,EAAE+B,KAAO7B,EAAE6B,KACJ/B,KAEJE,EAAEpC,QACVoM,KAAK,KAAKR,QAAQ,WAAW,GAE7B0W,EAAW9c,MACdqP,GAAE,SAAAzS,GAGC,OAFQoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAE3CkP,CADQzS,EAAE6G,aAGpBqF,GAAE,SAAAlM,GAEC,OADQoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC4c,GAAmB,GAC3DjU,CAAElM,EAAEuE,SAAWvE,EAAEuf,UAGxBa,EAAWhd,MACdqP,GAAE,SAAAzS,GAGC,OAFQoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAE3CkP,CADQzS,EAAE6G,aAGpBqF,GAAE,SAAAlM,GACC,IAAIkM,EAAIlM,EAAE+G,OAEV,OADAmF,EAAE3I,MAAM,CAAC4c,GAAmB,IACrBjU,EAAElM,EAAEuE,SAAW,KAGJ0b,EAAW1W,OAAO,QACvCM,KAAK,KAAK,SAAA7J,GACN,MAAmB,aAAXA,EAAE6B,KAAuBqe,EAASlgB,EAAE6F,OAASua,EAASpgB,EAAE6F,UAEpEgE,KAAK,SAAS,SAAC7J,EAAG9B,GACd,OAAO8B,EAAE0G,QAAU,iBACvB+C,MAAM,eAAgB,IACtBA,MAAM,OAAQ,QACdA,MAAM,SAAU,QAEDQ,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GACnCkC,IAAUlC,EAAEhD,IAAIsL,QAAQ,YAAY,MACrCS,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACpBkC,IAAUlC,EAAEhD,IAAIsL,QAAQ,YAAY,MAGzC,IAII6W,EAJWJ,EAAW5d,QAAO,SAAAie,GAChC,MAAmB,aAAZA,EAAGze,QAGiBkI,UAAU,WAAWnM,MAAK,SAAAoC,GAAC,OAAEA,EAAE6F,SAAOmE,KAAK,KAAKR,QAAQ,UAAU,GAE9F6W,EAAaxW,KAAK,aAAa,SAAC7J,GAG3B,MAAO,aAFHoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAC/BkP,CAAEzS,EAAE6G,UACU,UAGjC,IAAI0Z,EAAQF,EAAa9W,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,MAAM,SAAC7J,EAAG9B,GAElE,OADQkF,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC4c,GAAqB,GAC7DjU,CAAElM,EAAEuE,SAAWvE,EAAEuf,UACzB1V,KAAK,KAAM,GAEd0W,EAAM1W,KAAK,QAAQ,SAAC7J,EAAG9B,GAAJ,OAAS8B,EAAEkF,SAE9B,IAAIsb,EAAYH,EAAahe,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAAcoF,UAAU,UAAUnM,MAAK,SAAAoC,GAAC,OAAGA,EAAE6f,SAAO7V,KAAK,UAAUR,QAAQ,SAAS,GAC9HgX,EAAU3W,KAAK,IAAK,GAAGA,KAAK,KAAM,GAAGA,KAAK,MAAM,SAAC9J,EAAG7B,GAChD,IAAIgO,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IAEhC,OADJ0G,EAAE3I,MAAM,CAAC,EAAI4c,KACFjU,EAAEnM,EAAEwE,YACZsF,KAAK,QAAQ,SAAC9J,GAAD,OAAMA,EAAEmF,SAAOuE,MAAM,UAAW,IAEpD+W,EAAUvW,GAAG,aAAa,SAASjK,GAC/B,IAAI2P,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACpB,IAAInH,EAAIc,IAAU,OAClBuM,EAAKC,KAAK5P,EAAEkH,MAAQ,KAAO5E,EAAEtC,EAAEuE,UAC5BkF,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,SAEzC/F,GAAG,YAAY,SAASjK,GACZoD,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAGxB8W,EAAMtW,GAAG,aAAa,SAASjK,GAC3B,IAAI2P,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACpB,IAAInH,EAAIc,IAAU,OAClBuM,EAAKC,KAAK5P,EAAEkH,MAAQ,KAAO5E,EAAEtC,EAAEuE,UAC5BkF,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,SAEzC/F,GAAG,YAAY,SAASjK,GACZoD,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAIxB4W,EAAapW,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAChC,IAAIgL,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IACpC0G,EAAE3I,MAAM,CAAC,EAAI4c,KACbtM,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAASmD,KAAK,SAAU,OAC5DgK,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAAS8C,QAAQ,YAAY,GACjEpG,IAAUlC,EAAEhD,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,IAC9ExP,IAAUlC,EAAEhD,IAAI6L,UAAU,UAAUN,MAAM,UAAW,OACtDQ,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIwN,OAAO,YACvBtI,IAAUlC,EAAEhD,IAAIwN,OAAO,YAAYyB,SACnC/J,IAAa,mBAAoBpD,EAAE0G,SAASmD,KAAK,SAAU,QAC3DzG,IAAa,mBAAoBpD,EAAE0G,SAAS8C,QAAQ,YAAY,GAChEpG,IAAa,UAAUqG,MAAM,UAAW,OAG5C,IAIIgX,EAJWR,EAAW5d,QAAO,SAAAie,GAC7B,MAAmB,eAAZA,EAAGze,QAGckI,UAAU,WAAWnM,MAAK,SAAAoC,GAAC,OAAEA,EAAE6F,SAAOmE,KAAK,KAAKR,QAAQ,UAAU,GAE9FiX,EAAa5W,KAAK,aAAa,SAAC7J,GAG3B,MAAO,aAFHoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAC/BkP,CAAEzS,EAAE6G,UACU,UAIlC4Z,EAAaxW,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAChC,IAAIgL,EAAIlM,EAAE+G,OACVmF,EAAE3I,MAAM,CAAC,EAAI4c,KACbtM,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAASmD,KAAK,SAAU,OAC5DgK,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAAS8C,QAAQ,YAAY,GACjEpG,IAAUlC,EAAEhD,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,IAC9ExP,IAAUlC,EAAEhD,IAAI6L,UAAU,UAAUN,MAAM,UAAW,OACtDQ,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIwN,OAAO,YACvBtI,IAAUlC,EAAEhD,IAAIwN,OAAO,YAAYyB,SACnC/J,IAAa,mBAAoBpD,EAAE0G,SAASmD,KAAK,SAAU,QAC3DzG,IAAa,mBAAoBpD,EAAE0G,SAAS8C,QAAQ,YAAY,GAChEpG,IAAa,UAAUqG,MAAM,UAAW,OAG5C,IAAIiX,EAAWD,EAAalX,OAAO,QAEnCmX,EAAS7W,KAAK,QAAS,IAAIA,KAAK,SAAU,GAC1C6W,EAAS7W,KAAK,KAAK,SAAC7J,EAAG9B,GACnB,IAAIwR,EAAQvJ,EAAO9D,QAAO,SAAA7C,GAAC,OAAGA,EAAE0C,QAAUlC,EAAE8G,SAAO,GAEnD,OADQ1D,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CA3ahD,GA2akE,GACzE2I,CAAElM,EAAEuE,YAGf,IAAIoc,EAAYF,EAAape,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAAc4E,OAAO,QAoB/D,OAnBAoX,EAAU9W,KAAK,QAAS,IAAIA,KAAK,UAAU,SAAC7J,EAAG9B,GAC3C,IAAIwR,EAAQvJ,EAAO9D,QAAO,SAAA7C,GAAC,OAAGA,EAAE0C,QAAUlC,EAAE8G,SAAO,GAC/CoF,EAAI9I,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CAlbhD,GAkbkE,IAChF,OAAO2I,EAAElM,EAAEuF,WAAa2G,EAAElM,EAAEqF,cAGhCsb,EAAU9W,KAAK,KAAK,SAAC7J,EAAG9B,GACpB,IAAIwR,EAAQvJ,EAAO9D,QAAO,SAAA7C,GAAC,OAAGA,EAAE0C,QAAUlC,EAAE8G,SAAO,GAEnD,OADQ1D,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CAxbhD,GAwbkE,GACzE2I,CAAElM,EAAEqF,cAEfsb,EAAUlX,MAAM,UAAW,IAG3BoK,EAAIpK,MAAM,SAAwE,IAA5DxH,EAAS7D,OAAS2hB,EAAUniB,OAAO2E,KAAI,SAAAzC,GAAC,OAAIA,EAAE,MAAI1B,QAAgB,GAAK,MAC7Fsd,EAAYjS,MAAM,SAAwE,IAA5DxH,EAAS7D,OAAS2hB,EAAUniB,OAAO2E,KAAI,SAAAzC,GAAC,OAAIA,EAAE,MAAI1B,QAAgB,GAAK,MACrGghB,EAAQvV,KAAK,aAAa,SAAC7J,GAAD,MAAO,sBACjCoD,IAAa,kBAAkBoG,QAAQ,iBAAiB,GAEjD6U,EASP,IAAIC,EAAYlb,IAAOnB,EAASM,KAAI,SAAAlB,GAAC,OAAIA,EAAEjD,WAGvCigB,EAFgBpc,EAASI,QAAO,SAAAD,GAAI,OAAIA,EAAKhE,SAAWkgB,KAAW,GACvCjc,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAG7C1C,EAASM,KAAI,SAAAH,GACTic,EAAkB,EAAIjc,GAAMC,QAAO,SAAAC,GAC/B,OAAQ+b,EAAgB9b,KAAI,SAAAzC,GAAC,OAAIA,EAAEmD,QAAMC,QAAQZ,EAAEW,OAAS,EAAe,GAAVX,EAAEqC,WAG3EkP,EAAI1G,SACJ,IAAIA,EAAS+O,EAAa3S,OAAO,KAAKC,QAAQ,UAAU,GAgExD,OA/DA2D,EAAOtD,KAAK,YAAa,qBACzBsD,EAAO5D,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,OAAQ,QAClDsD,EAAO5D,OAAO,QAAQI,KAAK,KAAKE,KAAK,YAAa,oBAClDsD,EAAO1D,MAAM,SAAU,WACvB0D,EAAOlD,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACtBkC,IAAa,SAASoG,QAAQ,QAAQ,GACtCpG,IAAa,QAAQoG,QAAQ,OAAO,GACpCuS,EAAUrQ,OAAO,aAAalC,QAAQ,YAAY,GAClD+R,EAAa,KAAMqF,GAAW,GAAIza,MAItCoT,EAAmBtX,EAAUyZ,EAAavV,GAC1CuV,EAAYjS,MAAM,SAAU,SAE5BrG,IAAa,kBAAkBoG,QAAQ,iBAAiB,GAGxDiT,EAAMxS,GAAG,SAAS,SAACjK,EAAG9B,GAClB,IAAIyG,EAAO1C,EAASM,KAAI,SAAAU,GAAI,OAAIA,EAAKZ,QAAO,SAAArC,GAAC,OAAe,IAAXA,EAAE2E,QAAe,MAAI,GAClEmZ,EAAS,EAAIrC,GAAYsC,MAAK,SAASC,EAAG/Z,GAC1C,OAAO+Z,EAAE3b,QAAO,SAAAnB,GAAC,OAAe,IAAXA,EAAEyD,QAAe,GAAGT,WAAWlE,GAAGuE,QAAUN,EAAE5B,QAAO,SAAAnB,GAAC,OAAe,IAAXA,EAAEyD,QAAe,GAAGT,WAAWlE,GAAGuE,WAGjHoX,EAAOvY,IAAU,YAErBwY,GAAuBkC,EAAO1V,UAAWuT,EAAMxV,GAC/CwV,EAAKlS,MAAM,cAAe,SAE1B,IAAI5D,EAAQ8V,EAAKjQ,OAAO,sBAAsB3B,UAAU,UAEpDkU,EAAOpY,EAAMxD,QAAO,SAAAD,GAEpB,OADgBA,EAAKC,QAAO,SAAAY,GAAI,OAAkB,IAAdA,EAAK0B,QAAe,GACvCT,WAAWlE,GAAGuE,QAAUI,EAAKT,WAAWlE,GAAGuE,WAEhE0Z,EAAKzU,QAAQ,QAAQ,GAErB,IAAI0U,EAAaD,EAAKrgB,OAAO2E,KAAI,SAAAH,GAAI,OAAIA,EAAKC,QAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEqC,QAAe,GAAG1B,QAE9E8Y,EAAU1Z,QAAO,SAAAC,GAAC,OAAI4b,EAAWhb,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,QAAQ,GAE5E,IAAI2U,EAAMtY,EAAMxD,QAAO,SAAAD,GAEnB,OADgBA,EAAKC,QAAO,SAAAY,GAAI,OAAkB,IAAdA,EAAK0B,QAAe,GACvCT,WAAWlE,GAAGuE,QAAUI,EAAKT,WAAWlE,GAAGuE,WAEhE4Z,EAAI3U,QAAQ,OAAO,GAEnB,IAAI4U,EAAYD,EAAIvgB,OAAO2E,KAAI,SAAAH,GAAI,OAAIA,EAAKC,QAAO,SAAAC,GAAC,OAAe,IAAXA,EAAEqC,QAAe,GAAG1B,QAE5E8Y,EAAU1Z,QAAO,SAAAC,GAAC,OAAI8b,EAAUlb,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,OAAO,GAE/D3D,EAAMxD,QAAO,SAAAD,GAEpB,OADgBA,EAAKC,QAAO,SAAAY,GAAI,OAAkB,IAAdA,EAAK0B,QAAe,GACvCT,WAAWlE,GAAGuE,UAAYI,EAAKT,WAAWlE,GAAGuE,WAE7DiF,QAAQ,QAAQ,MAGzBqK,EAAIpK,MAAM,SAA8E,IAAlExH,EAAS7D,OAASsf,gBAAgB9f,OAAO2E,KAAI,SAAAzC,GAAC,OAAIA,EAAE,MAAI1B,QAAgB,GAAK,MACnGsd,EAAYjS,MAAM,SAAwE,IAA5DxH,EAAS7D,OAAS2hB,UAAUniB,OAAO2E,KAAI,SAAAzC,GAAC,OAAIA,EAAE,MAAI1B,QAAgB,GAAK,MACrGghB,QAAQvV,KAAK,aAAa,SAAC7J,GAAD,MAAO,wBACjCoD,IAAa,kBAAkBoG,QAAQ,iBAAiB,GAEjD6U,EAjiCWwC,CAAmB,EADrCxF,EAAgBA,EAAc1F,OAAO6F,IACD,EAAyBC,GAAaC,EAAavV,GAItEyV,GAwClB,SAAwB3Z,EAAUwZ,EAAYqF,GAEjD,KAAG7e,EAAS7D,OAAS,GAmBhB,CAED,IAAI2iB,EAAa9e,EAAS,GAAGmG,UAAU7F,KAAI,SAAAzC,GAAC,OAAIA,EAAEmD,QAYlD,OAVkBwY,EAAWlZ,KAAI,SAAAH,GAC7B,IACIM,EAAON,EAAKgG,UAAU7F,KAAI,SAACU,EAAM/E,GAEjC,OADI6iB,EAAW7d,QAAQD,EAAKA,MACrB,CAAE,QAAW8d,EAAW7d,QAAQD,EAAKA,MAAO,UAAa/E,EAAG,KAAQ+E,EAAM,OAAU8d,EAAWA,EAAW7d,QAAQD,EAAKA,WAC/HZ,QAAO,SAAAC,GAAC,OAAIA,EAAEY,SAAW,KACxBF,EAAYN,EAAK,GAAGQ,QAAUR,EAAK,GAAGse,UAC1C,MAAO,CAAE,KAAQ5e,EAAKgG,UAAW,SAAYpF,MAEpB+a,MAAK,SAASC,EAAG/Z,GAAK,OAAO+Z,EAAEhb,SAAWiB,EAAEjB,YA9BzE,GAAiB,MAAd8d,EAAmB,CAElB,IAAIC,EAAaD,EAAW1Y,UAAU7F,KAAI,SAAAzC,GAAC,OAAIA,EAAEmD,QAYjD,OAXkBwY,EAAWlZ,KAAI,SAAAH,GAC7B,IACIM,EAAON,EAAKgG,UAAU7F,KAAI,SAACU,EAAM/E,GAEjC,OADI6iB,EAAW7d,QAAQD,EAAKA,MACrB,CAAE,QAAW8d,EAAW7d,QAAQD,EAAKA,MAAO,UAAa/E,EAAG,KAAQ+E,EAAM,OAAU8d,EAAWA,EAAW7d,QAAQD,EAAKA,WAC/HZ,QAAO,SAAAC,GAAC,OAAIA,EAAEY,SAAW,KACxBF,EAAYN,EAAK,GAAGQ,QAAUR,EAAK,GAAGse,UAC1C,MAAO,CAAE,KAAQ5e,EAAKgG,UAAW,SAAYpF,MAEpB+a,MAAK,SAASC,EAAG/Z,GAAK,OAAO+Z,EAAEhb,SAAWiB,EAAEjB,YAI7EyE,QAAQC,MAAM,sCA/DIuZ,CAAe,EAAI5F,GAAL,EAAyBI,GAAzB,EAA0CI,IAGtBtZ,KAAI,SAAA/C,GAAC,OAAIA,EAAE5B,QAAO+d,EAAMxV,GAE5EwV,EAAKlS,MAAM,cAAe,UA+K3B,SAAS0T,EAAgBpS,EAAO5E,GAEnC,IAAI+a,EAAanW,EAAMxB,OAAO,KAAKC,QAAQ,UAAU,GACrD0X,EAAWrX,KAAK,YAAa,qBAC7BqX,EAAW3X,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,OAAQ,QACtDqX,EAAW3X,OAAO,QAAQI,KAAK,KAAKE,KAAK,YAAa,oBACtDqX,EAAWzX,MAAM,SAAU,WAC3ByX,EAAWjX,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GAC1BkC,IAAa,SAASoG,QAAQ,QAAQ,GACtCpG,IAAa,QAAQoG,QAAQ,OAAO,GACpCuS,UAAUrQ,OAAO,aAAalC,QAAQ,YAAY,GAClD+R,EAAa,KAAMqF,GAAW,GAAIza,MAInC,SAASgb,EAAiBpW,EAAO0Q,EAAYC,EAAavV,GAE7D,IAAIib,EAAkB1F,EAAYhQ,OAAO,gBACrC2V,EAAcD,EAAgB9S,QAAUoN,EAAYnS,OAAO,OAAOC,QAAQ,eAAe,GAAQ4X,EAIrGC,EAAY5X,MAAM,UAAU,gBAAgBA,MAAM,QAAS,SAASA,MAAM,SAAU,QACpF,IAAIkS,EAAOvY,IAAU,YAGrB,GAFAuY,EAAKlS,MAAM,cAAe,SAEd,MAATsB,EAAc,CACb,IAAIuW,EAAahG,EAAiB/Y,KAAI,SAAAzC,GAAC,OAAGA,EAAEyhB,cACxCC,EAAWxc,GAAYyc,MAAK,SAAA1hB,GAAC,OAAkC,IAA9BuhB,EAAWpe,QAAQnD,EAAE,OAC1DgL,EAAMwW,WAAaC,EAAS,GAC5BlG,EAAiB5c,KAAKqM,GAG1B,GAAGuQ,EAAiBld,OAAS,EAAE,CAC3B,IAAIsjB,EAAoBte,IAAU,YAAYsI,OAAO,mBACjDiW,EAAgBD,EAAkBpT,QAAUlL,IAAU,YAAYmG,OAAO,UAAUI,KAAK,eAAeE,KAAK,KAAM,kBAAkBL,QAAQ,gBAAgB,GAAQkY,EACxKC,EAAc1X,GAAG,SAAS,WACG,gBAAzB0X,EAAchY,OAA2BgY,EAAchY,KAAK,gBAAkBgY,EAAchY,KAAK,eACjGwX,EAAiB,KAAM1F,EAAYC,EAAavV,MAIxD,IAAIyb,EAAqBzb,EAAO5D,KAAI,SAACoD,EAAIzH,GACrC,IAAI2jB,EAAS,CAAC,MAASlc,EAAGzD,MAAO,KAAQyD,EAAG9D,KAAM,KAAQ,IAgB1D,OAfAyZ,EAAiB/Y,KAAI,SAACuf,EAAK5jB,GACvB,IAAI6jB,EAAOxb,EAAoBub,EAAIlkB,KAAMuI,EAAQ,CAACR,EAAGzD,QAEjD8f,EAAQD,EAAK5f,SAAQ,SAAA+D,GACrB,OAAOA,EAAI3D,KAAI,SAAAyb,GACX,OAAOA,EAAEzb,KAAI,SAAAzC,GACT,IAAImiB,GAAsB,IAAXniB,EAAE6E,KAAgB,GAAK7E,EAAEuF,UAAYvF,EAAEyE,SAAW,EAEjE,OADAzE,EAAEoiB,SAAWD,EAAWA,EACjBniB,WAKnB+hB,EAAOjkB,KAAKc,KAAK,CAAC,MAAS,CAAC,MAASojB,EAAIK,MAAO,OAAUL,EAAIM,OAAQ,MAASN,EAAIP,YAAa,KAAoB,eAAZ5b,EAAG9D,KAAwBmgB,EAAQD,EAAK5f,SAAQ,SAAA6b,GAAC,OAAGA,UAEzJ6D,KAGPnY,EAAS2X,EAAYtX,UAAU,UAAUnM,KAAK0d,GAAkBtR,KAAK,UAAUR,QAAQ,gBAAgB,GAAMC,MAAM,cAAc,SAAAzJ,GAAC,OAAGA,EAAEuhB,cAC3I7X,EAAOK,UAAU,QAAQnM,MAAK,SAAA+C,GAAC,MAAG,CAACA,MAAIqJ,KAAK,QAAQL,MAAK,SAAAhJ,GACrD,OAAOA,EAAEwhB,MAAF,UAAaxhB,EAAEwhB,MAAM,GAArB,cAA6BxhB,EAAEyhB,OAAO,IAAOzhB,EAAEuG,SACvDqC,OAAO,QAAQI,MAAK,SAAAhJ,GAAC,OAAGA,EAAE/C,KAAKQ,UAAQoL,QAAQ,qBAAqB,GAE5DE,EAAOK,UAAU,KAAKnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,MAAIgK,KAAK,KAAKR,QAAQ,sBAAsB,GAAMC,MAAM,eAAgB,QAC9GQ,GAAG,SAAS,SAACjK,EAAG9B,GACjB,IAAImkB,EAAe/G,EAAiBjZ,QAAO,SAAAC,GAAC,OAAGA,EAAEif,YAAcvhB,EAAEuhB,eACjEjG,EAAmB+G,GACCjkB,OAAS,EACzB+iB,EAAiB,KAAM1F,EAAYC,EAAavV,IAEhDuV,EAAY3R,UAAU,KAAKoD,SAC3BuO,EAAYjS,MAAM,SAAU,OAC5BkS,EAAKlS,MAAM,cAAe,WAIlC,IAAI6Y,EAAe5G,EAAYhQ,OAAO,mBAClCwQ,EAAeoG,EAAahU,QAAUoN,EAAYnS,OAAO,OAAOC,QAAQ,kBAAkB,GAAQ8Y,EACtG5G,EAAYjS,MAAM,SAAU,SAASA,MAAM,QAAS,QACpDyS,EAAazS,MAAM,SAAU,SAE7B,IAAI8Y,EAAWrG,EAAanS,UAAU,gBAAgBnM,KAAKgkB,EAAmBvf,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QAAuBU,KAAI,SAACuf,GAEnH,IAAI1c,EAAMhC,IAAO0e,EAAIlkB,KAAKuE,SAAQ,SAAAnC,GAAC,OAAGA,EAAEpC,KAAKuE,SAAQ,SAAArC,GAAC,OAAGA,EAAEyC,KAAI,SAAAD,GAAC,OAAGA,EAAE+C,oBAAgB,GACjFC,EAAMlC,IAAO0e,EAAIlkB,KAAKuE,SAAQ,SAAAnC,GAAC,OAAGA,EAAEpC,KAAKuE,SAAQ,SAAArC,GAAC,OAAGA,EAAEyC,KAAI,SAAAD,GAAC,OAAGA,EAAEiD,oBAAgB,GAmCrF,OAjCAuc,EAAIlkB,KAAK2E,KAAI,SAAAxC,GACT,IAGI2R,EAAW,IAAI9N,MAHH,GAGoB+N,OAAOpP,KAAI,SAACzC,EAAG5B,GAI/C,MAAO,CAAC,KAFIA,GADD,EAJC,GAOU,KADVA,EAAG,IAFJ,EAJC,GAOsB,KAAQA,EAAG,IAAOkH,EAAK,IAAME,MAG/DuM,EAAgB9R,EAAEnC,KAAK2E,KAAI,SAAAH,GAAI,OAAIA,EAAKC,QAAO,SAAAY,GAAI,OAAgB,GAAbA,EAAK0B,WAC3DmN,EAAY/R,EAAEnC,KAAKuE,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAAY,GAAI,OAAiB,IAAdA,EAAK0B,WAkB/D,OAhBA5E,EAAE4D,KAAO+N,EAASnP,KAAI,SAACrB,EAAGhD,EAAGqK,GACzB,IAAIyJ,EAAQH,EAAc1P,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAAY,GAClD,OAAOA,EAAK4D,UAAY3F,EAAE+Q,MAAQhP,EAAK4D,UAAY3F,EAAE4C,UAEzD5C,EAAEtD,KAAOoU,EACT,IAAIwF,EAAOpU,IAAQ4O,EAAMzP,KAAI,SAAAuJ,GAAC,OAAGA,EAAEvH,YACnCrD,EAAEsW,UAAgBrS,IAATqS,EAAqB9F,EAASxT,EAAE,GAAGsZ,KAAOA,EACnD,IAAIyK,EAAW7d,KAAKoe,KAAKpf,IAAQ4O,EAAMzP,KAAI,SAAAuJ,GAAC,OAAGA,EAAEoW,cACjDhhB,EAAEuhB,aAAgC,IAAjBzQ,EAAM5T,OAAe,EAAI6jB,EAC1C,IAAIS,EAAoB,EAAXT,EAGb,OAFA/gB,EAAEyhB,aAAmBxd,IAATqS,EAAqB9F,EAASxT,EAAE,GAAGykB,QAAUnL,EAAOkL,EAChExhB,EAAE0hB,cAAoBzd,IAATqS,EAAqB9F,EAASxT,EAAE,GAAG0kB,SAAWpL,EAAOkL,EAC3DxhB,KAEXnB,EAAEyP,OAASsC,EAEJ/R,KAGJ+hB,MAEXS,EAASM,OAAO1V,SAChB,IAAI2V,EAAgBP,EAASQ,QAAQxZ,OAAO,KAAKC,QAAQ,eAAe,GAExDsZ,EAAcvZ,OAAO,QAAQI,MAAK,SAAA3J,GAAC,OAAGA,EAAEkC,SAAOuH,MAAM,cAAe,OACnEA,MAAM,YAAa,QAAQI,KAAK,YAAa,uBAE9D0Y,EAAWO,EAAcE,MAAMT,IACtB1Y,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,gBAAgB,GAAQ,GAAJA,GAAS,OAEjE,IAAI+kB,EAAYV,EAASxY,UAAU,iBAAiBnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,MAAIgK,KAAK,KAAKR,QAAQ,eAAe,GACnGyZ,EAAUpZ,KAAK,YAAa,qBACboZ,EAAUlZ,UAAU,qBAAqBnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,MAAIgK,KAAK,QAAQR,QAAQ,gBAAgB,GAC1FK,KAAK,QAAS,KAAKA,KAAK,SAAU,IAAIA,KAAK,OAAQ,QAAQA,KAAK,SAAU,QAE3F,GAAGzG,IAAU,mBAAmBkL,SAAmD,gBAAxClL,IAAU,mBAAmBuG,OAAyB,CACzF,IAAIwO,EAAU/U,MACbqP,GAAE,SAACzS,EAAG9B,GAEH,OADQkF,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAC3CkP,CAAEvU,MAEZgO,GAAE,SAAAlM,GACH,IAAIkM,EAAI9I,MAAiBoC,OAAO,CAACxF,EAAEsF,IAAKtF,EAAEoF,MAEtC,OADA8G,EAAE3I,MAAM,CAAC,GAAI,IACN2I,EAAElM,EAAEwX,SAGnB/C,EAAawO,EAAUlZ,UAAU,iBAAiBnM,MAAK,SAAAoC,GAAC,OAAGA,EAAEpC,QAAMoM,KAAK,KAAKR,QAAQ,eAAe,GACxGiL,EAAW1K,UAAU,KAAKoD,SAC1B,IAAItH,EAAQ4O,EAAWlL,OAAO,QAAQM,KAAK,KAAK,SAAA7J,GAChCA,EAAE2D,KAAK,GAAG/F,KAAK,GAAGmJ,OAU9B,OATA/G,EAAE2D,KAAO3D,EAAE2D,KAAKpB,KAAI,SAAC0B,EAAG/F,EAAGgD,GAOvB,YANciE,IAAXlB,EAAEuT,OACDvT,EAAEuT,KAAOxX,EAAE2D,KAAKzF,EAAE,GAAGsZ,KACrBxX,EAAEkjB,SAAU,GAGhBjf,EAAE8C,OAAS3D,MAAiBoC,OAAO,CAACvB,EAAEqB,IAAKrB,EAAEmB,MAAM7B,MAAM,CAAC,GAAI,IACvDU,KAEJkU,EAAQnY,EAAE2D,SAClB6F,QAAQ,QAAQ,GAEf2Z,EAAQ/f,MACX6X,MAAM7X,KACNqP,GAAE,SAACzS,EAAG9B,GAEH,OADQkF,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAC3CkP,CAAEvU,MAEZgd,IAAG,SAAAlb,GACA,IAAIkM,EAAIlM,EAAE+G,OAGV,OAFAmF,EAAE3I,MAAM,CAAC,GAAI,IAEN2I,EAAElM,EAAE4iB,aAEdzH,IAAG,SAAAnb,GACA,IAAIkM,EAAIlM,EAAE+G,OAGV,OAFAmF,EAAE3I,MAAM,CAAC,GAAI,IAEN2I,EAAElM,EAAE2iB,YAGXS,EAAaH,EAAUlZ,UAAU,iBAAiBnM,MAAK,SAAAoC,GAAC,OAAGA,EAAEpC,QAAMoM,KAAK,KAAKR,QAAQ,eAAe,GACxG4Z,EAAWrZ,UAAU,KAAKoD,SAC1B,IAAIkW,EAAOD,EAAW7Z,OAAO,QAAQM,KAAK,KAAK,SAAA7J,GAa3C,OAZAA,EAAE2D,KAAO3D,EAAE2D,KAAKpB,KAAI,SAAC0B,EAAG/F,EAAGgD,GAUvB,OATiBoiB,MAAdrf,EAAE0e,UACD1e,EAAE0e,QAAU3iB,EAAE2D,KAAKzF,EAAE,GAAGykB,QACxB3iB,EAAEkjB,SAAU,GAEEI,MAAfrf,EAAE2e,WACD3e,EAAE2e,SAAW5iB,EAAE2D,KAAKzF,EAAE,GAAG0kB,SACzB5iB,EAAEkjB,SAAU,GAGTjf,KAEJkf,EAAMnjB,EAAE2D,SAChB6F,QAAQ,QAAQ,GAEnB3D,EAAM4D,MAAM,OAAQ,QACpB5D,EAAM4D,MAAM,UAAU,SAAAzJ,GAAC,OAAGA,EAAE+K,MAAM7F,SAClCW,EAAM4D,MAAM,eAAgB,OAE5B4Z,EAAK5Z,MAAM,QAAQ,SAAAzJ,GAAC,OAAGA,EAAE+K,MAAM7F,SAC/Bme,EAAK5Z,MAAM,UAAW,KAETwZ,EAAU1Z,OAAO,KAAKC,QAAQ,UAAU,GAErDyZ,EAAUhZ,GAAG,aAAa,SAASjK,EAAG9B,GAAG,WAEjCwR,EAAQtM,MAAiBoC,OAAO,CAACxF,EAAEpC,KAAK,GAAG+F,KAAK,GAAG2B,IAAKtF,EAAEpC,KAAK,GAAG+F,KAAK,GAAGyB,MAAM7B,MAAM,CAAC,EAAG,KAC1FggB,EAAgBngB,IAAUoK,MAAM9B,OAAO,WACvC8X,EAAYD,EAAcjV,QAAUlL,IAAUoK,MAAMjE,OAAO,KAAKC,QAAQ,UAAU,GAAQ+Z,EAE9F,GAAGngB,IAAU,mBAAmBkL,SAAiD,gBAAtClL,IAAU,mBAAmBuG,OACpE6Z,EAAU3Z,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,cAAckF,IAAS,GAAM,GAAK,IAAI,SAC3EogB,EAAUhlB,KAAK4E,IAAYsM,GAAOkD,MAAM,QACvC,CACD,IACI6Q,EADQrgB,IAAUoK,MAAM9B,OAAO,gBAAgB3B,UAAU,QACzCnM,OAAO2E,KAAI,SAAAvC,GAAC,OAAGA,EAAE,GAAGyjB,WAAS,GAEjDD,EAAU3Z,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,cAAckF,IAAS,GAAM,GAAK,IAAI,SAC3E,IAAIsgB,EAAWtgB,MAAiBoC,OAAO,CAACie,EAAS,IAAIlgB,MAAM,CAAC,EAAG,KAC/DigB,EAAUhlB,KAAK4E,IAAYsgB,GAAU9Q,MAAM,QAIhD3I,GAAG,cAAc,WACA7G,IAAUoK,MAAM9B,OAAO,WAC7ByB,gBAGb,CAED8V,EAAUlZ,UAAU,gBAAgBoD,SACpC8V,EAAUlZ,UAAU,iBAAiBoD,SACrC,IAAIsH,EAAawO,EAAUlZ,UAAU,iBAAiBnM,MAAK,SAAAoC,GAGvD,IAFA,IAAIuW,EAAYvW,EAAEpC,KAAK,GAAG+F,KACtBggB,EAAW,GAF4C,WAGnDzlB,GACJ,IAAI0lB,EAAQ,GACZ5jB,EAAEpC,KAAKM,GAAGyF,KAAKpB,KAAI,SAAC0B,EAAG7E,QACL+F,IAAXlB,EAAEuT,OACDvT,EAAEuT,KAAOxX,EAAEpC,KAAKM,GAAGyF,KAAKvE,EAAE,GAAGoY,WAERrS,IAAtBoR,EAAUnX,GAAGoY,OACZjB,EAAUnX,GAAGoY,KAAOjB,EAAUnX,EAAE,GAAGoY,MAEvC,IAAIiM,EAAUzjB,EAAEpC,KAAK,GAAG+F,KAAK,GAAGyB,IAAMpF,EAAEpC,KAAK,GAAG+F,KAAK,GAAG2B,IACxDse,EAAMllB,KAAK,CAAC,KAAO0F,KAAKC,IAAIkS,EAAUnX,GAAGoY,KAAOvT,EAAEuT,MAAO,QAAWiM,OAExEE,EAASjlB,KAAKklB,IAZV1lB,EAAI,EAAGA,EAAI8B,EAAEpC,KAAKQ,OAAQF,IAAK,EAA/BA,GAcR,OAAOylB,KACR3Z,KAAK,KAAKR,QAAQ,eAAe,GAEhC2O,EAAU/U,MACTqP,GAAE,SAACzS,EAAG9B,GAEH,OADQkF,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAC3CkP,CAAEvU,MAEZgO,GAAE,SAAAlM,GACC,IAAIkM,EAAI9I,MAAiBoC,OAAO,CAAC,EAAGxF,EAAEyjB,UAAUhe,OAAM,GAEtD,OADAyG,EAAE3I,MAAM,CAAC,GAAI,IACN2I,EAAElM,EAAE6jB,SAGfhe,EAAQ4O,EAAWlL,OAAO,QAAQM,KAAK,KAAK,SAAA7J,GAC5C,OAAOmY,EAAQnY,MAGnB6F,EAAM4D,MAAM,OAAQ,QACpB5D,EAAM4D,MAAM,SAAU,SACtB5D,EAAM4D,MAAM,eAAgB,OAIhC,IAAIqa,EAAcvB,EAASxY,UAAU,uBAAuBnM,MAAK,SAAAoC,GAEzD,IAAIoF,EAAMhC,IAAOpD,EAAEpC,KAAKuE,SAAQ,SAAAG,GAAC,OAAGA,EAAEkN,OAAOjN,KAAI,SAAAzC,GAAC,OAAGA,EAAEyE,eACnDe,EAAMlC,IAAOpD,EAAEpC,KAAKuE,SAAQ,SAAAG,GAAC,OAAGA,EAAEkN,OAAOjN,KAAI,SAAAzC,GAAC,OAAGA,EAAEyE,eAEnDkO,EAAIrP,MAAiBoC,OAAO,CAACF,EAAKF,IAAM7B,MAAM,CAAC,EAAG,MAElDmP,EAAYtP,MACf1C,OAAM,SAASV,GAAK,OAAOA,EAAEuE,WAC7BiB,OAAOiN,EAAEjN,UACTmN,WAAWF,EAAEG,MAAM,KAUpB,MAAO,CAAC,CAAC,KARM5S,EAAEpC,KAAK2E,KAAI,SAAAzC,GACtB,IAAIikB,EAAY,EAAIjkB,EAAE0P,QAAQjN,KAAI,SAAAoC,GAG9B,OAFAA,EAAK8N,EAAIA,EACT9N,EAAKoG,MAAQjL,EAAEiL,MACRpG,KAEX,MAAO,CAAC,QAAU+N,EAAU5S,EAAE0P,QAAS,KAAQuU,EAAW,MAASjkB,EAAEiL,MAAO,OAAU0H,MAEhE,OAAUA,OACrCzI,KAAK,KAAKR,QAAQ,sBAAsB,GAE3Csa,EAAYja,KAAK,YAAa,qBAE9B,IAAIma,EAAQF,EAAY/Z,UAAU,YAAYnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,MAAIgK,KAAK,KAAKR,QAAQ,UAAU,GACxFwa,EAAMna,KAAK,YAAa,oBACxBma,EAAMnY,MAAK,SAAC7L,EAAG9B,EAAGqK,GACdnF,IAAUmF,EAAMrK,IAAIM,KAAK4E,IAAcpD,EAAEgP,QAAQ4D,MAAM,OAG3D,IAAIqR,EAAaH,EAAY/Z,UAAU,mBAAmBnM,MAAK,SAAAoC,GAC3D,OAAOA,EAAEpC,KAAK2E,KAAI,SAACzC,EAAG5B,EAAGgD,GAGrB,OAFApB,EAAEoN,MAAQhP,EACV4B,EAAEokB,YAAchjB,EAAE9C,OACX0B,QAEZkK,KAAK,KAAKR,QAAQ,kBAAkB,GAE3Bya,EAAWla,UAAU,SAASnM,MAAK,SAAAoC,GAGvC,MAAO,CADI,CAAC,KADDoD,IAAQpD,EAAEpC,KAAK2E,KAAI,SAAAhC,GAAC,OAAGA,EAAEgE,YACV,MAAQvE,EAAE+K,MAAO,EAAI/K,EAAEgP,YAEtDhF,KAAK,QAAQR,QAAQ,QAAQ,GAAMK,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,cAAc8B,EAAEyS,EAAEzS,EAAEwX,MAAM,KAAK,SAC/F3N,KAAK,SAAU,IAAIA,KAAK,QAAS,GAAGA,KAAK,QAAQ,SAAA7J,GAAC,OAAGA,EAAE+K,MAAM7F,SAAOuE,MAAM,UAAW,OAEvEwa,EAAWla,UAAU,cAAcnM,MAAK,SAACoC,EAAG9B,GAAJ,MAAS,CAAC8B,MAAIgK,KAAK,KAAKR,QAAQ,aAAa,GAAMK,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAE/H,MAAO,eADIkC,MAAiBoC,OAAO,CAAC,EAAGxF,EAAEkkB,cAAc3gB,MAAM,CAAC,EAAG,IAC1CqD,CAAK5G,EAAEkN,MAAM,IAAM,OAEtBnD,UAAU,kBAAkBnM,MAAK,SAAAoC,GAAC,OAAGA,EAAEpC,QAAMoM,KAAK,UAAUH,KAAK,IAAK,GAC7FA,KAAK,MAAM,SAAC7J,EAAG9B,GACZ,OAAO8B,EAAEyS,EAAEzS,EAAEuE,YACdsF,KAAK,MAAM,SAAC7J,EAAG9B,EAAGgD,GACjB,OAAO,KACR2I,KAAK,QAAQ,SAAA7J,GAAC,OAAGA,EAAE+K,MAAM7F,S,0HCthBhC,IAAM4I,GAAa,CACfqW,UAAW,GACXC,WAAY,GACZC,gBAAiB,IAGd,SAASzI,GAAuB3Z,EAAU0Z,EAAM5V,GAEnD,IAAIue,GAAkB,EAElBC,EAAYnhB,IAAU,YAAYyG,KAAK,SAE3C8R,EAAKjQ,OAAO,mBAAmB3B,UAAU,KAAKoD,SAE9C,IAAIsH,EAoED,SAAqBxS,EAAU0Z,EAAMxV,GAIxC,IAAIuW,EAAUf,EAAKjQ,OAAO,mBACtBmI,EAAM6I,EAAQpO,QAAUqN,EAAKpS,OAAO,OAAOM,KAAK,KAAM,kBAAoB6S,EAE1E4H,GAAkB,EAElBE,EAAe3Q,EAAInI,OAAO,iBAC1B+Y,EAAWD,EAAalW,QAAUuF,EAAItK,OAAO,KAAKC,QAAQ,gBAAgB,GAAQgb,EACtFC,EAAS5a,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,qBAGpC,IAAIye,EAAkB1a,EAASE,SAAQ,SAAAya,GAAG,OAAGA,EAAIza,SAAQ,SAAAG,GAAC,OAAGA,EAAEW,WAAO4Z,QAAO,SAAUC,EAAKC,GAMxF,YALwB,IAAbD,EAAIC,GACbD,EAAIC,GAAQ,EAEZD,EAAIC,IAAS,EAERD,IACJ,IAGHG,EAAc7Z,MAAcG,MAAM,CAAC,EAAG,KAAKiC,OAAO,CAAC,EAAGpC,IAAO/E,OAAOiG,OAAOqY,MAC3ElI,EAAagQ,EAAS1a,UAAU,UAAUnM,KAAKqE,GAAU+H,KAAK,KAAKR,QAAQ,SAAS,GACzEiL,EAAWlL,OAAO,QAAQC,QAAQ,aAAa,GACrDK,KAAK,KAAM,GAKpB,IAAI6a,EAAUjQ,EAAWlL,OAAO,KAAKC,QAAQ,sBAAsB,GACnEkb,EAAQ7a,KAAK,YAAa,qBAC1B6a,EAAQnb,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,OAAQ,QACnD6a,EAAQnb,OAAO,QAAQI,KAAK,KAAKE,KAAK,YAAa,oBACnD6a,EAAQjb,MAAM,SAAU,WAExBib,EAAQza,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GAEvB,IAAIyjB,EAAQvhB,IAAalC,GAAGmB,QAAO,SAACC,EAAGlD,GAAJ,OAASA,GAAKlB,KAAGsL,QAAQ,iBAAiB,GAE1EpG,IAAUlC,EAAEhD,IAAIsL,QAAQ,kBACvBpG,IAAUlC,EAAEhD,IAAIsL,QAAQ,iBAAiB,GACzC+R,EAAa,KAAMoJ,EAAM/mB,OAAQuI,KAEjC/C,IAAUlC,EAAEhD,IAAIsL,QAAQ,iBAAiB,GACzC+R,EAAa,CAACvb,GAAI2kB,EAAM/mB,OAAQuI,OAKxCsO,EAAWxK,GAAG,aAAa,SAASjK,EAAG9B,GACnC,IAAIiX,EAAY/R,IAAU,YAAY2G,UAAU,SAC5CqL,EAAahS,IAAU,YAAY2G,UAAU,SAKjD,OAJAoL,EAAS9S,QAAO,SAAAC,GACZ,OAAOtC,EAAEuC,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAAMC,QAAQZ,EAAE1E,KAAKqF,OAAS,KAClDuG,QAAQ,SAAS,GACpB4L,EAAU/S,QAAO,SAAAC,GAAC,OAAGtC,EAAEuC,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAAMC,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,SAAS,GAC5EpG,IAAUoK,MAAMhE,QAAQ,SAAS,MACzCS,GAAG,YAAY,SAASjK,EAAG9B,GACVkF,IAAU,YAAY2G,UAAU,SAASP,QAAQ,SAAS,GACzDpG,IAAU,YAAY2G,UAAU,SAASP,QAAQ,SAAS,GAC3E,OAAOpG,IAAUoK,MAAMhE,QAAQ,SAAS,MAGzBiL,EAAWlL,OAAO,QAAQI,MAAK,SAAA3J,GAC/C,IAAIod,EAASpd,EAAEqC,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,QAAe,GAAG1B,KAC7C,OAAOma,EAAOvN,OAAO,GAAGC,cAAgBsN,EAAO3b,MAAM,MAG5CoI,KAAK,IAAK,IAAIA,KAAK,IAAK,IAErC,IAAIwT,EAAY5I,EAAWlL,OAAO,KAAKC,QAAQ,aAAa,GAC5D6T,EAAUxT,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,uBAEzBmf,EAAU9T,OAAO,QAC5BM,KAAK,KAAM,GACXA,KAAK,KAAM,KACXA,KAAK,KAAM,IACXA,KAAK,KAAM,IAJZ,IAMIyT,EAAaD,EAAUtT,UAAU,SAASnM,MAAK,SAACoC,GAChD,OAAOA,KAAIgK,KAAK,KAAKH,KAAK,SAAS,SAAC7J,EAAG9B,EAAGgD,GACtC,OAAOkC,IAAUlC,EAAEA,EAAE9C,OAAS,IAAIR,OAAO,GAAGqF,KAAO,WAG3Dqa,EAAWzT,KAAK,aAAa,SAAC7J,GAG1B,MAAO,aAFCoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KAClDkP,CAAEzS,EAAEwD,YACY,WAEnC8Z,EAAWrT,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACvBojB,GACCA,GAAkB,EAClBlhB,IAAU,mBAAmBoG,QAAQ,UAAU,KAE/C8a,GAAkB,EAClBlhB,IAAU,mBACTqG,MAAM,OAASrG,IAAS2M,MAAS,MACjCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MACrCtE,OAAO,UACP/B,KAAK3J,EAAEiD,MACRG,IAAU,mBAAmBoG,QAAQ,UAAU,GAE/CpG,IAAU,mBAAmB6G,GAAG,SAAS,WACrC2a,GAAW5kB,EAAEiD,KAAMkD,GACnBme,GAAkB,EAClBlhB,IAAU,mBAAmBoG,QAAQ,UAAU,MAGnDpG,IAAU,mBAAmB6G,GAAG,SAAS,WAC1BsC,KAAX,IACI7J,EAAO+R,EAAWpS,QAAO,SAAAD,GACzB,OAAOA,EAAKG,KAAI,SAAAU,GAAI,OAAIA,EAAKA,QAAMC,QAAQlD,EAAEiD,OAAS,KAEtD0hB,EAAQlQ,EAAWpS,QAAO,SAAAD,GAC1B,OAAwD,IAAjDA,EAAKG,KAAI,SAAAU,GAAI,OAAIA,EAAKA,QAAMC,QAAQlD,EAAEiD,SAEjDqhB,GAAkB,EAClBlhB,IAAU,mBAAmBoG,QAAQ,UAAU,GAC/C+R,EAAa7Y,EAAK9E,OAAQ+mB,EAAM/mB,OAAQuI,UAKvCmX,EAAW/T,OAAO,UAAUM,KAAK,KAAM,GAAGA,KAAK,KAAM,GAAGA,KAAK,KAAK,SAAA7J,GAC3E,OAAOid,EAAYN,EAAgB3c,EAAEiD,UACtC4G,KAAK,SAAS,SAAC7J,EAAG9B,GAAJ,MAAS,QAAQ8B,EAAEiD,QAE7BgH,GAAG,aAAa,SAASjK,EAAG9B,GAC/B,IAAIqf,EAASD,EAAWjb,QAAO,SAAAnB,GAAC,OAAGA,EAAE+B,OAASjD,EAAEiD,QAChCG,IAAU,YAAY2G,UAAU,SAClB1H,QAAO,SAAAC,GAAC,OAAGA,EAAE1E,KAAKqF,OAASjD,EAAEiD,QAAMuG,QAAQ,mBAAmB,GAC5F,OAAO+T,EAAO/T,QAAQ,gBAAgB,MACvCS,GAAG,YAAY,SAASjK,EAAG9B,GAC1B,IAAIqf,EAASD,EAAWjb,QAAO,SAAAnB,GAAC,OAAGA,EAAE+B,OAASjD,EAAEiD,QAEhD,OADAG,IAAa,oBAAoBoG,QAAQ,mBAAmB,GACrD+T,EAAO/T,QAAQ,gBAAgB,MAGnB8T,EAAWjb,QAAO,SAAAC,GAAC,OAAc6C,MAAX7C,EAAEwE,SAAoByC,OAAO,QAAQI,MAAK,SAAA3J,GAEnF,OADaA,EAAE8G,MAAM+I,OAAO,GAAGC,cAAgB9P,EAAE8G,MAAMrF,MAAM,MAE9DoI,KAAK,IAAK,IAAIA,KAAK,IAAK,GAE3B,OAAO4K,EAtNUoQ,CAAY5iB,EAAU0Z,EAAM5V,GAGzC0X,EAAmBhJ,EAAWlL,OAAO,KAAKC,QAAQ,qBAAqB,GACvE6H,EAAWC,GAAajP,QAAO,SAAAC,GAAC,MAAc,mBAAXA,EAAET,QAA2BU,KAAI,SAAAzC,GAAC,OAAGA,EAAEyR,aAE1EuT,EAAUzT,EAASjT,OAAS,EAAI2H,EAAiB1D,QAAO,SAAAC,GAAC,OAAkC,IAA/B+O,EAASnO,QAAQZ,EAAEJ,UAAeK,KAAI,SAAAzC,GAAC,OAAGA,EAAEoC,SAAS,KAEjH+C,EAAUsB,EAAoBtE,EAAU8D,EAAkB+e,GAE1DC,EAAuB,OAAZD,EAAmB/e,EAAiB3H,OAAS0mB,EAAQ1mB,OAEhE4mB,EAAoBrH,GAAiBF,EAAkBxY,EAASc,EAAkB,KAAMwe,GACxFpE,EAAiC,SAAdoE,EAAuB,GAAK,GACnD9P,EAAW5K,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,gBAAkBA,IAAMiiB,EAAkB,IAAK4E,EAAW,IAAM,OAExFnH,GAAYoH,EAAmBT,GAC/B1G,GAAgBmH,EAAmBT,GAAW,GA0C5D,OAGG,SAAqB1Q,EAAKoR,EAAYrnB,EAAMmnB,GAE/ClR,EAAIpK,MAAM,SAAY7L,EAAKQ,QAAU2mB,EAAW,IAAQ,MACxDE,EAAWpb,KAAK,aAAa,SAAC7J,GAAD,MAAM,wBA/CnCklB,CAAYvJ,EAAKjQ,OAAO,mBAAoB+R,EAAkBxb,EAAW8iB,EAAW5E,GAEnE/c,IAAa,kBACnB6G,GAAG,SAAS,SAACjK,EAAG9B,GACpBomB,GACCA,GAAkB,EAClBlhB,IAAU,kBAAkBoG,QAAQ,UAAU,KAE9C8a,GAAkB,EAClBlhB,IAAU,kBACTqG,MAAM,OAASrG,IAAS2M,MAAS,MACjCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MACrCtE,OAAO,UACP/B,KAAK3J,EAAEoH,UACRhE,IAAU,kBAAkBoG,QAAQ,UAAU,GAE9CpG,IAAU,oBAAoB6G,GAAG,SAAS,YCoR/C,SAAyBkb,EAAehf,GAE3C,IAAIvI,EAAO2O,KAGP7J,GAFc4O,GAAajP,QAAO,SAAAC,GAAC,MAAoB,gBAAjBA,EAAE8iB,cAEjCxnB,EAAKyE,QAAO,SAAAD,GACnB,OAAOA,EAAKA,EAAKhE,OAAS,GAAG8F,WAAWihB,EAAcre,OAAOM,WAAa+d,EAAc/d,aAO5Fie,GADeC,GAAU,cAAe,OAH5B,KAAKhU,GAAajP,QAAO,SAAAC,GAAC,MAAuB,SAApBA,EAAEijB,iBAA0BnnB,OAGdwmB,GAA/B,GAA+ChnB,GAA/C,GAA0D8E,GAAO,CAAC,CAAC,YAAa,CAACyiB,EAAcre,MAAOqe,EAAc/d,aACrHjB,GACvBqG,GAAe,gBAGhB,IAAI4I,EAAahS,IAAU,YAAY2G,UAAU,SAC7CoL,EAAY/R,IAAU,YAAY2G,UAAU,SAE5Cyb,EAAW9iB,EAAKP,SAAQ,SAAAC,GAAI,OAAGA,EAAKG,KAAI,SAAAU,GAAI,OAAIA,EAAKA,WAEzDG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DpG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAEvC4L,EAAU/S,QAAO,SAAAC,GAAC,OAAsC,IAAnCkjB,EAAStiB,QAAQZ,EAAE1E,KAAKqF,SACnDuG,QAAQ,kBAAkB,GAEpB2L,EAAS9S,QAAO,SAAAC,GAAC,OAAsC,IAAnCkjB,EAAStiB,QAAQZ,EAAE1E,KAAKqF,SAClDuG,QAAQ,kBAAkB,GDhT1Bic,CAAgBzlB,EAAG+F,GACnBue,GAAkB,EAClBlhB,IAAU,kBAAkBoG,QAAQ,UAAU,MAGlDpG,IAAU,oBAAoB6G,GAAG,SAAS,WACtC,IAAIrM,EAAO2O,KACP7J,EAAO9E,EAAKyE,QAAO,SAAAD,GACnB,OAAOA,EAAKA,EAAKhE,OAAS,GAAG8F,WAAWlE,EAAE8G,OAAOM,WAAapH,EAAEoH,YAGhEud,EAAQ/mB,EAAKyE,QAAO,SAAAD,GACpB,OAAOA,EAAKA,EAAKhE,OAAS,GAAG8F,WAAWlE,EAAE8G,OAAOM,UAAYpH,EAAEoH,YAGnEkd,GAAkB,EAClBlhB,IAAU,kBAAkBoG,QAAQ,UAAU,GAE9C+R,EAAa7Y,EAAMiiB,EAAO5e,UAM/B0O,EA6JJ,SAASkJ,GAAiBF,EAAkB7f,EAAMuI,EAAQK,EAAa+d,GAC1E,IAAIpE,EAAiC,SAAdoE,EAAuB,GAAK,GAC/CS,EAAoBvH,EAAiB1T,UAAU,KAAKnM,MAAK,SAACoC,EAAG9B,GAC7D,OAAON,EAAKM,MAAK8L,KAAK,KAC1Bgb,EAAkBxb,QAAQ,0BAA0B,GACpDwb,EAAkBnb,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAU,gBAAiBA,GAAKiiB,EAAkB,GAAI,OAE1F,IAAI5Y,EAAYyd,EAAkBzb,OAAO,QAAQI,MAAK,SAAA3J,GAClD,OAAOA,EAAEA,EAAE5B,OAAS,GAAG0I,MAAQ9G,EAAEA,EAAE5B,OAAS,GAAG0I,MAAQ9G,EAAEA,EAAE5B,OAAS,GAAGmJ,aAK3E,OAHAA,EAAUiC,QAAQ,mBAAmB,GACrCjC,EAAUsC,KAAK,YAAa,sBAErBmb,E,sDASX,WAA+BU,EAAenB,GAA9C,iGAEImB,EAAc9nB,OAAO+K,SAAQ,SAAAvG,GATjC,IAA0BxE,KAUDwE,GAThBG,KAAI,SAAClB,EAAGnD,GACT,IAAI0T,EAAa,IAAN1T,EAAU,EAAI,EACrBwE,EAAQrB,EAAEkD,QAAU3G,EAAKM,EAAE0T,GAAMrN,QAAW,EAAI,GACpDlD,EAAEskB,OAASjjB,QAUX8I,EAAwB,SAAd+Y,EAAuBzW,GAAWuW,gBAAkBvW,GAAWsW,WACzEjM,EAAU/U,MACbqP,GAAE,SAAAzS,GAGC,OAFQoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KAClDkP,CAAEzS,EAAEwD,eAEtB0I,GAAE,SAAAlM,GACC,IAAIkM,EAAIlM,EAAEmG,OAAOY,OAEjB,OADAmF,EAAE3I,MAAM,CAACiI,EAAQ,IACA,SAAd+Y,EACQvkB,EAAE2lB,OAEFzZ,EAAElM,EAAEsE,OAAOC,YAItBqhB,EAAaF,EAAcnc,OAAO,QACrCM,KAAK,IAAKsO,GACVtO,KAAK,QAAS,cACdJ,MAAM,UAAU,SAACzJ,GAAD,OAAMA,EAAE,GAAGkF,SA1BhC,kBA4BW0gB,GA5BX,2C,0MA+BO,SAAShI,GAAYoH,EAAmBT,GAE3C,IAAIsB,EAAgBb,EAAkB3iB,QAAO,SAAArC,GACzC,OAA2BmF,MAAnBnF,EAAEA,EAAE5B,OAAS,GAA4C,eAAzB4B,EAAEA,EAAE5B,OAAS,GAAGyD,KAAmC,eAAX7B,EAAE6B,QAGlFse,EAAiC,SAAdoE,EAAwBzW,GAAWuW,gBAAkBvW,GAAWsW,WAEnFsB,EAAgBG,EAActc,OAAO,KAAKC,QAAQ,uBAAuB,I,uCAE5Dsc,CAAgBJ,EAAenB,GAE3BmB,EAAcnc,OAAO,QAAQC,QAAQ,kBAAkB,GAC7DK,KAAK,SAAUsW,GAC9B,IAAI4F,EAAqBL,EAAc3b,UAAU,KAAKnM,MAAK,SAAAoC,GAAC,OAAGA,KAAGgK,KAAK,KAAKR,QAAQ,kBAAkB,GAElGwc,EAAYD,EAAmBxc,OAAO,KAAKC,QAAQ,cAAc,GAKrEwc,EAAUnc,KAAK,aAAa,SAAC7J,GAGzB,MAAO,aAFCoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KAClDkP,CAAEzS,EAAEwD,YACY,UAEnC,IAAIqW,EAAYmM,EAAUzc,OAAO,QAAQC,QAAQ,cAAc,GAsD/D,OArDAqQ,EAAUhQ,KAAK,QAASiE,GAAWqW,WAAWta,KAAK,UAAU,SAAC7J,EAAG9B,GAE7D,IAAIgO,EAAIlM,EAAEmG,OAAOY,OACjBmF,EAAE3I,MAAM,CAAC4c,EAAiB,IAC1B,IAAI5c,EAAQvD,EAAE2E,KAAO,EAAIuH,EAAElM,EAAEsE,OAAOiB,WAAa2G,EAAElM,EAAEsE,OAAOe,WAE5D,MAD+B,SAAdkf,EAAwBzW,GAAWuW,gBAAkB9gB,KAG1EsW,EAAUhQ,KAAK,aAAa,SAAC7J,EAAG9B,GAC5B,IAAIgO,EAAIlM,EAAEmG,OAAOY,OAGjB,OAFAmF,EAAE3I,MAAM,CAAC4c,EAAiB,IAEnB,iBADKngB,EAAE2E,MAAuB,SAAd4f,EAAyB,EAAIrY,EAAElM,EAAEsE,OAAOe,YACjC,OAElCwU,EAAUpQ,MAAM,QAAQ,SAACzJ,GACrB,OAAOA,EAAEiH,WAAWjH,EAAEsE,OAAOC,YAEjCsV,EAAUhQ,KAAK,WAAW,SAAC7J,GACvB,OAAOA,EAAEgH,SAAShH,EAAEsE,OAAOC,YAEf,QAAbggB,GACCyB,EAAUzc,OAAO,QAAQM,KAAK,QAASiE,GAAWqW,WAAWta,KAAK,SAAU,GAC3EA,KAAK,aAAa,SAAC7J,EAAG9B,GACnB,IAAIgO,EAAIlM,EAAEmG,OAAOY,OAEjB,OADAmF,EAAE3I,MAAM,CAAC4c,EAAiB,IACnB,gBAAiBjU,EAAElM,EAAEsE,OAAOC,SAAU,OAChDsF,KAAK,QAAQ,SAAA7J,GAAC,OAAGA,EAAEkF,SAAOsE,QAAQ,WAAW,GAIlDwc,EAAU/b,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAC7B,IAAIgL,EAAIlM,EAAEmG,OAAOY,OACjBmF,EAAE3I,MAAM,CAAC,EAAG4c,IACZ/c,IAAUlC,EAAEhD,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,IAC9E,IAAIjD,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACpB,IAAInH,EAAIc,IAAU,OAClBuM,EAAKC,KAAK,SAAStN,EAAEtC,EAAEsE,OAAOC,SAAU,sBAA8BjC,EAAEtC,EAAEsE,OAAOe,WAAY,sBAA8B/C,EAAEtC,EAAEsE,OAAOiB,YACnIkE,MAAM,OAASrG,IAAS2M,MAAS,MACjCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MACxCL,EAAKlG,MAAM,SAAU,WAEtBQ,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIwN,OAAO,YACvBtI,IAAUlC,EAAEhD,IAAIwN,OAAO,YAAYyB,SACxB/J,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAGjBsc,EAGJ,SAASjG,GAAa3Y,EAAQoY,GACjC,IAAII,EAAOvc,IAAO+D,EAAO5E,KAAI,SAAAyQ,GAAC,OAAGA,EAAE1O,OAAOC,YACtCqb,EAASzY,EAAO9E,QAAO,SAAAC,GAAC,OAAGA,EAAEgC,OAAOC,SAAWob,KAC/CvY,EAAWD,EAAOA,EAAO5E,KAAI,SAAAzC,GAAC,OAAGA,EAAEwE,OAAOC,WAASrB,QAAQyc,IAG/D,OAFAvY,EAASyY,MAAQD,EACjBxY,EAASmY,OAASA,EACXnY,EAwGJ,SAAS6e,GAAWC,EAAW/f,GAEhB/C,IAAU,wBAAwByG,KAAK,QAAS,WAAlE,IAGIqS,EAAe9Y,IAAU,aAC7B8Y,EAAanS,UAAU,KAAKoD,SAE5B,IAAIwO,EAAOvY,IAAU,SACrBuY,EAAKlS,MAAM,cAAe,GAE1BrG,IAAU,YAAYmG,OAAO,QAAQI,KAAKuc,EAAU,GAAGhkB,OAEvD,IAAIikB,EAAe,CAAC,CAAC,MAAQ,SAASxQ,OAAOxP,EAAO9D,QAAO,SAAAC,GAAC,OAAIA,EAAEJ,OAASgkB,EAAU,GAAGhkB,OAAqB,aAAXI,EAAET,SAClFoH,EAAS7F,IAAU,YAAa+iB,EAAc,WAAW,uBAG/Dlc,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GAG3B,GAFAkC,IAAU,YAAYmG,OAAO,QAAQI,KAAK3J,EAAEkC,OAE9B,aAAXlC,EAAE6B,KAAoB,CACrB,IAAIukB,EAAUF,EAAU3jB,KAAI,SAAA2E,GACxB,IAAImf,EAAarmB,EAAEmG,OAAO5D,KAAI,SAAAoD,GAC1B,IAAIzD,EAAQyD,EAAGzD,MACXjC,EAAO0F,EAAGkF,UACVgN,EAAU3Q,EAAMtJ,KAAKyE,QAAO,SAAAikB,GAE5B,OADWA,EAAGjkB,QAAO,SAAA2F,GAAE,OAAe,IAAZA,EAAGrD,QAAe,GAChCT,WAAWhC,GAAOkF,WAAanH,KAE/C,MAAO,CAAC,MAASiC,EAAO,MAASjC,EAAM,KAAQ4X,MAGnD,OADA3Q,EAAMtJ,KAAOyoB,EACNnf,KAKRyU,EAAOvY,IAAU,SACrBuY,EAAK5R,UAAU,KAAKoD,SACpBwO,EAAKlS,MAAM,cAAe,QAC1B,IAEI8c,EAFgB5K,EAAK5R,UAAU,mBAAmBnM,KAAKwoB,GAASpc,KAAK,OAAOR,QAAQ,eAAe,GAErED,OAAO,OACzCgd,EAAc1c,KAAK,UAAU,SAAArK,GAAC,OAAkB,IAAdA,EAAE5B,KAAKQ,UACzC,IAAIooB,EAAaD,EAAchd,OAAO,KAIlCkd,GAFaD,EAAWjd,OAAO,QAAQI,MAAK,SAAArH,GAAC,OAAGA,EAAE4E,SAAO2C,KAAK,YAAa,qBAE7D2c,EAAWzc,UAAU,kBAAkBnM,MAAK,SAAA4Q,GAS1D,OARgBA,EAAE5Q,KAAK2E,KAAI,SAACzC,GACxB,IAAI4mB,EAAO,GAKX,OAJAA,EAAKvE,MAAQ,CAAC3T,EAAEtM,MAAOsM,EAAEtH,OACzBwf,EAAKtE,OAAS,CAACtiB,EAAEoC,MAAOpC,EAAEoH,OAC1Bwf,EAAK9oB,KAAOkC,EAAElC,KACd8oB,EAAKlX,OAAS1P,EAAElC,KAAKuE,SAAQ,SAAAC,GAAI,OAAGA,EAAKC,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,WAC/C+hB,QAEQ1c,KAAK,KAAKR,QAAQ,gBAAgB,KAEzDid,EAAcA,EAAYpkB,QAAO,SAAAC,GAAC,OAAGA,EAAE1E,KAAKQ,OAAS,MACzCyL,KAAK,aAAa,SAACrK,EAAGtB,GAAJ,MAAS,iBAAiB,GAAU,IAAJA,GAAU,OAExEuoB,EAAY5a,MAAK,SAACrM,EAAGtB,EAAGgD,GACvB,IAAI4S,EAAYF,EAA4BpU,EAAE5B,KAAMwF,IAAUlC,EAAEhD,KAChE4V,EAAUpI,OAAO,QAAQ7B,KAAK,KAAM,IAAIA,KAAK,OAAO,QACpDiK,EAAU/J,UAAU,kBAAkBA,UAAU,UAAUF,KAAK,OAAQ,4BAEvEiK,EAAUpI,OAAO,eAAenC,OAAO,QAAQI,MAAK,SAAChJ,EAAGzC,GAAJ,MAAS,KAAMyC,EAAE/C,KAAKQ,UAAQyL,KAAK,YAAa,oBACpGiK,EAAU/J,UAAU,QAAQN,MAAM,YAAa,UAAUA,MAAM,OAAQ,QAEvEqK,EAAUpI,OAAO,QAAQ7B,KAAK,SAAU,QAExC,IAAI8c,EAAcvjB,IAAUlC,EAAEhD,IAAIqL,OAAO,KAGrCmb,EAAUiC,EAAYpd,OAAO,KAAKC,QAAQ,sBAAsB,GACpEkb,EAAQ7a,KAAK,YAAa,sBAC1B6a,EAAQnb,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,OAAQ,QACnD6a,EAAQnb,OAAO,QAAQI,KAAK,KAAKE,KAAK,YAAa,oBAAoBA,KAAK,OAAQ,QAEpF6a,EAAQjb,MAAM,SAAU,WAExBib,EAAQza,GAAG,SAAS,WAChB,IAAI4V,EAAQzc,IAAalC,GAAGmB,QAAO,SAACC,EAAElD,GAAH,OAAQA,GAAKlB,KAChDijB,EAAiB3hB,EAAGqgB,EAAMjiB,OAAQwF,IAAU,aAAc+C,MAG9D,IAAIygB,EAAaD,EAAYpd,OAAO,QAAQI,MAAK,SAACnK,EAAGtB,GAAJ,OAASsB,EAAE4iB,OAAO,MACnEwE,EAAW/c,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,sBACtC0oB,EAAW/c,KAAK,OAAQ,WAGzB,IAAIgd,EAAaJ,EAAYpkB,QAAO,SAAAC,GAAC,OAAGA,EAAE1E,KAAKQ,OAAS,KAAGmL,OAAO,KAAKC,QAAQ,cAAc,GAC7Fqd,EAAWhd,KAAK,aAAa,SAAC7J,EAAE9B,GAAH,MAAQ,uBAGrC,IAAIqkB,EAAWsE,EAAW9c,UAAU,gBAAgBnM,MAAK,SAACoC,GACtD,IAAI+hB,EAAOxb,EAAoBvG,EAAEpC,KAAMuI,EAAQ,MAmChD,OAjCmB4b,EAAK,GAAGxf,KAAI,SAAC2D,EAAKhI,GAEhC,IAAIwI,EAAU1G,EAAEpC,KAAK,GAAGyE,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,QAAe,GAAGmC,MAEvDZ,EAAIA,EAAI9H,OAAS,GAAGmhB,OAAS,EAE7B,IADA,IAAIhO,EAAY,CAAC,MAASrL,EAAIA,EAAI9H,OAAO,GAAG0I,MAAO,KAAOZ,EAAIA,EAAI9H,OAAO,GAAGyD,KAAM,KAAQ,CAAC,CAAC,QAAW6E,EAAS,MAASR,KACjHgH,EAAQ,EAAGA,EAAQ6U,EAAK3jB,OAAQ8O,IAAS,CAC7C,IAAIxG,EAAU1G,EAAEpC,KAAKsP,GAAO7K,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,QAAe,GAAGmC,MACvD0Y,EAAOuC,EAAK7U,GAAOhP,GAAGE,OAAS,EACnC2jB,EAAK7U,GAAOhP,GAAGshB,GAAMD,OAAkB,EAARrS,EAC/BqE,EAAU3T,KAAKc,KAAK,CAAC,QAAWgI,EAAS,MAASqb,EAAK7U,GAAOhP,KAGlE,OAAOqT,KAGgBhP,KAAI,SAAAkd,GAe5B,OAdAA,EAAI7hB,KAAO6hB,EAAI7hB,KAAK2E,KAAI,SAACmd,EAAMxhB,GAU9B,OATGwhB,EAAK7Z,MAAQ6Z,EAAK7Z,MAAMtD,KAAI,SAAAzC,GACtB,GAAgB,aAAb2f,EAAI5d,KAAoB,CACvB,IAAI0d,EAAS,EAAIrhB,EAEjB,OADc4B,EAAEqH,OAAQ,CAAC,QAAW,EAAK,MAASrH,EAAEsH,SAAU,MAAQtH,EAAEoF,MAAO,WAAcpF,EAAE0D,WAAY,OAAS1D,EAAEyf,OAAQ,MAAQ,GAAQO,GAAahgB,EAAGyf,GAG9J,OAAOzf,KAGb4f,KAGRD,EAAIjQ,OAASiQ,EAAI7hB,KAAKuE,SAAQ,SAAAG,GAAC,OAAGA,EAAEuD,MAAMxD,QAAO,SAAAhB,GAAC,OAAc,IAAXA,EAAEsD,WAChD8a,QAGXzV,KAAK,KAAKR,QAAQ,eAAe,GAEhCsd,EAAgBvE,EAAShZ,OAAO,QAAQM,KAAK,QAAS,KAEzDid,EAAcjd,KAAK,SArId,IAsILid,EAAcrd,MAAM,OAAQ,QAC5Bqd,EAAcrd,MAAM,SAAU,QAE9B8Y,EAAS1Y,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,gBAAqB,GAAJA,EAAiB,IAAI,OAC1E6oB,EAASld,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,iBAAqB,IAAJA,EAAuB,IAAI,OAChF2V,EAAIhK,KAAK,SAAW,IAAAkd,EAASnpB,OAAOQ,OAA4B,IAEnDmkB,EAAShZ,OAAO,QAC5BI,MAAK,SAAA3J,GAAC,OAAGA,EAAE8G,SACX2C,MAAM,cAAe,OACrBA,MAAM,YAAa,IACbI,KAAK,YAAa,oBAGzB,IAAImd,EAAazE,EAASlgB,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAAqBkI,UAAU,gBAAgBnM,MAAK,SAAAoC,GAQvF,MAAO,CANIA,EAAEpC,KAAKuE,SAAQ,SAAArC,GAAC,OAAGA,EAAE+F,MAAMxD,QAAO,SAACC,EAAGpE,GAC7C,OAAO,IAAJA,EAAqB,IAANA,EACfA,EAAI,EAAW4B,EAAE+F,MAAM3H,EAAE,GAAGgJ,OAAS5E,EAAE4E,MACvChJ,EAAI4B,EAAE+F,MAAMzH,OAAS,EAAW0B,EAAE+F,MAAM3H,EAAE,GAAGgJ,OAAS5E,EAAE4E,WAA3D,YAIL8C,KAAK,KAAKR,QAAQ,cAAc,GAEnCwd,EAAWnd,KAAK,YAAa,qBAE7B,IAAIod,EAAaD,EAAWzd,OAAO,KAAKC,QAAQ,UAAU,GAC1Dyd,EAAWpd,KAAK,YAAa,oBAC7Bod,EAAWpb,MAAK,SAAC7L,EAAG9B,EAAGqK,GACnB,IAAIkK,EAAIrP,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,MACjEH,IAAUmF,EAAMrK,IAAIM,KAAK4E,IAAcqP,GAAGG,MAAM,OAGpD,IAEIsU,EAFiBF,EAAWzd,OAAO,KAAKM,KAAK,YAAa,oBAE5BE,UAAU,gBAAgBnM,MAAK,SAAAoC,GAAC,OAAGA,KAAGgK,KAAK,UAAUR,QAAQ,SAAS,GACxG0d,EAAard,KAAK,IAAK,GAAGA,KAAK,MAAM,SAAC7J,EAAG9B,GAErC,OADQkF,MAAiBoC,OAAO,CAAC,EAAEzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KACzDkP,CAAEzS,EAAEwD,eAEf0jB,EAAard,KAAK,QAAQ,SAAA7J,GAAC,OAAGA,EAAEkF,SAAOuE,MAAM,UAAW,IAGxD,IAAI0d,EAAY5E,EAASlgB,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QAAuBkI,UAAU,kBAAkBnM,MAAK,SAAAoC,GAC1F,IAAIonB,EAAW7E,EAAS3kB,OAAOyE,QAAO,SAAAC,GAAC,OAAGA,EAAEwE,QAAU9G,EAAE8G,SAAO3E,SAAQ,SAAArC,GAAC,OAAGA,EAAE0P,OAAOjN,KAAI,SAAA1C,GAAC,OAAGA,EAAE0E,cAC1Fa,EAAMhC,IAAOgkB,GACb9hB,EAAMlC,IAAOgkB,GACbC,EAAYjkB,IAAQgkB,GAEpB3U,EAAIrP,MAAiBoC,OAAO,CAACF,EAAKF,IAAM7B,MAAM,CAAC,EAAG,MAClD+jB,EAAStnB,EAAEwP,OAAOjN,KAAI,SAACzC,EAAG5B,GAE1B,OADA4B,EAAEoN,MAAQhP,EACH,CAAC,MAAS4B,EAAEyE,QAAS,EAAKkO,EAAG,IAAOnN,EAAK,IAAOF,EAAK,QAAUtF,EAAE4G,YAExE6gB,EAAYnkB,IAAQkkB,EAAO/kB,KAAI,SAAAyQ,GAAC,OAAGA,EAAEtS,UACzC,MAAO,CAAC,CAAC,QAAU4mB,EAAQ,EAAK7U,EAAG,UAAa4U,EAAW,UAAYE,OACxEvd,KAAK,KAAKR,QAAQ,gBAAgB,GAErC2d,EAAUtd,KAAK,YAAa,qBAE5B,IAAIma,EAAQmD,EAAU5d,OAAO,KAAKC,QAAQ,UAAU,GACpDwa,EAAMna,KAAK,YAAa,oBACxBma,EAAMnY,MAAK,SAAC7L,EAAG9B,EAAGqK,GACdnF,IAAUmF,EAAMrK,IAAIM,KAAK4E,IAAcpD,EAAEyS,GAAGG,MAAM,OAGlCuU,EAAU5d,OAAO,QAAQC,QAAQ,QAAQ,GAAMK,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,cAAc8B,EAAEyS,EAAEzS,EAAEqnB,WAAW,KAAK,SACjIxd,KAAK,SAAW2B,IAAc3B,KAAK,QAAS,GAAGA,KAAK,OAAQ,OAAOJ,MAAM,UAAW,OAEjE0d,EAAU5d,OAAO,QAAQC,QAAQ,QAAQ,GAAMK,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,cAAc8B,EAAEyS,EAAEzS,EAAEunB,WAAW,KAAK,SACjI1d,KAAK,SAAW2B,IAAc3B,KAAK,QAAS,GAAGA,KAAK,OAAQ,QAAQJ,MAAM,UAAW,OAJtF,IAOI+d,EADgBL,EAAU5d,OAAO,KAAKM,KAAK,YAAa,oBAC5BE,UAAU,UAAUnM,MAAK,SAAAoC,GAAC,OAAGA,EAAEynB,WAASzd,KAAK,UAC7Ewd,EAAY3d,KAAK,IAAK,GAAGA,KAAK,MAAM,SAAC7J,EAAG9B,GAAJ,OAAS8B,EAAEyS,EAAEzS,EAAEU,UAAQ+I,MAAM,UAAW,OAE5E+d,EAAYvd,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAE/B,IAAIyO,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACZrG,IAAU,OAClBuM,EAAKC,KAAK5P,EAAE0G,SACT+C,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MAExB5M,IAAU,YAAY2G,UAAU,eAAe1H,QAAO,SAAAC,GAAC,OAAGA,EAAE1E,KAAKkJ,QAAU9G,EAAE0G,WACnF8C,QAAQ,YAAY,MAE/BS,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIsL,QAAQ,YAAY,GAEpCge,EAAYhe,QAAQ,YAAY,GAAOC,MAAM,UAAW,IAC7CrG,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,GAEJrG,IAAU,YAAY2G,UAAU,eAAe1H,QAAO,SAAAC,GAAC,OAAGA,EAAE1E,KAAKkJ,QAAU9G,EAAE0G,WACnF8C,QAAQ,YAAY,MAMlC,IAAIyW,EAAasC,EAASxY,UAAU,aAAanM,MAAK,SAAAoC,GAKlD,OAJAA,EAAEpC,KAAOoC,EAAEpC,KAAK2E,KAAI,SAAAzC,GAEhB,OADAA,EAAE+B,KAAO7B,EAAE6B,KACJ/B,KAEJE,EAAEpC,QACVoM,KAAK,KAAKR,QAAQ,WAAW,GAE5B0W,EAAW9c,MACVqP,GAAE,SAAAzS,GAGC,OAFQoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KAE1DkP,CADQzS,EAAEwD,eAGpB0I,GAAE,SAAAlM,GAEC,OADQoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAACiI,GAAU,GAClDU,CAAElM,EAAEuE,YAGf6b,EAAWhd,MACVqP,GAAE,SAAAzS,GAGC,OAFQoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KAE1DkP,CADQzS,EAAEwD,eAGpB0I,GAAE,SAAAlM,GACC,IAAIkM,EAAIlM,EAAEmG,OAAOY,OAEjB,OADAmF,EAAE3I,MAAM,CAACiI,GAAU,IACZU,EAAElM,EAAEsE,OAAOC,SAAW,KAGf0b,EAAW1W,OAAO,QACnCM,KAAK,KAAK,SAAA7J,GACH,MAAmB,aAAXA,EAAE6B,KAAuBqe,EAASlgB,EAAE6F,OAASua,EAASpgB,EAAE6F,UAEvEgE,KAAK,SAAS,SAAC7J,EAAG9B,GACX,OAAO8B,EAAE0G,QAAU,iBAC1B+C,MAAM,eAAgB,IACtBA,MAAM,OAAQ,QACdA,MAAM,SAAU,QAELQ,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAEnCkC,IAAUlC,EAAEhD,IAAIsL,QAAQ,YAAY,GACpCge,EAAYnlB,QAAO,SAAAC,GAAC,OAAGA,EAAEoE,UAAY1G,EAAE0G,WAAS8C,QAAQ,YAAY,GAAMC,MAAM,UAAW,GAE3F,IAAIkG,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACZrG,IAAU,OAClBuM,EAAKC,KAAK5P,EAAE0G,SACT+C,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MAExB5M,IAAU,YAAY2G,UAAU,eAAe1H,QAAO,SAAAC,GAAC,OAAGA,EAAE1E,KAAKkJ,QAAU9G,EAAE0G,WACnF8C,QAAQ,YAAY,MAE/BS,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIsL,QAAQ,YAAY,GAEpCge,EAAYhe,QAAQ,YAAY,GAAOC,MAAM,UAAW,IAC7CrG,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,GAEJrG,IAAU,YAAY2G,UAAU,eAAe1H,QAAO,SAAAC,GAAC,OAAGA,EAAE1E,KAAKkJ,QAAU9G,EAAE0G,WACnF8C,QAAQ,YAAY,MAGlC,IAII6W,EAJWJ,EAAW5d,QAAO,SAAAie,GACjC,MAAmB,aAAZA,EAAGze,QAGkBkI,UAAU,WAAWnM,MAAK,SAAAoC,GAAC,OAAEA,EAAE6F,SAAOmE,KAAK,KAAKR,QAAQ,UAAU,GAE9F6W,EAAaxW,KAAK,aAAa,SAAC7J,GAGxB,MAAO,aAFHoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAC/BkP,CAAEzS,EAAEwD,YACU,UAGrC,IAAI+c,EAAQF,EAAa9W,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,MAAM,SAAC7J,EAAG9B,GAElE,OADQkF,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAACiI,GAAY,GACpDU,CAAElM,EAAEuE,YACZsF,KAAK,KAAM,GAEd0W,EAAM/W,QAAQ,aAAa,GAE3B+W,EAAM1W,KAAK,QAAQ,SAAC7J,EAAG9B,EAAGgD,GACtB,OAAS,IAANhD,EACQ8B,EAAEkF,MACJhH,IAAMgD,EAAE9C,OAAS,EACnB4B,EAAEkH,QAAU9D,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAGsJ,MAChC,4BAEPlH,EAAEnB,OAAQ,EACHmB,EAAEkF,OAGVlF,EAAEkH,QAAU9D,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAGsJ,OAASlH,EAAEkH,QAAU9D,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAGsJ,MACjF,4BAEPlH,EAAEnB,OAAQ,EACHmB,EAAEkF,UAM7B,IAAIsb,EAAYH,EAAahe,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAAcoF,UAAU,UAAUnM,MAAK,SAAAoC,GAAC,OAAGA,EAAE6f,SAAO7V,KAAK,UAAUR,QAAQ,SAAS,GAE9HgX,EAAU3W,KAAK,IAAK,GAAGA,KAAK,KAAM,GAAGA,KAAK,MAAM,SAAC9J,EAAG7B,GAC/C,IAAIgO,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IAEhC,OADJ0G,EAAE3I,MAAM,CAAC,EAAIiI,KACFU,EAAEnM,EAAEwE,YACZsF,KAAK,OAAQ,4BAErB2W,EAAUvW,GAAG,aAAa,SAASjK,GAC9B,IAAI2P,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACpB,IAAInH,EAAIc,IAAU,OAClBuM,EAAKC,KAAK5P,EAAEkH,MAAQ,KAAO5E,EAAEtC,EAAEuE,UAC5BkF,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,SAEzC/F,GAAG,YAAY,SAASjK,GACZoD,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAGzB8W,EAAMtW,GAAG,aAAa,SAASjK,GAC1B,IAAI2P,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACpB,IAAInH,EAAIc,IAAU,OAClBuM,EAAKC,KAAK5P,EAAEkH,MAAQ,KAAO5E,EAAEtC,EAAEuE,UAC5BkF,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,SAEzC/F,GAAG,YAAY,SAASjK,GACZoD,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAIzB4W,EAAapW,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAC/B,IAAIgL,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IACpC0G,EAAE3I,MAAM,CAAC,EAAIiI,KACbqI,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAASmD,KAAK,SAAU,OAC5DgK,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAAS8C,QAAQ,YAAY,GACjEpG,IAAUlC,EAAEhD,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,IAC9ExP,IAAUlC,EAAEhD,IAAI6L,UAAU,UAAUN,MAAM,UAAW,IAAKI,KAAK,QAAQ,SAAC7J,GAAD,OAAMA,EAAEkF,SAC/E9B,IAAUlC,EAAEhD,IAAI6L,UAAU,cAAcN,MAAM,UAAW,IAAKI,KAAK,QAAQ,SAAC7J,GAAD,OAAMA,EAAEkF,YAEpF+E,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIwN,OAAO,YACvBtI,IAAUlC,EAAEhD,IAAIwN,OAAO,YAAYyB,SACnC/J,IAAa,mBAAoBpD,EAAE0G,SAASmD,KAAK,SAAU,QAC3DzG,IAAa,mBAAoBpD,EAAE0G,SAAS8C,QAAQ,YAAY,GAChEpG,IAAa,UAAUyG,KAAK,OAAQ,4BACpCzG,IAAUlC,EAAEhD,IAAI6L,UAAU,cAAc1H,QAAO,SAAAqlB,GAAC,OAAc,GAAXA,EAAE7oB,SAAegL,KAAK,OAAQ,+BAGtF,IAII4W,EAJWR,EAAW5d,QAAO,SAAAie,GAC5B,MAAmB,eAAZA,EAAGze,QAGakI,UAAU,WAAWnM,MAAK,SAAAoC,GAAC,OAAEA,EAAE6F,SAAOmE,KAAK,KAAKR,QAAQ,UAAU,GAE9FiX,EAAa5W,KAAK,aAAa,SAAC7J,GAG1B,MAAO,aAFHoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAC/BkP,CAAEzS,EAAEwD,YACU,UAInCid,EAAaxW,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAC/B,IAAIgL,EAAIlM,EAAE+G,OACVmF,EAAE3I,MAAM,CAAC,EAAIiI,KACbqI,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAASmD,KAAK,SAAU,OAC5DgK,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAAS8C,QAAQ,YAAY,GACjEpG,IAAUlC,EAAEhD,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,IAC9ExP,IAAUlC,EAAEhD,IAAI6L,UAAU,UAAUN,MAAM,UAAW,OACtDQ,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIwN,OAAO,YACvBtI,IAAUlC,EAAEhD,IAAIwN,OAAO,YAAYyB,SACnC/J,IAAa,mBAAoBpD,EAAE0G,SAASmD,KAAK,SAAU,QAC3DzG,IAAa,mBAAoBpD,EAAE0G,SAAS8C,QAAQ,YAAY,GAChEpG,IAAa,UAAUqG,MAAM,UAAW,OAG5C,IAAIiX,EAAWD,EAAalX,OAAO,QACnCmX,EAAS7W,KAAK,QAASiE,GAAWqW,WAAWta,KAAK,SAAU,GAC5D6W,EAAS7W,KAAK,KAAK,SAAC7J,EAAG9B,GACnB,IAAIwR,EAAQvJ,EAAO9D,QAAO,SAAA7C,GAAC,OAAGA,EAAE0C,QAAUlC,EAAE8G,SAAO,GAEnD,OADQ1D,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CA7btD,GA6b+D,GAChE2I,CAAElM,EAAEuE,YAGf,IAAIoc,EAAYF,EAAape,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAAc4E,OAAO,QAC/DoX,EAAU9W,KAAK,QAASiE,GAAWqW,WAAWta,KAAK,UAAU,SAAC7J,EAAG9B,GAC7D,IAAIwR,EAAQvJ,EAAO9D,QAAO,SAAA7C,GAAC,OAAGA,EAAE0C,QAAUlC,EAAE8G,SAAO,GAC/CoF,EAAI9I,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CApctD,GAoc+D,IACvE,OAAO2I,EAAElM,EAAEuF,WAAa2G,EAAElM,EAAEqF,cAGhCsb,EAAU9W,KAAK,KAAK,SAAC7J,EAAG9B,GACpB,IAAIwR,EAAQvJ,EAAO9D,QAAO,SAAA7C,GAAC,OAAGA,EAAE0C,QAAUlC,EAAE8G,SAAO,GAEnD,OADQ1D,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CA1ctD,GA0c+D,GAChE2I,CAAElM,EAAEqF,cAEfsb,EAAUlX,MAAM,UAAW,SAIpBhC,QAAQC,MAAM,2BAElBwU,EAAaxQ,OAAO,wBAAwBlC,QAAQ,QAAQ,MAGhE,IAAIkT,EAAUf,EAAKjQ,OAAO,mBACtBmI,EAAM6I,EAAQpO,QAAUqN,EAAKpS,OAAO,OAAOM,KAAK,KAAM,kBAAoB6S,EAC9E7I,EAAI9J,UAAU,KAAKoD,SAEnB0G,EAAIhK,KAAK,SAAW,GAAAqc,EAAU9nB,QAC9ByV,EAAItK,OAAO,KAAKM,KAAK,YAAa,sBAAsBN,OAAO,QAAQI,KAAKuc,EAAU,GAAGhkB,OAEzF,IAAI6kB,EAAWlT,EAAI9J,UAAU,YAAYnM,KAAKsoB,GAAWlc,KAAK,KAAKR,QAAQ,WAAW,GACtFud,EAASlb,MAAK,SAAC7L,EAAG9B,EAAGgD,GACjB,IAAI4S,EAAYF,EAA4B5T,EAAEpC,KAAMwF,IAAUlC,EAAEhD,KAChE4V,EAAUpI,OAAO,QAAQ7B,KAAK,KAAM,IAAIA,KAAK,OAAO,QACpDiK,EAAU/J,UAAU,kBAAkBA,UAAU,UAAUF,KAAK,OAAQ,4BAEvEiK,EAAUpI,OAAO,eAAenC,OAAO,QAAQI,MAAK,SAAC3J,EAAG9B,GAAJ,MAAS,KAAM8B,EAAEpC,KAAKQ,UAAQyL,KAAK,YAAa,oBACpGiK,EAAU/J,UAAU,QAAQN,MAAM,YAAa,UAAUA,MAAM,OAAQ,QAEvEqK,EAAUpI,OAAO,QAAQ7B,KAAK,SAAU,WAG5C,IAAI8c,EAAcI,EAASxd,OAAO,KAI7Bmb,EAAUiC,EAAYpd,OAAO,KAAKC,QAAQ,sBAAsB,GACpEkb,EAAQ7a,KAAK,YAAa,qBAC1B6a,EAAQnb,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,OAAQ,QACnD6a,EAAQnb,OAAO,QAAQI,KAAK,KAAKE,KAAK,YAAa,mBAAmBA,KAAK,OAAQ,QAEnF6a,EAAQjb,MAAM,SAAU,WAExBib,EAAQza,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GAEvBigB,EAAiBnhB,EADLoD,IAAalC,GAAGmB,QAAO,SAACC,EAAElD,GAAH,OAAQA,GAAKlB,KACtBN,OAAQwF,IAAU,aAAc+C,MAG9DwgB,EAAYpd,OAAO,QAAQI,MAAK,SAAC3J,EAAG9B,GAAJ,OAAS8B,EAAEkH,SAC3Cyf,EAAY9c,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,uBACvCyoB,EAAYld,MAAM,cAAe,OACjCkd,EAAY9c,KAAK,OAAQ,QAE1B,IAAIgd,EAAaE,EAASxd,OAAO,KAAKC,QAAQ,cAAc,GAC5Dqd,EAAWhd,KAAK,aAAa,SAAC7J,EAAE9B,GAAH,MAAQ,uBAErC,IAAIqkB,EAAWsE,EAAW9c,UAAU,gBAAgBnM,MAAK,SAACoC,EAAG9B,GACzD,IAAI6jB,EAAOxb,EAAoBvG,EAAEpC,KAAMuI,EAAQ,MA+BhD,OA5BmB4b,EAAK,GAAGxf,KAAI,SAAC2D,EAAKhI,GAChC,IAAIwI,EAAU1G,EAAEpC,KAAK,GAAGyE,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,QAAe,GAAGmC,MACvDZ,EAAIA,EAAI9H,OAAS,GAAGmhB,OAAS,EAE7B,IADA,IAAIhO,EAAY,CAAC,MAASrL,EAAIA,EAAI9H,OAAO,GAAG0I,MAAO,KAAOZ,EAAIA,EAAI9H,OAAO,GAAGyD,KAAM,KAAQ,CAAC,CAAC,QAAW6E,EAAS,MAASR,KACjHgH,EAAQ,EAAGA,EAAQ6U,EAAK3jB,OAAQ8O,IAAS,CAC7C,IAAIxG,EAAU1G,EAAEpC,KAAKsP,GAAO7K,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,QAAe,GAAGmC,MACvD0Y,EAAOuC,EAAK7U,GAAOhP,GAAGE,OAAS,EACnC2jB,EAAK7U,GAAOhP,GAAGshB,GAAMD,OAAkB,EAARrS,EAC/BqE,EAAU3T,KAAKc,KAAK,CAAC,QAAWgI,EAAS,MAASqb,EAAK7U,GAAOhP,KAElE,OAAOqT,KAGgBhP,KAAI,SAAAkd,GAa5B,OAZAA,EAAI7hB,KAAO6hB,EAAI7hB,KAAK2E,KAAI,SAACmd,EAAMxhB,GAU9B,OATGwhB,EAAK7Z,MAAQ6Z,EAAK7Z,MAAMtD,KAAI,SAAAzC,GAC3B,GAAgB,aAAb2f,EAAI5d,KAAoB,CACvB,IAAI0d,EAAS,EAAIrhB,EAEjB,OADc4B,EAAEqH,OAAQ,CAAC,QAAW,EAAK,MAASrH,EAAEsH,SAAU,MAAQtH,EAAEoF,MAAO,WAAcpF,EAAE0D,WAAY,OAAS1D,EAAEyf,OAAQ,MAAQ,GAAQO,GAAahgB,EAAGyf,GAG9J,OAAOzf,KAGR4f,KAEDD,QAGXzV,KAAK,KAAKR,QAAQ,eAAe,GAEhCsd,EAAgBvE,EAAShZ,OAAO,QAAQM,KAAK,QAAS,KAC1Did,EAAcjd,KAAK,SAriBN,IAsiBbid,EAAcrd,MAAM,OAAQ,QAC5Bqd,EAAcrd,MAAM,SAAU,QAE9B8Y,EAAS1Y,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,gBAAqB,GAAJA,EAAiB,IAAI,OAC1E6oB,EAASld,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,iBAAqB,IAAJA,EAAuB,IAAI,OAEhF2V,EAAIhK,KAAK,SAAW,IAAAkd,EAASnpB,OAAOQ,OAA4B,IArpBpE,SAAoBmkB,EAAUoF,GAG1B,IAGIR,EAAY5E,EAASlgB,QAAO,SAAAC,GAAC,MAAc,eAAXA,EAAET,QAAuBkI,UAAU,mCAAmCnM,MAAK,SAAAoC,GACvG,IACI4nB,EADWrF,EAAS3kB,OAAOyE,QAAO,SAAAC,GAAC,OAAGA,EAAEwE,QAAU9G,EAAE8G,SAAOvE,KAAI,SAAAzC,GAAC,OAAGA,EAAElC,QAC/CuE,SAAQ,SAAAd,GAAC,OAAGA,EAAEc,SAAQ,SAAAG,GAAC,OAAGA,EAAEuD,MAAMvD,EAAEuD,MAAMzH,OAAS,GAAGmG,cAC5Ea,EAAMhC,IAAOwkB,GACbtiB,EAAMlC,IAAOwkB,GACbP,EAAYjkB,IAAQwkB,GAEpBnV,EAAIrP,MAAiBoC,OAAO,CAACF,EAAKF,IAAM7B,MAAM,CAAC,EAAG,MAClD+jB,EAAStnB,EAAEpC,KAAK2E,KAAI,SAACzC,EAAG5B,GAExB,OADA4B,EAAEoN,MAAQhP,EACH,CAAC,MAAS4B,EAAE+F,MAAM/F,EAAE+F,MAAMzH,OAAS,GAAGkG,OAAOC,QAAS,EAAKkO,EAAG,IAAOnN,EAAK,IAAOF,EAAK,QAAUtF,EAAE4G,YAEzG6gB,EAAYnkB,IAAQkkB,EAAO/kB,KAAI,SAAAyQ,GAAC,OAAGA,EAAEtS,UACzC,MAAO,CAAC,CAAC,QAAU4mB,EAAQ,EAAK7U,EAAG,UAAa4U,EAAW,UAAYE,OACxEvd,KAAK,KAAKR,QAAQ,iCAAiC,GAEtD2d,EAAUtd,KAAK,YAAa,qBAE5B,IAAIma,EAAQmD,EAAU5d,OAAO,KAAKC,QAAQ,UAAU,GACpDwa,EAAMna,KAAK,YAAa,oBACxBma,EAAMnY,MAAK,SAAC7L,EAAG9B,EAAGqK,GACdnF,IAAUmF,EAAMrK,IAAIM,KAAK4E,IAAcpD,EAAEyS,GAAGG,MAAM,OAGlCuU,EAAU5d,OAAO,QAAQC,QAAQ,QAAQ,GAAMK,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,cAAc8B,EAAEyS,EAAEzS,EAAEqnB,WAAW,KAAK,SACjIxd,KAAK,SAAW2B,IAAc3B,KAAK,QAAS,GAAGA,KAAK,OAAQ,OAAOJ,MAAM,UAAW,OAEjE0d,EAAU5d,OAAO,QAAQC,QAAQ,QAAQ,GAAMK,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,cAAc8B,EAAEyS,EAAEzS,EAAEunB,WAAW,KAAK,SACjI1d,KAAK,SAAW2B,IAAc3B,KAAK,QAAS,GAAGA,KAAK,OAAQ,QAAQJ,MAAM,UAAW,OAE/D0d,EAAU5d,OAAO,KAAKM,KAAK,YAAa,oBACzBE,UAAU,UAAUnM,MAAK,SAAAoC,GAAC,OAAGA,EAAEynB,WAASzd,KAAK,UACpEH,KAAK,IAAK,GAAGA,KAAK,MAAM,SAAC7J,EAAG9B,GAAJ,OAAS8B,EAAEyS,EAAEzS,EAAEU,UAAQ+I,MAAM,UAAW,OAG/E,IAAIoe,EAAatF,EAASlgB,QAAO,SAAAC,GAAC,MAAc,aAAXA,EAAET,QAAqBkI,UAAU,iCAAiCnM,MAAK,SAAAoC,GAC1G,MAAO,CAACA,MACPgK,KAAK,KAAKR,QAAQ,+BAA+B,GAEhDse,EAAQD,EAAWxlB,QAAO,SAAAC,GAC1B,OAAOA,EAAEwE,OAAS6gB,KACnB5d,UAAU,QAAQnM,MAAK,SAAAoC,GACtB,IAAI+nB,EAAcC,IAAehoB,EAAEpC,KAAK2E,KAAI,SAAAzC,GAAC,OAAGA,EAAE+F,MAAM/F,EAAE+F,MAAMzH,OAAS,OAAK,SAAA4B,GAAC,OAAGA,EAAEkH,SAEpF,OADA6gB,EAAYhK,MAAK,SAACC,EAAG/Z,GAAJ,OAASA,EAAE,GAAG7F,OAAS4f,EAAE,GAAG5f,UACtC2pB,KACR/d,KAAK,QAAQH,KAAK,SAAU,IAAIA,KAAK,SAAS,SAAC7J,EAAG9B,EAAGgD,GACpD,IAAIwO,EAAQtM,MAAiBoC,OAAO,CAAC,EAAGpC,IAAOA,IAAalC,GAAGtD,OAAO2E,KAAI,SAAAzC,GAAC,OAAGA,EAAE,GAAG1B,aAClFmF,MAAM,CAAC,EAAG,MAEX,OADAvD,EAAEuL,MAAQmE,EAAM1P,EAAE,GAAG5B,QACdsR,EAAM1P,EAAE,GAAG5B,WAGtB0pB,EAAMje,KAAK,KAAK,SAAC7J,EAAG9B,EAAGgD,GACnB,OAAS,IAANhD,EAAiB,GAEhBkF,IAAalC,GAAGmB,QAAO,SAACC,EAAGlD,GAAJ,OAASA,EAAGlB,KACxBkF,IAAOA,IAAalC,GAAGmB,QAAO,SAACC,EAAGlD,GAAJ,OAASA,EAAGlB,KAAGN,OAAO2E,KAAI,SAAAzC,GAAC,OAAGA,EAAEyL,cAE9E1B,KAAK,IAAK,IAEbie,EAAMje,KAAK,QAAQ,SAAA7J,GAAC,OAAGA,EAAE,GAAG,GAAGkF,SAE/B4iB,EAAM7d,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GACzB,IAAIyO,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IAEpBkG,EAAKC,KAAK5P,EAAE,GAAK,QAAUA,EAAE,GAAG5B,QAC7BqL,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MAEtC5M,IAAalC,GAAGmB,QAAO,SAACC,EAAGlD,GAAJ,OAASA,GAAKlB,KAAG2L,KAAK,UAAW,OAE3DI,GAAG,YAAY,SAACzK,EAAGtB,EAAGgD,GACVkC,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,GAElBrG,IAAalC,GAAGmB,QAAO,SAACC,EAAGlD,GAAJ,OAASA,GAAKlB,KAAG2L,KAAK,UAAW,MAG9Dge,EAAWhe,KAAK,YAAa,qBAE7B,IAAIoe,EAAQJ,EAAWxlB,QAAO,SAAAC,GAAC,OAAGA,EAAEwE,QAAU6gB,KACzC5d,UAAU,QAAQnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,MAAIgK,KAAK,QAAQL,MAAK,SAAA3J,GAC/C,IAAI6F,EAAQ7F,EAAEpC,KAAKoC,EAAEpC,KAAKQ,OAAS,GAAGyH,MACtC,gBAAUA,EAAMA,EAAMzH,OAAS,GAAG8I,MAAlC,aAA4ClH,EAAEpC,KAAKQ,OAAnD,cA3FK,QA6Fb6pB,EAAMxe,MAAM,cAAe,UAC3Bwe,EAAMxe,MAAM,YAAa,QACzBwe,EAAMpe,KAAK,IAAK,IAAIA,KAAK,IAAK,IAsjBlCqe,CAAW3F,EAAU2D,EAAU,GAAGhkB,OAErBqgB,EAAShZ,OAAO,QAC5BI,MAAK,SAAA3J,GAAC,OAAGA,EAAE8G,SACX2C,MAAM,cAAe,OACrBA,MAAM,YAAa,IACbI,KAAK,YAAa,oBAEzB,IAAIoW,EAAasC,EAASxY,UAAU,aAAanM,MAAK,SAAAoC,GAKlD,OAJAA,EAAEpC,KAAOoC,EAAEpC,KAAK2E,KAAI,SAAAzC,GAEhB,OADAA,EAAE+B,KAAO7B,EAAE6B,KACJ/B,KAEJE,EAAEpC,QACVoM,KAAK,KAAKR,QAAQ,WAAW,GAE5B0W,EAAW9c,MACXqP,GAAE,SAAAzS,GAGC,OAFQoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KAE1DkP,CADQzS,EAAEwD,eAGpB0I,GAAE,SAAAlM,GAEC,OADQoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAACiI,GAAU,GAClDU,CAAElM,EAAEsE,OAAOC,YAGlB6b,EAAWhd,MACdqP,GAAE,SAAAzS,GAGC,OAFQoD,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG,KAE3CkP,CADQzS,EAAEwD,eAGpB0I,GAAE,SAAAlM,GACC,IAAIkM,EAAIlM,EAAE+G,OAEV,OADAmF,EAAE3I,MAAM,CAACiI,GAAU,IACZU,EAAElM,EAAEsE,OAAOC,SAAW,KAGX0b,EAAW1W,OAAO,QACvCM,KAAK,KAAK,SAAA7J,GACN,MAAmB,aAAXA,EAAE6B,KAAuBqe,EAASlgB,EAAE6F,OAASua,EAASpgB,EAAE6F,UAEpEgE,KAAK,SAAS,SAAC7J,EAAG9B,GACd,OAAO8B,EAAE0G,QAAU,iBACvB+C,MAAM,eAAgB,IACtBA,MAAM,OAAQ,QACdA,MAAM,SAAU,QAEDQ,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GACtCkC,IAAUlC,EAAEhD,IAAIsL,QAAQ,YAAY,MACrCS,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACpBkC,IAAUlC,EAAEhD,IAAIsL,QAAQ,YAAY,MAGzC,IAII6W,EAJWJ,EAAW5d,QAAO,SAAAie,GAChC,MAAmB,aAAZA,EAAGze,QAGiBkI,UAAU,WAAWnM,MAAK,SAAAoC,GAAC,OAAEA,EAAE6F,SAAOmE,KAAK,KAAKR,QAAQ,UAAU,GAE9F6W,EAAaxW,KAAK,aAAa,SAAC7J,GAGxB,MAAO,aAFHoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KAC9CkP,CAAEzS,EAAEwD,YACU,UAGrC,IAAI+c,EAAQF,EAAa9W,OAAO,UAAUM,KAAK,IAAK,GAAGA,KAAK,MAAM,SAAC7J,EAAG9B,GAGjE,OAFQkF,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAACiI,GAAY,GAEpDU,CAAElM,EAAEsE,OAAOC,YACnBsF,KAAK,KAAM,GAEd0W,EAAM/W,QAAQ,aAAa,GAE3B+W,EAAM1W,KAAK,QAAQ,SAAC7J,EAAG9B,EAAGgD,GACvB,OAAS,IAANhD,GAAWA,IAAMgD,EAAE9C,OAAS,EACpB4B,EAAEkF,MAUNlF,EAAEkH,QAAU9D,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAGsJ,OAASlH,EAAEkH,QAAU9D,IAAUlC,EAAEhD,EAAE,IAAIN,OAAO,GAAGsJ,MACjF,4BAEPlH,EAAEnB,OAAQ,EACHmB,EAAEkF,UAKrB,IAAIsb,EAAYH,EAAahe,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAAcoF,UAAU,UAAUnM,MAAK,SAAAoC,GAAC,OAAGA,EAAE6f,SAAO7V,KAAK,UAAUR,QAAQ,SAAS,GAE9HgX,EAAU3W,KAAK,IAAK,GAAGA,KAAK,KAAM,GAAGA,KAAK,MAAM,SAAC9J,EAAG7B,GAC/C,IAAIgO,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IAEhC,OADJ0G,EAAE3I,MAAM,CAAC,EAAIiI,KACFU,EAAEnM,EAAEwE,YACZsF,KAAK,OAAQ,4BAErB2W,EAAUvW,GAAG,aAAa,SAASjK,GAC9B,IAAI2P,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACpB,IAAInH,EAAIc,IAAU,OAClBuM,EAAKC,KAAK5P,EAAEkH,MAAQ,KAAO5E,EAAEtC,EAAEuE,UAC5BkF,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,SAEzC/F,GAAG,YAAY,SAASjK,GACZoD,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAGzB8W,EAAMtW,GAAG,aAAa,SAASjK,GAC1B,IAAI2P,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACpB,IAAInH,EAAIc,IAAU,OAClBuM,EAAKC,KAAK5P,EAAEkH,MAAQ,KAAO5E,EAAEtC,EAAEuE,UAC5BkF,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,SAEzC/F,GAAG,YAAY,SAASjK,GACZoD,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAIzB4W,EAAapW,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAC/B,IAAIgL,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IACpC0G,EAAE3I,MAAM,CAAC,EAAIiI,KACbqI,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAASmD,KAAK,SAAU,OAC5DgK,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAAS8C,QAAQ,YAAY,GACjEpG,IAAUlC,EAAEhD,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,IAC9ExP,IAAUlC,EAAEhD,IAAI6L,UAAU,UAAUN,MAAM,UAAW,IAAKI,KAAK,QAAQ,SAAC7J,GAAD,OAAMA,EAAEkF,SAC/E9B,IAAUlC,EAAEhD,IAAI6L,UAAU,cAAcN,MAAM,UAAW,IAAKI,KAAK,QAAQ,SAAC7J,GAAD,OAAMA,EAAEkF,YAEpF+E,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIwN,OAAO,YACvBtI,IAAUlC,EAAEhD,IAAIwN,OAAO,YAAYyB,SACnC/J,IAAa,mBAAoBpD,EAAE0G,SAASmD,KAAK,SAAU,QAC3DzG,IAAa,mBAAoBpD,EAAE0G,SAAS8C,QAAQ,YAAY,GAChEpG,IAAa,UAAUyG,KAAK,OAAQ,4BACpCzG,IAAUlC,EAAEhD,IAAI6L,UAAU,cAAc1H,QAAO,SAAAqlB,GAAC,OAAc,GAAXA,EAAE7oB,SAAegL,KAAK,OAAQ,+BAGtF,IAII4W,EAJWR,EAAW5d,QAAO,SAAAie,GAC5B,MAAmB,eAAZA,EAAGze,QAGakI,UAAU,WAAWnM,MAAK,SAAAoC,GAAC,OAAEA,EAAE6F,SAAOmE,KAAK,KAAKR,QAAQ,UAAU,GAE9FiX,EAAa5W,KAAK,aAAa,SAAC7J,GAG1B,MAAO,aAFHoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KAC9CkP,CAAEzS,EAAEwD,YACU,UAIlCid,EAAaxW,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAChC,IAAIgL,EAAIlM,EAAE+G,OACVmF,EAAE3I,MAAM,CAAC,EAAIiI,KACbqI,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAASmD,KAAK,SAAU,OAC5DgK,EAAI9J,UAAU,mBAAoB/J,EAAE0G,SAAS8C,QAAQ,YAAY,GACjEpG,IAAUlC,EAAEhD,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,IAC9ExP,IAAUlC,EAAEhD,IAAI6L,UAAU,UAAUN,MAAM,UAAW,OAEtDQ,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIwN,OAAO,YACvBtI,IAAUlC,EAAEhD,IAAIwN,OAAO,YAAYyB,SACnC/J,IAAa,mBAAoBpD,EAAE0G,SAASmD,KAAK,SAAU,QAC3DzG,IAAa,mBAAoBpD,EAAE0G,SAAS8C,QAAQ,YAAY,GAChEpG,IAAa,UAAUqG,MAAM,UAAW,OAG5C,IAAIiX,EAAWD,EAAalX,OAAO,QACnCmX,EAAS7W,KAAK,QAASiE,GAAWqW,WAAWta,KAAK,SAAU,GAC5D6W,EAAS7W,KAAK,KAAK,SAAC7J,EAAG9B,GACnB,IAAIwR,EAAQvJ,EAAO9D,QAAO,SAAA7C,GAAC,OAAGA,EAAE0C,QAAUlC,EAAE8G,SAAO,GAEnD,OADQ1D,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CA7uBtD,GA6uB+D,GAChE2I,CAAElM,EAAEuE,YAGf,IAAIoc,EAAYF,EAAape,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAAc4E,OAAO,QAC/DoX,EAAU9W,KAAK,QAASiE,GAAWqW,WAAWta,KAAK,UAAU,SAAC7J,EAAG9B,GAC7D,IAAIwR,EAAQvJ,EAAO9D,QAAO,SAAA7C,GAAC,OAAGA,EAAE0C,QAAUlC,EAAE8G,SAAO,GAC/CoF,EAAI9I,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CApvBtD,GAovB+D,IACvE,OAAO2I,EAAElM,EAAEuF,WAAa2G,EAAElM,EAAEqF,cAGhCsb,EAAU9W,KAAK,KAAK,SAAC7J,EAAG9B,GACpB,IAAIwR,EAAQvJ,EAAO9D,QAAO,SAAA7C,GAAC,OAAGA,EAAE0C,QAAUlC,EAAE8G,SAAO,GAEnD,OADQ1D,MAAiBoC,OAAO,CAACkK,EAAMpK,IAAKoK,EAAMtK,MAAM7B,MAAM,CA1vBtD,GA0vB+D,GAChE2I,CAAElM,EAAEqF,cAEfsb,EAAUlX,MAAM,UAAW,IAG3BrG,IAAa,gBAAgB2G,UAAU,WAAWE,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GACrDkC,IAAU,YAAY2G,UAAU,SACxC1H,QAAO,SAAAC,GACZ,OAAOtC,EAAEiD,OAASX,EAAE1E,KAAKqF,QAC1BuG,QAAQ,YAAY,MAExBS,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GAELkC,IAAU,YAAY2G,UAAU,SAEvC1H,QAAO,SAAAC,GACZ,OAAOtC,EAAEiD,OAASX,EAAE1E,KAAKqF,QAC1BuG,QAAQ,YAAY,MAIxB,SAASqU,GAAgBmH,EAAmBT,EAAW4D,GAE1D,IAAIC,EAAcpD,EAAkB3iB,QAAO,SAAArC,GACvC,MAAgC,aAAzBA,EAAEA,EAAE5B,OAAS,GAAGyD,QAKvBse,EAAiC,SAAdoE,EAAuB,GAAK,GAE/C8D,EAAmBD,EAAY7e,OAAO,KAAKC,QAAQ,uBAAuB,GAE9E6e,EAAiB9e,OAAO,QAAQC,QAAQ,QAAQ,GAAMK,KAAK,KAAM,GAAGA,KAAK,KAAM,IAAIA,KAAK,KAAM,MAAMA,KAAK,KAAM,IAE/G,IAAIye,EAAYD,EAAiBte,UAAU,KAAKnM,MAAK,SAAAoC,GAWjD,IAAIuoB,EAAQvoB,EAMZ,OAJWuoB,EAAM,GAAGhmB,KAAI,SAAA/C,GAAC,OAAGA,EAAE0H,SACb3E,KAAI,SAAAvB,GAChB,OAAOunB,EAAMhmB,KAAI,SAAAzC,GAAC,OAAGA,EAAE6E,KAAO7E,EAAIA,EAAEuC,QAAO,SAAAC,GAAC,OAAGA,EAAE4E,OAASlG,KAAK,YAGrEgJ,KAAK,KAAKR,QAAQ,cAAc,GAE/B2O,EAAU/U,MACbqP,GAAE,SAAAzS,GAGC,OAFQoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,KAClDkP,CAAEzS,EAAEwD,YACD,KACrB0I,GAAE,SAAAlM,GACC,IAAIkM,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC4c,EAAgB,EAAG,IAClE,OAAOngB,EAAEU,MAAQwL,EAAElM,EAAEU,OAASwL,EAAE,MAGdoc,EAAU/e,OAAO,QACtCM,KAAK,IAAKsO,GACVtO,KAAK,SAAS,SAAC7J,EAAG9B,GAAJ,OAAS8B,EAAE,GAAG0G,QAAU,iBACtC+C,MAAM,eAAgB,IACtBA,MAAM,UAAU,SAACzJ,GACd,OAAOA,EAAE,GAAGkF,SAGKmjB,EAAiB9e,OAAO,QAAQC,QAAQ,kBAAkB,GAChEK,KAAK,SAAUsW,GAC9B,IAAIqI,EAAqBH,EAAiBte,UAAU,4BAA4BnM,MAAK,SAAAoC,GACjF,OAAOA,KAAKgK,KAAK,KAkCrB,GAhCAwe,EAAmB3e,KAAK,aAAa,SAAC7J,GAClC,IAAIyS,EAAIrP,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,MACjE,OAAGvD,EAAE,GAGM,aADOyS,EAAEzS,EAAE,GAAGwD,YACQ,OAItB,aADQiP,EAAEzS,EAAEwD,YACU,UAIrCglB,EAAmBjf,OAAO,QAAQM,KAAK,QAASiE,GAAWqW,WAAWta,KAAK,SAAUsW,GAAiBtW,KAAK,UAAW,GAEtH2e,EAAmBjf,OAAO,QAAQM,KAAK,KAAM,IAAIA,KAAK,KAAM,IAAIA,KAAK,KAAM,GAAGA,KAAK,KAAMsW,GAGzFqI,EAAmBve,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAClC,IAAIgL,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IACpC0G,EAAE3I,MAAM,CAAC,EAAG4c,IACZ/c,IAAUlC,EAAEhD,IAAIqL,OAAO,KAAKC,QAAQ,UAAU,GAAMhL,KAAK4E,IAAY8I,GAAG0G,MAAM,OAC/E3I,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAUlC,EAAEhD,IAAIwN,OAAO,YACvBtI,IAAUlC,EAAEhD,IAAIwN,OAAO,YAAYyB,YAG3Cqb,EAAmB3e,KAAK,SAAS,SAAC7J,EAAG9B,EAAGgD,GACpC,IAAIkB,EAAOgB,IAAalC,GAAGtD,OAC3B,OAAOwE,EAAKA,EAAKhE,OAAS,GAAGsI,WAC9B8C,QAAQ,2BAA2B,IAE1B,IAAT2e,EAAe,CAEd,IAAIM,EAAYD,EAAmBnmB,QAAO,SAAC6D,EAAKhI,GAAN,OAAqBiH,MAAVe,EAAI,MAAiB6D,UAAU,SAASnM,MAAK,SAAAoC,GAE9F,OAAOA,KACRgK,KAAK,UAAUR,QAAQ,QAAQ,GAElCif,EAAU5e,KAAK,KAAM,IAAIA,KAAK,MAAM,SAAC7J,GACjC,IAAIkM,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC4c,EAAkB,EAAG,IACpE,OAAOngB,EAAEuE,QAAS2H,EAAElM,EAAEuE,SAAW2H,EAAElM,EAAEU,UACtCmJ,KAAK,IAAK,GAEb4e,EAAUhf,MAAM,QAAQ,SAACzJ,EAAG9B,EAAGgD,GAY3B,MAAO,UAGXunB,EAAUpmB,QAAO,SAAAC,GAAC,OAAGA,EAAEiC,QAAU,MAAKsF,KAAK,IAAK,GAWhD4e,EAAUxe,GAAG,aAAa,SAASjK,GAC/B,IAAI2P,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACpB,IAAInH,EAAIc,IAAU,OAClBuM,EAAKC,KAAK5P,EAAEkH,MAAQ,KAAO5E,EAAEtC,EAAEuE,UAC5BkF,MAAM,OAASrG,IAAS2M,MAAS,MACjCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,SAEzC/F,GAAG,YAAY,SAASjK,GACZoD,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAGxB,IAAIif,EAAcF,EAAmBnmB,QAAO,SAAC6D,EAAKhI,GAC9C,YAAkBiH,IAAXe,EAAI,MAAoBsD,QAAQ,iBAAiB,GAE5Dkf,EAAYnf,OAAO,UAAUM,KAAK,KAAM,IAAIA,KAAK,KAAM,GAAGA,KAAK,IAAK,GAAGJ,MAAM,QAAQ,SAAAzJ,GAClF,OAAOA,EAAEkF,SAIZwjB,EAAYnf,OAAO,QAAQI,MAAK,SAAA3J,GAAC,OAAGA,EAAEoH,YAAUyC,KAAK,YAAa,oBAAoBJ,MAAM,YAAa,QAExG,CACD+e,EAAmBnmB,QAAO,SAAC6D,EAAKhI,GAC5B,OAAiBiH,MAAVe,EAAI,MAAmBqD,OAAO,QAAQM,KAAK,SAAUsW,GAAiBtW,KAAK,QAASiE,GAAWqW,WAAWta,KAAK,OAAQ,QAClI,IAAI8e,EAAYH,EAAmBnmB,QAAO,SAAC6D,EAAKhI,GAAN,OAAqBiH,MAAVe,EAAI,MAAiB6D,UAAU,aAAanM,MAAK,SAAAoC,GAClG,OAAOA,KACRgK,KAAK,QAAQR,QAAQ,YAAY,GAEpCmf,EAAU9e,KAAK,QAASiE,GAAWqW,WAAWta,KAAK,UAAU,SAAC7J,EAAG9B,GAG7D,OADQkF,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG4c,GAC3CjU,CAAElM,EAAEuE,YAGfokB,EAAU9e,KAAK,QAAQ,SAAC7J,EAAG9B,GAAJ,OAAS8B,EAAEkF,SAClCyjB,EAAU9e,KAAK,UAAW,OAC1B8e,EAAU9e,KAAK,SAAU,QACzB8e,EAAU9e,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAC/B,IAAIgL,EAAI9I,MAAiBoC,OAAO,CAAC,EAAG,IAAIjC,MAAM,CAAC,EAAG4c,IAC9CyI,EAAcxlB,IAAalC,GAAGtD,OAAOmgB,MAAK,SAACC,EAAG/Z,GAAJ,OAASA,EAAEM,QAAUyZ,EAAEzZ,WACjEskB,EAAWD,EAAYrmB,KAAI,SAAAlB,GAAC,OAAGA,EAAE6F,SAAOhE,QAAQlD,EAAEkH,OAEtD,GAAgB,IAAb2hB,EACK,MAAO,iBAIP,IADJ,IAAIC,EAAW,EACHlX,EAAO,EAAGA,EAAOiX,EAAUjX,IAC/BkX,GAAsBF,EAAYhX,GAAMrN,QAEhD,MAAO,eAAgB2H,EAAE4c,GAAW,OAI5CH,EAAU1e,GAAG,aAAa,SAASjK,GAC/B,IAAI2P,EAAOvM,IAAU,YACrBuM,EAAKR,aACFC,SAAS,KACT3F,MAAM,UAAW,IACpB,IAAInH,EAAIc,IAAU,OAClBuM,EAAKC,KAAK5P,EAAEkH,MAAQ,KAAO5E,EAAEtC,EAAEuE,UAC5BkF,MAAM,OAASrG,IAAS2M,MAAS,MACjCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,SAEzC/F,GAAG,YAAY,SAASjK,GACZoD,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAGxB,IAAIif,EAAcF,EAAmBnmB,QAAO,SAAC6D,EAAKhI,GAC9C,YAAkBiH,IAAXe,EAAI,MAAoBsD,QAAQ,iBAAiB,GAE5Dkf,EAAYnf,OAAO,UAAUM,KAAK,KAAM,IAAIA,KAAK,KAAM,GAAGA,KAAK,IAAK,GAAGJ,MAAM,QAAQ,SAAAzJ,GAClF,OAAOA,EAAEkF,SAGZwjB,EAAYnf,OAAO,QAAQI,MAAK,SAAA3J,GAAC,OAAGA,EAAEoH,YAAUyC,KAAK,YAAa,oBAAoBJ,MAAM,YAAa,IAI7G,OAAO+e,E,qBEh8CJ,SAASO,GAAeC,EAASC,EAAatN,EAAM5V,EAAkBmjB,GAEzE,IAAIC,EAAY,CAAC,CAAC,MAAQ,gBAAgB,CAAC,MAAQ,aAAa,CAAC,MAAQ,aAAc,CAAC,MAAQ,eAEjFlgB,EAAS+f,EAASG,EAAWA,EAAU,GAAGjnB,MAAO,eAEvD+H,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACxBsL,GAAexM,EAAEkC,OACjBkB,IAAU,yBAAyBsI,OAAO,UAAUzI,OAAOvC,MAAQV,EAAEkC,MACrEkB,IAAU,yBAAyBsI,OAAO,UAAU/B,KAAK3J,EAAEkC,OAC3DkB,IAAU,gBAAgBoG,QAAQ,QAAQ,MAG9C,IAAI4f,EAAeJ,EAAQzf,OAAO,UAAUM,KAAK,KAAM,eACvDuf,EAAavf,KAAK,QAAS,6BAA6BF,KAAK,gBAC7Dyf,EAAanf,GAAG,SAAS,kBD+BtB,SAAuBmf,EAAczN,EAAMxV,GAC9CsB,QAAQkD,IAAIye,EAAczN,EAAMxV,GAEhC,IAAIkjB,EAAYjmB,IAAU,eACtBxF,EAAO2O,KAER8c,EAAU7f,QAAQ,WACjB4f,EAAazf,KAAK,gBAClB0f,EAAU7f,QAAQ,UAAU,GAC5BmS,EAAKlS,MAAM,cAAe,SA2ElC,SAAqB4f,EAAWD,EAAcH,EAAatN,EAAM2N,EAAYnjB,GACzE,IAAIF,EAAO,CAAC,kBAAkB0P,OAAOtX,OAAO4H,KAAKgjB,EAAY,GAAG,GAAG/kB,aAC3DqlB,EAAgBF,EAAU9f,OAAO,OAAOC,QAAQ,eAAe,GACnE+f,EAAc9f,MAAM,QAAS,SAC7B8f,EAAchgB,OAAO,MAAMI,KAAK,qBAChC,IAAI6f,EAAYC,GAAYF,EAAetjB,EAAM,cAAe,IAE5DyjB,EAAWH,EAAchgB,OAAO,OAAOC,QAAQ,wBAAwB,GAE3EggB,EAAUvf,GAAG,UAAU,SAASjK,GAC5B,IAAI2pB,EAAiBvmB,IAAUoK,MAAMpM,SAAS,SAC1C0I,EAAU3D,EAAO9D,QAAO,SAAAC,GAAC,OAAGA,EAAEJ,QAAUynB,KAAgB,GAG5D,GAFAD,EAAS3f,UAAU,KAAKoD,SAEJ,aAAjBrD,EAAQjI,KAAoB,CAC3B,IAAIsH,EAAc,CAAC,OACfygB,EAAU9f,EAAQ3D,OAAO5D,KAAI,SAAA/C,GAAC,OAAGA,EAAEqL,aACvC1B,EAAcA,EAAYwM,OAAOiU,GACjC,IAAIC,EAAUJ,GAAYC,EAAUvgB,EAAa,kBAAmB,QAChE2gB,EAAUL,GAAYC,EAAUvgB,EAAa,iBAAkB,MAC/D4gB,EAASL,EAASngB,OAAO,UAAUC,QAAQ,2BAA2B,GAC1EugB,EAAOpgB,KAAK,UAEZogB,EAAO9f,GAAG,SAAS,WACf,IAAI+f,EAAYH,EAAQ5mB,OAAOgnB,UAAU,GACrCC,EAAUJ,EAAQ7mB,OAAOgnB,UAAU,GAOnCrsB,GAHa0T,GAAajP,QAAO,SAAAC,GAAC,MAAuB,gBAApBA,EAAC,cAG/BiK,MAEP7J,EAAOynB,GAAevsB,EAAM+rB,EAAgBK,EAAWE,GAGvDE,EAAW9E,GAAU,cAAe,WAD5B,KAAKhU,GAAajP,QAAO,SAAAC,GAAC,MAAuB,aAApBA,EAAEijB,iBAA8BnnB,OACd+rB,GAAnC,GAAuDvsB,GAAvD,GAAkE8E,GAAO,CAAC,CAAC,QAAS,CAACsnB,EAAWE,IAAW,CAAC,iBAAkBP,KAEtJnd,GAAe,gBAGf,IAAI4I,EAAahS,IAAU,YAAY2G,UAAU,SAC7CoL,EAAY/R,IAAU,YAAY2G,UAAU,SAE5Cyb,EAAW9iB,EAAKP,SAAQ,SAAAC,GAAI,OAAGA,EAAKG,KAAI,SAAAU,GAAI,OAAIA,EAAKA,WAEzDG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DpG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAEvC4L,EAAU/S,QAAO,SAAAC,GAAC,OAAsC,IAAnCkjB,EAAStiB,QAAQZ,EAAE1E,KAAKqF,SACnDuG,QAAQ,kBAAkB,GAEpB2L,EAAS9S,QAAO,SAAAC,GAAC,OAAsC,IAAnCkjB,EAAStiB,QAAQZ,EAAE1E,KAAKqF,SAClDuG,QAAQ,kBAAkB,GAKvC6b,GAAa+E,EAAUjkB,GAGvBijB,EAAazf,KAAK,gBAClB0f,EAAUtf,UAAU,KAAKoD,SACzBkc,EAAU7f,QAAQ,UAAU,GAC5BmS,EAAKlS,MAAM,cAAe,cAE7B,CAED,IAAI1C,EAAS3D,MAAiBoC,OAAO,CAACsE,EAAQxE,IAAKwE,EAAQ1E,MAAM7B,MAAM,CAAC,GAAI,IAExE8mB,EAAeX,EAASngB,OAAO,OACnC8gB,EAAaxgB,KAAK,QAAS,KAAKA,KAAK,SAAU,KAC/C,IACIygB,EAASD,EAAatgB,UAAU,UAAUnM,KADnC,CAAC,CAAC,MAAQ,YAAa,KAAQ,aAAc,CAAC,MAAQ,SAAU,KAAQ,cAC1BoM,KAAK,KAAKR,QAAQ,SAAS,GAEpF8gB,EAAOzgB,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,MAAS,aAAiB,IAAFA,EAAO,UAExD,IAAIqsB,EAAYD,EAAO/gB,OAAO,KAC9BghB,EAAU1gB,KAAK,YAAa,qBAEfygB,EAAO/gB,OAAO,QAAQI,MAAK,SAAC3J,GAAD,OAAMA,EAAE8G,MAAO,QAChD+C,KAAK,IAAK,GAAGA,KAAK,IAAK,GACZ0gB,EAAUhhB,OAAO,QAAQM,KAAK,QAAS,IAAIA,KAAK,SAAU,IAChEA,KAAK,IAAK,IAEtB0gB,EAAUhhB,OAAO,KAChBM,KAAK,QAAS,gBACdA,KAAK,YAAa,mBAClBrL,KAAK4E,IAAY2D,GAAQ6L,MAAM,IAEhC,IASI4X,EAASpnB,MAAYkV,OAAO,CAAC,CAAC,GAAG,GAAI,CAAC,GAAI,MAAMrO,GAAG,OATtC,WACb,IAAIzK,EAAI4D,IAASoV,UACjB,GAAS,MAALhZ,EACFirB,OAAO5gB,KAAK,UAAW,aAGdrK,EAAE+C,IAAIwE,EAAO6R,WAIxB8R,EAAaH,EAAUhhB,OAAO,KAAK/K,KAAKgsB,GAC5CE,EAAWlsB,KAAKgsB,EAAO5jB,KAAM,CAAC,EAAG,KAEjC,IAAImjB,EAASL,EAASngB,OAAO,UAAUC,QAAQ,2BAA2B,GAC1EugB,EAAOpgB,KAAK,UAEZogB,EAAO9f,GAAG,SAAS,WAEf,IAAI0gB,EAAaD,EAAWE,QAAQ,GAAGroB,KAAI,SAAAzC,GAAC,OAAGA,EAAE+qB,QAAQrS,UAAUjW,KAAI,SAAA/C,GAAC,OAAGA,EAAE,SACzEsrB,EAAkBH,EAAW,GAAGpoB,IAAIwE,EAAO6R,QAAQmF,OACnDgN,EAAiBJ,EAAW,GAAGpoB,IAAIwE,EAAO6R,QAAQmF,OAClDiN,EAAa1Z,GAAajP,QAAO,SAAAC,GAAC,MAAuB,gBAApBA,EAAC,cAEtC1E,EAAOotB,EAAW5sB,OAAS,EAAI4sB,EAAWA,EAAW5sB,OAAS,GAAGR,KAAOgjB,GAAW,GAEnFle,EAAOuoB,GAAiBrtB,EAAM+rB,EAAgBmB,EAAiBC,GAG/DX,EAAW9E,GAAU,cAAe,aAD5B,KAAKhU,GAAajP,QAAO,SAAAC,GAAC,MAAuB,eAApBA,EAAEijB,iBAAgCnnB,OACd6sB,GAArC,GAA2DrtB,GAA3D,GAAsE8E,GAAO,CAAC,CAAC,iBAAkBinB,GAAiB,CAAC,kBAAmBmB,GAAkB,CAAC,iBAAkBC,KAEnMve,GAAe,gBAGf6Y,GAAa+E,EAAUjkB,GAKvB,IAAIiP,EAAahS,IAAU,YAAY2G,UAAU,SAC7CoL,EAAY/R,IAAU,YAAY2G,UAAU,SAE5Cyb,EAAW9iB,EAAKP,SAAQ,SAAAC,GAAI,OAAGA,EAAKG,KAAI,SAAAU,GAAI,OAAIA,EAAKA,WAEzDG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DpG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAEvC4L,EAAU/S,QAAO,SAAAC,GAAC,OAAsC,IAAnCkjB,EAAStiB,QAAQZ,EAAE1E,KAAKqF,SACnDuG,QAAQ,kBAAkB,GAEpB2L,EAAS9S,QAAO,SAAAC,GAAC,OAAsC,IAAnCkjB,EAAStiB,QAAQZ,EAAE1E,KAAKqF,SAClDuG,QAAQ,kBAAkB,GAKvC4f,EAAazf,KAAK,gBAClB0f,EAAUtf,UAAU,KAAKoD,SACzBkc,EAAU7f,QAAQ,UAAU,GAC5BmS,EAAKlS,MAAM,cAAe,cA3NtCyhB,CAAY7B,EAAWD,EAAcxrB,EAAM+d,GAwUnD,SAAqB0N,EAAWD,EAAcH,EAAatN,EAAMxV,GAE7D,IAEIglB,EAAY9B,EAAU9f,OAAO,OAAOC,QAAQ,kBAAkB,GAC9D2hB,EAAU5hB,OAAO,MAAMI,KAAK,iBAC5B,IAAIyhB,EAAOD,EAAU5hB,OAAO,QAAQC,QAAQ,eAAe,GACvD6hB,EAAQD,EAAK7hB,OAAO,SAASC,QAAQ,wBAAwB,GACjE6hB,EAAMxhB,KAAK,OAAQ,UAAUA,KAAK,cAAe,qBAAqBA,KAAK,aAAc,UACtEuhB,EAAK7hB,OAAO,UAAUC,QAAQ,wCAAwC,GAAMK,KAAK,OAAQ,UAAUN,OAAO,KAAKC,QAAQ,iBAAiB,GAC9IS,GAAG,SAAS,WAErB,IAAIqhB,EAAaD,EAAMpoB,OAAOvC,MAAM6qB,MAAM,KAAKhpB,KAAI,SAAAzC,GAAC,OAAGA,EAAE0rB,iBAErD9oB,EAAOumB,EAAY5mB,QAAO,SAAAD,GAC1B,IAAIsE,EAAUtE,EAAKC,QAAO,SAAAY,GAAI,OAAiB,IAAdA,EAAK0B,QAAe,GAAGmC,MACxD,OAAOwkB,EAAWpoB,QAAQwD,IAAY,KAKzC8F,GAAe,gBAEhB,IACI9C,EADgBtG,IAAU,YACHmG,OAAO,UAAUC,QAAQ,gBAAgB,GACzDE,EAAOH,OAAO,QAAQC,QAAQ,qBAAqB,GACzDG,KAAKjH,EAAKtE,QACfsL,EAAOH,OAAO,MAAMI,KAAK,gBACbD,EAAOH,OAAO,KAAKC,QAAQ,sBAAsB,GACvDS,GAAG,SAAS,WACduC,GAAe,gBACf9C,EAAOyD,YAEX/J,IAAU,mBAAmBqG,MAAM,UAAU,WACzC,OAAuB,GAAd/G,EAAKtE,OAA4D,IAA5CC,OAAO4H,KAAKvD,EAAK,GAAG,GAAGwB,YAAY9F,OAAgB,QAIrFgrB,EAAazf,KAAK,gBAClB0f,EAAUtf,UAAU,KAAKoD,SACzBkc,EAAU7f,QAAQ,UAAU,GAC5BmS,EAAKlS,MAAM,cAAe,UAhX9BgiB,CAAYpC,EAAWD,EAAcxrB,EAAM+d,KAG3CyN,EAAazf,KAAK,gBAClB0f,EAAUtf,UAAU,KAAKoD,SACzBkc,EAAU7f,QAAQ,UAAU,GAC5BmS,EAAKlS,MAAM,cAAe,QCpDAiiB,CAActC,EAAczN,EAAM5V,MAGhE,IAAI4lB,EAAgB3C,EAAQzf,OAAO,UAAUM,KAAK,KAAM,WACxD8hB,EAAc9hB,KAAK,QAAS,6BAA6BF,KAAK,uBAC9DgiB,EAAc9hB,KAAK,SAAS,GAC5B8hB,EAAc1hB,GAAG,SAAS,kBAwF9B,SAAuBP,EAAQiS,EAAM5V,GAEjC,IAAInI,EAAO2O,KAEU,wBAAlB7C,EAAOC,QACND,EAAOC,KAAK,qBACZgS,EAAK5R,UAAU,KAAKoD,SACpBzD,EAAOG,KAAK,SAAS,GACrB+R,GAAuBhe,EAAM+d,EAAM5V,KAEnC2D,EAAOC,KAAK,uBACZgS,EAAK5R,UAAU,KAAKoD,SACpBzD,EAAOG,KAAK,SAAS,GACrB+R,GAAuBhe,EAAM+d,EAAM5V,IArGR6lB,CAAcD,EAAehQ,EAAM5V,MAElE,IAAI8lB,EAAqB7C,EAAQzf,OAAO,UAAUM,KAAK,KAAM,iBAC7DgiB,EAAmBhiB,KAAK,QAAS,6BAA6BF,KAAK,2BACnEkiB,EAAmBhiB,KAAK,SAAS,GAEjCgiB,EAAmB5hB,GAAG,SAAS,WAC3B,IAAI6hB,EAA0B1oB,IAAa,2BACV,4BAA9ByoB,EAAmBliB,QAClBkiB,EAAmBliB,KAAK,2BACxBkU,GAAgBiO,EAAyBvH,IAAW,KAEpDsH,EAAmBliB,KAAK,2BACxBkU,GAAgBiO,EAAyBvH,IAAW,OAI5D,IAAIpb,EAAc,CAAC,CAAC,MAAQ,SAE5BpD,EAAiBxD,KAAI,SAAAzC,GACH,aAAXA,EAAE+B,MACDsH,EAAYzK,KAAKoB,MAIzB,IAAIisB,EAAc9iB,EAAS+f,EAAS7f,EAAa,WAAY,uBAC7D6f,EAAQtd,OAAO,wBAAwB7B,KAAK,QAAS,aAErDkiB,EAAY9hB,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GAC3B,GAAc,aAAXlB,EAAE6B,KAAoB,CACrB,IAAIjE,EAAO2O,KACP2Z,EAAYlmB,EAAEmG,OAAO5D,KAAI,SAAAzC,GACzB,MAAO,CAAC,MAASA,EAAEoC,MAAO,MAASpC,EAAE+K,UAAW,KAAQ,OAE5Dqb,EAAU3jB,KAAI,SAAA2E,GACXA,EAAMtJ,KAAOA,EAAKyE,QAAO,SAAAwD,GAEhB,OADOA,EAAMxD,QAAO,SAAA2pB,GAAE,OAAe,IAAZA,EAAGrnB,QAChB,GAAGT,WAAWgD,EAAMhF,OAAOkF,WAAaF,EAAMA,YAGvE9D,IAAU,SAAS2G,UAAU,KAAKoD,SAClC8Y,GAAWC,EAAWngB,QAErB0B,QAAQC,MAAM,2BAElBshB,EAAQtd,OAAO,wBAAwBlC,QAAQ,QAAQ,MAI3D,IAAIyiB,EAAmBlmB,EAAiBxD,KAAI,SAAAzC,GAAC,OAAGA,EAAEoC,SAC9CgqB,EAAoBD,EAAiB7tB,OAAS,EAAI,CAAC,cAAe,aAAc,SAAU,QAAS,QAAS,kBAAmB,aAAc,YAAc6tB,EAE3J3iB,EAAU0f,EAAQzf,OAAO,OAAOC,QAAtB,2BAAyD,GACvEF,EAAQG,MAAM,UAAW,gBACzB,IAAIC,EAASJ,EAAQC,OAAO,UAAUC,QAAQ,6CAA6C,GAAMG,KAAK,oBAClGC,EAAcN,EAAQC,OAAO,OAAOM,KAAK,KAAM,kBAAkBL,QAAQ,oBAAoB,GAG7FM,EAFSF,EAAYL,OAAO,MAEXQ,UAAU,MAAMnM,KAAKquB,GAAkBjiB,KAAK,MAClDF,EAAQP,OAAO,SAASM,KAAK,OAAQ,YACpDC,EAAQP,OAAO,QAAQI,MAAK,SAAA3J,GAAC,iBAAOA,MAEf8J,EAAQzH,QAAO,SAAAC,GAAC,OAAG4pB,EAAkBhpB,QAAQZ,IAAM,KAAGoJ,OAAO,SACnEG,MAAK,SAAC7L,EAAG9B,EAAGgD,GAAP,OAAaA,EAAEhD,GAAGyW,SAAU,KAEhDjL,EAAOO,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACnB0I,EAAYJ,QAAQ,SACnBI,EAAYJ,QAAQ,QAAQ,GAC5BgD,GAAe,eAAgBpC,EAAkBA,EAAkBhM,OAAS,GAAGoM,SAE/EZ,EAAYJ,QAAQ,QAAQ,MAMdP,EAAS+f,EAAS7e,EAAV,wBAA8CA,EAAkB,GAAGjI,OAAS,gBAC1GkB,IAAU,iBAAiB2G,UAAU,KAAKE,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACzDkC,IAAU,0BAA0BsI,OAAO,UAAU/B,KAArD,wBAA2E3J,EAAEkC,QAC7EkI,EAAkB1L,KAAKsB,GACvBwM,GAAe,eAAgBxM,EAAEwK,WAEL,IAA7BL,EAAkB/L,QACjBgF,IAAU,0BAA0BsI,OAAO,UAAU/B,KAAK3J,EAAEkC,O,sVCjC7D,SAASiqB,GAAcC,EAAOlqB,EAAOmqB,GAExC,IAAIC,EAAWlpB,IAAO,GAAIgpB,GAAO7pB,KAAI,SAAAzC,GAAC,OAAGA,EAAEwD,OAAOjB,QAAO,SAAAC,GAAC,OAAGA,EAAEtB,MAAQkB,KAAO,MAAIK,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UACxF6rB,EAAWnpB,IAAO,GAAIgpB,GAAO7pB,KAAI,SAAAzC,GAAC,OAAGA,EAAE2E,UAAUpC,QAAO,SAAAC,GAAC,OAAGA,EAAEtB,MAAQkB,KAAO,MAAIK,KAAI,SAAAzC,GAAC,OAAGA,EAAEY,UAC3F8rB,EAAUppB,IAAO,GAAIgpB,GAAO7pB,KAAI,SAAAvC,GAAC,OAAGA,EAAEgD,aACtCypB,EAAarpB,MAAiBoC,OAAO,CAAC,EAAG8mB,IAAW/oB,MAAM,CAAC,EAAG,IAC9DmpB,EAAatpB,MAAiBoC,OAAO,CAAC+mB,EAAU,IAAIhpB,MAAM,CAAC,EAAG,IAC9DopB,EAAYvpB,MAAiBoC,OAAO,CAAC,EAAGgnB,IAAUjpB,MAAM,CAAC,EAAG,IAW5DqpB,EAVc,GAAIR,GAAO7pB,KAAI,SAAAlB,GAO7B,OANAA,EAAEwrB,MAAQxrB,EAAEiC,OAAOjB,QAAO,SAAArC,GAAC,OAAGA,EAAEgB,MAAQkB,KAAO,GAC/Cb,EAAEoD,UAAYpD,EAAEoD,UAAUpC,QAAO,SAAArC,GAAC,OAAGA,EAAEgB,MAAQkB,KAAO,GACtDb,EAAEyrB,UAAYL,EAAWprB,EAAEwrB,MAAMnsB,OACjCW,EAAE0rB,cAAgBL,EAAWrrB,EAAEoD,UAAU/D,OACzCW,EAAE2rB,aAAeL,EAAUtrB,EAAE2B,UAC7B3B,EAAE4rB,UAAaZ,EAAQ,GAAKhrB,EAAE2rB,aAAiBX,EAAQ,GAAKhrB,EAAEyrB,UAAcT,EAAQ,GAAKhrB,EAAE0rB,cACpF1rB,KAGmB0c,MAAK,SAACC,EAAG/Z,GAAJ,OAASA,EAAEgpB,UAAYjP,EAAEiP,aAAWxrB,MAAM,EAAG,KAKpF,SAAoB2qB,EAAOlqB,GAAM,WAE3BgrB,EAAY,CAAC,UAAW,WAExB3kB,GDzGE4kB,EAAU/pB,IAAU,YAAY2G,UAAU,eAC1CqjB,EAAa,GACjBD,EAAQthB,MAAK,SAAAC,GAAC,OAAIshB,EAAU1uB,KAAKoN,MAErBshB,EAAUjrB,SAAQ,SAAArC,GAAC,OAAGA,EAAEyI,UC0GhCyG,EAAS5L,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAFvD,MD7GT,IACC4pB,EACAC,EC+GJhqB,IAAU,SAAS2G,UAAU,KAAKoD,SAClC,IAAI0G,EAAMzQ,IAAU,SAASmG,OAAO,OACpCsK,EAAIhK,KAAK,SAAyB,IAAfuiB,EAAMhuB,QACzB,IAAI0W,EAAOjB,EAAItK,OAAO,KACtBuL,EAAKjL,KAAK,YAAa,sBACvB,IAAIwjB,EAAYvY,EAAK/K,UAAU,eAAenM,KAAKwuB,GAAOpiB,KAAK,KAAKR,QAAQ,aAAa,GACzF6jB,EAAUxjB,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,6BAA2B,IAAFA,EAAzB,QAC5BmvB,EAAU9jB,OAAO,QACZM,KAAK,SAAS,SAAC7J,EAAG9B,GACf,OAbI,IAaW8Q,EAAOhP,EAAEmD,OAAOK,eAElCqG,KAAK,SAdG,KAeRA,KAAK,KAAK,SAAA7J,GAAC,OAAGgP,EAAOhP,EAAEmD,OAAOK,eAC9BqG,KAAK,eAAgB,GAAGA,KAAK,SAAU,SACvCA,KAAK,OAAQ,QAElBwjB,EAAU9jB,OAAO,QAAQI,MAAK,SAAC3J,EAAG9B,GAC9B,gBAAU8B,EAAE8C,GAAG9C,EAAE8C,GAAG1E,OAAS,GAAG6E,KAAhC,cAA0CjD,EAAE+C,GAAG/C,EAAE+C,GAAG3E,OAAS,GAAG6E,SACjE4G,KAAK,KAAM,IAEd,IAAIyjB,EAAYD,EAAU9jB,OAAO,KAAKC,QAAQ,cAAc,GACxD+jB,EAAcD,EAAUvjB,UAAU,WAAWnM,MAAK,SAACoC,EAAG9B,GACtD,MAAO,CAAC,CAAC4I,MAAO,WAAYpG,MAAOV,EAAEgD,SAAUwqB,MAAOxtB,EAAEgtB,cACvD,CAAClmB,MAAO,QAASpG,MAAOV,EAAE6sB,MAAMnsB,MAAO8sB,MAAOxtB,EAAE8sB,WAChD,CAAChmB,MAAO,YAAapG,MAAOV,EAAEyE,UAAU/D,MAAO8sB,MAAOxtB,EAAE+sB,mBAE1D/iB,KAAK,KAAKR,QAAQ,SAAS,GAE1BikB,EAAaH,EAAU/jB,OAAO,KAAKM,KAAK,YAA3B,sBACjB4jB,EAAWlkB,OAAO,QAAQM,KAAK,QAAS,KAAKA,KAAK,SAAU,IAAIA,KAAK,OAAQ,QAAQA,KAAK,IAAK,IAAIA,KAAK,UAAW,IACnH4jB,EAAWlkB,OAAO,QAAQI,KAAK,SAASE,KAAK,IAAK,IAAIJ,MAAM,cAAe,OAAOA,MAAM,YAAa,IACrGgkB,EAAWlkB,OAAO,QAAQI,KAAK,SAASE,KAAK,IAAK,IAAIJ,MAAM,cAAe,OAAOA,MAAM,YAAa,IAErGgkB,EAAWlkB,OAAO,QAAQI,KAAK,eAAeE,KAAK,IAAK,IAAIA,KAAK,IAAK,IAAIJ,MAAM,cAAe,OAAOA,MAAM,YAAa,IACzHgkB,EAAWlkB,OAAO,QAAQI,KAAK,QAAQE,KAAK,IAAK,IAAIA,KAAK,IAAK,IAAIJ,MAAM,cAAe,OAAOA,MAAM,YAAa,IAElH8jB,EAAY1jB,KAAK,aAAa,SAAC7J,EAAG9B,EAAGgD,GAClC,MAAQ,oBAAM,IAANhD,EAAwB,IAClB,IAAKkF,IAAOA,IAAalC,GAAGmB,QAAO,SAACC,EAAGlD,GAAJ,OAASlB,EAAIkB,KAAGxB,OAAO2E,KAAI,SAAAzC,GAAC,OAAoB,EAAjBA,EAAEgH,MAAM1I,WAAkB,GAAFF,EADhG,UAGX,IAAIua,EAAOrV,IAAU,OACrBmqB,EAAYhkB,OAAO,QAAQI,MAAK,SAAC3J,EAAG9B,GAAJ,OAAU8B,EAAE8G,SAAO2C,MAAM,YAAa,IAAII,KAAK,IAAK,IACpF0jB,EAAYhkB,OAAO,QAAQI,MAAK,SAAC3J,EAAG9B,GAAJ,OAASua,EAAKzY,EAAEwtB,UAAQ/jB,MAAM,YAAa,IAAII,KAAK,IAAK,IACzF0jB,EAAYhkB,OAAO,QAAQI,MAAK,SAAC3J,EAAG9B,GAAJ,OAASua,EAAKzY,EAAEU,UAAQ+I,MAAM,YAAa,IAAII,KAAK,IAAK,IAEzF4jB,EAAWlkB,OAAO,QAAQI,MAAK,SAAC3J,EAAG9B,EAAGgD,GAAP,OAAYuX,EAAKzY,EAAE+sB,cAAgB/sB,EAAEgtB,aAAehtB,EAAE8sB,cAAYrjB,MAAM,YAAa,IAAII,KAAK,IAAK,IAAIA,KAAK,IAAK,KAChJ4jB,EAAWlkB,OAAO,QAAQI,MAAK,SAAC3J,EAAG9B,GAAJ,OAASA,EAAE,KAAGuL,MAAM,YAAa,IAAII,KAAK,IAAK,IAAIA,KAAK,IAAK,KAE5F,IAAIsO,EAAU/U,MACbqP,GAAE,SAAAzS,GAGC,OAFQoD,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAtDtD,KAuDMkP,CAAEzS,EAAEwD,eAErB0I,GAAE,SAAAlM,GACC,IAAIkM,EAAIlM,EAAEkE,WAAWhC,GAAOiE,OAAOY,OAEnC,OADAmF,EAAE3I,MAAM,CA1DC,IA0DQ,IACV2I,EAAElM,EAAEkE,WAAWhC,GAAOoC,OAAOC,YAKpCmpB,EAAaL,EAAUtjB,UAAU,mBAAmBnM,MAAK,SAACoC,EAAG9B,EAAGgD,GAElE,IAAIysB,EAAW3tB,EAAE8C,GAAGP,KAAI,SAAArB,GAAC,OAAGA,EAAE+B,QAC1B2qB,EAAW5tB,EAAE+C,GAAGR,KAAI,SAAArB,GAAC,OAAGA,EAAE+B,QAE1B4qB,EADS,GAAI7tB,EAAE8C,GAAGT,QAAO,SAAAnB,GAAC,OAAc,IAAXA,EAAEyD,QAAepC,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,SAAO0S,OAAO3V,EAAE+C,GAAGV,QAAO,SAAAnB,GAAC,OAAc,IAAXA,EAAEyD,QAAepC,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,SAC9Fd,SAAQ,SAAArC,GAC3B,IAAIguB,EAAQC,GAAY,GAAG7qB,QAAQpD,GAEnC,OADSiuB,GAAY,GAAG1rB,QAAO,SAACC,EAAGlD,GAAJ,OAAUA,GAAM0uB,EAAQ,GAAQ1uB,GAAM0uB,EAAQ,QAI7EE,EAAe,CAACL,EAASA,EAASvvB,OAAO,GAAIwvB,EAASA,EAASxvB,OAAO,IAItE6vB,EAAW,GAFErN,GAAW,GAAGve,QAAO,SAAAC,GAAC,OAAIurB,EAAU3qB,QAAQZ,EAAEA,EAAElE,OAAS,GAAG6E,OAAU,IAAsD,IAAhD+qB,EAAa9qB,QAAQZ,EAAEA,EAAElE,OAAS,GAAG6E,UAEnGV,KAAI,SAAAH,GACjC,IAAInC,EAAOmC,EAAKA,EAAKhE,OAAS,GAAG6E,KACjC,OAAOb,EAAKG,KAAI,SAAAlB,GAEd,OADAA,EAAEpB,KAAOA,EACFoB,QAIP6sB,EAASD,EAAS1rB,KAAI,SAAAzC,GAAC,OAAIA,EAAEuC,QAAO,SAAAC,GAAC,OAAGqrB,EAASzqB,QAAQZ,EAAEW,OAAS,QACpEkrB,EAASF,EAAS1rB,KAAI,SAAAzC,GAAC,OAAIA,EAAEuC,QAAO,SAAAC,GAAC,OAAGsrB,EAAS1qB,QAAQZ,EAAEW,OAAS,QAEpEmrB,EAAWF,EAAO7rB,QAAO,SAACC,EAAGpE,EAAGgD,GAClC,IAAIkE,EAAMhC,IAAOlC,EAAEqB,KAAI,SAAAvC,GAAC,OAAGA,EAAE5B,WAC7B,OAAOkE,EAAElE,SAAWgH,KACnB,GAECipB,EAAWF,EAAO9rB,QAAO,SAACC,EAAGpE,EAAGgD,GAClC,IAAIkE,EAAMhC,IAAOlC,EAAEqB,KAAI,SAAAvC,GAAC,OAAGA,EAAE5B,WAC7B,OAAOkE,EAAElE,SAAWgH,KACnB,GAKH,MAAO,CAHa6oB,EAAS5rB,QAAO,SAAAC,GAAC,OAAGA,EAAEA,EAAElE,OAAO,GAAG6E,OAASmrB,EAASA,EAAShwB,OAAS,GAAG6B,QAAM,GAC/EguB,EAAS5rB,QAAO,SAAAC,GAAC,OAAGA,EAAEA,EAAElE,OAAO,GAAG6E,OAASorB,EAASA,EAASjwB,OAAS,GAAG6B,QAAM,OAIlG+J,KAAK,KAAKR,QAAQ,iBAAiB,GAAMK,KAAK,UAAW,GAUtDykB,GARcZ,EAAWnkB,OAAO,QACnCM,KAAK,IAAKsO,GACVtO,KAAK,QAAS,gBACdA,KAAK,OAAQ,QACbA,KAAK,eAAgB,GACrBJ,MAAM,SAAU,2BAGDikB,EAAW3jB,UAAU,cAAcnM,MAAK,SAAAoC,GAAC,OAAGA,KAAGgK,KAAK,KAAKR,QAAQ,YAAY,IAC7F8kB,EAAUzkB,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,0BAAsB8Q,EAAOhP,EAAEwD,YAA/B,WAC5B8qB,EAAUjsB,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAAc4E,OAAO,QAAQM,KAAK,QAAS,IAAIA,KAAK,UAAU,SAAC7J,GAClF,IAAIkM,EAAIlM,EAAEkE,WAAWhC,GAAOiE,OAAOY,OACnC,OAAOmF,EAAElM,EAAEkE,WAAWhC,GAAOoC,OAAOiB,WAAa2G,EAAElM,EAAEkE,WAAWhC,GAAOoC,OAAOe,cAC/EwE,KAAK,OAAQ,2BAA2BA,KAAK,KAAK,SAAC7J,EAAG9B,GAErD,OAAOgO,EADClM,EAAEkE,WAAWhC,GAAOiE,OAAOY,QAC1B/G,EAAEkE,WAAWhC,GAAOoC,OAAOe,cAGxCipB,EAAU/kB,OAAO,QAAQM,KAAK,QAAS,IAAIA,KAAK,SAAU,GAAGA,KAAK,KAAK,SAAC7J,EAAG9B,GACvE,OAAO8B,EAAEkE,WAAWhC,GAAOiE,OAAOY,OAAO/G,EAAEkE,WAAWhC,GAAOoC,OAAOC,SAAW,KAChFsF,KAAK,UAAW,IAEnBykB,EAAUjsB,QAAO,SAAC4B,EAAG/F,EAAGgD,GACtB,OAAOhD,IAAOgD,EAAE9C,OAAS,KACxBmL,OAAO,QAAQI,MAAK,SAAA3J,GAAC,OAAGA,EAAEiD,QAC1B4G,KAAK,OAAQ,0BACbA,KAAK,KAAK,SAAC7J,EAAG9B,GAEf,OAAQgO,EADAlM,EAAEkE,WAAWhC,GAAOiE,OAAOY,QACzB/G,EAAEkE,WAAWhC,GAAOoC,OAAOC,SAAW,KAC7CsF,KAAK,IAAK,GAAGJ,MAAM,YAAa,IAOvC,IAAI8kB,EAAYlB,EAAUtjB,UAAU,UAAUnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,EAAE8C,GAAI9C,EAAE+C,OAAKiH,KAAK,KAAKR,QAAQ,QAAQ,GAa3F8K,GAXaia,EAAUhlB,OAAO,QACjCM,KAAK,IAAKsO,GACVtO,KAAK,QAAS,cACdJ,MAAM,UAAU,SAACzJ,EAAG9B,GAAJ,OAASgvB,EAAUhvB,MAGPmE,QAAO,SAAAC,GAEpC,OADeA,EAAED,QAAO,SAAAnB,GAAC,OAAGqH,EAAMhG,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAAMC,QAAQhC,EAAE+B,OAAS,KACrD7E,OAAS,KAAIqL,MAAM,SAAU,WAAWA,MAAM,eAAgB,OAG/D8kB,EAAUxkB,UAAU,YAAYnM,MAAK,SAAAoC,GAAC,OAAGA,KAAGgK,KAAK,KAAKR,QAAQ,UAAU,IACvF8K,EAASzK,KAAK,aAAa,SAAC7J,EAAG9B,GAAJ,0BAAsB8Q,EAAOhP,EAAEwD,YAA/B,WAC3B8Q,EAASjS,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAAc4E,OAAO,QAC1CC,QAAQ,SAAS,GACjBK,KAAK,QAAS,IACdA,KAAK,UAAU,SAAC7J,GACb,IAAIkM,EAAIlM,EAAEkE,WAAWhC,GAAOiE,OAAOY,OACnC,OAAOmF,EAAElM,EAAEkE,WAAWhC,GAAOoC,OAAOiB,WAAa2G,EAAElM,EAAEkE,WAAWhC,GAAOoC,OAAOe,cAC/EwE,KAAK,OAAQ,2BACfA,KAAK,KAAK,SAAC7J,EAAG9B,GAEX,OAAOgO,EADClM,EAAEkE,WAAWhC,GAAOiE,OAAOY,QAC1B/G,EAAEkE,WAAWhC,GAAOoC,OAAOe,cAGtBiP,EAASjS,QAAO,SAAAC,GAChC,OAAOiG,EAAMhG,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QAAMC,QAAQZ,EAAEW,OAAS,KAC/C8G,UAAU,cAAcF,KAAK,OAAQ,WAExCyK,EAAS/K,OAAO,QAAQM,KAAK,QAAS,IAAIA,KAAK,SAAU,GAAGA,KAAK,KAAK,SAAC7J,EAAG9B,GACtE,OAAO8B,EAAEkE,WAAWhC,GAAOiE,OAAOY,OAAO/G,EAAEkE,WAAWhC,GAAOoC,OAAOC,SAAW,KAGnF8oB,EAAU9jB,OAAO,QAAQM,KAAK,SAAS,SAAC7J,EAAG9B,GACvC,OAAO8Q,EAAOhP,EAAEmD,OAAOK,eACtBqG,KAAK,SApLG,KAqLRA,KAAK,OAAQ,QAAQJ,MAAM,UAAW,IAC1B4jB,EAAU9jB,OAAO,KAAKC,QAAQ,UAAU,GAArD,IACIglB,EAASnB,EAAU9jB,OAAO,KAAKC,QAAQ,UAAU,GACrDglB,EAAOhwB,KAAK4E,IAAc4L,GAAQ4D,MAAM,KACxC4b,EAAO3kB,KAAK,YAAZ,uBAzLS,IAyLT,MAEJwjB,EAAUpjB,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GAE7B,IAAIysB,EAAW3tB,EAAE8C,GAAGP,KAAI,SAAArB,GAAC,OAAGA,EAAE+B,QAC1B2qB,EAAW5tB,EAAE+C,GAAGR,KAAI,SAAArB,GAAC,OAAGA,EAAE+B,QAE1B4qB,EADS,GAAI7tB,EAAE8C,GAAGT,QAAO,SAAAnB,GAAC,OAAc,IAAXA,EAAEyD,QAAepC,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,SAAO0S,OAAO3V,EAAE+C,GAAGV,QAAO,SAAAnB,GAAC,OAAc,IAAXA,EAAEyD,QAAepC,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,SAC9Fd,SAAQ,SAAArC,GAC3B,IAAIguB,EAAQC,GAAY,GAAG7qB,QAAQpD,GAEnC,OADSiuB,GAAY,GAAG1rB,QAAO,SAACC,EAAGlD,GAAJ,OAAUA,GAAM0uB,EAAQ,GAAQ1uB,GAAM0uB,EAAQ,QAI7EW,EAAa7N,GAAW,GAAGve,QAAO,SAAAC,GAAC,OAAGurB,EAAU3qB,QAAQZ,EAAEA,EAAElE,OAAQ,GAAG6E,OAAS,KAAGd,SAAQ,SAAArC,GAAC,OAAGA,EAAEyC,KAAI,SAAAD,GAAC,OAAGA,EAAEW,WAE3GkS,EAAY/R,IAAU,YAAY2G,UAAU,SAC5CqL,EAAahS,IAAU,YAAY2G,UAAU,SACjCoL,EAAS9S,QAAO,SAAAC,GAC5B,OAAOqrB,EAASzqB,QAAQZ,EAAE1E,KAAKqF,OAAS,KACzCuG,QAAQ,aAAa,GAER2L,EAAS9S,QAAO,SAAAC,GAC9B,OAAOsrB,EAAS1qB,QAAQZ,EAAE1E,KAAKqF,OAAS,KACzCuG,QAAQ,aAAa,GAEtB4L,EAAU/S,QAAO,SAAAC,GAAC,OAAGqrB,EAASzqB,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,aAAa,GAC9E4L,EAAU/S,QAAO,SAAAC,GAAC,OAAGsrB,EAAS1qB,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,aAAa,GAC9E2L,EAAS9S,QAAO,SAAAC,GAAC,OAAGmsB,EAAWvrB,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,kBAAkB,GAEpF2L,EAAS9S,QAAO,SAAAC,GAAC,OAAyC,IAArCmsB,EAAWvrB,QAAQZ,EAAE1E,KAAKqF,QAAsE,IAApD0qB,EAAShY,OAAOiY,GAAU1qB,QAAQZ,EAAE1E,KAAKqF,SAAeuG,QAAQ,aAAa,GAE9I4L,EAAU/S,QAAO,SAAAC,GAAC,OAAGmsB,EAAWvrB,QAAQZ,EAAE1E,KAAKqF,OAAS,KAAGuG,QAAQ,kBAAkB,GAErF4L,EAAU/S,QAAO,SAAAC,GAAC,OAAyC,IAArCmsB,EAAWvrB,QAAQZ,EAAE1E,KAAKqF,QAAsE,IAApD0qB,EAAShY,OAAOiY,GAAU1qB,QAAQZ,EAAE1E,KAAKqF,SAAeuG,QAAQ,aAAa,GAE3HmkB,EAASA,EAASvvB,OAAO,GAAIwvB,EAASA,EAASxvB,OAAO,GAE1E,OADAgF,IAAUlC,EAAEhD,IAAI6L,UAAU,kBAAkBF,KAAK,UAAW,GACrDzG,IAAU,GAAMoG,QAAQ,SAAS,MAE3CS,GAAG,cAAc,SAACjK,EAAG9B,EAAGgD,GAEvBkC,IAAUlC,EAAEhD,IAAI6L,UAAU,kBAAkBF,KAAK,UAAW,GAE1CzG,IAAU,YAAY2G,UAAU,SAC/CP,QAAQ,SAAS,GACjBA,QAAQ,kBAAkB,GAC1BA,QAAQ,aAAa,GACrBA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GACCpG,IAAU,YAAY2G,UAAU,SAChDP,QAAQ,SAAS,GACjBA,QAAQ,kBAAkB,GAC1BA,QAAQ,aAAa,GACrBA,QAAQ,OAAO,GACfA,QAAQ,OAAO,GAChB,OAAOpG,IAAUlC,EAAEhD,IAAIsL,QAAQ,SAAS,MAG5B6jB,EAAU9jB,OAAO,KAAKC,QAAQ,UAAU,GAE9CqC,MAAK,SAAC7L,EAAG9B,EAAGgD,GAClB,IAAIwO,EAAQ1P,EAAE8C,GAAG,GAAGoB,WAAWhC,GAAOiE,OAAOY,OAC7C3D,IAAUlC,EAAEhD,IAAIM,KAAK4E,IAAYsM,GAAOkD,MAAM,OAGlD,IAAI8b,EAASrB,EAAU9jB,OAAO,KAC7BM,KAAK,QAAS,sBAEjB6kB,EAAOnlB,OAAO,QACXM,KAAK,QAAS,cACdJ,MAAM,SAAU,SAChBA,MAAM,eAAgB,OACtBA,MAAM,UAAW,KAEnB,IAAIklB,EAAeD,EAAO3kB,UAAU,mBACnCnM,MAAK,SAACoC,EAAG9B,GAET,MAAO,CAAC8B,EAAE8C,GAAI9C,EAAE+C,OAChBiH,KAAK,KACLH,KAAK,QAAS,kBAEjB8kB,EAAaplB,OAAO,UACjBM,KAAK,IAAK,GACVJ,MAAM,UAAU,SAASzJ,GACxB,MAAO,SAERyJ,MAAM,OAAQ,QACdA,MAAM,eAAgB,OACtBA,MAAM,UAAW,KAEnBklB,EAAaplB,OAAO,QAAQM,KAAK,QAAS,SACxCA,KAAK,YAAa,mBAEpB8kB,EAAaplB,OAAO,QAAQM,KAAK,QAAS,WACxCA,KAAK,YAAa,mBAEtB6kB,EAAOnlB,OAAO,YACPM,KAAK,QA3RI,KA4RTA,KAAK,SA3RK,KA4RVA,KAAK,OAAQ,QACbA,KAAK,iBAAkB,OACvBI,GAAG,YAAY,WACd7G,IAAa,eACVqG,MAAM,UAAW,KACpBrG,IAAa,0BACVqG,MAAM,UAAW,KACpBrG,IAAa,wBACVqG,MAAM,UAAW,QAErBQ,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GACtBkC,IAAUlC,EAAEhD,GAAGqa,YAAYxO,UAAU,eAClCN,MAAM,UAAW,KAClBrG,IAAUlC,EAAEhD,GAAGqa,YAAYxO,UAAU,0BACpCN,MAAM,UAAW,KAClBrG,IAAUlC,EAAEhD,GAAGqa,YAAYxO,UAAU,wBACpCN,MAAM,UAAW,QAIrBQ,GAAG,aAAa,SAACmR,EAAKld,EAAGgD,GACxB,IAAI0tB,EAAQxrB,IAASlC,EAAEhD,IAEvBkF,IAAUlC,EAAEhD,GAAGqa,YAAY7M,OAAO,eAC/B7B,KAAK,KAAK,WACT,IAAI7J,EAAI,IAAM4uB,EAAM,GAAK,OAEzB,OADA5uB,GAAK,IAAM4uB,EAAM,GAAK,QAIxBxrB,IAAUlC,EAAEhD,GAAGqa,YAAYxO,UAAU,mBACpCF,KAAK,aAAa,SAAS7J,EAAGZ,EAAG6D,GAYhC,IAVA,IAAI4rB,EAAQ7f,EAAO4J,OAAOgW,EAAM,IAI5B3P,IAFM6P,EADG1rB,KAAY,SAASpD,GAAK,OAAOA,EAAEqD,cAAegI,OAC9CrL,EAAEsE,OAAQuqB,GAEhB3tB,EAAEhD,GAAGqa,WAAWA,WAAWwW,uBAAuB,eAEzDC,EAAY,EACZC,EAAMhQ,EAAK7f,GAAG8vB,iBACdnnB,EAAS,OAED,CACTA,EAAS3D,KAAK+qB,OAAOH,EAAYC,GAAO,GACxC,IAAIG,EAAMnQ,EAAK7f,GAAGiwB,iBAAiBtnB,GACpC,IAAKA,IAAWknB,GAAOlnB,IAAWinB,IAAcI,EAAI3c,IAAMmc,EAAM,GAC5D,MAEJ,GAAIQ,EAAI3c,EAAImc,EAAM,GAASK,EAAMlnB,MAC5B,MAAIqnB,EAAI3c,EAAImc,EAAM,IAClB,MADsBI,EAAYjnB,GAGzC,IAAImE,EAAIkP,EAAItY,GAAG,GAAGoB,WAAWhC,GAAOiE,OAAOY,OAgB3C,OAdA3D,IAAUH,EAAK7D,IAAIsM,OAAO,cACvB/B,KAAKuC,EAAE0M,OAAOwW,EAAIljB,GAAGojB,QAAQ,IAC7B7lB,MAAM,YAAa,IACnBI,KAAK,KAAK,WACP,OAAa,IAANzK,EAAU,IAAM,MAG7BgE,IAAUH,EAAK7D,IAAIsM,OAAO,gBACrB/B,KAAK3J,EAAEA,EAAE5B,OAAO,GAAG6E,MACnBwG,MAAM,YAAa,IACnBI,KAAK,KAAK,WACP,OAAa,IAANzK,EAAU,IAAM,MAGxB,aAAewvB,EAAM,GAAK,IAAMQ,EAAIljB,EAAG,UA5WtDqjB,CADA3C,EAAcA,EAAYvqB,QAAO,SAACC,EAAGpE,GAAJ,OAASA,EAAE,GAAM,KAC1BgE,GCnGrB,SAASsK,GAAexM,EAAGwK,GAE9B,IAAImR,EAAOvY,IAAU,SACjBxF,EAAO2O,KAGPpG,EAASqpB,GAAuB,GAEpC7T,EAAK5R,UAAU,KAAKoD,SAEX,cAANnN,GAA2B,OAANA,GACpBoD,IAAU,cAAcoG,QAAQ,UAAU,GAC1CoS,GAAuBhe,EAAM+d,EAAMxV,GACnCspB,SAASC,eAAe,WAAWC,UAAW,GACnC,iBAAN3vB,GACLoD,IAAU,cAAcoG,QAAQ,UAAU,GAC1CimB,SAASC,eAAe,WAAWC,UAAW,EAC3CnlB,EACC0G,EAAoByK,EAAMnR,GAE1BwG,EAAmBpT,EAAM+d,EAAMxV,EAAQ,UAEhC,cAANnG,GDxBN,SAAwBpC,GAC3B,IAAIgyB,EAAUxsB,IAAU,cAAcoG,QAAQ,UAAU,GACxDomB,EAAQ7lB,UAAU,KAAKoD,SAIvB,IAAI0iB,EAAW,CAAC,EAAG,EAAG,GAElBC,EAAeF,EAChBrmB,OAAO,OACPM,KAAK,QAAS,KACdA,KAAK,SAAU,KACfN,OAAO,KACPM,KAAK,YAAa,oBAEpBimB,EACAvmB,OAAO,aACPM,KAAK,QAAS,KACdA,KAAK,SAAU,KACfA,KAAK,KAAM,IACXA,KAAK,aAAc,6BAEpBimB,EAAavmB,OAAO,QAAQI,KAAK,YAAYE,KAAK,YAAa,IAAIA,KAAK,IAAK,IAAIA,KAAK,IAAK,IAC3FimB,EAAavmB,OAAO,QAAQI,KAAK,SAASE,KAAK,YAAa,IAAIA,KAAK,IAAK,IAAIA,KAAK,IAAK,IACxFimB,EAAavmB,OAAO,QAAQI,KAAK,aAAaE,KAAK,YAAa,IAAIA,KAAK,IAAK,KAAKA,KAAK,IAAK,IAI7FimB,EAAa/lB,UAAU,eAAenM,KAFzB,CAAC,WAAY,QAAS,cAEgBoM,KAAK,QAAQR,QAAQ,UAAU,GACjFG,MAAK,SAAA3J,GAAC,OAAGA,KACT6J,KAAK,IAAK,IACVA,KAAK,KAAK,SAAC7J,EAAG9B,GAAJ,OAAU,IAAK,IAAMA,KAEhC2xB,EAASlnB,SAAQ,SAACzD,EAAOhH,GACvB,IAAI6xB,EAASC,OAEV1qB,IAAI,GACJF,IAAI,GACJwM,KAAK,IACLrG,MAAM,KACN0kB,QAAQJ,EAAS3xB,IACjBgyB,cAAa,GACbve,KAAK,WACL1H,GAAG,OAAO,SAAA2D,GACViiB,EAAS3xB,GAAK0P,EACdue,GAAcnqB,EAAUpE,GAAOwF,IAAU,uBAAuBsI,OAAO,UAAU/B,OAAQkmB,MAG5FC,EACGvmB,OAAO,KACPM,KAAK,YAFR,oBAEkC,IAAK,IAAM3L,EAF7C,UAGGM,KAAKuxB,MC1BNI,CAAevyB,GD6BhB,SAAuBA,GAEtB,IAAIwuB,EAAQpqB,EAAUpE,GAElByuB,EAAU,CAAC,EAAG,EAAG,GAEjBvH,EAAU1hB,IAAWgpB,EAAM,GAAGtpB,GAAG,GAAGoB,YAC3B7B,QAAO,SAAAC,GAAC,MAAoB,eAAjBA,EAAE5B,MAAMmB,QACnBU,KAAI,SAAAzC,GACD,MAAO,CAAC,MAASA,EAAEkB,IAAK,MAASlB,EAAEkB,QAG/CovB,EAAOhtB,IAAU,uBAClB2G,UAAU,KAAKuE,QAAUrF,EAAS7F,IAAU,YAAa0hB,EAAxB,iBAA2CA,EAAQ,GAAG5iB,OAAS,aAAekB,IAAU,uBAAuB2G,UAAU,KAE7J3G,IAAU,uBAAuBsI,OAAO,UAAU7B,KAAK,QAASib,EAAQ,GAAG5iB,OAE3EkuB,EAAKnmB,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACpBirB,GAAcnqB,EAAUpE,GAAOoC,EAAEkC,MAAOmqB,GACxC5f,GAAWrJ,IAAU,YAAa,MAAM,EAAMpD,EAAEkC,OAChDkB,IAAU,uBAAuBsI,OAAO,UAAU7B,KAAK,QAAS7J,EAAEkC,OAClEkB,IAAU,uBAAuBsI,OAAO,UAAU/B,KAAlD,iBAAiE3J,EAAEkC,QACnEkB,IAAU,cAAcoG,QAAQ,QAAQ,MAG5C2iB,GAAc,GAAIC,GAAQtH,EAAQ,GAAG5iB,MAAOmqB,GCrD5CgE,CAAczyB,IACH,eAANoC,GACLoD,IAAU,cAAcoG,QAAQ,UAAU,GPoK3C,SAAP,6BOnKQ8mB,CAAgB3U,EAAMxV,IAEtBsB,QAAQC,MAAM,mB,sVHjCf,IAAI4J,GAAe,GAEnB,SAASif,GAAaC,EAAUrqB,GACnC,IAAIsqB,EAAcnf,GAAajP,QAAO,SAAAC,GAAC,MAAoB,gBAAjBA,EAAE8iB,cACxCsL,EAAcD,EAAYluB,KAAI,SAAAD,GAAC,OAAGA,EAAEkuB,YAAUttB,QAAQstB,GAE1D,GAAGE,GAAeD,EAAYryB,OAAS,EAUnC,IARA,IAEIuyB,EAAW,GAFgB,IAAhBD,EAAmB9P,GAAW,GAAK6P,EAAYC,EAAc,GAAG9yB,MAQvEM,GAJYkF,IAAU,YAEH2G,UAAU,eAAeoD,SAExCujB,EAAc,GAAGxyB,EAAIuyB,EAAYryB,OAAQF,IAAK,CAEtD,IAAI0yB,EAAMH,EAAYvyB,GAAG2yB,eACzB,GAAoC,eAAjCJ,EAAYvyB,GAAGqnB,cAA+B,CAC7C,IAAIuL,EAAcF,EAAID,EAAUF,EAAYvyB,GAAGyrB,eAAgB8G,EAAYvyB,GAAG4sB,gBAAiB2F,EAAYvyB,GAAG6sB,gBAC9G0F,EAAYvyB,GAAGN,KAAf,GAA0BkzB,GAC1BL,EAAYvyB,GAAGsyB,SAAW,KAAMtyB,EAEhCmnB,GAAaoL,EAAYvyB,GAAIiI,GAC7BwqB,EAAWG,MACV,CACD,IAAIA,EAAcF,EAAID,EAAUF,EAAYvyB,GAAGyrB,eAAgB8G,EAAYvyB,GAAG8rB,UAAWyG,EAAYvyB,GAAGgsB,SACxGuG,EAAYvyB,GAAGN,KAAf,GAA0BkzB,GAC1BL,EAAYvyB,GAAGsyB,SAAW,KAAMtyB,EAEhCmnB,GAAaoL,EAAYvyB,GAAIiI,GAC7BwqB,EAAWG,GAIvB,IAAIC,EAAkBzf,GAAajP,QAAO,SAAAC,GAAC,OAAGA,EAAEkuB,UAAYA,KAE5Dlf,GAAeyf,EAGZ,SAASzL,GAAUF,EAAY4L,EAASR,EAAUS,EAAaC,EAASrZ,EAASsZ,GACpF,IAAI/G,EAAW,CAAC,WAAchF,EAAY,cAAiB4L,EAAS,SAAYR,EAAU,eAAiBS,EAAa,cAAeC,EAAS,KAAQrZ,GAOxJ,OANY,MAATsZ,GACCA,EAAMxoB,SAAQ,SAAAyoB,GACVhH,EAASgH,EAAG,IAAMA,EAAG,MAG7B9f,GAAa5S,KAAK0rB,GACXA,EAGJ,SAAS7d,KAEZ,OADW+E,GAAalT,OAAS,EAAIkT,GAAaA,GAAalT,OAAS,GAAGR,KAAOgjB,GAAW,GA8BjG,SAASyE,GAAaznB,EAAMuI,GAExB,IAAIkrB,EAAgBjuB,IAAU,YAE9B,GAA0B,eAAvBxF,EAAK2nB,cAA+B,CAEnC,IAAI+L,EAAWluB,IAAU,OACrBsG,EAAS2nB,EAAc9nB,OAAO,UAAUC,QAAQ,2BAA2B,GAC/EpG,IAAUsG,GAAQ0P,MAAMxb,GACb8L,EAAOH,OAAO,QAAQC,QAAQ,qBAAqB,GACzDG,KAAK/L,EAAKA,KAAKQ,QACRsL,EAAOH,OAAO,MAAMI,KAAK/L,EAAK+rB,eAAiB,gBAAiB2H,EAAS1zB,EAAKktB,gBAAgB,IAAM,IAAMwG,EAAS1zB,EAAKktB,gBAAgB,IAAM,cAAgBwG,EAAS1zB,EAAKmtB,eAAe,IAAM,IAAMuG,EAAS1zB,EAAKmtB,eAAe,KAC9NxhB,OAAO,KAAKC,QAAQ,sBAAsB,GACtDS,GAAG,SAAS,WACGqH,GAAajP,QAAO,SAAAC,GAAC,MAAoB,gBAAjBA,EAAE8iB,cAA8B/iB,QAAO,SAAAC,GAAC,OAAG1E,EAAK2T,WAAajP,EAAEiP,aAExGgf,GAAa3yB,EAAK4yB,SAAUrqB,GAC5BqG,GAAe,gBACfpJ,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DpG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DE,EAAOyD,iBAGT,GAA0B,aAAvBvP,EAAK2nB,cAA6B,CAEvC,IAAI7b,EAAS2nB,EAAc9nB,OAAO,UAAUC,QAAQ,2BAA2B,GACpEE,EAAOH,OAAO,QAAQC,QAAQ,qBAAqB,GACzDG,KAAK/L,EAAKA,KAAKQ,QACpBsL,EAAOH,OAAO,MAAMI,KAAK/L,EAAKsJ,MAAM,IACpCwC,EAAOH,OAAO,KAAKC,QAAQ,sBAAsB,GACjDE,EAAOH,OAAO,MAAMI,KAAK/L,EAAKsJ,MAAM,GAAK,MAE7BwC,EAAOH,OAAO,KAAKC,QAAQ,sBAAsB,GACvDS,GAAG,SAAS,WACdsmB,GAAa3yB,EAAK4yB,SAAUrqB,GAC5BqG,GAAe,gBACfpJ,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DpG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DE,EAAOyD,iBAGT,GAA0B,WAAvBvP,EAAK2nB,cAA2B,CACrC,IAAI7b,EAAS2nB,EAAc9nB,OAAO,UAAUC,QAAQ,2BAA2B,GACpEE,EAAOH,OAAO,QAAQC,QAAQ,qBAAqB,GACzDG,KAAK/L,EAAKA,KAAKQ,QACpBsL,EAAOH,OAAO,MAAMI,KAAK,eAAiB/L,EAAK2zB,QAEnC7nB,EAAOH,OAAO,KAAKC,QAAQ,sBAAsB,GACvDS,GAAG,SAAS,WACdsmB,GAAa3yB,EAAK4yB,SAAUrqB,GAC5BqG,GAAe,gBACfpJ,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DpG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DE,EAAOyD,aAgKZ,SAASyX,GAAW4M,EAAcrrB,GAErC,IAAIvI,EAAO2O,KAGP7J,GAFc4O,GAAajP,QAAO,SAAAC,GAAC,MAAoB,gBAAjBA,EAAE8iB,cAEjCxnB,EAAKyE,QAAO,SAAAD,GACnB,OAAOA,EAAKG,KAAI,SAAAU,GAAI,OAAIA,EAAKA,QAAMC,QAAQsuB,IAAiB,MAOhEnM,GADeC,GAAU,cAAe,SAH5B,KAAKhU,GAAajP,QAAO,SAAAC,GAAC,MAAuB,WAApBA,EAAEijB,iBAA4BnnB,OAGdwmB,GAAjC,GAAiDhnB,GAAjD,GAA4D8E,GAAO,CAAC,CAAC,SAAU8uB,KAChFrrB,GACvBqG,GAAe,gBAGhB,IAAI4I,EAAahS,IAAU,YAAY2G,UAAU,SAC7CoL,EAAY/R,IAAU,YAAY2G,UAAU,SAE5Cyb,EAAW9iB,EAAKP,SAAQ,SAAAC,GAAI,OAAGA,EAAKG,KAAI,SAAAU,GAAI,OAAIA,EAAKA,WAEzDG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAC1DpG,IAAa,mBAAmBoG,QAAQ,kBAAkB,GAEvC4L,EAAU/S,QAAO,SAAAC,GAAC,OAAsC,IAAnCkjB,EAAStiB,QAAQZ,EAAE1E,KAAKqF,SACnDuG,QAAQ,kBAAkB,GAEpB2L,EAAS9S,QAAO,SAAAC,GAAC,OAAsC,IAAnCkjB,EAAStiB,QAAQZ,EAAE1E,KAAKqF,SAClDuG,QAAQ,kBAAkB,GAsC1C,SAASyhB,GAAiBrtB,EAAM+rB,EAAgB8H,EAAWC,GAEvD,OAAO9zB,EAAKyE,QAAO,SAAAD,GASf,OAAuC,IARrBA,EAAKG,KAAI,SAAAU,GACvB,IAAI0uB,EAAO1uB,EAAKiB,WAAWylB,GAAgBplB,QAC3C,OAAgB,GAAbtB,EAAK0B,KACGgtB,EAAOD,EAAS,IAAMC,EAAOD,EAAS,GAEtCC,EAAOF,EAAU,IAAME,EAAOF,EAAU,MAGpCvuB,SAAQ,MAGnC,SAASinB,GAAevsB,EAAM+rB,EAAgBK,EAAWE,GACrD,GAAqB/kB,MAAlBwkB,EACC,OAAO/rB,EAAKyE,QAAO,SAAAD,GACf,IAAIwvB,EAAaxvB,EAAKC,QAAO,SAAAC,GAAC,OAAa,GAAVA,EAAEqC,QAAcpC,KAAI,SAAAU,GACjD,IAAIkE,EAASlE,EAAKiB,WAAWylB,GAAgBxiB,OAC7C,MAAiB,QAAd6iB,GAGQ7iB,EAAO9E,QAAO,SAAAmF,GAAE,OAAGA,EAAGN,QAAU8iB,KAAW5rB,OAAS,GAAK+I,EAAO9E,QAAO,SAAAmF,GAAE,OAAGA,EAAGN,QAAU8iB,KAAW,GAAGzlB,QAAU,OAG5HstB,EAAYzvB,EAAKC,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,QAAepC,KAAI,SAAAU,GACrD,IAAI0W,EAAM1W,EAAKiB,WAAWylB,GAAgBviB,SAC1C,MAAe,QAAZ8iB,GAGQvQ,IAAQuQ,KAGnB,OAAO0H,EAAW1uB,SAAQ,IAAS,GAAK2uB,EAAU3uB,SAAQ,IAAS,KAmG/E,SAASumB,GAAYqI,EAAa7rB,EAAM8rB,EAAUjrB,GAE9C,IAAIkrB,EAAkBF,EAAYvoB,OAAO,OAAOC,QAAQ,YAAY,GACvDwoB,EAAgBzoB,OAAO,MAAMI,KAAK7C,GAiB/C,OAdYkrB,EACXzoB,OAAO,UACPM,KAAK,KAAMkoB,GAAUloB,KAAK,QAAS,OAEbE,UAAU,UAChCnM,KAAKqI,GAAM+D,KAAK,UAETL,MAAK,SAAA3J,GAAC,OAAGA,KAAG6J,KAAK,SAAS,SAAA7J,GAAC,OAAGA,KAEtCoD,IAAU,IAAI2uB,GAAU9nB,GAAG,UAAU,SAASjK,GAC3C,IAAI2pB,EAAiBvmB,IAAUoK,MAAMpM,SAAS,SAC9CgC,IAAUoK,MAAM3D,KAAK,QAAS8f,MAG1BvmB,IAAU,IAAK2uB,GI5fnB,SAASE,GAAmBpsB,EAAOmM,GAGtC,OVLG,SAASkgB,EAAUjvB,EAAM2E,GAG5B,OAFA3E,EAAK6F,SAAWlB,EAAUvF,QAAO,SAAAC,GAAC,OAAGR,OAAOQ,EAAE6vB,MAAQrwB,OAAOmB,EAAKA,SAClEA,EAAKhD,KAAO6B,OAAOmB,EAAKA,MACrBA,EAAK6F,SAAS1K,OAAS,GACtB6E,EAAK6F,SAASH,SAAQ,SAAA5I,GAAC,OAAGmyB,EAAUnyB,EAAG6H,MAIpC3E,GAFIA,EUFMivB,CADNrsB,EAAM,GAAG,GACamM,GAwD9B,SAASogB,GAAkBnJ,EAAaljB,EAAkB8H,GAY7D,IAAIwkB,GATJxkB,EAAUA,EAAQtE,OAAO,OAAOC,QAAQ,eAAe,IAS1BD,OAAO,UAAUI,KAAK,gBAAgBE,KAAK,KAAM,UAAUL,QAAQ,6BAA6B,GAE7H6oB,EAAepoB,GAAG,SAAS,WACxB4D,EAAQnC,OAAO,OAAOyB,SACO,iBAA1BklB,EAAe1oB,QACb8C,GAAWoB,EAAS,MAAM,GAAM,GAChCwkB,EAAe1oB,KAAK,kBAEpB8C,GAAWoB,EAAS,MAAM,GAAO,GACjCwkB,EAAe1oB,KAAK,oBAI5B0oB,EAAe5oB,MAAM,UAAW,GAAGA,MAAM,QAAS,GAAGA,MAAM,UAAW,GAAGA,MAAM,SAAU,GAEzF,IAAIN,EAAc,CAAC,CAAC,MAAQ,SAE5BpD,EAAiBxD,KAAI,SAAAzC,GAAC,OAAGqJ,EAAYzK,KAAKoB,MAExBmJ,EAAS4E,EAAS1E,EAAV,iBAAwC,yBACtDc,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACb,aAAXlB,EAAE6B,MACD4K,GAAWoB,EAAS7N,GAAG,GAAM,GAC7BoD,IAAU,mCAAmCsI,OAAO,UAAU/B,KAA9D,qBAAiF3J,EAAEkC,SACnE,eAAXlC,EAAE6B,MACP4K,GAAWoB,EAAS7N,GAAG,GAAM,GAC7BoD,IAAU,mCAAmCsI,OAAO,UAAU/B,KAA9D,qBAAiF3J,EAAEkC,UAEnFuK,GAAWoB,EAAS,MAAM,GAAO,GACjCzK,IAAU,mCAAmCsI,OAAO,UAAU/B,KAA9D,mBAELkE,EAAQnC,OAAO,0BAA0BlC,QAAQ,QAAQ,MAI1D,IAAI8oB,EAAkBlvB,IAAU,YAAYsI,OAAO,gBAAgBnC,OAAO,UAAUI,KAAK,kBACzF2oB,EAAgB9oB,QAAQ,6BAA6B,GACrD8oB,EAAgBroB,GAAG,SAAS,WACxB,GAA8B,mBAA3BqoB,EAAgB3oB,OAA4B,CAC7C,GAAGvG,IAAU,uBAAuBsI,OAAO,UAAU4C,QAAQ,CACzD,IAAI8hB,EAAOnnB,EAAS7F,IAAU,YAAa+F,EAAxB,iBAA+CA,EAAY,GAAGjH,OAAS,aAC1FkB,IAAU,uBAAuBsI,OAAO,UAAU7B,KAAK,QAASV,EAAY,GAAGjH,OAC/EkB,IAAU,mCAAmCsI,OAAO,UAAU/B,KAA9D,kBACAymB,EAAKnmB,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACoD,eAArEkC,IAAU,yBAAyBsI,OAAO,UAAUzI,OAAOvC,OAC1DyrB,GAAcnqB,EAAUinB,GAAcjpB,EAAEkC,OAE5CuK,GAAWrJ,IAAU,YAAa,MAAM,EAAMpD,EAAEkC,OAChDkB,IAAU,uBAAuBsI,OAAO,UAAU/B,KAAlD,iBAAiE3J,EAAEkC,QACnEkB,IAAU,uBAAuBsI,OAAO,UAAU7B,KAAK,SACvDzG,IAAU,uBAAuBsI,OAAO,UAAU7B,KAAK,QAAS7J,EAAEkC,OAClEkB,IAAU,cAAcoG,QAAQ,QAAQ,MAG5CiD,GAAWrJ,IAAU,YAAa,MAAM,EAAMA,IAAU,uBAAuBsI,OAAO,UAAU7B,KAAK,eAGrG4C,GAAWrJ,IAAU,YAAa,MAAM,EAAMA,IAAU,uBAAuBsI,OAAO,UAAU7B,KAAK,UAEvGyoB,EAAgB3oB,KAAK,uBAGvB8C,GAAWrJ,IAAU,YAAa,MAAM,GAAO,GAC/CkvB,EAAgB3oB,KAAK,qBAsBjC,SAAS0G,GAAYrQ,GACdA,EAAE8I,WACD9I,EAAEuyB,UAAYvyB,EAAE8I,SAChB9I,EAAEuyB,UAAU5pB,QAAQ0H,IACpBrQ,EAAE8I,SAAW,MAmCd,SAAS6F,GAAe1L,EAAMqM,GACjC,QAAsBnK,IAAlBlC,EAAK6F,UAA4C,OAAlB7F,EAAK6F,SAIpC,OAFAwG,GAAsB,IACtBrM,EAAKqM,SAAWA,EACTA,EAEP,IAAIkjB,EAAgB,GAOpB,OANAvvB,EAAK6F,SAASH,SAAQ,SAACmG,GACnBQ,EAAWX,GAAeG,EAAOQ,GACjCkjB,EAAc9zB,KAAK4Q,MAEvBrM,EAAK6G,QAAU0oB,EACfvvB,EAAKqM,SAAWlM,IAAOovB,GAChBljB,EAIR,SAASrB,GAAiBwkB,EAAM70B,GACnCA,EAAKyR,SAAWzR,EAAKyF,WAAaovB,EAC/B70B,EAAKkL,UACJlL,EAAKkL,SAASH,SAAQ,SAAA6V,GAClBvQ,GAAiBrQ,EAAKyR,SAAUmP,MAKrC,SAAS/R,GAAWoB,EAAS3H,EAAKwsB,EAAYC,GAEjD,IAAM7kB,EAAc,CAChB1C,OAAS,CAACtH,IAAK,GAAIuH,MAAO,GAAItH,OAAQ,GAAIuH,KAAM,IAChDC,MAAQ,IACRC,OAAS,IACTC,aAAc,KAMdsC,EAAU3K,MACb4K,KAAK,CAACF,EAAWtC,OAAQsC,EAAWvC,QAErC0C,GAAiB,EAAGC,GAAW,IAG/B,IAAIC,EAAY/K,IAAa8K,GAAW,IAGxCC,EAAYJ,EAAQI,GAEpB,IAAIykB,EAAcxvB,IAAU,wBAAwByG,KAAK,SACrDyG,EAAmD,iBAAtClN,IAAU,iBAAiBuG,OAExCyE,EAAcP,EAAQnC,OAAO,OAC7B2C,EAAUD,EAAYE,QAAUT,EAAQtE,OAAO,OAAS6E,EAC5DC,EAAQ7E,QAAQ,YAAY,GAC5B6E,EAAQxE,KAAK,QAASiE,EAAWvC,MAAQuC,EAAW1C,OAAOE,KAAOwC,EAAW1C,OAAOC,OACnFxB,KAAK,SAAUiE,EAAWtC,OAASsC,EAAW1C,OAAOtH,IAAMgK,EAAW1C,OAAOrH,QAG9E,IAAIwK,EAAQF,EAAQ3C,OAAO,YACvB8C,EAAID,EAAMD,QAAUD,EAAQ9E,OAAO,KAAKC,QAAQ,UAAU,GAAQ+E,GACtEC,EAAE3E,KAAK,YACL,aAAeiE,EAAW1C,OAAOE,KAAO,IAAMwC,EAAW1C,OAAOtH,IAAM,KAErD,cAAhB8uB,IAA8C,IAAfF,GAC1BvoB,EAAkB/L,OAAS,GAAgE,oBAAzDgM,EAAkBA,EAAkBhM,OAAS,GAAG8D,MAElF2wB,GAnGZ,SAAsBC,GAIlB,OAFaC,EAAUD,EAAU,IAIjC,SAASjkB,EAAS5L,GACd,IAAIuM,EAASujB,EAAU9vB,EAAM,IAE7B,IAAI+vB,EAAM,IAAIld,IAAItG,EAAOjN,KAAI,SAAAzC,GAAC,OAAGA,EAAElC,KAAKsG,WAAW+uB,MAAM3uB,OAAO2uB,UAChE,KAAGD,EAAIhlB,KAAO,GAMV,OAHA/K,EAAKiN,aAAc,EACnBjN,EAAKoJ,MAAQzI,MAAMiS,KAAKmd,GAAK,GAC7B3iB,GAAYpN,GACLA,EALPA,EAAK6F,SAASvG,KAAI,SAAArB,GAAC,OAAG2N,EAAS3N,MAOnC,OAAO+B,EAdJ4L,CAASikB,GAiBhB,SAASC,EAAU9vB,EAAM2L,GAMrB,OALoBzJ,MAAjBlC,EAAK6F,SACJ7F,EAAK6F,SAASvG,KAAI,SAAArB,GAAC,OAAG6xB,EAAU7xB,EAAG0N,MAEnCA,EAAMlQ,KAAKuE,GAER2L,GAuEYskB,CAAa/kB,GACPL,EAAYO,EAASG,EAAGtI,EAAKoK,EAAYoiB,GAE9DG,GAAW1kB,EAAWL,EAAYO,EAASG,EAAGtI,EAAKoK,EAAYqiB,EAAOD,GAK1EG,GAAW1kB,EAAWL,EAAYO,EAASG,EAAGtI,EAAKoK,EAAYqiB,EAAOD,GAuBvE,SAASG,GAAW1kB,EAAWL,EAAYO,EAASG,EAAGE,EAAUtQ,EAAQu0B,EAAOD,GAEnFtvB,IAAU,iBAAiB+J,SAC3B/J,IAAU,iBAAiB+J,SAE3BwB,GAAeR,EAAW,GAI1B,IAAIiD,EA1BD,SAAmBnO,EAAM2L,GAa5B,OAXA,SAASC,EAAS3N,GACG,MAAdA,EAAE4H,SACD5H,EAAE4H,SAASH,SAAQ,SAAAmG,GACfD,EAASC,MAGbF,EAAMlQ,KAAKwC,GAGnB2N,CAAS5L,GAEF2L,EAaWG,CAAUZ,EAAW,IACnCa,EAAS5L,MAAiBoC,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAGuK,EAAWvC,QAAQ9F,OAAM,GAC3FsB,EAAS3D,MAAiBG,MAAM,CAACuK,EAAWtC,OAAQ,IAAIhG,OAAO,CAAC,EAAG,IAEpEpH,IACCoQ,EAAE3E,KAAK,YAAa,sBACpBwE,EAAQxE,KAAK,SAAU,KACvB9C,EAAOxD,MAAM,CAAC,IAAK,IAAIiC,OAAO,CAAC,EAAG4L,EAAYhT,SAC9C4Q,EAAOzL,MAAM,CAAC,EAAGuK,EAAWvC,MAAQ,MAErConB,IACCtkB,EAAQxE,KAAK,SAAU,KACvBmF,EAAOxJ,OAAO2I,EAAUvQ,KAAKsG,WAAWyuB,GAAOxsB,OAAOY,OAAOvB,UAC7DuB,EAAOvB,OAAO,CAAC,EAAGzD,EAAc,KAAKwB,MAAM,CAAC,EAAG,OAInD,IAAI0L,EAAOT,EAAEzE,UAAU,SACtBnM,KAAMuQ,EAAUe,cAAczN,MAAM,IACpCuI,KAAK,QACLH,KAAK,QAAS,QAgBf,GAdAoF,EAAKE,aACJC,SAAS,KACTvF,KAAK,KAAK,SAAS7J,GAChB,OAAI5B,QAAoB+G,IAAVwtB,GAAyBv0B,IAAoB,IAAVu0B,EACvC,IAAM3jB,EAAOhP,EAAEpC,KAAKyR,UAAY,IAAMtI,EAAO/G,EAAEsP,UACpD,KAAON,EAAOhP,EAAEpC,KAAKyR,UAAYL,EAAOhP,EAAEuP,OAAO3R,KAAKyR,WAAa,EAAI,IAAMtI,EAAO/G,EAAEsP,UACtF,IAAON,EAAOhP,EAAEuP,OAAO3R,KAAKyR,UAAa,IAAMtI,EAAO/G,EAAEsP,UACxD,IAAMN,EAAOhP,EAAEuP,OAAO3R,KAAKyR,UAAY,IAAMtI,EAAO/G,EAAEuP,OAAOD,UAEvD,IAAMN,EAAOhP,EAAEpC,KAAKsG,WAAWyuB,GAAOruB,OAAOC,SAAW,IAAMwC,EAAO/G,EAAEpC,KAAKyR,UACjF,IAAML,EAAOhP,EAAEuP,OAAO3R,KAAKsG,WAAWyuB,GAAOruB,OAAOC,SAAW,IAAMwC,EAAO/G,EAAEuP,OAAO3R,KAAKyR,aAIjGsjB,EAAM,CAEL1jB,EAAKxF,MAAM,UAAW,IACtB+E,EAAE3E,KAAK,YAAa,qBAEpB,IAAI4I,EAAIzD,EAAOxJ,OAAO2I,EAAUvQ,KAAKsG,WAAWyuB,GAAOxsB,OAAOY,OAAOvB,UAAUjC,MAAM,CAAC,EAAIuK,EAAWvC,MAAM,KACvGyY,EAAQ5gB,IAAcqP,GAC1BjE,EAAEjF,OAAO,KAAKC,QAAQ,gBAAgB,GAAMhL,KAAKwlB,GAAOna,KAAK,YAAa,qBAAqB6B,OAAO,QAAQ7B,KAAK,eAAgB,GAEnI,IAAIqC,EAAI9I,MAAiBoC,OAAO,CAAC,EAAEzD,EAAc,KAAKwB,MAAM,CAAC,EAAGuK,EAAWtC,OAAQ,KAC/E2nB,EAAQ/vB,IAAY8I,GACxBsC,EAAEjF,OAAO,KAAKC,QAAQ,gBAAgB,GAAMhL,KAAK20B,GAAOtpB,KAAK,YAAa,mBAAmB6B,OAAO,QAAQ7B,KAAK,eAAgB,GAIrI,IAAI5G,EAAOuL,EAAEzE,UAAU,SACtBnM,KAAKuQ,EAAUe,eAAe,SAAAlP,GAAC,OAAIA,EAAEpC,KAAKqF,QAC1C+G,KAAK,KACLH,KAAK,SAAS,SAAS7J,GACxB,MAAO,QACNA,EAAE8I,SAAW,kBAAoB,kBAiBlC,GAdA7F,EAAK8G,UAAU,UAAUnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,MAAIgK,KAAK,UACzCH,KAAK,IAAK,GAEb5G,EAAKkM,aACJC,SAAS,KACTvF,KAAK,aAAa,SAAS7J,GACxB,OAAG5B,QAAoB+G,IAAVwtB,IAAiC,IAAVA,EACzB,aAAe3jB,EAAOhP,EAAEpC,KAAKyR,UAAY,IAAMtI,EAAO/G,EAAEsP,UAAY,IAGrE,cAAgBN,EAAOhP,EAAEpC,KAAKsG,WAAWyuB,GAAOruB,OAAOC,SAAW,GAAK,IAAMwC,EAAO/G,EAAEpC,KAAKyR,UAAY,OAItG,MAAZX,EAAiB,CAChB,IAAIc,EAASvM,EAAKZ,QAAO,SAAAnB,GAAC,OAAmB,IAAhBA,EAAEtD,KAAK+G,QAChC8K,EAAYxM,EAAKZ,QAAO,SAAAnB,GAAC,OAAkB,GAAfA,EAAEtD,KAAK+G,QAEvC,GAAqB,aAAlB+J,EAAS7M,KACR6M,EAASrH,YAAYsB,SAAQ,SAAAzC,GACdsJ,EAAOnN,QAAO,SAAAC,GACrB,OAAO4D,EAAIgB,MAAMI,SAAShF,EAAE1E,KAAKsG,WAAWwK,EAASxM,OAAOiF,OAAOD,UACpEwE,OAAO,UACL7B,KAAK,OAAQ3D,EAAIhB,OACtBuK,EAAU1F,UAAU,UAAUF,KAAK,OAAQ,eAE9C,CACD,IAAI6F,EAAQhB,EAAS3H,OACrB2I,EAAMnM,MAAM,CAAC,OAAQ,YACrBiM,EAAO9D,OAAO,UAAU7B,KAAK,QAAQ,SAAC7J,EAAG9B,GACrC,OAAOwR,EAAM1P,EAAEpC,KAAKsG,WAAWwK,EAASxM,OAAOoC,OAAOC,kBAI9DtB,EAAK8G,UAAU,UAAUF,KAAK,OAAQ,QAG1C5G,EAAKgH,GAAG,aAAa,SAACjK,EAAG9B,EAAGgD,GACxB,IAAI2E,EAAQzC,IAAU,mBAAmB2G,UAAU,UAWnD,GAVa3G,IAAU,sBAAsB2G,UAAU,kBAChD1H,QAAO,SAAAC,GAAC,OAAGA,EAAEW,OAASjD,EAAEpC,KAAKqF,QAAMuG,QAAQ,YAAY,GAE1C3D,EAAMxD,QAAO,SAAAD,GAE7B,OADYA,EAAKG,KAAI,SAAAzC,GAAC,OAAGA,EAAEmD,QACdC,QAAQlD,EAAEpC,KAAKqF,OAAS,KACtCuG,QAAQ,SAAS,GACNO,UAAU,KAAK1H,QAAO,SAAAmM,GAAC,OAAGA,EAAEvL,OAASjD,EAAEpC,KAAKqF,QAAMuG,QAAQ,YAAY,GACpFpG,IAAUlC,EAAEhD,IAAIsL,QAAQ,mBAAmB,GAExCxJ,EAAEpC,KAAKkJ,MAAM,CACZ,IAAI6I,EAAOvM,IAAU,YACrBuM,EAAKR,aACJC,SAAS,KACT3F,MAAM,UAAW,IAElBkG,EAAKC,KAAL,UAAa5P,EAAEpC,KAAKkJ,MAAM+I,OAAO,GAAGC,cAAgB9P,EAAEpC,KAAKkJ,MAAMrF,MAAM,KACtEgI,MAAM,OAASrG,IAAS2M,MAAQ,GAAM,MACtCtG,MAAM,MAAQrG,IAAS4M,MAAQ,GAAM,MACtCL,EAAKlG,MAAM,SAAU,YAG1BQ,GAAG,YAAY,SAACjK,EAAG9B,EAAGgD,GACrBkC,IAAa,gBAAgBoG,QAAQ,SAAS,GAC9CpG,IAAa,cAAcoG,QAAQ,YAAY,GAC/CpG,IAAUlC,EAAEhD,IAAIsL,QAAQ,mBAAmB,GAEhCpG,IAAU,YAChB+L,aACFC,SAAS,KACT3F,MAAM,UAAW,MAEXxG,EAAKZ,QAAO,SAAAC,GAAC,OAA6B,GAA1BA,EAAE1E,KAAKkL,SAAS1K,UAE7C6E,EAAK8G,UAAU,QAAQoD,SACvBlK,EAAK8G,UAAU,aAAaoD,SAE5B,IAAI8C,EAAchN,EAAKZ,QAAO,SAAAnB,GAAC,OAAqB,IAAlBA,EAAEgP,eAiEpC,OAhEAD,EAAYpE,MAAK,SAAC5H,EAAG/F,EAAGgD,GACpB,GAAkB,OAAf+C,EAAE6E,SAAkB,CACnB,IAAIqH,EAAW/M,IAAUlC,EAAEhD,IAAIqL,OAAO,QAAQC,QAAQ,YAAY,GAAMK,KAAK,IAAKzG,MAAYvB,KAAKuB,KAAmB4K,KAAK,QAC3HmC,EAAStG,KAAK,YAAd,4CACAsG,EAAStG,KAAK,OAAQ,QAAQJ,MAAM,UAAW,IACpCrG,IAAUlC,EAAEhD,IAAI6L,UAAU,QAAQnM,MAAK,SAAAoC,GAAC,MAAG,CAACA,MAAIgK,KAAK,QAAQL,KAAK1F,EAAEoI,OAC1ExC,KAAK,YAAa,wBAG/BoG,EAAYvE,OAAO,UAAU7B,KAAK,OAAQ,OAAOA,KAAK,IAAK,KAC3DoG,EAAYhG,GAAG,SAAS,SAACjK,EAAG9B,EAAGgD,GACV,MAAdlB,EAAE8I,SA7Sb,SAASsH,EAAcpQ,GACnBA,EAAE8I,SAAW9I,EAAEuyB,UACfvyB,EAAEuyB,UAAY,KACXvyB,EAAE8I,UACD9I,EAAE8I,SAASvG,KAAI,SAAAxC,GAAC,OAAGqQ,EAAcrQ,MA0S7BqQ,CAAcpQ,GAEdqQ,GAAYrQ,GAEhB,IAAIsQ,EAAmD,iBAAtClN,IAAU,iBAAiBuG,OAC5CkpB,GAAW1kB,EAAWL,EAAYO,EAASG,EAAGE,EAAU4B,EAAYoiB,MAIxEzvB,EAAKiH,QACLjH,EAAK8G,UAAU,UAAUG,QA0ClBjH,E,6eCxfJ,IAAM2d,GAAa,GACbwS,GAAgB,GAChB7O,IAAY,EACZrW,GAAa,GACb6f,GAAc,GACdyB,GAAyB,GAEzBxqB,GAAc,CACvB,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,WACD,CAAC,YAGQquB,GAAgB,CAKzB,CAACnxB,MAAO,cAAeL,KAAM,cAC7B,CAACK,MAAM,aAAcL,KAAK,cAC1B,CAACK,MAAM,SAAUL,KAAK,cACtB,CAACK,MAAM,QAASL,KAAK,YACrB,CAACK,MAAM,QAASL,KAAM,cACtB,CAACK,MAAM,QAASL,KAAM,cACtB,CAACK,MAAM,WAAYL,KAAM,cACzB,CAACK,MAAM,QAASL,KAAM,YACtB,CAACK,MAAM,cAAeL,KAAM,cAC5B,CAACK,MAAM,aAAcL,KAAM,cAC3B,CAACK,MAAM,aAAcL,KAAM,cAC3B,CAACK,MAAM,YAAaL,KAAM,cAC1B,CAACK,MAAM,UAAWL,KAAM,cACxB,CAACK,MAAM,kBAAmBL,KAAK,YAC/B,CAACK,MAAM,YAAaL,KAAM,cAC1B,CAACK,MAAM,cAAeL,KAAM,cAC5B,CAACK,MAAM,OAAQL,KAAM,cACrB,CAACK,MAAM,YAAaL,KAAM,cAC1B,CAACK,MAAM,UAAWL,KAAM,cACxB,CAACK,MAAM,OAAQL,KAAM,cACrB,CAACK,MAAM,WAAYL,KAAM,cACzB,CAACK,MAAM,SAAUL,KAAM,cACvB,CAACK,MAAM,QAASL,KAAM,cACtB,CAACK,MAAM,MAAOL,KAAM,cACpB,CAACK,MAAM,OAAQL,KAAM,cACrB,CAACK,MAAM,SAAUL,KAAM,cACvB,CAACK,MAAM,QAASL,KAAM,eAGtBiT,GAAO1R,IAAU,YACjBuY,GAAO7G,GAAKpJ,OAAO,SAEnBmC,IADgBiH,GAAKpJ,OAAO,aAClBoJ,GAAKpJ,OAAO,aACtB4nB,GAAaxe,GAAKpJ,OAAO,YAE7BhK,EAAS0B,IAAS,sCAAuC,QAAQmwB,KAAjE,e,EAAA,G,EAAA,yBAAsE,WAAMvhB,GAAN,2HAGlEpO,MAAMtF,UAAUk1B,OAAS,WACrB,OAAOhmB,KAAKnL,QAAO,SAAU3B,EAAOwM,EAAOumB,GACvC,OAAOA,EAAKvwB,QAAQxC,KAAWwM,MAL2B,SAS9CxL,EAAS0B,IAAS,4CAA6C,QATjB,cAS9DswB,EAT8D,gBAWjDhyB,EAAS0B,IAAS,oCAAqC,IAXN,cAW9DuwB,EAX8D,OAalE3hB,EAAM4hB,KAAO5hB,EAAM4hB,KAAKvxB,QAAO,SAAAC,GAAC,MAAa,IAAVA,EAAEuxB,QAAYtxB,KAAI,SAACkwB,EAAMv0B,GAExD,OADAu0B,EAAKpvB,WAAaqwB,EAAQE,KAAK11B,GAAGuU,EAC3BggB,KAIPqB,EAAa9hB,EAAM4hB,KAAKrxB,KAAI,SAAAvC,GAAC,OAAGA,EAAE6zB,QAElCrkB,EAASwC,EAAM4hB,KAAKvxB,QAAO,SAAAC,GAAC,OAAgC,GAA7BwxB,EAAW5wB,QAAQZ,EAAEyxB,OArBU,UAsB7CryB,EAAS0B,IAAQ,yCAA0C,IAtBd,QAsB9D4wB,EAtB8D,OAwB9DluB,EAAgB6tB,EAAKC,KAAKrxB,KAAI,SAACqa,EAAK1e,GACpC,IAAI+1B,EAAS,GAuBb,OAtBAZ,GAAc1qB,SAAQ,SAACzC,GACnB+tB,EAAO/tB,EAAIhE,OAAS,GACpB+xB,EAAO/tB,EAAIhE,OAAOA,MAAQgE,EAAIhE,MAC9B+xB,EAAO/tB,EAAIhE,OAAOL,KAAOqE,EAAIrE,KAC7B,IAAIyC,EAAS,GACblB,IAAWwZ,GAAKva,QAAO,SAAAC,GAAC,OAAGA,EAAEtB,IAAIsG,SAASpB,EAAIhE,UAAQK,KAAI,SAAAzC,GACtC,eAAboG,EAAIrE,KAEA/B,EAAEkB,IAAIsG,SAAS,WACdhD,EAAOe,UAAYvF,EAAEY,MAChBZ,EAAEkB,IAAIsG,SAAS,WACpBhD,EAAOiB,UAAYzF,EAAEY,MAErB4D,EAAOC,QAAUzE,EAAEY,MAGtB4D,EAAOxE,EAAEkB,KAAOlB,EAAEY,SAG3BuzB,EAAO/tB,EAAIhE,OAAOoC,OAASA,KAE/B2vB,EAAOhxB,KAAO2Z,EAAIsX,WACXD,KAIPluB,EAAmBjB,EAAmBgB,EAAeutB,GAAc9wB,KAAI,SAAAzC,GAAC,OAAGA,EAAEoC,SAAQ8C,IACzFwqB,GAAuB9wB,KAAKqH,GAExBouB,EAAeniB,EAAM4hB,KAAKrxB,KAAI,SAACkwB,EAAMv0B,GACrC,IAAIk2B,EAAStuB,EAAczD,QAAO,SAAAC,GAAC,OAAGA,EAAEW,OAASwvB,EAAKsB,MAAI,GAiB1D,OAhBGK,GACC/1B,OAAO4H,KAAKmuB,GAAQ/xB,QAAO,SAAAC,GAAC,MAAQ,QAALA,KAAaC,KAAI,SAAC2D,EAAKhI,GAElD,IAAIiI,EAASJ,EAAiB1D,QAAO,SAAAC,GAAC,OAAGA,EAAEJ,QAASgE,KAAK,GAEzD,OADAkuB,EAAOluB,GAAKC,OAASA,EACdD,KAID,CACVisB,GAAIM,EAAKoB,KACTQ,GAAI5B,EAAKsB,GACT9wB,KAAMwvB,EAAKsB,GACX1wB,WAAYovB,EAAKpvB,WACjBa,WAAYkwB,GAAkB,SAMlCE,EAAcN,EAASzxB,KAAI,SAACqa,EAAK1e,GACjC,IAAI+1B,EAAS,GAkBb,OAjBAZ,GAAc1qB,SAAQ,SAACzC,GACnB+tB,EAAO/tB,EAAIhE,OAAS,GACpB+xB,EAAO/tB,EAAIhE,OAAOA,MAAQgE,EAAIhE,MAC9B+xB,EAAO/tB,EAAIhE,OAAOL,KAAOqE,EAAIrE,KAC7B,IAAIyC,EAAS,GACblB,IAAWwZ,GAAKva,QAAO,SAAAC,GAAC,OAAGA,EAAEtB,IAAIsG,SAASpB,EAAIhE,UAAQK,KAAI,SAAAzC,GACtC,eAAboG,EAAIrE,KACHyC,EAAOC,QAAUzE,EAAEY,MAEnB4D,EAAOxE,EAAEkB,KAAOlB,EAAEY,SAG1BuzB,EAAO/tB,EAAIhE,OAAOoC,OAASA,KAE/B2vB,EAAOhxB,KAAO2Z,EAAIlW,QAClButB,EAAOntB,MAAQ8V,EAAIlW,QAEZutB,KAIPM,EAAgB/kB,EAAOjN,KAAI,SAACoC,EAAMzG,GAClC,IAAIk2B,EAASE,EAAYjyB,QAAO,SAAAC,GAAC,OAAGA,EAAEW,OAAS0B,EAAKovB,MAAI,GAmBxD,OAlBGK,GACC/1B,OAAO4H,KAAKmuB,GAAQ7xB,KAAI,SAAC2D,EAAKhI,GAC1B,GAAQ,QAALgI,GAAsB,SAAPA,EAAe,CAC7B,IAAIC,EAASJ,EAAiB1D,QAAO,SAAAC,GAAC,OAAGA,EAAEJ,QAASgE,KAAK,GAEzD,OADAkuB,EAAOluB,GAAKC,OAASA,EACdD,MAIL,CACVisB,GAAIxtB,EAAKkvB,KACTQ,GAAI1vB,EAAKovB,GACT9wB,KAAM0B,EAAKovB,GACX1wB,WAAYsB,EAAKtB,WACjBa,WAAYkwB,GAAkB,KAC9BrpB,MAAO,KACPpG,MAAM,MAKV6vB,EAAML,EAAa9xB,QAAO,SAAAC,GAAC,OAAmB,MAAhBA,EAAE4B,cAEhC2B,EAAQ8B,EAAS6sB,EAAKD,EAAe,KAAM,MAE3CE,EAAY7uB,EAAcC,EAAOC,EAAeC,GAEhDkjB,EAAc5iB,EAAcouB,GAEA,IAA7BtqB,EAAkB/L,SACF2H,EAAiBxD,KAAI,SAAAzC,GAAC,OAAGA,EAAEoC,SAC9BgB,QAAQ,UAAY,GACxBwxB,EAAYjqB,EAAqB1E,EAAkBkjB,EAAa,SAChE0L,EAActqB,EAAc,kBAAmBqqB,EAAUnyB,KAAI,SAAAzC,GAAC,OAAGA,EAAEgH,SAAQ4tB,GAC/EtqB,EAAkB1L,KAAKi2B,IAGvBltB,QAAQC,MAAM,yBAItBkZ,GAAWliB,KAAKuqB,GAChB8E,GAAYrvB,KAAKuqB,EAAY9mB,SAAQ,SAAArC,GAAC,OAAGA,EAAEuC,QAAO,SAAAC,GAAC,OAAc,IAAXA,EAAEqC,WAAgBpC,KAAI,SAAA1C,GAAC,OAAGA,EAAEoD,SAMlF8lB,GAAeuK,GAAYrK,EAAatN,GAAM5V,GAE9B+O,GAAKpJ,OAAO,eAAelC,QAAQ,UAAU,GAQ7D0E,GAAWxP,KAAKuzB,GAAmBhJ,EAAauL,EAAI7e,OAAO4e,KAC3DnC,GAAkBnJ,EAAaljB,EAAkB8H,IACtCpB,GAAWoB,GAAS,MAAM,GAAO,GF3MhB1H,EE8MZJ,EF5MZ4V,SACA/d,SADA+d,EAAOvY,IAAU,SACjBxF,EAAO2O,KAEXoP,EAAK5R,UAAU,KAAKoD,SAEjBvP,EAAKQ,OAAS,IACb4S,EAAmBpT,EAAM+d,EAAMxV,EAAQ,SACvC/C,IAAU,gBAAgBuG,KAAK,cAC/B8lB,SAASC,eAAe,WAAWC,UAAW,IAE9C/T,GAAuBhe,EAAM+d,EAAMxV,GACnC/C,IAAU,gBAAgBuG,KAAK,gBAC/B8lB,SAASC,eAAe,WAAWC,UAAW,GE2BgB,kCFzC/D,IAAyBxpB,EAExBwV,EACA/d,IEsC8D,M,iLAAtE,uDAwKckX,GAAKvL,OAAO,OACzBM,KAAK,KAAM,WACXJ,MAAM,UAAW,I","file":"js/app.f34c7578.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([172,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as d3 from 'd3';\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\n\n","import * as d3 from \"d3\";\n\nexport const maxTimeKeeper = []\n\n\nexport function pairPaths(pathData, field){\n\n\n    return pathData.flatMap((path, i)=> {\n        let pairs = pathData.filter((f, j)=> j != i);\n        let paired =  pairs.map((p)=> {\n            return {'p1': path, 'p2': p}\n        });\n        return paired.map(m=> {\n            m.distance = getDistance(m);\n            m.deltas = calculateDelta(m, field);\n            m.closeness = calculateCloseness(m, field);\n            \n            return m;\n        })\n    })\n}\n\nfunction getDistance(pair){\n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n    pair.common = pair.p1[p1Index]\n\n    return d3.sum(p1.map(m=> m.edgeLength)) + d3.sum(p2.map(m=> m.edgeLength));\n}\n\nfunction calculateDelta(pair, field){\n   \n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n \n    let range = maxTimeKeeper[0] - p1[0].combLength;\n    let binCount = d3.max([p1.length, p2.length])\n    let binStep = range / binCount;\n   \n    let bins = [...new Array(binCount-1)].map((d, i)=> {\n        return {'bottom': p1[0].combLength + (i*binStep), 'top': p1[0].combLength + ((i+1)*binStep) }\n    })\n   \n    bins = bins.map((d, i)=> {\n        let one = p1.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        let two = p2.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        d.one = one;\n        d.two = two;\n        return d;\n    });\n\n    bins = bins.map((b, i)=> {\n        if(b.one.length === 0){\n            b.one = bins[i-1].one;\n        }\n        if(b.two.length === 0){\n            b.two = bins[i-1].two;\n        }\n\n        return b;\n    })\n    \n    let attributes = d3.entries(p1[0].attributes)\n                    .filter(f => f.value.type === 'continuous')\n                    .map(m=> {\n                        let name = m.key;\n                        let valdiffs = bins.map((b, i)=> {\n                            return Math.abs(b.one[0].attributes[name].values.realVal - b.two[0].attributes[name].values.realVal);\n                        });\n                        m.value = d3.max(valdiffs)\n                        return m;\n                    });\n\nreturn attributes;\n\n}\n\nfunction calculateCloseness(pair, field){\n\n let leaf1 = pair.p1.filter(p=> p.leaf === true)[0].attributes;\n let leaf2 = pair.p2.filter(p=> p.leaf === true)[0].attributes;\n\n return d3.entries(leaf1).filter(f=> f.value.type === 'continuous').map(m=> {\n    \n     m.value = Math.abs(m.value.values.realVal - leaf2[m.key].values.realVal);\n     \n     return m\n });\n}\n\nexport function calculateNewScales(attributes, keyList, colorKeeper){\n\n    return keyList.map((d, i)=> {\n\n        let attData = attributes.flatMap(f=> f[d]);\n        let color = colorKeeper[i] != undefined ? colorKeeper[i][0] : colorKeeper[0][0];\n       \n        if(attData[0].type == 'continuous'){\n            \n            let max = d3.max(attData.flatMap(m=> m.values.upperCI95));\n            let min = d3.min(attData.flatMap(m=> m.values.lowerCI95));\n            let mean = d3.mean(attData.flatMap(m=> m.values.realVal));\n\n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([color, '#f23929']).domain([min, max]),\n                'catColor': color,\n            };\n        }else{\n            let scaleCat = d3.keys(attData[0].values);\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, j)=> {\n                    return {'state': sc, 'color': colorKeeper[j][0]};\n                }),\n                'catColor': color,\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            \n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n            \n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n        leaf.label = mappedLeafLabels[i];\n\n        //let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n      \n        let leafCharIndex = leafChar.rows[0][\"\"] ? leafChar.rows.map(m=> m[\"\"]) : leafChar.rows.map(m=> m[\"species\"]);\n  \n        leaf.node = leaf.V2;\n        let keys = calculatedScales.map(m=> m.field);\n        let attr = {};\n         \n        let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n        keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                    // return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                     return {'state': state, realVal: value};\n                 });\n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 //attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n                 attr[k] = {'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n\n         leaf.clade = chosenOne.clade;\n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                   // res.scaleVal = scale(res.estimate);\n                   // res.scaledLow = scale(res.lowerCI95);\n                    //res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                       // return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                        return {'state': s.scaleName, realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\n\nexport function rootAttribute(paths, calculatedAtt, calculatedScales){\n\n    let rootAtt = calculatedAtt.filter(f=> f.node === paths[0][0].node)[0];\n\n    Object.keys(rootAtt).filter(f=> f != 'node').map(att=> {\n        rootAtt[att].scales = calculatedScales.filter(f=> f.field === att)[0];\n    });\n\n    return paths.map((p, i)=> {\n        p[0].attributes = rootAtt;\n        p[0].root = true;\n        return p\n    });\n\n};\n\nexport function combineLength(paths){\n\n    let maxTime = paths.map(path=> d3.sum(path.map(p=> p.edgeLength)))[0];\n    maxTimeKeeper.push(maxTime);\n    return paths.map(path=> {\n        return path.map((node, i, n)=> {\n            node.maxTime = maxTime;\n            node.combLength = d3.sum(n.filter((f, j)=> i >= j).map(m=> m.edgeLength));\n            return node;\n        })\n    })\n\n}\n\n// export function normPaths(paths, calculatedAtt, calculatedScales){\n//     paths.forEach((p, i)=> {\n//         p[0].attributes = {};\n//         Object.keys(calculatedAtt).map(att=> { \n//             if(calculatedAtt[att].type == 'continuous'){\n//                 let root = calculatedAtt[att].rows.filter(f=> (f.nodeLabels == p[0].node) || (f.nodeLabels == ('node ' + p[0].node)))[0];\n//                 p[0].attributes[att] = {};\n                \n//                 let scale = calculatedScales.filter(f=> f.field == att)[0].yScale;\n            \n//                 p[0].attributes[att].realVal = root.estimate;\n//                 p[0].attributes[att].upperCI95 = root.upperCI95;\n//                 p[0].attributes[att].lowerCI95 = root.lowerCI95;\n//                 p[0].attributes[att].scale = scale;\n//                 p[0].attributes[att].type = 'continuous';\n//             }else if(calculatedAtt[att].type == 'discrete'){\n//                 let root = calculatedAtt[att].rows.filter(f=> f.nodeLabels == p[0].node)[0];\n//                 let scales = calculatedScales.filter(f=> f.field == att)[0].scales;\n//                 let rootAttr = scales.map(s=> {\n//                     //return {'state': s.scaleName,  scaleVal: s.yScale(root[s.scaleName]), realVal: root[s.scaleName]};\n//                     return {'state': s.scaleName, realVal: root[s.scaleName]};\n//                 });\n//                 p[0].attributes[att] = {'states':rootAttr, 'type': 'discrete'};\n               \n//             }else{\n//                 console.error('type not found');\n//             }\n//         });\n//     });\n    \n//     let maxBranch = d3.max(paths.map(r=> r.length));\n\n//     //SCALES for X, Y /////\n//     let xScale = d3.scaleLinear().range([0, 1000]).clamp(true);\n \n//     let normedPaths = paths.map((p, i)=> {\n//         p.xScale = xScale.domain([0, maxBranch - 1]);\n     \n//         let leafIndex = p.length - 1;\n//         let lengths = p.map(l=> l.edgeLength);\n//         let prevStep = 0;\n//         return p.map((m, j)=> {\n//             let node = Object.assign({}, m);\n//             //INTEGRATE THE DISTNACES HERE WHEN THEY WORK\n//             let step = node.edgeLength + prevStep;\n//             node.edgeMove = (j < leafIndex) ? step : 1;\n//             prevStep = prevStep + node.edgeLength;\n         \n//             node.move = (j < leafIndex) ? p.xScale(j) : p.xScale(maxBranch - 1);\n        \n//             return node;\n//         });\n//     });\n\n//     return normedPaths;\n// }\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(pathData, scales, filterArray){\n\n    let keys = (filterArray == null)? Object.keys(pathData[0][0].attributes).filter(f=> f != 'node'): filterArray;\n   \n    let newData = pathData.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                let speciesLabel = path[path.length - 1].node;\n                \n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].species = speciesLabel;\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.combineLength;\n                    m.attributes[key].combLength = m.combLength;\n                    m.attributes[key].node = m.node;\n                    m.attributes[key].edgeMove = m.edgeLength;\n                    m.attributes[key].edgeLength = m.edgeLength;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = m.attributes[key].scales.yScale;\n                    m.attributes[key].satScale = m.attributes[key].scales.satScale;\n                    m.attributes[key].colorScale = m.attributes[key].scales.colorScale;\n                    if(m.leaf){\n                        m.attributes[key].leaf = m.leaf;\n                    }\n                    m.attributes[key].leaf = m.leaf;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf){\n                        let states = d3.entries(m.attributes[key].values);\n                       \n                        m.attributes[key].leaf = m.leaf;\n                        let state = m.attributes[key];\n                        state.states = {field: key, state: m.attributes[key].values[key]}\n                        state.species = speciesLabel;\n                        state.winState = m.attributes[key].values[key] ?  m.attributes[key].values[key] : d3.entries(m.attributes[key].values);\n                        state.color = m.attributes[key].scales.stateColors.filter(f=> {\n                            return f.state.includes(state.winState)})[0].color;\n\n                        \n                        state.move = m.combLength;\n                        state.combLength = m.combLength;\n                        state.node = m.node;\n                        state.edgeMove = m.edgeLength;\n                        state.edgeLength = m.edgeLength;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : d3.entries(m.attributes[key].values);//.filter(f => f.state != undefined);\n\n                        return states.map((st, j)=> {\n                            st.state = st.key;\n                            st.value = st.value;\n                            \n                            st.color = m.attributes[key].scales.stateColors.filter(f=> f.state === st.key)[0];\n                           \n                            st.move = m.combLength;\n                            st.combLength = m.combLength;\n                            st.node = m.node;\n                            st.edgeMove = m.edgeLength;\n                            st.edgeLength = m.edgeLength;\n                            st.attrLabel = key;\n                            st.species = speciesLabel;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n\nexport function getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function calculateMovingAverage(data, i) {\n\n    if (movingAverage === 0) {\n        return data[i][yValue];\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        sum += x;\n    }\n\n    return sum / count;\n};\n\nexport function calculateMovingStandardDeviation(data, i, avg) {\n\n    if (movingAverage === 0) {\n        return 0;\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        var dx = x - avg;\n        sum += (dx * dx);\n    }\n\n    var variance = sum / count;\n    return Math.sqrt(variance);\n};\n\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    \n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    \n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n\n\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n       // node.edgeLength = node.edge_data.weight;\n        if(notEmpty(node.children)){\n            pathArray.push(Object.assign({}, node));\n            pullPath([...pathArray], [...node.children], arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.data.node);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, Object.assign({},node)]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import * as d3 from \"d3\";\n\nexport function dropDown(div, optionArray, dropText, dropId){\n    let dropdiv = div.append('div').classed(`dropdown ${dropId}`, true);\n    dropdiv.style('display', 'inline-block')\n    let button = dropdiv.append('button').classed('btn dropbtn btn-secondary dropdown-toggle', true).text(dropText);\n    let dropContent = dropdiv.append('div').attr('id', dropId).classed('dropdown-content', true);\n    dropContent.append('a').text('text').attr('font-size', 11);\n    let options = dropContent.selectAll('a').data(optionArray).join('a').text(d=> d.field);\n\n    options.on('click', (d, i, n)=> dropContent.classed('show', false));\n\n    button.on('click', (d, i, n)=> {\n        if(dropContent.classed('show')){\n            dropContent.classed('show', false);\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n    options.raise()\n    return options;\n}\n\nexport function updateDropdown(optionArray, dropId){\n    d3.select(`#${dropId}`).selectAll('a').data(optionArray).join('a').text(d=> d.field);\n}","import {dataMaster, nestedData} from './index';\nimport { updateDropdown } from './buttonComponents';\nimport * as d3 from \"d3\";\nimport { addingEdgeLength, assignPosition, renderTree } from './sidebarComponent';\nimport { maxTimeKeeper } from './dataFormat';\nimport { getLatestData } from './filterComponent';\nimport { renderDistStructure, binGroups } from './distributionView';\nimport { updateMainView } from './viewControl';\n\nexport const cladesGroupKeeper = []\nexport const chosenCladesGroup = []\n\n\n\nexport function useCladeGroup(){\n\n}\n\nexport function addCladeGroup(name, clades, nodes){\n    cladesGroupKeeper.push({field: name, names: clades, groups:nodes});\n    return {field: name, names: clades, groups:nodes};\n}\n\nexport function removeCladeGroup(clades){\n    cladeKeeper = cladeKeeper.filter(f=> f.groupKey != clades.groupKey);\n}\n\nexport function groupDataByAttribute(scales, data, groupAttr){\n\n    console.log('scales', scales)\n\n    let groupKeys = scales.filter(f=> f.field === groupAttr)[0].scales.map(s=> s.scaleName);\n\n    let branchBinCount = d3.median(data.map(m=> m.length)) - d3.min(data.map(m=> m.length))\n   \n    return groupKeys.map(group => {\n        let paths = data.filter(path => {\n            return group.includes(path[path.length - 1].attributes[groupAttr].values[groupAttr]);\n        });\n    \n        let groupBins = binGroups(paths, group, scales, branchBinCount);\n        return {'label': group, 'paths': paths, 'groupBins': groupBins}\n\n    });\n    \n}\n\nexport function groupDataByClade(scales, data, cladeInfo){\n\n    let branchBinCount = d3.median(data.map(m=> m.length)) - d3.min(data.map(m=> m.length))\n   \n    return cladeInfo.groups.map(group => {\n        let paths = data.filter(path=> {\n            return group.nodes.indexOf(path[path.length - 1]) > -1;\n        });\n\n        let groupBins = binGroups(paths, group, scales, branchBinCount);\n        return {'label': group.clade, 'paths': paths, 'groupBins': groupBins}\n    });\n    \n}\n\nexport async function drawTreeForGroups(div){\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 620,\n        height : 700,\n        lengthHeight: 800,\n    }\n\n    renderCladeTree(div, null, dimensions);\n\n    let leaf = div.select('.tree-svg').selectAll('.node--leaf');\n    labelTree(leaf);\n\n    div.select('.tree-svg').classed('clade-view', true).append('g').classed('overlay-brush', true);\n}\n\nfunction createNewCladeGroup(div, scales){\n    let cladeNames = []\n    let clades = []\n    d3.selectAll('.clade-name').each((e, i, n)=> {\n       cladeNames.push(n[i].value);\n       let rectTest = d3.select(`.rect-${i + 1}`).node().getBoundingClientRect();\n       let nodes = div.select('.tree-svg.clade-view').selectAll('.node--leaf').filter((f, j, node)=> {\n           let circPos = node[j].getBoundingClientRect();\n           return circPos.y >= rectTest.y-4 && circPos.y <= ((rectTest.y + rectTest.height) - 4);\n       })\n       nodes.select('circle').attr('fill', 'red');\n       clades.push({'clade': n[i].value , 'nodes': nodes.data().map(m=> m.data)})\n    });\n   // d3.select('.group-name').attr('value')\n    let groupName = d3.select('.group-name').node().value;\n    let chosenGroup = addCladeGroup(groupName, cladeNames, clades);\n    updateDropdown(cladesGroupKeeper, 'change-clade');\n    let groups = groupDataByClade(scales, getLatestData(), chosenGroup);\n\n    d3.select('.dropdown.change-clade').select('button').text(`Clades Shown: ${chosenGroup.field}`);\n\n    updateMainView('Summary View', groups);\n    \n    renderTree(d3.select('#sidebar'), null, true, false)\n}\n\nfunction cladeToolbar(div, scales){\n\n    let toolBar = div.append('div').classed('clade-toolbar', true);\n    let textInput = toolBar.append('input')\n    .classed('group-name', true)\n    .attr('type', 'text')\n    .attr('value', 'Name Your Group');\n  \n    let addCladeGroupButton = toolBar.append('button').text('Add Clade Group');\n    addCladeGroupButton.on('click', ()=> createNewCladeGroup(div, scales));\n\n    let inputGroup = toolBar.append('div').classed('input-group input-number-group', true);\n    let minusButton = inputGroup.append('button').text('-');\n   \n    let numberText = inputGroup.append('input')\n        .attr('value', 3)\n        .attr('min', 0)\n        .attr('max', 10)\n        .attr('type', 'number')\n        .classed('input-number', true);\n\n    let plusButton = inputGroup.append('button').text('+');\n\n    let nameWrap = inputGroup.append('div').classed('name-input-wrap', true);\n    minusButton.on('click', ()=> {\n        let num = numberText.attr('value');\n        numberText.attr('value', +num - 1);\n        addTextInputForGroups(+numberText.attr('value'), nameWrap);\n    });\n\n    plusButton.on('click', ()=> {\n        let num = numberText.attr('value');\n        numberText.attr('value', +num + 1);\n        addTextInputForGroups(+numberText.attr('value'), nameWrap);\n    });\n\n    addTextInputForGroups(+numberText.attr('value'), nameWrap);\n\n    function addTextInputForGroups(index, nameWrap){\n       \n        nameWrap.selectAll('*').remove();\n        d3.selectAll('.overlay-brush').selectAll('rect').remove();\n        for(let ind = 0; ind < index; ind = ind + 1){\n            nameWrap.append('input')\n            .classed('clade-name', true)\n            .attr('value', `Group ${ind+1}`)\n            .attr('type', 'text');\n\n            let rectGroup = d3.select('.overlay-brush').append('g').classed(`group-${ind}`, true)\n\n            let rect = rectGroup.append('rect')\n            .classed(`rect-${ind + 1}`, true)\n            .attr('height', 100)\n            .attr('width', 910)\n            .attr('opacity', 0.3)\n            .attr('transform',  (d, i, n)=> `translate(${0},${((800 / index) * ind)})`);\n\n            let rectSizer = rectGroup.append('rect').attr('class', `handle-${ind}`)\n            .attr('width', 700)\n            .attr('height', 20)\n            .attr('y', rect.node().getBoundingClientRect().y + 20)\n            .attr('opacity', 0)\n            .call(d3.drag()\n            .on('drag', function(){\n                let dragPos = d3.mouse(this);\n                let dragY = d3.event.y\n                d3.select(this).attr('y', dragPos[1]);\n                let height = +d3.select(`.rect-${ind + 1}`).attr('height')\n                let rectY = d3.select(`.rect-${ind + 1}`).node().getBoundingClientRect().bottom;\n                d3.select(`.rect-${ind + 1}`).attr('height', height + (dragY-rectY) + 70);\n            }));\n            \n            rect.call(d3.drag().on('drag', function(){\n                let dragPos = d3.mouse(this);\n                let dragY = d3.event.y\n                d3.select(this).attr('y', dragPos[1]);\n                let rectH = d3.select(`.rect-${ind + 1}`).node().getBoundingClientRect().height;\n                d3.select(`.handle-${ind}`).attr('y', dragY + (rectH - 20));\n            }))\n        }\n    }\n}\n\nexport function cladeSpecies(){\n\n}\n\nfunction labelTree(nodes){\n    nodes.append('text')\n    .text(d=> d.data.node)\n    .attr('font-size', 9)\n    .attr('x', 4)\n    .attr('y', 2)\n}\n\nexport async function createCladeView(div, scales){\n    drawTreeForGroups(div);\n    cladeToolbar(div, scales);\n}\n\nexport function renderCladeTree(sidebar, att, dimensions){\n\n    // declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([dimensions.height, dimensions.width]);\n\n    addingEdgeLength(0, nestedData[0]);\n    \n    //  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData[0]);\n\n    // maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let sidebarTest = sidebar.select('svg');\n    let treeSvg = sidebarTest.empty() ? sidebar.append(\"svg\") : sidebarTest;\n    treeSvg.classed('tree-svg', true);\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + dimensions.margin.top + dimensions.margin.bottom);\n\n    let gTest = treeSvg.select('g.tree-g');\n    let g = gTest.empty() ? treeSvg.append(\"g\").classed('tree-g', true) : gTest;\n    g.attr(\"transform\",\n      \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\");\n\n   \n        ////Break this out into other nodes////\n    updateCladeTree(treenodes, dimensions, treeSvg, g, att, true);\n    \n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n    return array;\n}\n\nexport function updateCladeTree(treenodes, dimensions, treeSvg, g, attrDraw, length){\n    \n    assignPosition(treenodes, 0);\n\n   let test = getLatestData();\n\n    let branchCount = findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, 1])\n\n    if(length){   \n        g.attr('transform', 'translate(30, 370)');\n        treeSvg.attr('height', 1000);\n        yScale.range([580, 0]).domain([0, test.length-10])\n        xScale.range([0, 800]);\n    } \n\n    // adds the links between the nodes\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n       \n           return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n           + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n           + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n           + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n     \n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants(), d => d.data.node)\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n    .duration(500)\n    .attr(\"transform\", function(d) { \n       \n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n       \n    });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)//f.data.attributes[attrDraw.field].winState === att.state;\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    })\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateCladeTree(treenodes, dimensions, treeSvg, g, attrDraw, lengthBool);\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n    return node;\n}","import '../styles/index.scss';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster, getLatestData} from './filterComponent';\nimport { pullPath } from './pathCalc';\nimport { renderTree } from './sidebarComponent';\nimport { chosenCladesGroup } from './cladeMaker';\nimport { updateMainView } from './viewControl';\n\nconst dimensions = {\n    height: 80,\n    observedWidth : 200,\n    predictedWidth : 900,\n    margin : 20,\n    squareDim : 15,\n    timeRange: 895\n}\n\nconst brushColors = [\n    ['#64B5F6', '#F39C12'],\n    ['#6A1B9A', '#FDD835'],\n]\n\nconst compareColors = ['#546E7A', '#5D4037']\n\nconst defaultBarColor = '#DCD4D4';\n\nlet colorBool = 0;\n\nconst selectedClades = [[]];\n\nexport function groupDistributions(pathData, mainDiv, scales, groupAttr){\n\n    let groupKeys = scales.filter(f=> f.field === groupAttr)[0].scales.map(s=> s.scaleName)\n  \n    let branchBinCount = d3.median(pathData.map(m=> m.length)) - d3.min(pathData.map(m=> m.length))\n   \n    let pathGroups = groupKeys.map(group => {\n        let paths = pathData.filter(path => {\n            return group.includes(path[path.length - 1].attributes[groupAttr].values[groupAttr]);\n        });\n\n        let groupBins = binGroups(paths, group, scales, branchBinCount);\n        return {'label': group, 'paths': paths, 'groupBins': groupBins}\n    });\n\n    renderDistStructure(mainDiv, pathGroups);\n}\nexport function binGroups(pathData, groupLabel, scales, branchCount){\n\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n    \n    let keys = scales.map(s=> s.field).filter(f=> attrHide.indexOf(f) === -1);\n\n    let newNormed = [...pathData];\n    let keysToHide = attrHide.length > 0 ? scales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    formatAttributeData(newNormed, scales, keysToHide);\n\n    let maxBranch = d3.max(newNormed.map(p=> p.length)) - 1;\n  \n    let max = maxTimeKeeper[0]\n\n    let normBins = new Array(branchCount).fill().map((m, i)=> {\n            let step = max / branchCount;\n            let base = (i * step);\n            let top = ((i + 1)* step);\n            return {'base': base, 'top': top, 'binI': i , 'step':step}\n    });\n\n    let internalNodes = newNormed.map(path => path.filter(node=> (node.leaf != true) && (node.root != true)));\n    let leafNodes = newNormed.flatMap(path => path.filter(node=> node.leaf === true));\n    let rootNodes = newNormed.flatMap(path => path.filter(node=> node.root === true));\n\n    normBins.map((n, i)=> {\n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n                return node.combLength > n.base && node.combLength <= n.top;\n        } ));\n        n.data = edges;\n        return n;\n    });\n\n    let sortedBins = keys.map(key=> {\n        let scale = scales.filter(f=> f.field === key)[0];\n    \n        let mapNorm = normBins.map(bin => {\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    return d.attributes[key];\n                })\n            }else{\n                bin.fData = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        });\n       \n        let leafAttr = leafNodes.map(m=> m.attributes[key]);\n        let leafData = {'data': leafAttr};\n   \n        if(scale.type === 'continuous'){\n            let x = d3.scaleLinear().domain([scale.min, scale.max]).range([0, dimensions.height]);\n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.values.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n  \n            mapNorm.map((n, i, nodeArray)=> {\n                n.type = scale.type;\n                n.bins = histogram(n.data);\n                n.domain = [scale.max, scale.min];\n                n.bins.count = branchCount;\n                n.bins.groupLabel = groupLabel;\n\n                if(d3.mean(n.bins.map(m=> m.length)) === 0){\n                    if(i === 0){\n                         n.bins = histogram(rootNodes.map(m=> m.attributes[key]));\n                         n.data = rootNodes.map(m=> m.attributes[key]);\n                         n.bins.count = branchCount;\n\n                    }else{\n                        n.bins = nodeArray[i-1].bins;\n                        n.data = nodeArray[i-1].data;\n                    }\n                }\n                return n;\n            });\n\n            //Histogram for observed////\n            let maxO = d3.max(leafAttr.flatMap(v=> +v.values.realVal));\n            let minO = d3.min(leafAttr.flatMap(v=> +v.values.realVal));\n            let xO = d3.scaleLinear().domain([minO, maxO]).range([0, dimensions.height])\n\n            let histogramO = d3.histogram()\n            .value(function(d) { \n                return +d.values.realVal; })  \n            .domain(xO.domain())  \n            .thresholds(xO.ticks(20)); \n\n            leafData.bins = histogramO(leafAttr);\n      \n            let newK = {'key': key, \n                    'branches': [...mapNorm], \n                    'type': scale.type, \n                    'leafData': leafData, \n                    'rootData': rootNodes.map(m=> m.attributes[key])[0]}\n   \n            return newK;\n\n        }else{\n            //HANDLING DISCRETE//\n            let states = leafAttr[0].scales.scales;\n           \n            let stateKeys = states[0].state? states.map(s=> s.state) : states.map(s=> s.scaleName)\n          \n            let rootNode = rootNodes[0].attributes[key]\n            rootNode.bins = d3.entries(rootNodes[0].attributes[key].values).map(m=> {       \n                let states = [{'state': m.key, 'value':m.value}];\n                return {state: states, branchCount:branchCount, color : scale.stateColors.filter(f=> f.state === m.key)[0], max:80};\n               });\n            \n            mapNorm.bins = null\n            leafData.bins = states.map(s=> {\n                return leafAttr.filter(f=> s.scaleName.includes(f.states.state))});\n   \n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.height]);\n            let y = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n\n            let histogram = d3.histogram()\n            .value(function(d) { return d.value; })  \n            .domain(y.domain())  \n            .thresholds(y.ticks(10)); \n  \n           \n            mapNorm.map((n, i, nodeArray)=> {\n                \n                let colors = scale.stateColors;\n                n.bins = stateKeys.map(state=> {\n                    let test = n.data.flatMap(m=> Object.entries(m.values).filter(f=> f[0] === state))\n                    .map(m=> {\n                        return {'state': m[0], 'value':m[1]}\n                    });\n                    \n                    return {state: test, branchCount:branchCount, histogram: histogram(test), color : colors.filter(f=> f.state === state)[0], max:80};\n                });\n                //IF WE DONT HAVE ANY BRANCHES< WE ASSUME THAT THEY ARE THE SAME AS THE PREVIOUS\n                if(n.bins[0].state.length === 0){\n                    if(i === 0){\n                        n.bins = d3.entries(rootNode.values).map(m=> {\n                            let histo = histogram([+m.value]).map(h=>{\n                                if(m.value <= h.x1 && m.value >= h.x0){\n                                    h.push(+m.value);\n                                }\n                                return h;\n                             });\n                             let states = [{'state': m.key, 'value':m.value}];\n                             return {state: states, branchCount:branchCount, histogram: histo, color : colors.filter(f=> f.state === m.key)[0], max:80};\n                            });\n                        \n                    }else{\n                      \n                        n.bins = nodeArray[i-1].bins;\n                    }\n                }\n\n                n.type = scale.type;\n                return n;\n            });\n\n            let newK = {'key': key, \n                        'branches': [...mapNorm], \n                        'type': scale.type, \n                        'leafData': leafData, \n                        'rootData': rootNodes.map(m=> m.attributes[key])[0],\n                        'stateKeys': stateKeys,\n                        'maxCount': d3.max(mapNorm.map(n=> n.data.length))\n                    }\n            return newK;\n        }\n    });\n\n    sortedBins.group = groupLabel;\n    sortedBins.branchCount = branchCount;\n    sortedBins.keys = keys;\n    return sortedBins;\n}\nexport function drawBranchPointDistribution(data, svg){\n\n    let branchBar = svg.append('g').classed('branch-bar', true);\n    branchBar.append('rect').classed('point-dis-rect', true)\n        .attr('height', 25)\n        .attr('x', -10)\n        .attr('y', -10)\n       .attr('fill', 'none')\n\n    let binWrap = branchBar.append('g').attr('transform', 'translate(102, -10)');\n\n    branchBar.append('line')\n        .attr('y1', 2)\n        .attr('y2', 2)\n        .attr('x1', '100')\n        .attr('x2', dimensions.predictedWidth)\n        .attr('stroke', 'gray')\n        .attr('stroke-width', .25);\n\n    branchBar.append('text').text('Root').attr('transform', 'translate(70, 7)');\n    let leafLabel = branchBar.append('g').classed('leaf-label', true).attr('transform', `translate(${dimensions.predictedWidth + 200}, 7)`);\n    leafLabel.append('text').text('Leaves');\n\n    let nodeLengthArray = [];\n    let nodeDuplicateCheck = []\n\n    data.paths.map(path=> {\n        path.filter(n=> n.leaf != true).map(node=> {\n            if(nodeDuplicateCheck.indexOf(node.node) == -1){\n                nodeDuplicateCheck.push(node.node);\n                nodeLengthArray.push({'node': node.node, 'eMove': node.combLength });\n            }\n        })\n    });\n\n    let bPointScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n    let pointGroups = branchBar.selectAll('g.branch-points').data(nodeLengthArray)\n        .join('g').attr('class', (d, i)=> d.node).classed('branch-points', true);\n\n    pointGroups.attr('transform', (d, i) => {\n        return `translate(${(105 + bPointScale(d.eMove))}, 0)`});\n    pointGroups.append('circle').attr('r', 5).attr('fill', '#fff').attr('opacity', 0.5);\n\n    let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n    \n    let binsRects = binWrap\n        .selectAll('rect.bin')\n        .data(data.groupBins[0].branches.map(m=> m.range))\n        .join('rect')\n        .classed('bin', true);\n\n    binsRects.attr('width', (d, i, n)=> {\n        return x(d[1]) - x(d[0]);\n    }).attr('height', 20);\n\n    binsRects.attr('transform', (d, i, n)=> {\n        let step = x(d[1]) - x(d[0]);\n        return `translate(${step*i},0)`});\n\n    binsRects.attr('fill', 'gray').attr('stroke-width', 2).attr('stroke', 'white');\n\n    let axis = d3.axisBottom(x);\n    let axGroup = branchBar.append('g').call(axis)\n    axGroup.attr('transform', 'translate(103, 10)');\n    axGroup.select('path').attr('stroke-width', 0);\n\n    return branchBar;\n}\n\nexport function drawGroupLabels(pathData, svg, groupLabel){\n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n    let cladeLabel = svg.append('g').classed('clade-label', true).attr('transform', 'translate(10, 0)');\n    cladeLabel.append('rect')\n        .attr('width', 50)\n        .attr('height', (pathData.keys.length * (dimensions.height+ 15)))\n        .attr('fill', 'gray')\n        .style('opacity', 0.2)\n        .on('mouseover', (d, i)=>{\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f=> {\n                if(f.data.leaf){\n                    let test = d3.entries(f.data.attributes).filter(f=> groupLabel.includes(f.key))[0].value;\n                    return groupLabel.includes(test.states.state);\n                }else{\n                    let test = d3.entries(f.data.attributes).filter(f=> groupLabel.includes(f.key))[0];\n                    let testest = d3.entries(test.value.values).filter((f, i, n)=> {\n                        let max = d3.max(n.map(m=> m.value));\n                        return f.value === max;\n                    })[0];\n                    return groupLabel == testest.key;\n                }\n            }).classed('hover clade', true);\n        \n        treeLinks.filter(f=> {\n            if(f.data.leaf){\n                let test = d3.entries(f.data.attributes).filter(f=> groupLabel.includes(f.key))[0].value;\n                return groupLabel.includes(test.states.state);\n            }else{\n                let test = d3.entries(f.data.attributes).filter(f=> groupLabel.includes(f.key))[0]\n                let testest = d3.entries(test.value.values).filter((f, i, n)=> {\n                    let max = d3.max(n.map(m=> m.value));\n                    return f.value === max;\n                })[0];\n                return groupLabel == testest.key;\n            }\n        }).classed('hover clade', true);\n        let species = d.paths.map(m=> m[m.length - 1].label);\n        }).on('mouseout', (d, i)=> {\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.classed('hover clade', false);\n            treeLinks.classed('hover clade', false);\n        });\n\n    cladeLabel.append('text').text(d=> d.label)\n    .style('text-anchor', 'middle')\n    .attr('transform', `translate(23, ${(shownAttributes.length * (dimensions.height+ 15)/2)}), rotate(-90)`);\n\n    return cladeLabel;\n}\n/**\n * \n * @param {*} mainDiv \n * @param {*} pathGroups \n */\nexport function renderDistStructure(mainDiv, pathGroups){\n   \n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n   \n    let groupWrap = mainDiv.append('div').attr('id', 'summary-view');\n    let groupDivs = groupWrap.selectAll('.group-div').data(pathGroups).join('div').classed('group-div', true);\n\n    groupDivs.each((d, i, node)=> {\n        \n       let filteredAttributes = d.groupBins.filter(f=> {\n           return shownAttributes.indexOf(f.key) > -1;\n       });\n\n        let group = d3.select(node[i]);\n        group.style('text-align', 'center');\n        group.append('text').text(d.label);\n        group.append('text').text(` : ${d.paths.length} Paths` );\n\n        //////Starting something new/////\n      \n        let svg = group.append('svg');\n        svg.attr('class', 'main-summary-view');\n        svg.attr('id', `${d.label}-svg`);\n        svg.attr('height', (shownAttributes.length * (dimensions.height + 5))+ 50);\n    \n        let branchBar = drawBranchPointDistribution(d, svg);\n        branchBar.attr('transform', 'translate(55, 10)');\n\n        group.classed(d.label, true);\n    \n        let branchScale = d3.scaleLinear().domain([0, d.groupBins.branchCount]).range([0, dimensions.timeRange]);\n        let pointGroups = branchBar.selectAll('g.branch-points');\n      \n        let wrap = svg.append('g').classed('summary-wrapper', true);\n        wrap.attr('transform', 'translate(70, 50)');\n    \n        let binnedWrap = wrap.selectAll('.attr-wrap').data(filteredAttributes).join('g').attr('class', d=> d.key + ' attr-wrap');\n    \n        binnedWrap.attr('transform', (d, i, n)=>  {\n                if(i === 0){\n                    return 'translate(0,0)';\n                }else{\n                    let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                    let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                    d.sum = sum;\n                    return `translate(0, ${sum})`;\n                }\n        });\n\n        let label = binnedWrap.append('text')\n        .text(d=> d.key);\n\n        label.filter(f=> f.type === 'continuous')\n        .attr('y', 40)\n        .attr('x', 80)\n        .style('text-anchor', 'end')\n        .style('font-size', 11);\n\n        label.filter(f=> f.type === 'discrete')\n        .attr('y', (d, i)=> 3)\n        .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n        .style('text-anchor', 'middle')\n        .style('font-size', 11)\n        .attr('transform', 'rotate(-90)');\n    \n        let groupLabelBars = drawGroupLabels(d.groupBins, svg, d.label);\n    \n        groupLabelBars.on('click', (d, i, n)=> {\n            d3.select(n[i]).select('rect').attr('fill', '#F5B041');\n            \n            selectedClades[selectedClades.length - 1].push(Object.assign({},d));\n            if(selectedClades[selectedClades.length - 1].length > 1){\n\n                mainDiv.selectAll('*').remove();\n                mainDiv.select('#compare-wrap').remove();\n                renderDistributionComparison(mainDiv, selectedClades[selectedClades.length - 1], branchScale, pathGroups);\n                //renderDistStructure(mainDiv, pathGroups.filter(p=> p.label != d.label))\n\n            }else{\n              \n                \n            }\n           \n        });\n        renderDistibutions(binnedWrap, branchScale, pointGroups);\n    });\n}\n\nfunction renderDistributionComparison(div, data, branchScale, pathGroups){\n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n  \n    let divWrap = div.append('div').attr('id', 'compare-wrap');\n\n    let groupHeader = divWrap.append('div').classed('compare-header', true).style('margin', 'auto');\n\n    let textDiv = groupHeader.append('div').attr('height', 50).attr('width', 200).style('margin-left', '460px');\n    let branchPointSvg  = groupHeader.append('svg');\n\n    let pointData = {paths: data[0].paths.concat(data[1].paths), groupBins: data[0].groupBins}\n    let branchBar = drawBranchPointDistribution(pointData, branchPointSvg);\n    branchBar.attr('transform', 'translate(-30, 10)')\n\n    branchBar.selectAll('rect.bin').attr('stroke', '#DCD4D4').attr('stroke-width', '3px');\n    let pointGroups = branchBar.selectAll('g.branch-points');\n  \n    let xOut = groupHeader.append('div')\n    .style('position', 'absolute')\n    .style('left', '5px')\n    .style('top', '65px')\n    .append('i')\n    .classed('close fas fa-times', true)\n    .style('padding-left', '10px');\n    \n    xOut.on('click', (d, i, n)=> {\n        divWrap.remove();\n        console.log(selectedClades)\n        selectedClades.push(new Array());\n        updateMainView('Summary View', chosenCladesGroup[chosenCladesGroup.length-1].groups);\n        d3.select('#sidebar').selectAll('.node').remove();\n        d3.select('#sidebar').selectAll('.link').remove();\n        renderTree(d3.select('#sidebar'), null, true);\n    });\n\n    if(data.length > 1){\n\n        renderTree(d3.select('#sidebar'), null, true);\n       \n        let selectedNodes = Array.from(new Set(data.flatMap(f=> f.paths).flatMap(p=> p.map(m=> m.node))));\n   \n        let testNodes = d3.select('#sidebar').selectAll('.node').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n        let testLinks = d3.select('#sidebar').selectAll('.link').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n\n        testNodes.attr('opacity', 0.3)\n        testLinks.attr('opacity', 0.3)\n\n        let pathsListOne = Array.from(new Set(data[0].paths.flatMap(p=> p.map(m=> m.node))));\n        let pathsListTwo = Array.from(new Set(data[1].paths.flatMap(p=> p.map(m=> m.node))));\n\n        let testNodesOne = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n        let testLinksOne = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n\n        testNodesOne.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[0])\n        testLinksOne.attr('opacity', .8).style('stroke', compareColors[0])\n\n        let testNodesTwo = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n        let testLinksTwo = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n\n        testNodesTwo.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[1])\n        testLinksTwo.attr('opacity', .8).style('stroke', compareColors[1])\n\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-left', true)\n        .style('margin-right', '10px');\n\n        data.forEach((d, i)=> {\n        textDiv.append('span')\n            .text(d.label)\n            .classed('badge badge-secondary', true)\n            .style('padding', '5px')\n            .style('margin-bottom', '7px')\n            .style('background', compareColors[i])\n        });\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-right', true)\n        .style('margin-left', '10px');\n        \n    }\n    let svg = divWrap.append('svg').attr('class', 'compare-svg');\n\n    ////COMBINEDATA///\n    if(data.length > 1){\n    \n        let startBins = data[0].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let mapBins = data[1].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let combined = startBins.map((d, i, n)=> {\n         \n            d.branches = [...d.branches].map((b, j)=> {\n                \n                b.bins = [{key:data[0].label, value: b.bins, index:0},\n                          {key:data[1].label, value: mapBins[i].branches[j].bins, index:1}\n                         ];\n             \n                b.data = [{key: data[0].label, \n                            value: b.data.map(m=>{\n                                    m.groupKey = data[0].label;\n                                    m.index = 0;\n                                    return m;\n                                    }), \n                            index: 0},\n                        \n                        { key: data[1].label, \n                            value : mapBins[i].branches[j].data.map(m=> {\n                                    m.groupKey = data[1].label;\n                                    m.index = 1;\n                                    return m;\n                            }), \n                         index: 1 }];\n                return b;\n            });\n            return d;\n        });\n\n        let wrap = svg.append('g').attr('class', 'group-wrap').attr('transform', 'translate(30, 10)');\n        let binnedWrap = wrap.selectAll('.attr-wrap').data(combined).join('g').classed('attr-wrap', true);\n        svg.attr('height', (combined.length * (dimensions.height + 5)));\n        \n        binnedWrap.attr('transform', (d, i, n)=>  {\n            if(i === 0){\n                    return 'translate(0,0)';\n            }else{\n                let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                d.sum = sum;\n                return `translate(0, ${sum})`;\n            }\n        });\n\n        let label = binnedWrap.append('text')\n            .text(d=> d.key);\n    \n            label.filter(f=> f.type === 'continuous')\n            .attr('y', 40)\n            .attr('x', 80)\n            .style('text-anchor', 'end')\n            .style('font-size', 11);\n    \n            label.filter(f=> f.type === 'discrete')\n            .attr('y', (d, i)=> 3)\n            .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n            .style('text-anchor', 'middle')\n            .style('font-size', 11)\n            .attr('transform', 'rotate(-90)');\n\n        /////FROM DISCRETE DRAW\n\n        let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n        predictedWrap.attr('transform', 'translate(25, 0)');\n        predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n        //ROOT RENDERING\n        let root = predictedWrap.selectAll('g.root').data(d=> {\n            return [d.rootData]}).join('g').classed('root', true);\n        root.attr('transform', `translate(60,0)`);\n\n        let contRoot = root.filter(f=> f.type === \"continuous\");\n        contRoot.append('rect')\n            .attr('height', dimensions.height)\n            .attr('width', 12)\n            .attr('fill', '#fff')\n            .style('stroke-width', '0.5px')\n            .style('stroke', 'black')\n    \n        let rootRange = contRoot.append('rect')\n            .attr('width', 12)\n            .attr('height', d=> {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return newy(d.values.lowerCI95) - newy(+d.values.upperCI95)\n            }).attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return 'translate(0,'+newy(+d.values.upperCI95)+')'\n            }).style('opacity', 0.5)//.attr('fill', \"rgba(133, 193, 233)\")\n            .attr('fill', defaultBarColor);\n    \n        let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n        \n        rootAv.attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([dimensions.height, 0]);\n                let mean = +d.values.realVal;\n                return 'translate(0,'+newy(mean)+')';\n        }).attr('fill', '#004573');\n    \n           // Discrete Root\n        let disRoot = root.filter(f=> f.type === \"discrete\");\n        let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n            return d.bins}).join('g').classed('root-state-groups', true);\n    \n        rootStateGroups.append('text')\n            .text((d, i)=> d.color.state)\n            .attr('y', 10)\n            .attr('x', -3)\n            .style('font-size', 10)\n            .style('text-anchor', 'end');\n    \n        rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n        rootStateGroups.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim)\n            .attr('fill', '#fff').attr('opacity', 1);\n    \n        let rootRects = rootStateGroups.append('rect')\n            .classed('color-rect', true)\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim);\n    \n        rootRects.attr('fill', (d, i)=> {\n                return `rgba(89, 91, 101, ${d.state[0].value})`;\n            }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n    \n        let winStateRoot = disRoot.selectAll('g.root-state-groups')\n            .filter((f, j, n)=>{\n                let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n                return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n            }).classed('win', true);\n    \n        winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            });\n\n        ////BRANCHES\n        let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n            return d.branches}).join('g').classed('branch-bin', true);\n    \n        branchGroup.attr('transform', (d, i, n)=> {\n            let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0\n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange])\n                return 'translate('+(100 + (branchScale(i)) + x(step)) +', 0)'});\n\n        let discreteDist = branchGroup.filter(f=> f.type === 'discrete').append('g');\n\n        discreteDist.attr('transform', 'translate(5, 0)');\n\n        let discreteMiddleGroups = discreteDist.selectAll('g.middle-group')\n            .data(d=> {\n                let bins = d.bins.map(b=> {\n                    b.key = d.key;\n                    return b;\n                })\n                return bins})\n            .join('g')\n            .classed('middle-group', true)\n            .attr('transform', (d, i)=> { \n                let move = d.index === 0 ? -(dimensions.squareDim/2) : 0 ;\n                return `translate(${move}, 0)`});\n\n        let stateRects = discreteMiddleGroups\n        .selectAll('rect.state-rect')\n        .data(d=> {\n            let bins = d.value.map(v=> {\n                v.key = d.key;\n                return v;\n            })\n            return bins})\n        .join('rect')\n        .classed('state-rect', true)\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim/2);\n\n        stateRects.attr('fill', (d, i, n)=> {\n            let sum = d3.sum(d.state.map(m=> m.value))\n            let av = sum / d.state.length;\n            let scale = d3.scaleLinear().domain([0, 1]).range([0, 1]);\n            return `rgba(89, 91, 101, ${scale(av)})`;\n        }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n\n        stateRects.attr('transform', (d, i)=> {\n            return `translate(0, ${(3.5+(i*(dimensions.squareDim+2)))})`\n        });\n\n        let discreteBinGroups = discreteDist.selectAll('g.group')\n                .data(d=> d.bins)\n                .join('g')\n                .classed('group', true)\n                .attr('transform', (d, i)=> { \n                    let move = d.index === 0 ? (-40 - (dimensions.squareDim/2)) : (dimensions.squareDim/2)\n                    return `translate(${move}, 0)`});\n\n        let stateBarsPredicted = discreteBinGroups.selectAll('g.histo-bars')\n            .data(d=> {\n                let binvalue = d.value.map(v=> {\n                    v.index = d.index;\n                    return v;\n                })\n            return binvalue}).join('g')\n        .classed('histo-bars', true);\n\n        stateBarsPredicted.attr('transform', (d, i)=> {\n            let dev = d3.deviation(d.state.map(m=> m.value));\n            let mean = d3.mean(d.state.map(m=> m.value));\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 40]).clamp(true);\n             \n            let xMove = d.index === 0 ? (40 - x(mean)) : 0;\n            return `translate(${xMove}, ${3.5+(i*(dimensions.squareDim+2))})`\n        });\n\n        let bars = stateBarsPredicted.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', (d, i, n)=> {\n        let dev = d3.deviation(d.state.map(m=> m.value));\n        let mean = d3.mean(d.state.map(m=> m.value));\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 40]).clamp(true);\n            return x(mean)\n        })\n        .attr('fill', d=> d.color.color)\n        .attr('opacity', 0.3);\n\n        stateRects.on('mouseover', (d, i, n)=> {\n           \n            let sum = d3.sum(d.state.map(m=> m.value))\n            let av = sum / d.state.length;\n            let tool = d3.select('#tooltip');\n            tool.transition()\n                .duration(200)\n                .style(\"opacity\", .9);\n            \n            let f = d3.format(\".3f\");\n              \n            tool.html(`${d.key} </br> ${d.state[0].state} : ${f(av)}`)\n                .style(\"left\", (d3.event.pageX - 40) + \"px\")\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n    \n        }).on('mouseout', ()=>{\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n        });\n\n        discreteMiddleGroups.each((d, i, node)=>{\n            let maxBin = 0;\n            let maxState = null;\n            d.value.map(m=> {\n                if(d3.sum(m.state.flatMap(s=> s.value)) > maxBin){\n                    maxBin = d3.sum(m.state.flatMap(s=> s.value));\n                    maxState = m.color.state;\n                }\n            });\n      \n            let winStates = d3.select(node[i]).selectAll('rect.state-rect')\n                .filter((f, j, n)=>{\n                    return f.color.state === maxState;\n                }).classed('win', true)\n                .attr('fill', (c)=> {\n                    return c.color.color;\n                }).attr('opacity', (c)=>{\n                    let sum = d3.sum(c.state.flatMap(s=> s.value));\n                    return sum/c.state.length;\n                })\n        });\n    \n\n        //////PREDICTED CONTINUOUS\n\n          //CONTIN PREDICTED\n        let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n        continDist.on('mouseover', (d, i, node)=> {\n            let newData = d.data;\n            let list = newData[0].value.concat(newData[1].value).map(m=> m.node);\n            let selected = pointGroups.filter(p=> {\n                return list.indexOf(p.node) > -1}).classed('selected', true);\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n            let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n            let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        }).on('mouseout', (d, i, node)=> {\n            d3.selectAll(\".branch-points.selected\").classed('selected', false);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            d3.select(node[i]).select('.y-axis').remove();\n        });\n\n        let continBinGroups = continDist.selectAll('g.group').data(d=> {\n            return d.bins;\n        }).join('g').classed('group', true);\n\n        continBinGroups.each((d, i, nodes)=> {\n            //console.log('contin',d, nodes)\n            d.value.maxCount = d3.sum(d.value.map(m=> m.length));\n            let distrib = d3.select(nodes[i])\n                .selectAll('g')\n                .data([d.value.map(v=> {\n                    v.maxCount = d3.sum(d.value.map(m=> m.length))\n                    v.index = d.index;\n                    return v;\n                })])\n                .join('g')\n                .classed('distribution', true);\n            distrib.attr('transform', (d,i,n)=> {\n               // console.log('in distrib',d)\n                if(d[0].index === 0){\n                    return 'translate(0, 0) rotate(90)'\n                }else{\n                    return 'translate(11, '+dimensions.height+') rotate(-90)'\n                }\n               });\n            let path = distrib.append('path').attr('d', d.index === 0 ? mirrorlineGen : lineGen);\n            path.attr(\"fill\", (v, i, n)=> {\n                return defaultBarColor})\n            .attr('opacity', 0.4)\n            .style('stroke', compareColors[d.index]);\n        });\n\n        let contRect = continBinGroups.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 10)\n        .style('fill', '#fff')\n        .style('stroke', 'gray');\n\n    let rangeRectWrap = continDist.selectAll('g.range-wrap').data(d=> {\n        return d.data;\n    }).join('g').classed('range-wrap', true)\n    \n    let rangeRect = rangeRectWrap.selectAll('rect.range').data((d,i)=> {\n        let newData = d.value.map(m=> {\n            m.range = d.range;\n            m.gindex = i;\n            return m;\n        })\n        return newData;\n    }).join('rect').classed('range', true);\n\n    let avRect = continDist.selectAll('rect.av-rect').data(d=> d.data)\n        .join('rect').classed('av-rect', true).attr('width', 10).attr('height', (d, i)=> {\n        if(d.value != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n    \n    avRect.attr('transform', (d, i) => {\n        if(d.value != undefined){\n            let newy = d.value[0].scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = d3.mean(d.value.map(m=> +m.values.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', (d)=>compareColors[d.index]);\n\n     //////START BRANCH EXPERIMENT\n     let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n     brush.on('end', brushed);\n\n     continDist.append(\"g\")\n     .classed('continuous-branch-brush', true)\n     .attr(\"class\", \"brush\")\n     .call(brush);\n\n     function brushed(){\n\n        let data = d3.select(this.parentNode).data()[0]\n       \n        var s = d3.event.selection;\n        var zero = d3.format(\".3n\");\n    \n        let index = d3.select('#toolbar').selectAll('.brush-span').size();\n        let classLabel = index === 0 ? 'one' : 'two';\n    \n        if(s != null){\n            let treeTest = d3.select('#sidebar').selectAll('.node').filter(f=> {\n                return f.data.leaf === true});\n    \n            if(treeTest.empty()){\n                renderTree(d3.select('#sidebar'), null, true);\n            }\n            \n            let y = d3.scaleLinear().domain([data.domain[0], data.domain[1]]).range([0, dimensions.height])\n            let attribute = data.key;\n            let brushedVal = [y.invert(s[1]), y.invert(s[0])];\n    \n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n            let nodes = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n            }));\n\n            //////\n\n            let nodeNames = nodes.map(m=> m.node);\n\n            let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n            otherBins.each((b, i, n)=> {\n\n                //let test = continuousHistogram(b.data.flatMap(m=> m.value).filter(f=> nodeNames.indexOf(f.node)));\n                let test = b.data.map((m, j)=> {\n                    m.histo = continuousHistogram(m.value.filter(f=> nodeNames.indexOf(f.node)));\n                    m.maxCount = d3.sum(b.bins[j].value.map(m=> m.length));\n                    return m\n                });\n                \n                let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n                .data(test)\n                .join('g')\n                .classed('distribution-too', true);\n\n                let pathGroup = otherDist.selectAll('g').data(d=> {\n                    let histo = d.histo.map(h=> {\n                        h.index = d.index;\n                        return h;\n                    });\n                    return [histo]})\n                    .join('g')\n                    pathGroup.each((e, i, g)=> {\n                        let index = e[0].index;\n                        let path = d3.select(g[i]).append('path')\n                            .attr('d', index === 0 ? mirrorlineGen : lineGen);\n                        path.attr(\"fill\", brushColors[index][0])\n                            .attr('fill-opacity', 0.5)\n                            .style('stroke', brushColors[index][0]);\n                        console.log(e, index, g)\n                        pathGroup.attr('transform', index === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(90)`);\n                    })//.append('path').attr('d', console.log(this));\n\n                 \n                // let path = otherDist.append('path').attr('d', mirrorlineGen);\n                // path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                // .style('stroke', brushColors[index][0]);\n    \n            });\n\n            //////\n           \n            let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n            }));\n    \n            let selectedNodes = brushedNodes(nodes, notNodes, data, brushedVal, classLabel);\n            let selectedBranch = selectedNodes[0];\n            let secondGrp = selectedNodes[1];\n            let antiSelected = selectedNodes[2];\n            let antiSecond = selectedNodes[3];\n    \n            if(index < 2){\n    \n                let doesItExist = d3.select('#toolbar').selectAll('.brush-span').filter((f, i, n)=> {\n                    return d3.select(n[i]).attr('value') == `${data.bins.groupLabel}-${data.key}`;\n                });\n    \n                if(doesItExist.size() === 0){\n    \n                    d3.select(this).select('.selection')\n                    .style('fill', `${brushColors[index][0]}`)\n                    .attr('stroke', `${brushColors[index][0]}`)\n                    .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                    .attr('stroke', brushColors[index][1])\n                    .attr('stroke-width', 2);\n    \n                    let badge = d3.select('#toolbar')\n                        .append('span')\n                        .attr('class', classLabel)\n                        .attr('id', classLabel)\n                        .classed('brush-span', true)\n                        .classed(`${data.bins.groupLabel}`, true)\n                        .classed('badge badge-secondary', true)\n                        .style('background', brushColors[index][0])\n                        .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                        .datum({brush:this, nodes: nodes})\n                        .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n    \n                    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(n[i].parentNode).remove();\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                    });\n    \n                }else{\n    \n    \n                    doesItExist.text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                    let xOut = doesItExist.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                        d3.select(n[i].parentNode).remove();\n                    });\n                   \n                    d3.select(doesItExist.datum()).call(brush.move, null);\n                    d3.select(doesItExist.datum()).select('.overlay').attr('stroke-width', 0)\n    \n                   \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll(`${data.bins.groupLabel}`)\n                        .selectAll('.second-branch')\n                        .classed('second-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.selected-branch')\n                        .classed('selected-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-second')\n                        .classed('anti-brushed-second', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-branch')\n                        .classed('anti-brushed-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n    \n                    let label = doesItExist.attr('id');\n    \n                    index = label === 'one' ? 0 : 1;\n    \n                    d3.select(this).select('.selection')\n                        .style('fill', `${brushColors[index][0]}`)\n                        .attr('stroke', `${brushColors[index][0]}`)\n                        .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                        .attr('stroke', brushColors[index][1])\n                        .attr('stroke-width', 2);\n\n                        let nodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n                        }))\n                       \n                        let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n                        }));\n\n                        doesItExist.datum({brush: this, nodes:nodes})\n    \n                    brushedNodes(nodes, notNodes, data, brushedVal, label);\n                    \n                }\n    \n            }else{\n    \n                d3.select('#toolbar').selectAll('.brush-span').filter((f, i)=> i === 0).remove();\n    \n                let classLabel = colorBool === 0 ? 'one': 'two';\n    \n                d3.select('#toolbar')\n                    .append('span')\n                    .attr('class', )\n                    .classed('brush-span', true)\n                    .classed('badge badge-secondary', true)\n                    .style('background', brushColors[colorBool][0])\n                    .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                    .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                colorBool === 0 ? colorBool = 1 : colorBool = 0;\n                secondGrp.classed(classLabel, true);\n                selectedBranch.classed(classLabel, true);\n            }\n    \n        }else{\n            d3.selectAll(`.${data.key}.brushed-branch`).classed('brushed-branch', false);\n            d3.selectAll(`.${data.key}.brushed-second`).classed('brushed-second', false);\n        }\n     }\n    \n    }\n\n\n}\n\n/**\n * \n * @param {*} binnedWrap \n * @param {*} branchScale \n * @param {*} pointGroups \n */\n\nexport function renderDistibutions(binnedWrap, branchScale, pointGroups){\n\n    let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n    predictedWrap.attr('transform', 'translate(25, 0)');\n    predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n    //ROOT RENDERING\n    let root = predictedWrap.selectAll('g.root').data(d=> {\n        return [d.rootData]}).join('g').classed('root', true);\n    root.attr('transform', `translate(60,0)`);\n\n    let contRoot = root.filter(f=> f.type === \"continuous\");\n    contRoot.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 12)\n        .attr('fill', '#fff')\n        .style('stroke-width', '0.5px')\n        .style('stroke', 'black')\n\n    let rootRange = contRoot.append('rect')\n        .attr('width', 12)\n        .attr('height', d=> {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            return newy(d.values.lowerCI95) - newy(+d.values.upperCI95)\n        }).attr('transform', (d, i) => {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            return 'translate(0,'+newy(+d.values.upperCI95)+')'\n        }).style('opacity', 0.5).attr('fill', defaultBarColor);\n\n    let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n    \n    rootAv.attr('transform', (d, i) => {\n            let newy = d.scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = +d.values.realVal;\n            return 'translate(0,'+newy(mean)+')';\n    }).attr('fill', '#004573');\n\n       // Discrete Root\n    let disRoot = root.filter(f=> f.type === \"discrete\");\n    let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n        return d.bins}).join('g').classed('root-state-groups', true);\n\n    rootStateGroups.append('text')\n        .text((d, i)=> d.color.state)\n        .attr('y', 10)\n        .attr('x', -3)\n        .style('font-size', 10)\n        .style('text-anchor', 'end');\n\n    rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n    rootStateGroups.append('rect')\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim)\n        .attr('fill', '#fff').attr('opacity', 1);\n\n    let rootRects = rootStateGroups.append('rect')\n        .classed('color-rect', true)\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim);\n\n    rootRects.attr('fill', (d, i)=> {\n            return `rgba(89, 91, 101, ${d.state[0].value})`;\n        }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n\n    let winStateRoot = disRoot.selectAll('g.root-state-groups')\n        .filter((f, j, n)=>{\n            let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n            return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n        }).classed('win', true);\n\n    winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n            return c.color.color;\n        }).attr('opacity', (c)=>{\n            let sum = d3.sum(c.state.flatMap(s=> s.value));\n            return sum/c.state.length;\n        })\n\n\n    /////BRANCHES\n    let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n        return d.branches}).join('g').classed('branch-bin', true);\n\n    branchGroup.attr('transform', (d, i, n)=> {\n        let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange])\n            return 'translate('+(100 + (branchScale(i)) + x(step)) +', 0)'});\n\n    let discreteDist = branchGroup.filter(f=> f.type === 'discrete');\n\n    /////////EXPERIMENT////////\n    let stateBarsPredicted = discreteDist.selectAll('g.histo-bars')\n        .data(d=> {\n            let bins = d.bins.map(m=> {\n                m.index = d.index;\n                return m\n            });\n            return bins}).join('g')\n        .classed('histo-bars', true);\n  \n//stateBarsPredicted.attr('transform', (d, i)=> `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`);\n    stateBarsPredicted.attr('transform', (d, i, n)=> {\n        return `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`});\n\n    let bars = stateBarsPredicted.append('rect')\n              .attr('height', dimensions.squareDim)\n              .attr('width', (d, i, n)=> {\n                let dev = d3.deviation(d.state.map(m=> m.value));\n                let mean = d3.mean(d.state.map(m=> m.value));\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n                return x(mean)\n              })\n              .attr('fill', d=> d.color.color)\n              .attr('opacity', 0.3)\n\n    // let devDotHigh = stateBarsPredicted.append('circle')\n    //           .attr('cy', dimensions.squareDim / 2)\n    //           .attr('cx', (d, i, n)=> {\n    //             let dev = d3.deviation(d.state.map(m=> m.value));\n    //             let mean = d3.mean(d.state.map(m=> m.value));\n    //             let x = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n    //             return x(mean + dev)\n    //           })\n    //           .attr('r', 2)\n    //           .attr('fill', d=> d.color.color)\n    //           .attr('opacity', 1)\n\n    // let devDotLow = stateBarsPredicted.append('circle')\n    //           .attr('cy', dimensions.squareDim / 2)\n    //           .attr('cx', (d, i, n)=> {\n    //             let dev = d3.deviation(d.state.map(m=> m.value));\n                \n    //             let mean = d3.mean(d.state.map(m=> m.value));\n    //             let x = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n    //             return x(mean - dev)\n    //           })\n    //           .attr('r', 2)\n    //           .attr('fill', d=> d.color.color)\n    //           .attr('opacity', 1)\n\n    /////////END XPERIMENT////////\n\n    let stateBinsPredicted = discreteDist.selectAll('g.state-bins')\n        .data(d=> d.bins).join('g')\n        .classed('state-bins', true);\n\n    stateBinsPredicted.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n\n    stateBinsPredicted.append('rect')\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim)\n        .attr('fill', '#fff').attr('opacity', 1);\n\n    let stateRects = stateBinsPredicted.append('rect')\n        .classed('state-rect', true)\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim);\n\n    stateRects.attr('fill', (d, i, n)=> {\n        let sum = d3.sum(d.state.map(m=> m.value))\n        let av = sum / d.state.length;\n        let scale = d3.scaleLinear().domain([0, 1]).range([0, 1]);\n        return `rgba(89, 91, 101, ${scale(av)})`;\n    }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n\n    stateRects.on('mouseover', (d, i, n)=> {\n        let sum = d3.sum(d.state.map(m=> m.value))\n        let av = sum / d.state.length;\n        let tool = d3.select('#tooltip');\n        tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n        \n        let f = d3.format(\".3f\");\n          \n        tool.html(`${d.state[0].state} : ${f(av)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        tool.style('height', 'auto');\n\n    }).on('mouseout', ()=>{\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    discreteDist.each((d, i, node)=>{\n        let maxBin = 0;\n        let maxState = null;\n        d.bins.map(m=> {\n            if(d3.sum(m.state.flatMap(s=> s.value)) > maxBin){\n                maxBin = d3.sum(m.state.flatMap(s=> s.value));\n                maxState = m.color.state;\n            }\n        });\n  \n        let winStates = d3.select(node[i]).selectAll('g.state-bins')\n            .filter((f, j, n)=>{\n                return f.color.state === maxState;\n            }).classed('win', true);\n\n        winStates.select('rect.state-rect').attr('fill', (c)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            })\n    });\n\n    let disWrap = predictedWrap.filter(f=> f.type === 'discrete')\n    let pathKeeper = []\n    disWrap.each((d, i, node)=> {\n        let winPosArray = [];\n        d3.select(node[i]).selectAll('.win').each((r, j, n)=>{\n            winPosArray.push([n[j].getBoundingClientRect().x,(n[j].getBoundingClientRect().y + 10)])\n            winPosArray.push([n[j].getBoundingClientRect().x + 15,(n[j].getBoundingClientRect().y + 10)])\n        });\n        pathKeeper.push([...winPosArray]);\n        let lineThing = d3.line();\n        winPosArray[winPosArray.length -1][1] = winPosArray[winPosArray.length -1][1] + 2;\n        winPosArray[winPosArray.length -2][1] = winPosArray[winPosArray.length -2][1] + 2;\n        d.win = winPosArray;\n    });\n\n    disWrap.each((e, i, n)=> {\n        let lineThing = d3.line();\n        d3.select(n[i]).select('.win-line').append('path').attr('d', (d)=> lineThing(d.win))\n        .attr('transform', 'translate(-75, -'+n[i].getBoundingClientRect().y+')')\n        .attr('fill', 'none')\n        .attr('stroke', `rgba(200, 203, 219, .9)`)\n        .attr('stoke-width', 1)\n    });\n\n    //CONTIN PREDICTED\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    continDist.on('mouseover', (d, i, node)=> {\n        let list = d.data.map(m=> m.node);\n        let selected = pointGroups.filter(p=> {\n            return list.indexOf(p.node) > -1}).classed('selected', true);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n        let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n        let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    continDist.each((d, i, nodes)=> {\n        let distrib = d3.select(nodes[i])\n            .selectAll('g')\n            .data([d.bins])\n            .join('g')\n            .classed('distribution', true);\n\n        distrib.attr('transform', 'translate(11, '+dimensions.height+') rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", defaultBarColor).attr('fill-opacity', .4)//.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', defaultBarColor);\n    });\n\n    let contRect = continDist.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 10)\n        .style('fill', 'none')\n        .style('stroke', 'gray');\n\n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        })\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.scales.yScale != undefined){\n            let newy = d.scales.yScale;\n            newy.range([80, 0]);\n            return newy(d.values.lowerCI95) - newy(d.values.upperCI95)\n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n        let newy = d.scales.yScale;\n        newy.range([80, 0]);\n        return 'translate(0,'+newy(d.values.upperCI95)+')'\n    });\n\n    //rangeRect.attr('fill', \"rgba(133, 193, 233, .05)\");\n    rangeRect.attr('fill', defaultBarColor).attr('opacity', 0.5)\n\n    let avRect = continDist.append('rect').attr('width', 10).attr('height', (d, i)=> {\n        if(d.data[0] != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n\n    avRect.attr('transform', (d, i) => {\n        if(d.data[0] != undefined){\n            let newy = d.data[0].scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = d3.mean(d.data.map(m=> +m.values.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', '#004573');\n\n     //////START BRANCH EXPERIMENT\n     let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n     brush.on('end', brushed);\n\n     continDist.append(\"g\")\n     .classed('continuous-branch-brush', true)\n     .attr(\"class\", \"brush\")\n     .call(brush);\n \n     function brushed(){\n\n        let data = d3.select(this.parentNode).data()[0]\n        var s = d3.event.selection;\n        var zero = d3.format(\".3n\");\n\n       // console.log(d3.sum(data.bins.map(m=> m.length)))\n    \n        let index = d3.select('#toolbar').selectAll('.brush-span').size();\n        let classLabel = index === 0 ? 'one' : 'two';\n    \n        if(s != null){\n            let treeTest = d3.select('#sidebar').selectAll('.node').filter(f=> {\n                return f.data.leaf === true});\n    \n            if(treeTest.empty()){\n                renderTree(d3.select('#sidebar'), null, true);\n            }\n\n            let y = d3.scaleLinear().domain([data.domain[0], data.domain[1]]).range([0, dimensions.height])\n           \n            let attribute = data.key;\n            let brushedVal = [y.invert(s[1]), y.invert(s[0])];\n    \n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n            let nodes = data.data.filter(f=> {\n                return (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1]);\n            });\n           \n            let test = continuousHistogram(nodes);\n\n           // console.log(test, )\n           \n            test.maxCount = d3.sum(data.bins.map(m=> m.length));\n\n            //////EXPERIMENTING WITH BRUSH DRAW DISTRIBUTIONS////\n            let brushedDist = d3.select(this.parentNode)\n            .selectAll('g.distribution-too')\n            .data([test])\n            .join('g')\n            .classed('distribution-too', true);\n\n            brushedDist.attr('transform', 'translate(0, 0) rotate(90)');\n            let path = brushedDist.append('path').attr('d', mirrorlineGen);\n            path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n            .style('stroke', brushColors[index][0]);\n\n            let nodeNames = nodes.map(m=> m.node);\n\n            let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n            otherBins.each((b, i, n)=> {\n                \n                let test = continuousHistogram(b.data.filter(f=> nodeNames.indexOf(f.node) > -1) );\n               \n                test.maxCount = d3.sum(b.bins.map(m=> m.length));\n              \n                let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n                .data([test])\n                .join('g')\n                .classed('distribution-too', true);\n\n                otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n                let path = otherDist.append('path').attr('d', mirrorlineGen);\n                path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n    \n            });\n\n            let descendBins = continDist.filter(f=> {\n                return (f.index > data.index) && (f.key === data.key)});\n            descendBins.each((b, i, n)=> {\n\n                console.log('b.data',b.data)\n                let test = b.data.filter(f=> {\n                    return (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1]);\n                    });\n\n                 let testH = continuousHistogram(test);\n               \n                 testH.maxCount = d3.sum(b.bins.map(m=> m.length));\n              \n                let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n                .data([testH])\n                .join('g')\n                .classed('distribution-too', true);\n\n                otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n                let path = otherDist.append('path').attr('d', mirrorlineGen);\n                path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n\n            })\n          \n            ////END DISTRIBUTION///\n           \n            let notNodes = data.data.filter(f=> {\n                return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n            });\n\n            let selectedNodes = brushedNodes(nodes, notNodes, data, brushedVal, classLabel);\n            let selectedBranch = selectedNodes[0];\n            let secondGrp = selectedNodes[1];\n            let antiSelected = selectedNodes[2];\n            let antiSecond = selectedNodes[3];\n    \n            if(index < 2){\n    \n                let doesItExist = d3.select('#toolbar').selectAll('.brush-span').filter((f, i, n)=> {\n                    return d3.select(n[i]).attr('value') == `${data.bins.groupLabel}-${data.key}`;\n                });\n    \n                if(doesItExist.size() === 0){\n    \n                    d3.select(this).select('.selection')\n                    .style('fill', `${brushColors[index][0]}`)\n                    .attr('stroke', `${brushColors[index][0]}`)\n                    .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                    .attr('stroke', brushColors[index][1])\n                    .attr('stroke-width', 2);\n    \n                    let badge = d3.select('#toolbar')\n                        .append('span')\n                        .attr('class', classLabel)\n                        .attr('id', classLabel)\n                        .classed('brush-span', true)\n                        .classed(`${data.bins.groupLabel}`, true)\n                        .classed('badge badge-secondary', true)\n                        .style('background', brushColors[index][0])\n                        .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                        .datum({brush:this, nodes: nodes})\n                        .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n    \n                    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(n[i].parentNode).remove();\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                    });\n    \n                }else{\n    \n    \n                    doesItExist.text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                    let xOut = doesItExist.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                        d3.select(n[i].parentNode).remove();\n                    });\n                   \n                    d3.select(doesItExist.datum().brush).call(brush.move, null);\n                    d3.select(doesItExist.datum().brush).select('.overlay').attr('stroke-width', 0)\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll(`${data.bins.groupLabel}`)\n                        .selectAll('.second-branch')\n                        .classed('second-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.selected-branch')\n                        .classed('selected-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-second')\n                        .classed('anti-brushed-second', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-branch')\n                        .classed('anti-brushed-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    let label = doesItExist.attr('id');\n    \n                    index = label === 'one' ? 0 : 1;\n    \n                    d3.select(this).select('.selection')\n                        .style('fill', `${brushColors[index][0]}`)\n                        .attr('stroke', `${brushColors[index][0]}`)\n                        .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                        .attr('stroke', brushColors[index][1])\n                        .attr('stroke-width', 2);\n\n                       \n                    let nodes = data.data.filter(f=> {\n                        return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n                    });\n\n                    let notNodes = data.data.filter(f=> {\n                        return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n                    });\n\n                    doesItExist.datum({brush:this, nodes: nodes})\n                    brushedNodes(nodes, notNodes, data, brushedVal, label);\n                    \n                }\n    \n            }else{\n    \n                d3.select('#toolbar').selectAll('.brush-span').filter((f, i)=> i === 0).remove();\n    \n                let classLabel = colorBool === 0 ? 'one': 'two';\n    \n                d3.select('#toolbar')\n                    .append('span')\n                    .attr('class', )\n                    .classed('brush-span', true)\n                    .classed('badge badge-secondary', true)\n                    .style('background', brushColors[colorBool][0])\n                    .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                    .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                colorBool === 0 ? colorBool = 1 : colorBool = 0;\n                secondGrp.classed(classLabel, true);\n                selectedBranch.classed(classLabel, true);\n            }\n    \n        }else{\n            d3.selectAll(`.${data.key}.brushed-branch`).classed('brushed-branch', false);\n            d3.selectAll(`.${data.key}.brushed-second`).classed('brushed-second', false);\n        }\n     }\n\n     ///OBSERVED/////\n     let observedWrap = binnedWrap.append('g').classed('observed', true);\n     observedWrap.attr('transform', (d, i, n)=> {\n         return 'translate('+ (dimensions.predictedWidth + 150) +', 0)'});\n\n    ////OBSERVED CONTIUOUS/////\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n    contOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, -15)`);\n\n    let contBars = contOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(dimensions.height - dimensions.margin), 0])\n        return y(Object.keys(d).length - 2)\n    })\n    .attr('fill', defaultBarColor).attr('fill-opacity', .5);\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let y = d3.scaleLinear()\n            .domain([0, Object.keys(d).length])\n            .range([(dimensions.height - dimensions.margin), 0]);\n\n        let movey = dimensions.height - y(Object.keys(d).length - 2);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    contOb.each((d, i, nodes)=> {\n\n        let xvalues = d.leafData.data.map(m=> {\n            return +m.values.realVal});\n        let x = d3.scaleLinear()\n            .domain([d3.min(xvalues), d3.max(xvalues)])\n            .range([0, dimensions.observedWidth]);\n\n        let y = d3.scaleLinear()\n            .domain([0, d3.max(d.leafData.bins.map(b=> Object.keys(b).length)) - 2])\n            .range([(dimensions.height - dimensions.margin), 0]);\n        \n        d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis', true)\n            .call(d3.axisBottom(x))\n            .attr('transform', 'translate(0, '+dimensions.height+')')\n\n        d3.select(nodes[i]).append('g')\n            .classed('y-axis', true)\n            .call(d3.axisLeft(y).ticks(4))\n            .attr('transform', 'translate(0, '+dimensions.margin+')');\n\n            d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n            d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n\n            d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis-label', true)\n            .append('text').text('Frequency')\n            .attr('transform', `translate(-20, ${dimensions.height- 10}) rotate(-90)`)\n            .style('font-size', '10px');\n    });\n    \n    ////Observed Discrete////\n    let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n    discOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, 5)`)\n    let discBars = discOb.selectAll('g.ob-bars').data(d=> {\n        return d.stateKeys.map((key, i)=>{\n            return {state: key, data: d.leafData.bins[i], max: d3.sum(d.leafData.bins.map(b=> b.length))}\n        });\n    }).join('g').classed('ob-bars', true);\n    let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10): 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height)])\n        return y(d.data.length);\n    }).attr('fill', (d, i) => {\n        return d.data[0] != undefined ? d.data[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    discBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10) : 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height-5)])\n        let movey = (height-5) - y(d.data.length);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    dRects.on('mouseover', (d, i, n)=> {\n        let state = d3.select('g.'+d[0].label).selectAll('g.state');\n        state.filter(f=> {\n            return f[0].state === d[0].winState}).attr('opacity', 0.8);\n        state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n        d3.select(n[i]).attr('opacity', 0.9);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).attr('opacity', 0.3);\n        let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n    });\n\n    discOb.each((d, i, nodes)=> {\n           \n            let xPoint = d3.scalePoint().domain(d.stateKeys).range([0, dimensions.observedWidth]).padding(.6)\n            let height = d.stateKeys ? (d.stateKeys.length * dimensions.squareDim - 10) : 0;\n            let y = d3.scaleLinear().domain([0, d.leafData.data.length]).range([(height), 0]);\n            d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4))//.attr('transform', 'translate(0, '+height+')');\n            d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n\n            d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n            d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n    });\n\n}\n\nfunction brushedNodes(nodes, notNodes, data, brushedVal, classLabel){\n   \n    let nodeNames = nodes.map(m=> m.node);\n    let notNodeNames = notNodes.map(m=> m.node);\n\n    let timeNodes = d3.extent(nodes.map(m=> m.combLength));\n    let treeNode = d3.select('#sidebar').selectAll('.node');\n\n    let selectedBranch = treeNode.filter(f=> {\n        return nodeNames.indexOf(f.data.node) > -1;\n    }).classed('brushed-branch', true);\n\n    let notNodeSelectedBranch = treeNode.filter(f=> notNodeNames.indexOf(f.data.node) > -1).classed('anti-brushed', true);\n\n    let test = pullPath([], selectedBranch.data(), [], [], 0);\n    let notTest = pullPath([], notNodeSelectedBranch.data(), [], [], 0);\n\n    let testtest = test.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values.realVal >= brushedVal[0] && f.data.attributes[data.key].values.realVal <= brushedVal[1];\n    }).map(m=> m.data.node);\n\n    let notTestTest = notTest.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values.realVal < brushedVal[0] || f.data.attributes[data.key].values.realVal > brushedVal[1];\n    }).map(m=> m.data.node);\n    \n    let secondGrp = treeNode.filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n    let secondLinks = d3.select('#sidebar').selectAll('.link')\n        .filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n    \n    selectedBranch.classed(`${data.key}`, true).classed(classLabel, true).classed('brushed-branch', true);\n   \n    let notNodeSecondGrp = treeNode\n        .filter(f=> (notNodeNames.indexOf(f.data.node) === -1 )&& (notTestTest.indexOf(f.data.node) > -1))\n        .classed('anti-brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n\n    let secondAntiLinks = d3.select('#sidebar').selectAll('.link')\n            .filter((f, j)=> (notNodeNames.indexOf(f.data.node) === -1)&&(notTestTest.indexOf(f.data.node) > -1));\n    secondAntiLinks.classed('anti-brushed-second', true).classed(`${data.key}`, true).classed(classLabel, true);\n    notNodeSelectedBranch.classed('anti-brushed', true).classed(classLabel, true).classed(classLabel, true);\n\n    return [selectedBranch, secondGrp, notNodeSelectedBranch, notNodeSecondGrp];\n}\n\nfunction continuousHistogram(data){\n    \n    let x = data[0].yScale;\n    let histogram = d3.histogram()\n            .value(function(d) { return d.values.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n\n    return histogram(data);\n}\n\nlet mirrorlineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n      \n        let y = d3.scaleLinear().domain([n.length - 1, 0]).range([0, dimensions.height]).clamp(true);\n        \n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = n.maxCount ? n.maxCount : d.maxCount;\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        \n        return x(dat); \n});\n\nvar lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, n.length - 1]).range([0, dimensions.height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = d.maxCount? d.maxCount : d3.sum(n.map(m=> m.length))\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        return x(dat); \n    });\n\n\n","import * as d3 from \"d3\";\nimport { branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes } from './renderPathView';\nimport { formatAttributeData } from './dataFormat';\nimport { filterMaster } from './filterComponent';\nimport { dataMaster, collapsed, colorKeeper } from './index';\nimport { renderDistibutions } from \"./distributionView\";\n\nexport let selectedPaths = [];\nexport let comparisonKeeper = [];\n\nexport function pathSelected(selectedPath, otherPaths, scales) {\n\n    let selectedDiv = d3.select('div#selected');\n    let main = d3.select('div#main');\n    if (selectedPath === null) {\n\n        selectedPaths = [];\n\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, false);\n\n    } else {\n      \n        selectedPaths = selectedPaths.concat(selectedPath);\n        let commonNodes = renderSelectedView([...selectedPaths], [...otherPaths], selectedDiv, scales);\n        let sortedPaths = sortOtherPaths([...selectedPaths], [...otherPaths], [...commonNodes]);\n        \n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let pathGroups = drawPathsAndAttributes(sortedPaths.map(s => s.data), main, scales, false);\n\n        main.style('padding-top', '250px');\n    }\n}\nfunction getCommonNodes(paths){\n    let maxBranch = d3.max(paths.map(p => p.length));\n    let longestBranch = paths.filter(path => path.length === maxBranch)[0];\n    let startBranch = longestBranch.filter(f=> f.leaf != true);\n    let commonNodeStart = startBranch;\n    //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n    paths.map(path => {\n        commonNodeStart = [...path].filter(f => {\n            return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n    });\n\n    let children = paths.map(path => {\n        path = (path[0].leaf === true) ? path.reverse() : path;\n        let nodeIndex = path.map(p => p.node);\n        let thresh = nodeIndex.indexOf(commonNodeStart[commonNodeStart.length - 1].node);\n        let subset = path.filter((f, i) => i > thresh);\n        return subset;\n    });\n\n    commonNodeStart[commonNodeStart.length - 1].children = children.map((path, i) => {\n        let max = d3.max(path.map(p => p.edgeMove)) - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n        return path.map((chil, j, n) => {\n            chil.parentBase = commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.move = chil.edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.base = (j === 0) ? 0 : n[j - 1].edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            let parentScale = d3.scaleLinear().domain([0, 1]).range([0, 1000])\n            let scaledParentMove = parentScale(commonNodeStart[commonNodeStart.length - 1].edgeMove);\n            chil.xScale = d3.scaleLinear().domain([0, max]).range([0, (1000 - scaledParentMove)]);\n            chil.level = i;\n            return chil;\n        });\n    });\n\n    return commonNodeStart;\n}\nexport function sortOtherPaths(pathData, otherPaths, commonNode) {\n\n    if(pathData.length > 1){\n\n        if(commonNode != null){\n\n            let chosenPath = commonNode.reverse().map(m => m.node);\n            let rankedPaths = otherPaths.map(path => {\n                let step = 0;\n                let test = path.reverse().map((node, i) => {\n                    if (chosenPath.indexOf(node.node));\n                    return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n                }).filter(f => f.indexOf > -1);\n                let distance = (test[0].indexOf + test[0].pathIndex);\n                return { 'data': path.reverse(), 'distance': distance };\n            });\n            let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        \n            return sortedData;\n        }\n        console.error('multiple paths without common node');\n    }else{\n\n        let chosenPath = pathData[0].reverse().map(m => m.node);\n    \n        let rankedPaths = otherPaths.map(path => {\n            let step = 0;\n            let test = path.reverse().map((node, i) => {\n                if (chosenPath.indexOf(node.node));\n                return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n            }).filter(f => f.indexOf > -1);\n            let distance = (test[0].indexOf + test[0].pathIndex);\n            return { 'data': path.reverse(), 'distance': distance };\n        });\n        let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        return sortedData;\n    }\n\n}\nfunction renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency){\n\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', 'translate(0, 20)')\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data([commonNodeStart]).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n        pathBars.attr('height', (35 + (25 * commonNodeStart[commonNodeStart.length - 1].children.length)));\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(145, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', (d, i) => {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n                return x(d[d.length - 1].edgeMove)\n            })\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        nodeGroups.classed('common-node', true);\n\n        let childNodeWrap = nodeGroups.filter(c => c.children != undefined).selectAll('g.child').data(d => d.children).join('g').classed('child', true);\n\n        let childNodes = childNodeWrap.selectAll('g.node').data(d => d).join('g').classed('node', true)\n        childNodes.attr('transform', (d, i, n) => {\n            return 'translate(' + d.xScale(d.move) + ', ' + (d.level * 20) + ')';\n        });\n\n        childNodeWrap.append('path').attr('d', (d, i, n) => {\n            let pathArray = [{ 'x': 0, 'y': 0 }, { 'x': 0, 'y': i }];\n            d.map(m => {\n                pathArray.push({ 'x': m.xScale(m.move), 'y': m.level })\n            });\n            let line = d3.line()\n                .curve(d3.curveMonotoneY)\n                .x(function(d) {\n                    return d.x;\n                })\n                .y(d => (d.y * 20))\n            return line(pathArray);\n        }).attr('stoke-width', '2px').attr('fill', 'none').attr('stroke', 'gray');\n\n        childNodeWrap.on('mouseover', (d, i)=> {\n            let specArray = d.map(m=> m.species);\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let commonHover = [...commonNodeStart].map(c=> c.node).concat(d.map(n=> n.node));\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            treeLinks.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', (d, i)=> {\n            d3.selectAll('.hover').classed('hover', false);\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        let childCirc = childNodes.append('circle').attr('r', 7).attr('fill', 'red').attr('y', 5);\n\n        childCirc.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        childNodes.filter(f => f.leaf === true).append('text').text(d => d.label).attr('x', 9).attr('y', 4);\n        //selectWrap.attr('transform', 'translate('+(50+(20 *commonNodeStart[commonNodeStart.length - 1].children.length))+')')\n       \n\n}\nexport function addRemoveBubble(group, scales){\n\n    let pathRemove = group.append('g').classed('x-icon', true);\n    pathRemove.attr('transform', 'translate(15, 10)');\n    pathRemove.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathRemove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n    pathRemove.style('cursor', 'pointer');\n    pathRemove.on('click', (d, i, n) => {\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        pathSelected(null, dataMaster[0], scales);\n    });\n\n}\nexport function renderComparison(group, otherPaths, selectedDiv, scales){\n \n    let buttonGroupTest = selectedDiv.select('.button-wrap');\n    let buttonGroup = buttonGroupTest.empty() ? selectedDiv.append('div').classed('button-wrap', true) : buttonGroupTest;\n\n\n    \n    buttonGroup.style('display','inline-block').style('width', '900px').style('height', '50px');\n    let main = d3.select('div#main');\n    main.style('padding-top', '300px');\n\n    if(group != null){\n        let usedColors = comparisonKeeper.map(m=> m.groupColor);\n        let newColor = colorKeeper.find(c => usedColors.indexOf(c[0]) === -1);\n        group.groupColor = newColor[0];\n        comparisonKeeper.push(group);\n    }\n\n    if(comparisonKeeper.length > 1){\n        let compareButtonTest = d3.select('#toolbar').select('#compare-button');\n        let compareButton = compareButtonTest.empty() ? d3.select('#toolbar').append('button').text('Normal Mode').attr('id', 'compare-button').classed('btn btn-info', true) : compareButtonTest;\n        compareButton.on('click', ()=> {\n            compareButton.text() === \"Normal Mode\" ? compareButton.text('Compare Mode') : compareButton.text('Normal Mode');\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        });\n    }\n\n    let comparisonCombined = scales.map((sc, i)=> {\n        let newAtt = {'field': sc.field, 'type': sc.type, 'data': []}\n        comparisonKeeper.map((com, i)=> {\n            let atts = formatAttributeData(com.data, scales, [sc.field]);\n           \n            let added = atts.flatMap(att=> {\n                return att.map(a => {\n                    return a.map(m=> {\n                        let standard = m.leaf === true ? 0 : (m.upperCI95 - m.realVal) / 2;\n                        m.variance = standard * standard;\n                        return m;\n                    });\n                })\n            })\n\n            newAtt.data.push({'group': {'first': com.first, 'second': com.second, 'color': com.groupColor}, 'data': sc.type === 'continuous' ? added : atts.flatMap(a=> a)});\n        })\n        return newAtt;\n    });\n\n    let button = buttonGroup.selectAll('button').data(comparisonKeeper).join('button').classed('btn btn-info', true).style('background', d=> d.groupColor);\n    button.selectAll('span').data(t=> [t]).join('span').text(t=> {\n        return t.first ? `${t.first[1]} / ${t.second[1]}` : t.state;\n    }).append('span').text(t=> t.data.length).classed(\"badge badge-light\", true)\n    \n    let xOut = button.selectAll('i').data(d=> [d]).join('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    xOut.on('click', (d, i)=> {\n        let filteredComp = comparisonKeeper.filter(f=> f.groupColor != d.groupColor);\n        comparisonKeeper = filteredComp;\n        if(comparisonKeeper.length > 0){\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        }else{\n            selectedDiv.selectAll('*').remove();\n            selectedDiv.style('height', '0px');\n            main.style('padding-top', '0px');\n        }\n    });\n\n    let selectedTest = selectedDiv.select('.comparison-svg');\n    let selectedTool = selectedTest.empty() ? selectedDiv.append('svg').classed('comparison-svg', true) : selectedTest;\n    selectedDiv.style('height', '300px').style('width', '100%');\n    selectedTool.style('height', '300px');\n\n    let attWraps = selectedTool.selectAll('.att-wrapper').data(comparisonCombined.filter(f=> f.type === 'continuous').map((com)=>{\n       \n        let max = d3.max(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.upperCI95)))) + .2;\n        let min = d3.min(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.lowerCI95)))) - .2;\n        \n        com.data.map(c=> {\n            let binLength = 6;\n            //let max = scales.filter(f=> f.field === com.field)[0].max;\n           // let min = scales.filter(f=> f.field === com.field)[0].min;\n            let normBins = new Array(binLength).fill().map((m, i)=> {\n                let step = 1 / binLength;\n                let base = (i * step);\n                let top = ((i+ 1)* step);\n                return {'base': base, 'top': top, 'binI': i, 'max': max, 'min':min }\n            });\n\n            let internalNodes = c.data.map(path => path.filter(node=> node.leaf != true));\n            let leafNodes = c.data.flatMap(path => path.filter(node=> node.leaf === true));\n\n            c.bins = normBins.map((n, i, nodes)=> {\n                let edges = internalNodes.flatMap(path => path.filter(node=> {\n                    return node.edgeMove >= n.base && node.edgeMove <= n.top;\n                } ));\n                n.data = edges;\n                let mean = d3.mean(edges.map(e=> e.realVal));\n                n.mean = mean === undefined ? normBins[i-1].mean : mean;\n                let standard = Math.sqrt(d3.mean(edges.map(e=> e.variance)));\n                n.meanStandard = edges.length === 0 ? 0 : standard;\n                let sigma2 = standard * 2;\n                n.upCon95 = mean === undefined ? normBins[i-1].upCon95 : mean + sigma2;\n                n.lowCon95 = mean === undefined ? normBins[i-1].lowCon95 : mean - sigma2;\n                return n;\n            });\n            c.leaves = leafNodes;\n           \n            return c;\n        })\n        \n        return com;\n    }));\n    attWraps.exit().remove();\n    let attWrapsEnter = attWraps.enter().append('g').classed('att-wrapper', true);\n\n    let attLabels = attWrapsEnter.append('text').text(d=> d.field).style('text-anchor', 'end')\n                    .style('font-size', '11px').attr('transform', 'translate(120, 35)');\n\n    attWraps = attWrapsEnter.merge(attWraps);\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+(10+(i * 70))+')');\n\n    let innerWrap = attWraps.selectAll('g.inner-group').data(d=> [d]).join('g').classed('inner-group', true);\n    innerWrap.attr('transform', 'translate(150, 0)');\n    let wrapRect = innerWrap.selectAll('rect.outline-rect').data(d=> [d]).join('rect').classed('outline-rect', true)\n                    .attr('width', 800).attr('height', 60).attr('fill', '#fff').attr('stroke', 'gray');\n    \n    if(d3.select('#compare-button').empty() || d3.select('#compare-button').text() === \"Normal Mode\"){\n            let lineGen = d3.line()\n            .x((d, i)=> {\n                let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n                return x(i);\n            })\n            .y(d=> {\n            let y = d3.scaleLinear().domain([d.min, d.max])\n                y.range([60, 1]);\n                return y(d.mean);\n    });\n\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> d.data).join('g').classed('path-groups', true);\n    pathGroups.selectAll('*').remove();\n    let paths = pathGroups.append('path').attr('d', d=> { \n        let scale = d.bins[0].data[0].yScale\n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.mean === undefined){\n                b.mean = d.bins[i-1].mean;\n                d.missing = true;\n            }\n           \n            b.yScale = d3.scaleLinear().domain([b.min, b.max]).range([60, 1])\n            return b;\n        });\n        return lineGen(d.bins);\n    }).classed('path', true);\n\n    var areaG = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i)=> {\n        let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n        return x(i);\n    })\n    .y0(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.lowCon95);\n    })\n    .y1(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.upCon95); \n    });\n\n    let confGroups = innerWrap.selectAll('g.conf-groups').data(d=> d.data).join('g').classed('conf-groups', true);\n    confGroups.selectAll('*').remove();\n    let conf = confGroups.append('path').attr('d', d=> { \n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.upCon95 === NaN){\n                b.upCon95 = d.bins[i-1].upCon95;\n                d.missing = true;\n            }\n            if(b.lowCon95 === NaN){\n                b.lowCon95 = d.bins[i-1].lowCon95;\n                d.missing = true;\n            }\n\n            return b;\n        });\n        return areaG(d.bins);\n    }).classed('path', true);\n\n    paths.style('fill', 'none');\n    paths.style('stroke', d=> d.group.color);\n    paths.style('stroke-width', '2px');\n\n    conf.style('fill', d=> d.group.color);\n    conf.style('opacity', 0.15);\n\n    let yAxisG = innerWrap.append('g').classed('y-axis', true);\n\n    innerWrap.on('mousemove', function(d, i) {\n     \n        let scale = d3.scaleLinear().domain([d.data[0].bins[0].min, d.data[0].bins[0].max]).range([1, 60]);\n        let axisGroupTest = d3.select(this).select('.y-axis');\n        let axisGroup = axisGroupTest.empty() ? d3.select(this).append('g').classed('y-axis', true) : axisGroupTest;\n        \n        if(d3.select('#compare-button').empty() || d3.select('#compare-button').text()==='Normal Mode'){\n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)')\n            axisGroup.call(d3.axisLeft(scale).ticks(5));\n        }else{\n            let pathD = d3.select(this).select('.path-groups').selectAll('path');\n            let maxDiff = pathD.data().map(d=> d[0].maxDiff)[0];\n            \n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)');\n            let newScale = d3.scaleLinear().domain([maxDiff, 0]).range([0, 60]);\n            axisGroup.call(d3.axisLeft(newScale).ticks(5));\n        }\n\n    \n    }).on('mouseleave', function(){\n        let axisGroup = d3.select(this).select('.y-axis');\n        axisGroup.remove();\n    });\n    \n}else{\n\n    innerWrap.selectAll('.path-groups').remove();\n    innerWrap.selectAll('g.conf-groups').remove();\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> {\n        let startBins = d.data[0].bins;\n        let difArray = [];\n        for(let i = 1; i < d.data.length; i ++){\n            let diffs = []\n            d.data[i].bins.map((b, j)=>{\n                if(b.mean === undefined){\n                    b.mean = d.data[i].bins[j-1].mean;\n                }\n                if(startBins[j].mean === undefined){\n                    startBins[j].mean = startBins[j-1].mean;\n                }\n                let maxDiff = d.data[0].bins[0].max - d.data[0].bins[0].min;\n                diffs.push({'diff':Math.abs(startBins[j].mean - b.mean), 'maxDiff': maxDiff});\n            });\n            difArray.push(diffs);\n        }\n        return difArray;\n    }).join('g').classed('path-groups', true);\n\n    let lineGen = d3.line()\n        .x((d, i)=> {\n            let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n            return x(i);\n        })\n        .y(d=> {\n            let y = d3.scaleLinear().domain([0, d.maxDiff]).clamp(true);\n            y.range([60, 0]);\n            return y(d.diff);\n        });\n\n    let paths = pathGroups.append('path').attr('d', d=> { \n        return lineGen(d);\n    });\n\n    paths.style('fill', 'none');\n    paths.style('stroke', 'black');\n    paths.style('stroke-width', '2px');\n}\n\n/////////////////////////\nlet obsDistWrap = attWraps.selectAll('.observed-dist-wrap').data(d=> {\n  \n        let max = d3.max(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n        let min = d3.min(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n\n        let x = d3.scaleLinear().domain([min, max]).range([0, 200]);\n    \n        let histogram = d3.histogram()\n        .value(function(d) { return d.realVal; })  \n        .domain(x.domain())  \n        .thresholds(x.ticks(10)); \n        \n        let leafData = d.data.map(m=> {\n            let newLeaves = [...m.leaves].map(leaf => {\n                leaf.x = x;\n                leaf.group = m.group;\n                return leaf;\n            });\n            return {'binData':histogram(m.leaves), 'data': newLeaves, 'group': m.group, 'xScale': x};\n        });\n        return [{'data':leafData, 'xScale': x}];\n    }).join('g').classed('observed-dist-wrap', true);\n\n    obsDistWrap.attr('transform', 'translate(970, 0)');\n  \n    let xAxis = obsDistWrap.selectAll('g.axis-x').data(d=> [d]).join('g').classed('axis-x', true);\n    xAxis.attr('transform', 'translate(0, 50)')\n    xAxis.each((d, i, nodes)=> {\n        d3.select(nodes[i]).call(d3.axisBottom(d.xScale).ticks(5))\n    });\n\n    let distGroups = obsDistWrap.selectAll('.observed-group').data(d=> {\n        return d.data.map((m, i, n)=> {\n            m.index = i;\n            m.groupLength = n.length;\n            return m;\n        });\n    }).join('g').classed('observed-group', true);\n\n    let lines = distGroups.selectAll('.line').data(d => {\n            let mean = d3.mean(d.data.map(r=> r.realVal))\n            let vals = {'mean': mean, 'group':d.group, 'x':d.xScale}\n            return [vals];\n    }).join('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.mean)-1.5)+',0)')\n    .attr('height', 50).attr('width', 3).attr('fill', d=> d.group.color).style('opacity', '0.4')\n\n    let circWrap = distGroups.selectAll('.circ-wrap').data((d, i)=> [d]).join('g').classed('circ-wrap', true).attr('transform', (d, i, n)=> {\n        let move = d3.scaleLinear().domain([0, d.groupLength]).range([0, 60]);\n        return 'translate(0,'+(move(d.index+0.5))+')'});\n\n    let distCirc = circWrap.selectAll('circle.disDots').data(d=> d.data).join('circle').attr('r', 3)\n    .attr('cx', (d, i) => {\n        return d.x(d.realVal);\n    }).attr('cy', (d, i, n)=> {\n        return 0;\n    }).attr('fill', d=> d.group.color);\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales) {\n\n    let attributeHeight = 50;\n\n    let selectedSpecies = pathData.flatMap(p => p.filter(f => f.leaf === true).map(n => n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node => selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n    ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f => f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f => f.type === 'hide-attribute').map(m => m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc => {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m => m.field) : null;\n\n    ////IF THE SELECTED DIV IS THERE ALREADY USE THAT/////\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    ///////////////////////\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', () => sortPaths(sortByDistanceButton));\n\n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m => m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n    let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n    let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d => d).attr('id', (d, i) => 'radio-' + i).classed(\"form-check-input\", true);\n    radioDiv.append('label').text(d => d).property('for', (d, i) => 'radio-' + i).classed(\"form-check-label\", true);\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty() ? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    svg.selectAll('*').remove();\n\n    let branchFrequency = pathData.flatMap(row => row.flatMap(f => f.node)).reduce(function(acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n            acc[curr] = 1;\n        } else {\n            acc[curr] += 1;\n        }\n        return acc;\n    }, {});\n\n    ///RENDERING SELECTED PATHS////\n    if (pathData.length === 1) {\n\n        /////////////////////////////////////////////////\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', (d, i) => 'translate(0,20)');\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        selectedGroups.on('mouseover', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => {\n                return d.map(m => m.node).indexOf(f.data.node) > -1;\n            }).classed('hover', true);\n            treeLinks.filter(f => d.map(m => m.node).indexOf(f.data.node) > -1).classed('hover', true);\n            return d3.select(this).classed('hover', true);\n        }).on('mouseout', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n            let treeLinks = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n            return d3.select(this).classed('hover', false);\n        });\n\n        let speciesTitle = selectedGroups.append('text').text(d => {\n            let string = d.filter(f => f.leaf === true)[0].label;\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        });\n\n        speciesTitle.attr('x', 25).attr('y', 15);\n\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(150, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', 1000)\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        circle.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        let speciesNodeLabel = nodeGroups.filter(f => f.label != undefined).append('text').text(d => {\n            let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n            return string;\n        }).attr('x', 10).attr('y', 5);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(0,' + (i * 60) + ')');\n\n        let nodes = selectedGroups.select('.time-line').selectAll('.node');\n        nodes.on('mouseover', (d, i) => {\n\n            let nearest = otherPaths.filter(path => {\n                let nodearray = path.flatMap(f => f.node);\n                return nodearray.indexOf(d.node) > -1;\n            });\n\n            let nearestA = nearest[0];\n            let nearestB = nearest[1];\n           \n        });\n\n        //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(10,' + (i * ((attributeHeight + 5) * (Object.keys(d[1].attributes).length + 1))) + ')');\n\n        drawContAtt(attributeGroups);\n        drawDiscreteAtt(attributeGroups, scales, false, false);\n\n        //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attributeWrapper.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n      \n        return pathData;\n\n    } else if(pathData.length > 1 && pathData.length < 5) {\n       \n        let commonNodeStart = getCommonNodes(pathData);\n        renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency);\n\n        /////END PATH RENDER///////\n        let attWrap = svg.append('g').classed('attribute-wrapper', true);\n        let attributeData = commonNodeStart[commonNodeStart.length - 1].children.map(ch => {\n            return [...commonNodeStart].concat(ch);\n        });\n\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attDataComb = attData[0].map((att, i)=> {\n            let species = pathData[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < attData.length; index++ ){\n                let species = pathData[index].filter(f=> f.leaf === true)[0].label;\n                let last = attData[index][i].length - 1\n                attData[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': attData[index][i]})\n            }\n            return attribute;\n        });\n\n        function findMaxState(states, offset){\n            let maxP = d3.max(states.map(v=> v.realVal));\n            let notMax = states.filter(f=> f.realVal != maxP);\n            let winState = states[states.map(m=> m.realVal).indexOf(maxP)]\n            winState.other = notMax;\n            winState.offset = offset;\n    \n            return winState;\n        }\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n\n       let attGroups = attWrap.selectAll('g').data(mappedDis).join('g').classed('attr', true);\n       attGroups.attr('transform', (d, i) => 'translate(145,' + (i * (attributeHeight + 10)) + ')');\n\n       attGroups.append('text')\n        .text(d=> d.label)\n        .style('text-anchor', 'end')\n        .style('font-size', 11)\n        .attr('transform', 'translate(0,'+(attributeHeight/2)+')');\n\n       let wrapRect = attGroups.append('rect').attr('width', 1010);\n       wrapRect.attr('height', attributeHeight);\n       wrapRect.style('fill', '#fff');\n       wrapRect.style('stroke', 'gray');\n       wrapRect.style('opacity', 0.5);\n\n       attGroups.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n     \n       let speciesGrp = attGroups.selectAll('g').data(d=> {\n            d.data = d.data.map(m=> {\n                m.type = d.type;\n                return m;\n            });\n            return d.data;\n        }).join('g').classed('species', true);\n\n       let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n           return y(d.realVal) + d.offset;\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([attributeHeight-2, 1]);\n           return y(d.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n           d3.select(n[i]).classed('selected', true);\n       }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).classed('selected', false);\n       });\n\n       let disGroup = speciesGrp.filter(sp=> {\n        return sp.type === 'discrete';\n        });\n\n       let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n       branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        });\n\n        let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 5, 2]);\n            return y(d.realVal) + d.offset;\n        }).attr('cx', 5);\n\n        bCirc.attr('fill', (d, i)=> d.color);\n\n        let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n        otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n                return y(c.realVal);\n            }).attr('fill', (c)=> c.color).style('opacity', 0.1);\n\n        otherCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n\n        bCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n        \n        /////AXIS ON HOVER////\n        branchGrpDis.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let conGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'continuous';\n        });\n\n        let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n        branchGrpCon.attr('transform', (d)=> {\n         let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n             let distance = x(d.edgeMove);\n             return 'translate('+distance+', 0)';\n         });\n\n         /////AXIS ON HOVER////\n        branchGrpCon.on('mouseover', (d, i, n)=> {\n            let y = d.yScale;\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let MeanRect = branchGrpCon.append('rect');\n   \n        MeanRect.attr('width', 10).attr('height', 3);\n        MeanRect.attr('y', (d, i) => {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0])\n            return y(d.realVal);\n        });\n\n        let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n        confiBars.attr('width', 10).attr('height', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.lowerCI95) - y(d.upperCI95);\n        });\n\n        confiBars.attr('y', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.upperCI95);\n        })\n        confiBars.style('opacity', 0.1);\n\n        //tranforming elements\n        svg.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(0, 60)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n\n\n    }else{\n       \n        /////////\n        //getting common node\n        ///\n\n        let maxBranch = d3.max(pathData.map(p => p.length));\n        let longestBranch = pathData.filter(path => path.length === maxBranch)[0];\n        let startBranch = longestBranch.filter(f=> f.leaf != true);\n        let commonNodeStart = startBranch;\n        //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n        pathData.map(path => {\n            commonNodeStart = [...path].filter(f => {\n                return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n        });\n\n        svg.remove();\n        let remove = selectedTool.append('g').classed('x-icon', true);\n        remove.attr('transform', 'translate(15, 10)');\n        remove.append('circle').attr('r', 7).attr('fill', '#fff');\n        remove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n        remove.style('cursor', 'pointer');\n        remove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales);\n        });        \n\n        /////////\n        renderDistibutions(pathData, selectedDiv, scales);\n        selectedDiv.style('height', '550px');\n\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n    }\n    \n}\n\nfunction sortPaths(sortButton) {\n    if (sortButton.text() === 'Sort Most to Least') {\n        sortButton.text('Sort Least to Most');\n    } else {\n        sortButton.text('Sort Most to Least');\n    }\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport * as d3Array from 'd3-array'\nimport { colorKeeper } from './index';\nimport {pathSelected, renderComparison} from './selectedPaths';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport {filterMaster, nodeFilter, getLatestData, leafStateFilter} from './filterComponent';\nimport { drawBranchPointDistribution } from './distributionView';\nimport { dropDown } from './buttonComponents';\nimport { groupedView } from './viewControl';\n\nconst dimensions = {\n    rectWidth: 15,\n    rectHeight: 40,\n    collapsedHeight: 20,\n}\n\nexport function drawPathsAndAttributes(pathData, main, calculatedScales){\n\n    let nodeTooltipFlag = true;\n\n    let collapsed = d3.select('#scrunch').attr('value');\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(pathData, main, calculatedScales);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n\n    let attKeys = attrHide.length > 0 ? calculatedScales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    let attData = formatAttributeData(pathData, calculatedScales, attKeys);\n\n    let attrMove = attKeys === null ? calculatedScales.length : attKeys.length;\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, calculatedScales, null, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (attrMove + 1))) +')');\n    \n    let cGroups = drawContAtt(predictedAttrGrps, collapsed);\n    let dGroups = drawDiscreteAtt(predictedAttrGrps, collapsed, false);\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, pathData, (attrMove * attributeHeight));\n\n    let leafStates = d3.selectAll('.discrete-leaf');\n    leafStates.on('click', (d, i)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#state-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.winState);\n            d3.select(\"#state-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-state\").on('click', ()=> {\n                leafStateFilter(d, calculatedScales);\n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-state\").on('click', ()=> {\n                let data = getLatestData();\n                let test = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState === d.winState;\n                });\n\n                let notIt = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState != d.winState;\n                });\n            \n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test, notIt, calculatedScales);\n\n            });\n\n        }});\n\n    return pathGroups;\n\n}\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 25)');\n        ///////////////////////////////////\n}\nexport function renderPaths(pathData, main, scales){\n\n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    \n    let nodeTooltipFlag = false;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n    let circleScale = d3.scaleLog().range([6, 12]).domain([1, d3.max(Object.values(branchFrequency))]);\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.attr('y', -8);\n\n    //////////\n    ///Selecting species\n    /////////\n    let pathAdd = pathGroups.append('g').classed(\"fas fa-search-plus\", true);\n    pathAdd.attr('transform', 'translate(15, 10)');\n    pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathAdd.append('text').text('+').attr('transform', 'translate(-5, 5)');\n    pathAdd.style('cursor', 'pointer');\n\n    pathAdd.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected([d], notIt.data(), scales);\n        }\n    });\n\n    /////////\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       let string = d.filter(f=> f.leaf === true)[0].node;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 25).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', 1000)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> {\n        return d}).join('g').attr('class', (d, i, n)=> {\n            return d3.select(n[n.length - 1]).data()[0].node + \" node\";\n        });\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 10)';});\n\n    nodeGroups.on('click', (d, i, n)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#branch-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.node);\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-node\").on('click', ()=> {\n                nodeFilter(d.node, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-node\").on('click', ()=> {\n                let data = getLatestData();\n                let test = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) > -1;\n                });\n                let notIt = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) === -1;\n                });\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n                pathSelected(test.data(), notIt.data(), scales);\n            });\n        }\n    });\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n}\nexport function renderAttributes(attributeWrapper, data, scales, filterArray, collapsed){\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> {\n        return data[i]}).join('g');\n    predictedAttrGrps.classed('predicated-attr-groups', true);\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n\n    let attrLabel = predictedAttrGrps.append('text').text(d=> {\n        return d[d.length - 1].label ? d[d.length - 1].label : d[d.length - 1].attrLabel\n    });\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    return predictedAttrGrps;\n}\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 1 : 18;\n        p.change = test;\n    })\n}\nasync function continuousPaths(innerTimeline, collapsed){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? dimensions.collapsedHeight : dimensions.rectHeight;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n        let y = d.scales.yScale;\n        y.range([height, 0]);\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.values.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> d[0].color);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\nexport function drawContAtt(predictedAttrGrps, collapsed){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return (d[d.length - 1] != undefined) ? d[d.length - 1].type === 'continuous' : d.type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? dimensions.collapsedHeight : dimensions.rectHeight;\n\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, collapsed);\n ////////\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n    // let innerRect = innerBars.append('rect').classed('attribute-inner-bar', true);\n    // innerRect.attr('height', attributeHeight).attr('width', dimensions.rectWidth);\n\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n       \n        let y = d.scales.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.values.lowerCI95) - y(d.values.upperCI95);\n        let barHeight = (collapsed === 'true') ? dimensions.collapsedHeight : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.scales.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(d.values.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.values.realVal);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.values.realVal);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', dimensions.rectWidth).attr('height', 4)\n        .attr('transform', (d, i)=> {\n            let y = d.scales.yScale;\n            y.range([attributeHeight, 0]);\n            return 'translate(0, '+ y(d.values.realVal) +')';})\n        .attr('fill', d=> d.color).classed('val-bar', true);\n    }\n\n    /////AXIS ON HOVER////\n    innerBars.on('mouseover', (d, i, n)=> {\n        let y = d.scales.yScale;\n        y.range([0, attributeHeight]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n        let f = d3.format(\".3f\");\n        tool.html('mean: '+f(d.values.realVal) +\"</br>\"+\"</br>\"+ 'upperCI: '+ f(d.values.upperCI95) +\"</br>\"+\"</br>\"+ 'lowerCI: '+ f(d.values.lowerCI95))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        tool.style('height', 'auto');\n       \n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('g.y-axis')\n        d3.select(n[i]).select('g.y-axis').remove();\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    return attributeNodesCont;\n   \n}\nexport function findMaxState(states, offset){\n    let maxP = d3.max(states.map(v=> v.values.realVal));\n    let notMax = states.filter(f=> f.values.realVal != maxP);\n    let winState = states[states.map(m=> m.values.realVal).indexOf(maxP)]\n    winState.other = notMax;\n    winState.offset = offset;\n    return winState;\n}\n    //BEGIN TEST\nfunction drawLeaves(attWraps, groupBy){\n    //THIS IS HARD CODED AND SHOULD NOT BE\n\n    let numSpecies = 100;\n    let height = 40;\n    //CONTINUOUS \n    let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap-first.continuous').data(d=> {\n            let totalVal = attWraps.data().filter(f=> f.label === d.label).map(m=> m.data);\n            let totalArray = totalVal.flatMap(p=> p.flatMap(f=> f.paths[f.paths.length - 1].realVal));\n            let max = d3.max(totalArray);\n            let min = d3.min(totalArray);\n            let totalMean = d3.mean(totalArray);\n        \n            let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n            let newVal = d.data.map((m, i)=> {\n                m.index = i;\n                return {'value': m.paths[m.paths.length - 1].values.realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n            });\n            let groupMean = d3.mean(newVal.map(v=> v.value));\n            return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n        }).join('g').classed('observe-wrap-first continuous', true);\n        \n        leafWraps.attr('transform', 'translate(850, 0)');\n        \n        let xAxis = leafWraps.append('g').classed('axis-x', true);\n        xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n        xAxis.each((d, i, nodes)=> {\n            d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n        });\n        \n        let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n        \n        let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n        \n        let distCircGroupOut = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n        let distcirclesOut = distCircGroupOut.selectAll('circle').data(d=> d.dotVals).join('circle');\n        distcirclesOut.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n        //DISCRETE//\n        let leafWrapsD = attWraps.filter(f=> f.type === 'discrete').selectAll('g.observe-wrap-first.discrete').data(d=> {\n          return [d];\n        }).join('g').classed('observe-wrap-first discrete', true);\n\n        let rects = leafWrapsD.filter(f=> {\n            return f.label != groupBy;\n        }).selectAll('rect').data(d=> {\n            let groupedData = d3Array.groups(d.data.map(m=> m.paths[m.paths.length - 1]), d=> d.state);\n            groupedData.sort((a, b)=> b[1].length - a[1].length)\n            return groupedData;\n        }).join('rect').attr('height', 15).attr('width', (d, i, n)=>{\n            let scale = d3.scaleLinear().domain([0, d3.sum(d3.selectAll(n).data().map(m=> m[1].length))])\n            .range([5, 170]);\n            d.width = scale(d[1].length);\n            return scale(d[1].length);\n        });\n\n        rects.attr('x', (d, i, n)=> {\n            if(i === 0){ return 0}\n            else {\n                d3.selectAll(n).filter((f, j)=> j< i);\n                let move = d3.sum(d3.selectAll(n).filter((f, j)=> j< i).data().map(m=> m.width));\n                return move;}\n        }).attr('y', 12)\n\n        rects.attr('fill', d=> d[1][0].color);\n\n        rects.on('mouseover', (d, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            \n            tool.html(d[0] + \"</br>\" + d[1].length)\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY + 20) + \"px\");\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 0.3);\n          \n        }).on('mouseout', (s, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 1)\n        })\n\n        leafWrapsD.attr('transform', 'translate(850, 0)');\n\n        let ratio = leafWrapsD.filter(f=> f.label === groupBy)\n            .selectAll('text').data(d=> [d]).join('text').text(d=> {\n                let paths = d.data[d.data.length - 1].paths;\n                return `${paths[paths.length - 1].state}: ${d.data.length} / ${numSpecies}`\n            });\n        ratio.style('text-anchor', 'middle')\n        ratio.style('font-size', '12px')\n        ratio.attr('x', 90).attr('y', 25)\n        \n    }\nexport function drawGroups(stateBins, scales){\n    \n    let groupedBool = d3.select('#show-drop-div-group').attr('value', 'grouped');\n    \n    let height = 40;\n    let selectedTool = d3.select('#selected');\n    selectedTool.selectAll('*').remove();\n \n    let main = d3.select('#main');\n    main.style('padding-top', 0);\n\n    d3.select('#toolbar').append('text').text(stateBins[0].field)\n\n    let splitOnArray = [{'field':'None'}].concat(scales.filter(f=> (f.field != stateBins[0].field) && f.type === 'discrete'));\n    let dropOptions = dropDown(d3.select('#toolbar'), splitOnArray, 'Split On','show-drop-div-group');\n\n    ////THIS SPLITS THE DATA////\n    dropOptions.on('click', (d, i, n)=> {\n        d3.select('#toolbar').append('text').text(d.field);\n        \n        if(d.type === 'discrete'){\n            let newBins = stateBins.map(state=> {\n                let newBinData = d.scales.map(sc=> {\n                    let field = sc.field;\n                    let name = sc.scaleName;\n                    let newData = state.data.filter(pa=> {\n                        let leaf = pa.filter(le=> le.leaf === true)[0];\n                        return leaf.attributes[field].winState === name;\n                    });\n                    return {'field': field, 'state': name, 'data': newData }\n                });\n                state.data = newBinData;\n                return state;\n            });\n\n            //////RENDERING NEED TO SEPARATE OUT/////\n           \n           let main = d3.select('#main');\n           main.selectAll('*').remove();\n           main.style('padding-top', '40px');\n           let firstGroupDiv = main.selectAll('div.first-group').data(newBins).join('div').classed('first-group', true);\n           \n           let firstGroupSvg = firstGroupDiv.append('svg');\n           firstGroupSvg.attr('height', s=> (s.data.length*270));\n           let firstGroup = firstGroupSvg.append('g');\n          \n           let firstLabel = firstGroup.append('text').text(f=> f.state).attr('transform', 'translate(10, 10)');\n\n           let secondGroup = firstGroup.selectAll('g.second-group').data(g=> {\n               let newGroups = g.data.map((m)=>{\n                   let newM = {};\n                   newM.first = [g.field, g.state];\n                   newM.second = [m.field, m.state];\n                   newM.data = m.data\n                   newM.leaves = m.data.flatMap(path=> path.filter(f=> f.leaf === true));\n                   return newM\n               });\n               return newGroups}).join('g').classed('second-group', true);\n\n           secondGroup = secondGroup.filter(f=> f.data.length > 0);\n           secondGroup.attr('transform', (s, i)=> 'translate(30,'+(20 + (i * 270))+')');\n\n           secondGroup.each((s, i, n)=> {\n            let branchBar = drawBranchPointDistribution(s.data, d3.select(n[i]));\n            branchBar.select('rect').attr('x', -80).attr('fill','gray');\n            branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n            \n            branchBar.select('.leaf-label').append('text').text((t, i) =>': '+ t.data.length).attr('transform', 'translate(45, 0)');\n            branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n    \n            branchBar.select('line').attr('stroke', '#fff');\n\n            let groupLabels = d3.select(n[i]).append('g');\n\n            //groupLabels.\n            let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n            pathAdd.attr('transform', 'translate(-10, 15)');\n            pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n            pathAdd.append('text').text('+').attr('transform', 'translate(-5, 3)').attr('fill', 'gray');\n        \n            pathAdd.style('cursor', 'pointer');\n\n            pathAdd.on('click', ()=> {\n                let other = d3.selectAll(n).filter((f,j)=> j != i);\n                renderComparison(s, other.data(), d3.select('#selected'), scales);\n            });\n\n            let stateLabel = groupLabels.append('text').text((s, i)=> s.second[1]);\n            stateLabel.attr('transform', (d, i)=> 'translate(3, 20)');\n            stateLabel.attr('fill', '#fff');\n           });\n\n           let innerGroup = secondGroup.filter(f=> f.data.length > 0).append('g').classed('inner-wrap', true);\n           innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n       \n           let attWraps = innerGroup.selectAll('.att-wrapper').data((d)=> {\n               let atts = formatAttributeData(d.data, scales, null);\n             \n               let attDataComb = atts[0].map((att, i)=> {\n                  \n                   let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n\n                   att[att.length - 1].offset = 0;\n                   let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n                   for(let index = 1; index < atts.length; index++ ){\n                       let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                       let last = atts[index][i].length - 1\n                       atts[index][i][last].offset = (index * 8);\n                       attribute.data.push({'species': species, 'paths': atts[index][i]});\n                   }\n                   \n                   return attribute;\n               });\n\n              let mappedDis = attDataComb.map(dis=> {\n                  dis.data = dis.data.map((spec, i)=> {\n                      spec.paths = spec.paths.map(m=> {\n                            if(dis.type === 'discrete'){\n                                let offset = 5 * i;\n                                let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                                return maxProb;\n                            }else{\n                                return m;\n                            }\n                        });\n                   return spec;\n                  });\n        \n                  dis.leaves = dis.data.flatMap(f=> f.paths.filter(p=> p.leaf === true));\n                  return dis;\n              });\n              return mappedDis;\n           }).join('g').classed('att-wrapper', true);\n\n           let innerWrapRect = attWraps.append('rect').attr('width', 800);\n\n            innerWrapRect.attr('height', height);\n            innerWrapRect.style('fill', '#fff');\n            innerWrapRect.style('stroke', 'gray');\n\n            attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n            wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n            svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n            let labels = attWraps.append('text')\n            .text(d=> d.label)\n            .style('text-anchor', 'end')\n            .style('font-size', 11)\n            labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n////WORKING ON STATE SHIFT VIEW///////\n            let shiftWraps = attWraps.filter(f=> f.type === 'discrete').selectAll('g.shift-wrap').data(d=> {\n       \n                let test = d.data.flatMap(m=> m.paths.filter((f, i)=> {\n                    if(i===0) return (i === 0);\n                    if(i > 0) return (m.paths[i-1].state != f.state)\n                    if(i < m.paths.length - 1) return (m.paths[i+1].state != f.state);\n                }));\n             \n                return [test];\n            }).join('g').classed('shift-wrap', true);\n\n            shiftWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxisShift = shiftWraps.append('g').classed('axis-x', true);\n            xAxisShift.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxisShift.each((d, i, nodes)=> {\n                let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 200]);\n                d3.select(nodes[i]).call(d3.axisBottom(x).ticks(5));\n            });\n\n            let circGroupShift = shiftWraps.append('g').attr('transform', 'translate(0, 20)');\n\n            let shiftCircles = circGroupShift.selectAll('circle.shift').data(d=> d).join('circle').classed('shift', true);\n            shiftCircles.attr('r', 4).attr('cx', (d, i)=> {\n                let x = d3.scaleLinear().domain([0,maxTimeKeeper[0]]).range([0, 200]);\n                return x(d.combLength)\n            });\n            shiftCircles.attr('fill', d=> d.color).style('opacity', 0.4);\n\n//////DRAW OBSERVED DISTRIBUTIONS/////\n            let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap').data(d=> {\n                let totalVal = attWraps.data().filter(f=> f.label === d.label).flatMap(m=> m.leaves.map(l=> l.realVal));\n                let max = d3.max(totalVal);\n                let min = d3.min(totalVal);\n                let totalMean = d3.mean(totalVal);\n\n                let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n                let newVal = d.leaves.map((m, i)=> {\n                    m.index = i;\n                    return {'value': m.realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n                });\n                let groupMean = d3.mean(newVal.map(v=> v.value));\n                return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n            }).join('g').classed('observe-wrap', true);\n\n            leafWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxis = leafWraps.append('g').classed('axis-x', true);\n            xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxis.each((d, i, nodes)=> {\n                d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n            });\n\n            let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n\n            let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n\n            let distCircGroup = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n            let distcircles = distCircGroup.selectAll('circle').data(d=> d.dotVals).join('circle');\n            distcircles.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n            distcircles.on('mouseover', (d, i, n)=> {\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n           \n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n\n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n\n            ////DRAW SPECIES GROUPS IN THE ATTRIBUTES\n\n            let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n                d.data = d.data.map(m=> {\n                    m.type = d.type;\n                    return m;\n                });\n                return d.data;\n            }).join('g').classed('species', true);\n\n            let lineGenD = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                    })\n                .y(d=> {\n                    let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n                    return y(d.realVal);\n                });\n\n            let lineGenC = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                })\n                .y(d=> {\n                    let y = d.scales.yScale;\n                    y.range([height-2, 1]);\n                    return y(d.values.realVal) + 2;\n                });\n\n            let innerStatePaths = speciesGrp.append('path')\n                .attr(\"d\", d=> {\n                        return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n                    })\n                .attr(\"class\", (d, i)=> {\n                        return d.species + \" inner-line\"})\n                .style('stroke-width', 0.7)\n                .style('fill', 'none')\n                .style('stroke', 'gray');\n\n            innerStatePaths.on('mouseover', (d, i, n)=> {\n               \n                d3.select(n[i]).classed('selected', true);\n                distcircles.filter(f=> f.species === d.species).classed('selected', true).style('opacity', 1);\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n                \n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n            let disGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'discrete';\n            });\n\n            let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n            branchGrpDis.attr('transform', (d)=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                    let distance = x(d.combLength);\n                    return 'translate('+distance+', 0)';\n            });\n\n            let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n                let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n                return y(d.realVal);\n            }).attr('cx', 5);\n\n            bCirc.classed('win-state', true);\n\n            bCirc.attr('fill', (d, i, n)=> {\n                if(i === 0){\n                    return d.color;\n                }else if(i === n.length - 1){\n                    if(d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }else{\n                    if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }\n            });\n\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n    branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     });\n     confiBars.style('opacity', 0.1);\n           \n           //drawGroups(stateBins, calculatedScales);\n    }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        selectedTool.select('#show-drop-div-group').classed('show', false);\n    });\n    /////END SPLIT VIEW//////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    svg.selectAll('*').remove();\n\n    svg.attr('height', (stateBins.length * (height + 20)));\n    svg.append('g').attr('transform', 'translate(500, 40)').append('text').text(stateBins[0].field)\n\n    let wrappers = svg.selectAll('.grouped').data(stateBins).join('g').classed('grouped', true);\n    wrappers.each((d, i, n)=> {\n        let branchBar = drawBranchPointDistribution(d.data, d3.select(n[i]));\n        branchBar.select('rect').attr('x', -80).attr('fill','gray');\n        branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n        \n        branchBar.select('.leaf-label').append('text').text((d, i) =>': '+ d.data.length).attr('transform', 'translate(45, 0)');\n        branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n\n        branchBar.select('line').attr('stroke', '#fff');\n    });\n\n    let groupLabels = wrappers.append('g');\n   \n\n     //groupLabels.\n     let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n     pathAdd.attr('transform', 'translate(20, -5)');\n     pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n     pathAdd.append('text').text('+').attr('transform', 'translate(5, 3)').attr('fill', 'gray');\n \n     pathAdd.style('cursor', 'pointer');\n\n     pathAdd.on('click', (d, i, n)=> {\n         let other = d3.selectAll(n).filter((f,j)=> j != i);\n         renderComparison(d, other.data(), d3.select('#selected'), scales);\n     });\n\n     groupLabels.append('text').text((d, i)=> d.state);\n     groupLabels.attr('transform', (d, i)=> 'translate(40, 16)');\n     groupLabels.style('text-anchor', 'end');\n     groupLabels.attr('fill', '#fff');\n\n    let innerGroup = wrappers.append('g').classed('inner-wrap', true);\n    innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n    let attWraps = innerGroup.selectAll('.att-wrapper').data((d, i)=> {\n        let atts = formatAttributeData(d.data, scales, null);\n\n       \n        let attDataComb = atts[0].map((att, i)=> {\n            let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < atts.length; index++ ){\n                let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                let last = atts[index][i].length - 1;\n                atts[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': atts[index][i]})\n            }\n            return attribute;\n        });\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n       return mappedDis;\n    }).join('g').classed('att-wrapper', true);\n\n    let innerWrapRect = attWraps.append('rect').attr('width', 800);\n    innerWrapRect.attr('height', height);\n    innerWrapRect.style('fill', '#fff');\n    innerWrapRect.style('stroke', 'gray');\n\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n    wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n    \n    svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n       //END EXPERIMENT\n    drawLeaves(attWraps, stateBins[0].field);\n\n    let labels = attWraps.append('text')\n    .text(d=> d.label)\n    .style('text-anchor', 'end')\n    .style('font-size', 11)\n    labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n    let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n        d.data = d.data.map(m=> {\n            m.type = d.type;\n            return m;\n        });\n        return d.data;\n    }).join('g').classed('species', true);\n\n    let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n           return y(d.values.realVal);\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([height-2, 1]);\n           return y(d.values.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n        d3.select(n[i]).classed('selected', true);\n    }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).classed('selected', false);\n    });\n\n    let disGroup = speciesGrp.filter(sp=> {\n     return sp.type === 'discrete';\n     });\n\n    let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n     });\n\n    let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n         let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n         //return y(d.realVal) + d.offset;\n         return y(d.values.realVal);\n     }).attr('cx', 5);\n\n     bCirc.classed('win-state', true);\n\n     bCirc.attr('fill', (d, i, n)=> {\n        if(i === 0 || i === n.length - 1){\n            return d.color;\n            /*\n        }else if(i === n.length - 1){\n            if(d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }*/\n        }else{\n            if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }\n        }\n     });\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 800]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n     branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     })\n     confiBars.style('opacity', 0.1);\n\n     /////HIGHLIGHTING NODES IN A TREE ON HOVER//////\n     d3.selectAll('.att-wrapper').selectAll('.branch').on('mouseover', (d, i, n)=> {\n         let treeNode  = d3.select('#sidebar').selectAll('.node');\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', true);\n      \n    }).on('mouseout', (d, i, n)=> {\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', false);\n    })\n     \n}\nexport function drawDiscreteAtt(predictedAttrGrps, collapsed, bars){\n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n   // discreteAtt.selectAll('*').remove();\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        \n        // let disct = d.map(m=> {\n        //     console.log('m', d, m)\n        //     let test = (m.leaf == true) ? m.states.map(s=> {\n        //         s.combLength = m.combLength;\n        //         s.color = m.color;\n        //         return s;\n        //     }) : m;\n        //     return test;\n        // });\n        let disct = d;\n       \n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n             return disct.map(m=> m.leaf ? m : m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        let distance = x(d.combLength);\n        return distance + 7;})\n    .y(d=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        return d.value ? y(d.value) : y(1);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", (d, i)=> d[0].species + \" inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;\n    });\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g');\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, 1000]);\n        if(d[0]){\n           // let distance = (moveMetric === 'move') ? d[0].move : x(d[0].combLength);\n           let distance = x(d[0].combLength);\n            return 'translate('+distance+', 0)';\n        }else{\n           // let distance = (moveMetric === 'move') ? d.move : x(d.combLength);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('rect').attr('width', dimensions.rectWidth).attr('height', attributeHeight).attr('opacity', 0);\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n        /////AXIS ON HOVER////\n    attributeNodesDisc.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, attributeHeight]);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n        })\n\n    attributeNodesDisc.attr('class', (d, i, n)=> {\n        let path = d3.selectAll(n).data();\n        return path[path.length - 1].species;\n    }).classed('attribute-node-discrete', true);\n\n    if(bars === false){\n\n        let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n            \n            return d;\n        }).join('circle').classed('dots', true);\n        \n        stateDots.attr('cx', 10).attr('cy', (d)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n            return d.realVal? y(d.realVal) : y(d.value);\n        }).attr('r', 2);\n        \n        stateDots.style('fill', (d, i, n)=> {\n           \n            /*\n            let speciesPath = d3.selectAll('.attribute-node-discrete.'+ d.species)//.filter(f=> f.type === 'discrete');\n           \n            let nodeArray = speciesPath.data().map(m=> {\n                return m.node ? m.node : m[0].node;\n            });\n            let index = nodeArray.indexOf(d.node);\n           \n            */\n            //return d.color\n            return 'gray';\n        });\n    \n        stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n/*\n        let maxDots = stateDots.filter((f, i, n)=> {\n           \n            return f.realVal === d3.max(d3.selectAll(n).data().map(m=> m.realVal));\n        });\n*/\n        \n\n        ////NEED TO ADD COLOR ON STATE CHANGE////\n    \n        stateDots.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n        ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n    \n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }else{\n        attributeNodesDisc.filter((att, i)=> {\n            return att[0] != undefined;}).append('rect').attr('height', attributeHeight).attr('width', dimensions.rectWidth).attr('fill', '#fff')\n        let stateBars = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dis-rect').data(d=> {\n            return d;\n        }).join('rect').classed('dis-rect', true);\n\n        stateBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         \n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            return y(d.realVal);\n        });\n\n        stateBars.attr('fill', (d, i)=> d.color);\n        stateBars.attr('opacity', '0.7');\n        stateBars.attr('stroke', '#fff');\n        stateBars.attr('transform', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            let probability = d3.selectAll(n).data().sort((a, b)=> b.realVal - a.realVal);\n            let chosenIn = probability.map(p=> p.state).indexOf(d.state);\n         \n            if(chosenIn === 0){\n                    return 'translate(0,0)';\n            }else{\n                ///need to make this a reduce function///\n                let valueAdd = 0;\n                    for(let step = 0; step < chosenIn; step++){\n                        valueAdd = valueAdd + probability[step].realVal;\n                    }\n                return 'translate(0,'+(y(valueAdd))+')';\n            }\n        });\n\n        stateBars.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n\n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }\n\n    return attributeNodesDisc;\n}\n\n","import '../styles/index.scss';\n\nimport * as d3 from \"d3\";\nimport {dataMaster} from './index';\nimport { updateMainView } from './viewControl';\n\nexport let filterMaster = [];\n\nexport function removeFilter(filterId, scales){\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n    let filterIndex = dataFilters.map(f=> f.filterId).indexOf(filterId);\n\n    if(filterIndex != dataFilters.length - 1){\n   \n        let baseData = filterIndex === 0? dataMaster[0] : dataFilters[filterIndex - 1].data;\n    \n        let testData = [...baseData];\n\n        let filterToolbar = d3.select(\"#toolbar\");\n\n        let badges = filterToolbar.selectAll('.filter-tag').remove();\n  \n        for(let i = filterIndex + 1; i < dataFilters.length; i ++){\n       \n            let fun = dataFilters[i].filterFunction;\n            if(dataFilters[i].attributeType === 'continuous'){\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].predictedFilter, dataFilters[i].observedFilter);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'c-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }else{//discrete\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].fromState, dataFilters[i].toState);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'd-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }\n        }\n    }\n    let newFilterMaster = filterMaster.filter(f=> f.filterId != filterId);\n\n    filterMaster = newFilterMaster;\n}\n\nexport function addFilter(filterType, attType, filterId, filFunction, oldData, newData, extra){\n    let filterOb = {'filterType': filterType, 'attributeType': attType, 'filterId': filterId, 'filterFunction':filFunction, 'before-data': oldData, 'data': newData}\n    if(extra != null){\n        extra.forEach(ex=> {\n            filterOb[ex[0]] = ex[1];\n        });\n    }\n    filterMaster.push(filterOb);\n    return filterOb;\n}\n\nexport function getLatestData(){\n    let data = filterMaster.length > 0 ? filterMaster[filterMaster.length - 1].data : dataMaster[0];\n    return data;\n}\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, main, scales){\n    console.log(filterButton, main, scales)\n\n    let filterDiv = d3.select('#filter-tab');\n    let data = getLatestData();\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        //move metric is 'edgeLength'\n\n        //renderAttToggles(filterDiv, data, scales);\n        stateFilter(filterDiv, filterButton, data, main, scales);\n        queryFilter(filterDiv, filterButton, data, main, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\n\nfunction addFilterTag(data, scales){\n\n    let filterToolbar = d3.select('#toolbar');\n\n    if(data.attributeType === 'continuous'){\n\n        let formater = d3.format(\".2s\");\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        d3.select(button).datum(data);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        let label = button.append('h6').text(data.selectedOption + \"  Predicted: \"+ formater(data.predictedFilter[0]) + \"-\" + formater(data.predictedFilter[1]) + \" Observed: \" + formater(data.observedFilter[0]) + \"-\" + formater(data.observedFilter[1]));\n        let xSpan = label.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> data.attribute != f.attribute);\n            ////YOU NEED TO CHANGE THIS TO REMOVE FILTER FUNCTION\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'discrete'){\n     \n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(data.state[0]);\n        button.append('i').classed('fas fa-arrow-right', true);\n        button.append('h6').text(data.state[1] + '  ');\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'branch'){\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(' At Branch: ' + data.nodeId);\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }\n    \n}\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n              \n                    //let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n                    let data = getLatestData();\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filId = 'd-'+filterMaster.filter(f=> f.attributeType === 'discrete').length;\n                    let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n                    updateMainView('Summary View');\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR////\n                    addFilterTag(filterOb, scales);\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    let filId = 'c-'+filterMaster.filter(f=> f.attributeType === 'continuous').length;\n                    let filterOb = addFilter('data-filter', 'continuous', filId, continuousFilter, [...data], [...test], [['selectedOption', selectedOption], ['predictedFilter', predictedFilter], ['observedFilter', observedFilter]]);\n\n                    updateMainView('Summary View');\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    addFilterTag(filterOb, scales);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\nexport function nodeFilter(selectedNode, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path.map(node => node.node).indexOf(selectedNode) > -1;\n    });\n\n    let filId = 'b-'+filterMaster.filter(f=> f.attributeType === 'branch').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'branch', filId, nodeFilter, [...data], [...test], [['nodeId', selectedNode]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\nexport function leafStateFilter(selectedState, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path[path.length - 1].attributes[selectedState.label].winState === selectedState.winState;\n    });\n\n    let filId = 'l-'+filterMaster.filter(f=> f.attributeType === 'leaf').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'leaf', filId, nodeFilter, [...data], [...test], [['leafState', [selectedState.label, selectedState.winState]]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n}\nfunction discreteFilter(data, selectedOption, fromState, toState){\n    if(selectedOption != undefined){\n        return data.filter(path=> {\n            let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n                let states = node.attributes[selectedOption].states;\n                if(fromState === 'Any'){\n                    return true;\n                }else{\n                    return states.filter(st=> st.state === fromState).length > 0 && states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n                }\n            });\n            let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n            let win = node.attributes[selectedOption].winState;\n            if(toState === 'Any'){\n                return true;\n            }else{\n                return win === toState;\n            }\n            });\n            return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n        });\n    }\n}\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, scales){\n\n    let moveMetric = 'edgeLength';\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n         \n             updateMainView('Summary View');\n\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                updateMainView('Summary View');\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, scales){\n\n    console.log(normedPaths, scales.map(m=> m.field))\n\n    ////NEED TO GET RID OF TOGGLE SVG\n   // let keys = Object.keys(normedPaths[0][0].attributes);\n   let keys = scales.map(m=> m.field);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths], 'data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n    \n        updateMainView(\"Summary View\");\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {drawPathsAndAttributes, drawDiscreteAtt, drawGroups} from './renderPathView';\nimport {toggleFilters, getLatestData} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport { collapsed } from '.';\nimport { dropDown } from './buttonComponents';\nimport { cladesGroupKeeper, groupDataByAttribute, addCladeGroup, chosenCladesGroup } from './cladeMaker';\n\n\nexport function findBrushedNodes(){\n    let brushes = d3.select('#toolbar').selectAll('.brush-span');\n    let brushData =  [];\n    brushes.each(e => brushData.push(e))\n  \n    let nodes = brushData.flatMap(m=> m.nodes);\n    return nodes;\n}\nexport function toolbarControl(toolbar, normedPaths, main, calculatedScales, pathView){\n\n    let viewArray = [{'field':'Summary View'},{'field':'Path View'},{'field':'Pair View'}, {'field':'Clade View'}];\n\n    let viewDrop = dropDown(toolbar, viewArray, viewArray[0].field, 'change-view');\n\n    viewDrop.on('click', (d, i, n)=> {\n        updateMainView(d.field);\n        d3.select('.dropdown.change-view').select('button').node().value = d.field;\n        d3.select('.dropdown.change-view').select('button').text(d.field)\n        d3.select('#change-view').classed('show', false);\n    });\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, main, calculatedScales));\n    ///LENGTH BUTTON CODE\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, main, calculatedScales));\n\n    let discreteViewButton = toolbar.append('button').attr('id', 'discrete-view');\n    discreteViewButton.attr('class', 'btn btn-outline-secondary').text('Switch to Discrete Bars');\n    discreteViewButton.attr('value', false);\n    \n    discreteViewButton.on('click', ()=> {\n        let discretePredictedGroups = d3.selectAll('.predicated-attr-groups');\n        if(discreteViewButton.text() === 'Switch to Discrete Bars'){\n            discreteViewButton.text('Switch to Discrete Dots');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, true);\n        }else{\n            discreteViewButton.text('Switch to Discrete Bars');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, false);\n        }\n    });\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> {\n        if(m.type === 'discrete'){\n            optionArray.push(m);\n        }\n    });\n\n    let dropOptions = dropDown(toolbar, optionArray, 'Group By', 'show-drop-div-group');\n    toolbar.select('#show-drop-div-group').attr('value', 'ungrouped');\n\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            let data = getLatestData();\n            let stateBins = d.scales.map(m=> {\n                return {'field': m.field, 'state': m.scaleName, 'data': []}});\n           \n            stateBins.map(state=> {\n               state.data = data.filter(paths=> {\n                    let node = paths.filter(no=> no.leaf === true);\n                        return node[0].attributes[state.field].winState === state.state;\n                });\n            });\n           d3.select('#main').selectAll('*').remove();\n           drawGroups(stateBins, calculatedScales);\n        }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        toolbar.select('#show-drop-div-group').classed('show', false);\n    });\n\n    /////ATTRIBUTE DROP DOWN\n    let attributeOptions = calculatedScales.map(m=> m.field);\n    let checkedAttributes = attributeOptions.length > 5 ? ['Body_height', 'Body_width', 'Carpus', 'Group', 'Femur', 'island/mainland', 'Head_width', 'Forelimb'] : attributeOptions;\n\n    let dropdiv = toolbar.append('div').classed(`dropdown attribute-show`, true);\n    dropdiv.style('display', 'inline-block')\n    let button = dropdiv.append('button').classed('btn dropbtn btn-secondary dropdown-toggle', true).text('Shown Attributes');\n    let dropContent = dropdiv.append('div').attr('id', 'attribute-show').classed('dropdown-content', true);\n    let dropUl = dropContent.append('ul');\n    \n    let options = dropUl.selectAll('li').data(attributeOptions).join('li')\n    let checkBox = options.append('input').attr('type', 'checkbox');\n    options.append('text').text(d=> ` ${d}`);\n\n    let checkedDefault = options.filter(f=> checkedAttributes.indexOf(f) > -1).select('input');\n    checkedDefault.each((d, i, n) => n[i].checked = true);\n\n    button.on('click', (d, i, n)=> {\n        if(dropContent.classed('show')){\n            dropContent.classed('show', false);\n            updateMainView('Summary View', chosenCladesGroup[chosenCladesGroup.length - 1].groups)\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n\n    /////CLADE VIEW////\n\n    let cladePickerDrop = dropDown(toolbar, cladesGroupKeeper, `Clades Shown: ${cladesGroupKeeper[0].field}`, 'change-clade');\n    d3.select('#change-clade').selectAll('a').on('click', (d, i, n)=> {\n        d3.select('.dropdown.change-clade').select('button').text(`Clades Shown: ${d.field}`)\n        chosenCladesGroup.push(d)\n        updateMainView('Summary View', d.groups);\n    });\n    if(cladesGroupKeeper.length === 0){\n        d3.select('.dropdown.change-clade').select('button').text(d.field);\n    }\n}\n\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, main, calculatedScales){\n\n    let data = getLatestData();\n   \n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }\n}","import { pairPaths, maxTimeKeeper } from \"./dataFormat\";\nimport { dropDown } from \"./buttonComponents\";\nimport * as d3 from \"d3\";\nimport * as slide from 'd3-simple-slider';\nimport { renderTree } from \"./sidebarComponent\";\nimport { speciesTest, dataMaster } from \".\";\nimport { findBrushedNodes } from \"./toolbarComponent\";\n\nexport function rankingControl(data){\n    let rankDiv = d3.select('#pair-rank').classed('hidden', false);\n    rankDiv.selectAll('*').remove();\n\n    \n\n    let defaultW = [1, 1, 1];\n  \n    let weightPicker = rankDiv\n      .append('svg')\n      .attr('width', 800)\n      .attr('height', 100)\n      .append('g')\n      .attr('transform', 'translate(10,10)');\n\n     weightPicker\n    .append(\"svg:image\")\n    .attr('width', 200)\n    .attr('height', 140)\n    .attr('y', -50)\n    .attr(\"xlink:href\", \"./public/mini-diagram.gif\");\n\n    weightPicker.append('text').text('Distance').attr('font-size', 10).attr('x', 85).attr('y', 60);\n    weightPicker.append('text').text('Delta').attr('font-size', 10).attr('x', 66).attr('y', 20);\n    weightPicker.append('text').text('Closeness').attr('font-size', 10).attr('x', 195).attr('y', 22);\n\n    let labels = ['Distance', 'Delta', 'Closeness'];\n\n    weightPicker.selectAll('text.labels').data(labels).join('text').classed('labels', true)\n    .text(d=> d)\n    .attr('y', 10)\n    .attr('x', (d, i)=> (300+(200 * i)));\n  \n    defaultW.forEach((color, i) => {\n      var slider = slide\n        .sliderBottom()\n        .min(0)\n        .max(1)\n        .step(.1)\n        .width(150)\n        .default(defaultW[i])\n        .displayValue(false)\n        .fill('#7FB3D5')\n        .on('end', num => {\n         defaultW[i] = num;\n         updateRanking(pairPaths(data), d3.select('.attr-drop.dropdown').select('button').text(), defaultW);\n        });\n  \n      weightPicker\n        .append('g')\n        .attr('transform', `translate(${300+(200 * i)}, 20)`)\n        .call(slider);\n    });\n}\nexport function generatePairs(data){\n\n        let pairs = pairPaths(data);\n     \n        let weights = [1, 1, 1];\n\n        let attKeys = d3.entries(pairs[0].p1[0].attributes)\n                    .filter(f=> f.value.type === 'continuous')\n                    .map(m=> {\n                        return {'field': m.key, 'value': m.key }\n                    });\n        \n        let drop = d3.select('.attr-drop.dropdown')\n          .selectAll('a').empty() ? dropDown(d3.select('#toolbar'), attKeys, `Trait: ${attKeys[0].field}`, 'attr-drop') : d3.select('.attr-drop.dropdown').selectAll('a');\n        \n        d3.select('.attr-drop.dropdown').select('button').attr('value', attKeys[0].field);\n\n        drop.on('click', (d, i, n)=> {\n            updateRanking(pairPaths(data), d.field, weights);\n            renderTree(d3.select('#sidebar'), null, true, d.field);\n            d3.select('.attr-drop.dropdown').select('button').attr('value', d.field);\n            d3.select('.attr-drop.dropdown').select('button').text(`Trait: ${d.field}`);\n            d3.select('#attr-drop').classed('show', false);\n        });\n\n        updateRanking([...pairs], attKeys[0].field, weights);\n}\nexport function updateRanking(pairs, field, weights){\n  \n    let deltaMax = d3.max([...pairs].map(m=> m.deltas.filter(f=> f.key === field)[0]).map(m=> m.value));\n    let closeMax = d3.max([...pairs].map(m=> m.closeness.filter(f=> f.key === field)[0]).map(m=> m.value));\n    let distMax = d3.max([...pairs].map(d=> d.distance))\n    let deltaScale = d3.scaleLinear().domain([0, deltaMax]).range([0, 1]);\n    let closeScale = d3.scaleLinear().domain([closeMax, 0]).range([0, 1]);\n    let distScale = d3.scaleLinear().domain([0, distMax]).range([0, 1]);\n    let pickedPairs = [...pairs].map(p=> {\n        p.delta = p.deltas.filter(d=> d.key === field)[0];\n        p.closeness = p.closeness.filter(d=> d.key === field)[0];\n        p.deltaRank = deltaScale(p.delta.value);\n        p.closenessRank = closeScale(p.closeness.value);\n        p.distanceRank = distScale(p.distance);\n        p.totalRank = (weights[0] * p.distanceRank) + (weights[1] * p.deltaRank) + (weights[2] * p.closenessRank);\n        return p;\n    })\n\n    let sortedPairs = pickedPairs.sort((a, b)=> b.totalRank - a.totalRank).slice(0, 40);\n    sortedPairs = sortedPairs.filter((f, i)=> i%2 === 0)\n    drawSorted(sortedPairs, field);\n}\n\nfunction drawSorted(pairs, field){\n\n  let pairColor = ['#FF5733', '#129BF5'];\n\n  let nodes = findBrushedNodes();\n  //console.log('nodes from brush',nodes.map(m=> m.species))\n   \n    let width = 600;\n    let height = 100;\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, width]);\n\n    d3.select('#main').selectAll('*').remove()\n    let svg = d3.select('#main').append('svg');\n    svg.attr('height', pairs.length * 150)\n    let wrap = svg.append('g');\n    wrap.attr('transform', 'translate(20, 100)')\n    let pairWraps = wrap.selectAll('g.pair-wrap').data(pairs).join('g').classed('pair-wrap', true);\n    pairWraps.attr('transform', (d, i)=> `translate(50,${i*150})`);\n    pairWraps.append('rect')\n        .attr('width', (d, i)=> {\n            return width - xScale(d.common.combLength);\n        })\n        .attr('height', height)\n        .attr('x', d=> xScale(d.common.combLength))\n        .attr('stroke-width', 1).attr('stroke', 'black')\n        .attr('fill', '#fff');\n\n    pairWraps.append('text').text((d, i)=> {\n        return `${d.p1[d.p1.length - 1].node} + ${d.p2[d.p2.length - 1].node}`\n    }).attr('y', -10);\n\n    let scoreWrap = pairWraps.append('g').classed('score-wrap', true);\n    let scoreGroups = scoreWrap.selectAll('g.score').data((d, i)=> {\n        return [{label: 'Distance', value: d.distance, score: d.distanceRank}, \n         {label: 'Delta', value: d.delta.value, score: d.deltaRank},\n         {label: 'Closeness', value: d.closeness.value, score: d.closenessRank}\n        ];\n    }).join('g').classed('score', true);\n\n    let scoreLabel = scoreWrap.append('g').attr('transform', `translate(650, 10)`);\n    scoreLabel.append('rect').attr('width', 200).attr('height', 40).attr('fill', 'gray').attr('y', 45).attr('opacity', .1)\n    scoreLabel.append('text').text('Score').attr('y', 20).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Value').attr('y', 40).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreLabel.append('text').text('Total Score').attr('y', 60).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Rank').attr('y', 80).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreGroups.attr('transform', (d, i, n)=> {\n       return  i === 0 ? `translate(${(670)},0)` : \n       `translate(${(660+(d3.sum(d3.selectAll(n).filter((f, j)=> i > j).data().map(m=> m.label.length * 6)))+ (i*30))},0)`;\n    });\n    var zero = d3.format(\".3n\");\n    scoreGroups.append('text').text((d, i)=>  d.label).style('font-size', 10).attr('y', 10);;\n    scoreGroups.append('text').text((d, i)=> zero(d.score)).style('font-size', 10).attr('y', 30);\n    scoreGroups.append('text').text((d, i)=> zero(d.value)).style('font-size', 10).attr('y', 50);\n\n    scoreLabel.append('text').text((d, i, n)=> zero(d.closenessRank + d.distanceRank + d.deltaRank)).style('font-size', 10).attr('y', 60).attr('x', 115);\n    scoreLabel.append('text').text((d, i)=> i+1).style('font-size', 10).attr('y', 80).attr('x', 115);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, width]);\n       let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n        let y = d.attributes[field].scales.yScale;\n        y.range([height, 0]);\n        return y(d.attributes[field].values.realVal);\n    });\n\n    //BEGIN EXPERIOMENTING////]\n\n    let pairGroupN = pairWraps.selectAll('g.pair-neighbor').data((d, i, n)=> {\n\n      let species1 = d.p1.map(n=> n.node);\n      let species2 = d.p2.map(n=> n.node);\n      let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n      let neighbors = labels.flatMap(m=> {\n          let start = speciesTest[0].indexOf(m);\n          let ne = speciesTest[0].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n          return ne;\n      });\n      \n      let speciesNames = [species1[species1.length-1], species2[species2.length-1]]\n      ////EXPERIMENTING WITH NODES////\n      let neighPaths = dataMaster[0].filter(f=> (neighbors.indexOf(f[f.length - 1].node)) > -1 && (speciesNames.indexOf(f[f.length - 1].node) === -1));\n  \n      let labeledN = [...neighPaths].map(path=> {\n        let name = path[path.length - 1].node;\n        return path.map(p=> {\n          p.name = name;\n          return p\n        })\n      });\n  \n      let spec1N = labeledN.map(m => m.filter(f=> species1.indexOf(f.node) > -1));\n      let spec2N = labeledN.map(m => m.filter(f=> species2.indexOf(f.node) > -1));\n  \n      let closest1 = spec1N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n  \n      let closest2 = spec2N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n  \n      let wholeClosest1 = labeledN.filter(f=> f[f.length-1].node === closest1[closest1.length - 1].name)[0];\n      let wholeClosest2 = labeledN.filter(f=> f[f.length-1].node === closest2[closest2.length - 1].name)[0];\n     \n      return [wholeClosest1, wholeClosest2];\n\n    }).join('g').classed('pair-neighbor', true).attr('opacity', 0);\n\n      let innerPathsN = pairGroupN.append('path')\n      .attr(\"d\", lineGen)\n      .attr(\"class\", \"inner-line-n\")\n      .attr('fill', 'none')\n      .attr('stroke-width', 1)\n      .style('stroke', 'rgba(160, 141, 184, .9)');\n     \n\n      let branchesN = pairGroupN.selectAll('g.branch-n').data(d=> d).join('g').classed('branch-n', true);\n      branchesN.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n      branchesN.filter(f=> f.leaf != true).append('rect').attr('width', 10).attr('height', (d)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n      }).attr('fill', 'rgba(160, 141, 184, .2)').attr('y', (d, i)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.upperCI95);\n      });\n  \n      branchesN.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n          return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n      }).attr('opacity', 0.5);\n\n      branchesN.filter((b, i, n)=> {\n        return i === (n.length - 1);\n      }).append('text').text(d=> d.node)\n        .attr('fill', 'rgba(160, 141, 184, 1)')\n        .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return (y(d.attributes[field].values.realVal) - 4);\n        }).attr('x', 3).style('font-size', 10);\n\n\n\n\n////////////////////////////END EXPERIMENT///////\n\n    let pairGroup = pairWraps.selectAll('g.pair').data(d=> [d.p1, d.p2]).join('g').classed('pair', true);\n\n    let innerPaths = pairGroup.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d, i)=> pairColor[i])\n   // .style('stroke', 'rgb(165, 185, 198)');\n\n   let brushedPaths = innerPaths.filter(f=> {\n    let nodeTest = f.filter(n=> nodes.map(m=> m.node).indexOf(n.node) > -1)\n    return nodeTest.length > 0}).style('stroke', '#64B5F6').style('stroke-width', '5px');\n\n   //console.log('brushed',brushedPaths, nodes.map(m=> m.node))\n    let branches = pairGroup.selectAll('g.branch').data(d=> d).join('g').classed('branch', true);\n    branches.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n    branches.filter(f=> f.leaf != true).append('rect')\n    .classed('range', true)\n    .attr('width', 10)\n    .attr('height', (d)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n    }).attr('fill', 'rgba(165, 185, 198, .5)')\n    .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.upperCI95);\n    });\n\n    let chosenNodes = branches.filter(f=> {\n      return nodes.map(m=> m.node).indexOf(f.node) > -1\n    }).selectAll('rect.range').attr('fill', '#64B5F6')\n\n    branches.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n        return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n    });\n\n    pairWraps.append('rect').attr('width', (d, i)=> {\n        return xScale(d.common.combLength)})\n        .attr('height', height)\n        .attr('fill', '#fff').style('opacity', 0.7);\n        let yAxisG = pairWraps.append('g').classed('y-axis', true);\n        let xAxisG = pairWraps.append('g').classed('x-axis', true);\n        xAxisG.call(d3.axisBottom(xScale).ticks(10));\n        xAxisG.attr('transform', `translate(0, ${height})`)\n\n    pairWraps.on('mouseover', (d, i, n)=> {\n       \n        let species1 = d.p1.map(n=> n.node);\n        let species2 = d.p2.map(n=> n.node);\n        let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n        let neighbors = labels.flatMap(m=> {\n            let start = speciesTest[0].indexOf(m);\n            let ne = speciesTest[0].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n            return ne;\n        });\n        \n        let neighNodes = dataMaster[0].filter(f=> neighbors.indexOf(f[f.length -1].node) > -1).flatMap(m=> m.map(f=> f.node))\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        let pairNode1 = treeNode.filter(f=> {\n            return species1.indexOf(f.data.node) > -1;\n        }).classed('hover one', true);\n\n        let pairNode2 = treeNode.filter(f=> {\n          return species2.indexOf(f.data.node) > -1;\n      }).classed('hover two', true);\n\n        treeLinks.filter(f=> species1.indexOf(f.data.node) > -1).classed('hover one', true);\n        treeLinks.filter(f=> species2.indexOf(f.data.node) > -1).classed('hover two', true);\n        treeNode.filter(f=> neighNodes.indexOf(f.data.node) > -1).classed('hover-neighbor', true);\n        //Hiding Others\n        treeNode.filter(f=> (neighNodes.indexOf(f.data.node) === -1) && (species1.concat(species2).indexOf(f.data.node) === -1)).classed('hover-not', true);\n        //Coloring Niehgbors\n        treeLinks.filter(f=> neighNodes.indexOf(f.data.node) > -1).classed('hover-neighbor', true);\n        //Hiding Others\n        treeLinks.filter(f=> (neighNodes.indexOf(f.data.node) === -1) && (species1.concat(species2).indexOf(f.data.node) === -1)).classed('hover-not', true);\n        \n        let speciesNames = [species1[species1.length-1], species2[species2.length-1]]\n        d3.select(n[i]).selectAll('.pair-neighbor').attr('opacity', 1);\n        return d3.select(this).classed('hover', true);\n    })\n    .on('mouseleave', (d, i, n)=>{\n\n      d3.select(n[i]).selectAll('.pair-neighbor').attr('opacity', 0);\n\n        let treeNode  = d3.select('#sidebar').selectAll('.node')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n        return d3.select(n[i]).classed('hover', false);\n    });\n\n    let axisGroup = pairWraps.append('g').classed('y-axis', true);\n  \n    axisGroup.each((d, i, n)=> {\n        let scale = d.p1[0].attributes[field].scales.yScale;\n        d3.select(n[i]).call(d3.axisLeft(scale).ticks(5));\n    });\n\n    let mouseG = pairWraps.append(\"g\")\n    .attr(\"class\", \"mouse-over-effects\");\n\n  mouseG.append(\"path\") // this is the black vertical line to follow mouse\n    .attr(\"class\", \"mouse-line\")\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"1px\")\n    .style(\"opacity\", \"0\");\n\n   var mousePerLine = mouseG.selectAll('.mouse-per-line')\n   .data((d, i)=> {\n\n    return [d.p1, d.p2]})\n   .join(\"g\")\n   .attr(\"class\", \"mouse-per-line\");\n\n mousePerLine.append(\"circle\")\n   .attr(\"r\", 7)\n   .style(\"stroke\", function(d) {\n     return 'red';\n   })\n   .style(\"fill\", \"none\")\n   .style(\"stroke-width\", \"1px\")\n   .style(\"opacity\", \"0\");\n\n  mousePerLine.append(\"text\").attr('class', 'value')\n   .attr(\"transform\", \"translate(10,3)\");\n\n  mousePerLine.append(\"text\").attr('class', 'species')\n   .attr(\"transform\", \"translate(10,3)\");\n\nmouseG.append('svg:rect') // append a rect to catch mouse movements on canvas\n      .attr('width', width) // can't catch mouse events on a g element\n      .attr('height', height)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .on('mouseout', function() { // on mouse out hide line, circles and text\n        d3.selectAll(\".mouse-line\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"0\");\n      })\n      .on('mouseover', (d, i, n)=> { // on mouse in show line, circles and text\n        d3.select(n[i].parentNode).selectAll('.mouse-line')\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"1\");\n\n          \n      })\n      .on('mousemove', (dat, i, n)=> { // mouse moving over canvas\n        var mouse = d3.mouse(n[i]);\n       \n        d3.select(n[i].parentNode).select('.mouse-line')\n          .attr(\"d\", function() {\n            var d = \"M\" + mouse[0] + \",\" + height;\n            d += \" \" + mouse[0] + \",\" + 0;\n            return d;\n          });\n       \n          d3.select(n[i].parentNode).selectAll('.mouse-per-line')\n          .attr(\"transform\", function(d, j, node) {\n         \n            var xDate = xScale.invert(mouse[0]),\n                bisect = d3.bisector(function(d) { return d.edgeLength; }).right,\n                idx = bisect(d.values, xDate);\n            \n            let line = n[i].parentNode.parentNode.getElementsByClassName('inner-line');\n          \n            var beginning = 0,\n                end = line[j].getTotalLength(),\n                target = null\n\n            while (true){\n               target = Math.floor((beginning + end) / 2);\n               var pos = line[j].getPointAtLength(target);\n              if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n                  break;\n              }\n              if (pos.x > mouse[0])      end = target;\n              else if (pos.x < mouse[0]) beginning = target;\n              else break; //position found\n            }\n            let y = dat.p1[0].attributes[field].scales.yScale;\n          \n            d3.select(node[j]).select('text.value')\n              .text(y.invert(pos.y).toFixed(2))\n              .style('font-size', 11)\n              .attr('y', ()=> {\n                  return j === 0 ? 10 : -10;\n                });\n\n            d3.select(node[j]).select('text.species')\n                .text(d[d.length-1].node)\n                .style('font-size', 11)\n                .attr('y', ()=> {\n                    return j === 0 ? 19 : -19;\n                  });\n              \n            return \"translate(\" + mouse[0] + \",\" + pos.y +\")\";\n          });\n      });\n\n\n   \n}","import * as d3 from \"d3\";\nimport { renderDistibutions, groupDistributions, renderDistStructure } from './distributionView';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport { getLatestData } from \"./filterComponent\";\nimport { generatePairs, rankingControl } from \"./pairView\";\nimport { drawTreeForGroups, createCladeView } from \"./cladeMaker\";\nimport { calculatedScalesKeeper } from \".\";\n\nexport let groupedView = false;\n\nexport function updateMainView(d, groups){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n    let moveMetric = 'edgeLength';\n\n    let scales = calculatedScalesKeeper[0];\n\n    main.selectAll('*').remove();\n  \n    if(d === 'Path View' || d === null){\n        d3.select('#pair-rank').classed('hidden', true);\n        drawPathsAndAttributes(data, main, scales, moveMetric);\n        document.getElementById(\"scrunch\").disabled = false;\n    }else if(d === 'Summary View'){\n        d3.select('#pair-rank').classed('hidden', true);\n        document.getElementById(\"scrunch\").disabled = true;\n        if(groups){\n            renderDistStructure(main, groups)\n        }else{\n            groupDistributions(data, main, scales, 'Clade');\n        }\n    }else if(d === 'Pair View'){\n        rankingControl(data);\n        generatePairs(data);\n    }else if(d === 'Clade View'){\n        d3.select('#pair-rank').classed('hidden', true);\n        createCladeView(main, scales);\n    }else{\n        console.error('field not found');\n    }\n}\n\nexport function initialViewLoad(scales){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(data.length > 50){\n        groupDistributions(data, main, scales, 'Clade');\n        d3.select('#view-toggle').text('View Paths');\n        document.getElementById(\"scrunch\").disabled = true;\n    }else{\n        drawPathsAndAttributes(data, main, scales);\n        d3.select('#view-toggle').text('View Summary');\n        document.getElementById(\"scrunch\").disabled = false;\n    }\n\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\n\nimport {dataMaster, nestedData, collapsed} from './index';\nimport {filterMaster, removeFilter, addFilter} from './filterComponent';\nimport {getNested} from './pathCalc';\nimport { dropDown } from './buttonComponents';\nimport { updateRanking } from './pairView';\nimport { pairPaths, maxTimeKeeper } from './dataFormat';\nimport { cladesGroupKeeper, chosenCladesGroup } from './cladeMaker';\n\n\n\nexport function buildTreeStructure(paths, edges){\n    let root = paths[0][0];\n    let nestedData = getNested(root, edges);\n    return nestedData;\n}\n\n// function updateBrush(treeBrush, scales){\n    \n//     let sidebar = d3.select('#sidebar');\n//     let toolbarDiv = d3.select('#toolbar');\n\n//     let data = filterMaster.length === 0 ? dataMaster[0] : dataMaster[0];\n//     let nodes = sidebar.select('svg').select('g').selectAll('.node');\n//     let selectedNodes = nodes.filter(n=> (n.y > d3.event.selection[0][0]) && (n.y < d3.event.selection[1][0]) && (n.x > d3.event.selection[0][1]) && (n.x < d3.event.selection[1][1])).classed('selected', true);\n//     let filterArray = selectedNodes.data().map(n=> n.data.node);\n//     let test = treeFilter(data, filterArray);\n//     let brushId = 'brush-'+ filterMaster.filter(f=> f.attributType === 'topology').length;\n//     let filterOb = addFilter('data-filter', 'topology', brushId, treeFilter, [...data], [...test], null);\n\n//     updateMainView('edgeLength');\n   \n//     ///DIMMING THE FILTERED OUT NODES//////\n\n//     ////Class Tree Links////\n//     let treeLinks  = d3.select('#sidebar').selectAll('.link');\n//     let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n//     let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n//     d3.selectAll('.link-not-there').classed('link-not-there', false);\n//     d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n//     let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n//     missingLinks.classed('link-not-there', true);\n\n//     let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n//     missingNodes.classed('node-not-there', true);\n\n//     ///END NODE DIMMING///////\n\n//     let button = toolbarDiv.append('button').classed('btn btn-info', true);\n//     let span = button.append('span').classed('badge badge-light', true);\n//     span.text(test.length);\n//     let label = button.append('h6').text('Tree Filter');\n\n//     let xSpan = label.append('i').classed('close fas fa-times', true);\n//     xSpan.on('click', async (d, i, n)=> {\n//         removeFilter(brushId);\n//         await updateMainView('edgeLength');\n//         d3.selectAll('.selected').classed('selected', false);\n//         d3.selectAll('.link-not-there').classed('link-not-there', false);\n//         d3.selectAll('.node-not-there').classed('node-not-there', false);\n//         button.remove();\n//         d3.select(this).call(treeBrush.move, null);\n//         d3.select('.tree-brush').remove();\n//     });\n// }\n\nexport function renderTreeButtons(normedPaths, calculatedScales, sidebar){\n    \n    ///SIDBAR STUFF\n    sidebar = sidebar.append('div').classed('button-wrap', true);\n    // let treeButton = sidebar.append('button').text('Filter by Tree').classed('btn btn-outline-secondary', true);  \n    // let treeBrush = d3.brush().extent([[0, 0], [400, 600]]).on('end', (d, i, n) => updateBrush(treeBrush, calculatedScales));\n    // treeButton.on('click', ()=> {\n    //     renderTree(sidebar, true, null, true);\n    //     let treeBrushG = sidebar.select('svg').append('g').classed('tree-brush', true).call(treeBrush);\n    // });\n\n        ///SIDBAR STUFF\n    let treeViewButton = sidebar.append('button').text('Hide Lengths').attr('id', 'length').classed('btn btn-outline-secondary', true);  \n\n    treeViewButton.on('click', ()=> {\n       sidebar.select('svg').remove();\n       if(treeViewButton.text() === 'Show Lengths'){\n            renderTree(sidebar, null, true, false);\n            treeViewButton.text('Hide Lengths');\n       }else{\n            renderTree(sidebar, null, false, false);\n            treeViewButton.text('Show Lengths');\n       }\n    });\n\n    treeViewButton.style('opacity', 0).style('width', 0).style('padding', 0).style('margin', 0);\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> optionArray.push(m));\n\n    let dropOptions = dropDown(sidebar, optionArray, `Color By Value`,'show-drop-div-sidebar');\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            renderTree(sidebar, d, true, false);\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`)\n        }else if(d.type === 'continuous'){\n            renderTree(sidebar, d, true, false);\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`);\n        }else{\n            renderTree(sidebar, null, false, false);\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Color By Value`);\n        }\n       sidebar.select('#show-drop-div-sidebar').classed('show', false);\n    });\n\n      ///BUTTON FOR PHENOGRAM VIEW. MAYBE MOVE THIS TO SIDEBAR\n      let phenogramButton = d3.select('#sidebar').select('.button-wrap').append('button').text('View Phenogram');\n      phenogramButton.classed('btn btn-outline-secondary', true); \n      phenogramButton.on('click', ()=> {\n          if(phenogramButton.text() === 'View Phenogram'){\n            if(d3.select('.attr-drop.dropdown').select('button').empty()){\n                let drop = dropDown(d3.select('#toolbar'), optionArray, `Trait: ${optionArray[1].field}`, 'attr-drop');\n                d3.select('.attr-drop.dropdown').select('button').attr('value', optionArray[1].field);\n                d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Color By Value`);\n                drop.on('click', (d, i, n)=> {\n                    if(d3.select('.dropdown.change-view').select('button').node().value === \"View Pairs\"){\n                        updateRanking(pairPaths(normedPaths), d.field);\n                    }\n                    renderTree(d3.select('#sidebar'), null, true, d.field);\n                    d3.select('.attr-drop.dropdown').select('button').text(`Trait: ${d.field}`);\n                    d3.select('.attr-drop.dropdown').select('button').attr('value')\n                    d3.select('.attr-drop.dropdown').select('button').attr('value', d.field);\n                    d3.select('#attr-drop').classed('show', false);\n                });\n              \n                renderTree(d3.select('#sidebar'), null, true, d3.select('.attr-drop.dropdown').select('button').attr('value'))\n              }else{\n    \n                renderTree(d3.select('#sidebar'), null, true, d3.select('.attr-drop.dropdown').select('button').attr('value'))\n              }\n              phenogramButton.text('View Phylogeny');\n          }else{\n\n            renderTree(d3.select('#sidebar'), null, false, false);\n            phenogramButton.text('View Phenogram');\n\n          }\n      })\n}\n\nfunction treeFilter(data, selectedNodes){\n    return data.filter(path=> {\n        let nodeNames = path.map(no=> no.node);\n        let booArray = nodeNames.map(id=> selectedNodes.indexOf(id) > -1);\n        return booArray.indexOf(true) > -1\n    });\n}\n\nfunction uncollapseSub(d){\n    d.children = d._children;\n    d._children = null;\n    if(d.children){\n        d.children.map(c=> uncollapseSub(c));\n    }    \n}\n\nfunction collapseSub(d){\n    if(d.children) {\n        d._children = d.children\n        d._children.forEach(collapseSub)\n        d.children = null\n    }  \n}\n\nfunction collapseTree(treeData){\n\n    let leaves = getLeaves(treeData, []);\n\n    return stepDown(treeData);\n\n    function stepDown(node){\n        let leaves = getLeaves(node, []);\n        \n        let ids = new Set(leaves.map(m=> m.data.attributes.Clade.values.Clade));\n        if(ids.size > 1){\n            node.children.map(n=> stepDown(n))\n        }else{\n            node.branchPoint = true;\n            node.clade = Array.from(ids)[0]\n            collapseSub(node);\n            return node;\n        }\n        return node;\n    }\n    \n    function getLeaves(node, array){\n        if(node.children != undefined ){\n            node.children.map(n=> getLeaves(n, array))\n        }else{\n            array.push(node);\n        };\n        return array;\n    }\n}\n\nexport function assignPosition(node, position) {\n    if (node.children === undefined || node.children === null){\n        \n        position = position + 1.5;\n        node.position = position;\n        return position;\n    }else{\n        let positionArray = []\n        node.children.forEach((child) => {\n            position = assignPosition(child, position);\n            positionArray.push(position);\n        });\n        node.options = positionArray;\n        node.position = d3.max(positionArray);\n        return position;\n    }\n}\n\nexport function addingEdgeLength(edge, data){\n    data.combEdge = data.edgeLength + edge;\n    if(data.children){\n        data.children.forEach(chil=> {\n            addingEdgeLength(data.combEdge, chil);\n        });\n    }\n}\n\nexport function renderTree(sidebar, att, uncollapse, pheno){\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 260,\n        height : 520,\n        lengthHeight: 800,\n    }\n\n \n\n    // declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([dimensions.height, dimensions.width]);\n\n    addingEdgeLength(0, nestedData[0]);\n    \n    //  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData[0]);\n\n    // maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let groupedBool = d3.select('#show-drop-div-group').attr('value');\n    let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n\n    let sidebarTest = sidebar.select('svg');\n    let treeSvg = sidebarTest.empty() ? sidebar.append(\"svg\") : sidebarTest;\n    treeSvg.classed('tree-svg', true);\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + dimensions.margin.top + dimensions.margin.bottom);\n\n\n    let gTest = treeSvg.select('g.tree-g');\n    let g = gTest.empty() ? treeSvg.append(\"g\").classed('tree-g', true) : gTest;\n    g.attr(\"transform\",\n      \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\");\n\n    if(groupedBool === \"ungrouped\" && uncollapse === false){\n        if((cladesGroupKeeper.length > 0) && (chosenCladesGroup[chosenCladesGroup.length - 1].field != 'Clade Attribute)')){\n            let newNodes = collapseTree(treenodes);\n            updateTree(newNodes, dimensions, treeSvg, g, att, lengthBool, uncollapse);\n        }else{\n            updateTree(treenodes, dimensions, treeSvg, g, att, lengthBool, pheno, uncollapse);\n        }\n        \n    }else{\n        ////Break this out into other nodes////\n        updateTree(treenodes, dimensions, treeSvg, g, att, lengthBool, pheno, uncollapse);\n    }\n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n\n    return array;\n    \n}\n\nexport function updateTree(treenodes, dimensions, treeSvg, g, attrDraw, length, pheno, uncollapse){\n\n    d3.select('.pheno-y-axis').remove();\n    d3.select('.pheno-x-axis').remove();\n    \n    assignPosition(treenodes, 0);\n\n   // console.log('treeNodes', treenodes)\n\n    let branchCount = findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, 1])\n\n    if(length){   \n        g.attr('transform', 'translate(20, 265)');\n        treeSvg.attr('height', 800);\n        yScale.range([500, 0]).domain([0, branchCount.length])\n        xScale.range([0, dimensions.width + 10]);\n    } \n    if(pheno){\n        treeSvg.attr('height', 800);\n        xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain())\n        yScale.domain([0, maxTimeKeeper[0]]).range([0, 500])\n    }\n\n    // adds the links between the nodes\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n        if((length && pheno === undefined) || (length && pheno === false)){\n           return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n           + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n           + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n           + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n        }else{\n            return \"M\" + xScale(d.data.attributes[pheno].values.realVal) + \",\" + yScale(d.data.combEdge)\n            + \" \" + xScale(d.parent.data.attributes[pheno].values.realVal) + \",\" + yScale(d.parent.data.combEdge);\n        }       \n    });\n\n    if(pheno){\n        \n        link.style('opacity', 0.3);\n        g.attr('transform', 'translate(30, 50)');\n\n        let x = xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain()).range([0, (dimensions.width+20)]);\n        let xAxis = d3.axisBottom(x);\n        g.append('g').classed('pheno-x-axis', true).call(xAxis).attr('transform', 'translate(0, 510)').select('path').attr('stroke-width', 0);\n\n        let y = d3.scaleLinear().domain([0,maxTimeKeeper[0]]).range([0, dimensions.height -20]);\n        let yAxis = d3.axisLeft(y);\n        g.append('g').classed('pheno-y-axis', true).call(yAxis).attr('transform', 'translate(0, 2)').select('path').attr('stroke-width', 0);;\n    }\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants(), d => d.data.node)\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n    .duration(500)\n    .attr(\"transform\", function(d) { \n        if(length && pheno === undefined || pheno === false){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n        }else{\n\n           return \"translate(\" + (xScale(d.data.attributes[pheno].values.realVal) - 5) + \",\" + yScale(d.data.combEdge) + \")\"; \n        }\n    });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)//f.data.attributes[attrDraw.field].winState === att.state;\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    })\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateTree(treenodes, dimensions, treeSvg, g, attrDraw, lengthBool, uncollapse);\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n\n    if(uncollapse){\n       \n        // let groups = chosenCladesGroup[chosenCladesGroup.length - 1];\n        \n        // let groupGroup = treeSvg.selectAll('.clade-rects')\n        // .data(groups.groups)\n        // .join('g')\n        // .attr('class', d=> d.label)\n        // .classed('clade-rects', true)\n    \n        // let rect = groupGroup.append('rect');\n        // rect.attr('width', 20);\n        // rect.attr('height', (d, i)=> {\n        //     return d.paths.length * 6;\n        // });\n        // groupGroup.each((d, i, node)=> {\n       \n        //     let first = d.paths.map(m=> m[m.length-1].node);\n        //     let test = treeSvg.selectAll('.node--leaf').filter((f)=> {\n        //         return first.indexOf(f.data.node) > -1});\n        //     let leafSort = test.data().sort((a, b)=> {\n        //         return a.x - b.x;\n        //     });\n        //     console.log(leafSort[0].data.node)\n\n        //     let chosenNode = test.filter(f=> {\n        //         return f.data.node === leafSort[leafSort.length - 1].data.node;\n        //     });\n\n        //     console.log(chosenNode.data())\n     \n        //     d3.select(node[i]).attr('transform', `translate(300, ${yScale(leafSort[0].position)})`)\n        // })\n\n     \n      \n        \n    }\n\n    return node;\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {loadData} from './dataLoad';\nimport {calculateScales, calculateNewScales, matchLeaves, matchEdges, normPaths, filterKeeper, pairPaths, rootAttribute, combineLength} from './dataFormat';\nimport {allPaths, pullPath, getPathRevised, getPath} from './pathCalc';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {toolbarControl} from './toolbarComponent';\nimport { initialViewLoad } from './viewControl';\nimport { groupDataByClade, groupDataByAttribute, addCladeGroup, cladesGroupKeeper, chosenCladesGroup} from './cladeMaker';\n\nexport const dataMaster = [];\nexport const savedSelected = [];\nexport const collapsed = false;\nexport const nestedData = [];\nexport const speciesTest = [];\nexport const calculatedScalesKeeper = [];\n\nexport const colorKeeper = [\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n]\n\nexport const attributeList = [\n    // 'PCIII_padwidth_vs_tail',\n    // 'PCII_head',\n    // 'PCIV_lamella_num',\n    // 'PCI_limbs',\n    {field: 'Body_height', type: 'continuous'},\n    {field:'Body_width', type:'continuous'},\n    {field:'Carpus', type:'continuous'},\n    {field:'Clade', type:'discrete'},\n    {field:'Close', type: 'continuous'},\n    {field:'Femur', type: 'continuous'},\n    {field:'Forelimb', type: 'continuous'},\n    {field:'Group', type: 'discrete'},\n    {field:'Head_length', type: 'continuous'},\n    {field:'Head_width', type: 'continuous'},\n    {field:'Head_depth', type: 'continuous'},\n    {field:'Hind_limb', type: 'continuous'},\n    {field:'Humerus', type: 'continuous'},\n    {field:'island/mainland', type:'discrete'},\n    {field:'Interlimb', type: 'continuous'},\n    {field:'Longest_toe', type: 'continuous'},\n    {field:'Ltoe', type: 'continuous'},\n    {field:'Lower_jaw', type: 'continuous'},\n    {field:'Nmorpho', type: 'continuous'},\n    {field:'Open', type: 'continuous'},\n    {field:'Outlever', type: 'continuous'},\n    {field:'Radius', type: 'continuous'},\n    {field:'Snout', type: 'continuous'},\n    {field:'SVL', type: 'continuous'},\n    {field:'Tail', type: 'continuous'},\n    {field:'Tarsus', type: 'continuous'},\n    {field:'Tibia', type: 'continuous'},\n];\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nlet selectedPaths = wrap.select('#selected');\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar');\n\nloadData(d3.json, './public/data/new-anolis-edges.json', 'edge').then(async edges => {\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n    \n    let edgeLen = await loadData(d3.json, './public/data/new-anolis-edge-length.json', 'edge');\n\n    let char = await loadData(d3.json, './public/data/new-anolis-res.json', '');\n\n    edges.rows = edges.rows.filter(f=> f.From != \"\").map((edge, i)=> {\n        edge.edgeLength = edgeLen.rows[i].x;\n        return edge;\n    });  \n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.From);\n   \n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.To) == -1 );\n    let leafChar = await loadData(d3.csv, './public/data/new-anolis-leaf-char.csv', '');\n\n    let calculatedAtt = char.rows.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                   \n                    if(m.key.includes('upperCI')){\n                        values.upperCI95 = m.value;\n                    }else if(m.key.includes('lowerCI')){\n                        values.lowerCI95 = m.value;\n                    }else{\n                        values.realVal = m.value;\n                    }\n                }else{\n                     values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.nodeLabels;\n        return newRow;\n    });\n\n  \n    let calculatedScales = calculateNewScales(calculatedAtt, attributeList.map(m=> m.field), colorKeeper);\n    calculatedScalesKeeper.push(calculatedScales);\n\n    let matchedEdges = edges.rows.map((edge, i)=> {\n        let attrib = calculatedAtt.filter(f=> f.node === edge.To)[0]\n        if(attrib){\n            Object.keys(attrib).filter(f=> f != 'node').map((att, i)=>{\n                \n                let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                attrib[att].scales = scales;\n                return att;\n                \n            })\n        }\n        let newEdge = {\n            V1: edge.From,\n            V2: edge.To,\n            node: edge.To,\n            edgeLength: edge.edgeLength,\n            attributes: attrib ? attrib : null\n        }\n        return newEdge;\n    });\n\n\n    let calcLeafAtt = leafChar.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                    values.realVal = m.value;\n                }else{\n                    values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.species;\n        newRow.label = row.species;\n        \n        return newRow;\n    })\n\n\n    let matchedLeaves = leaves.map((leaf, i)=>{\n        let attrib = calcLeafAtt.filter(f=> f.node === leaf.To)[0]\n        if(attrib){\n            Object.keys(attrib).map((att, i)=>{\n                if(att!='node' && att != 'label'){\n                    let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                    attrib[att].scales = scales;\n                    return att;\n                }\n            });\n        }\n        let newEdge = {\n            V1: leaf.From,\n            V2: leaf.To,\n            node: leaf.To,\n            edgeLength: leaf.edgeLength,\n            attributes: attrib ? attrib : null,\n            group: null,\n            leaf: true\n        }\n        return newEdge;\n    });\n\n    let all = matchedEdges.filter(f=> f.attributes != null);\n\n    let paths = allPaths(all, matchedLeaves, \"V1\", \"V2\");\n    \n    let addedRoot = rootAttribute(paths, calculatedAtt, calculatedScales);\n\n    let normedPaths = combineLength(addedRoot);\n\n    if(cladesGroupKeeper.length === 0){\n        let attArray = calculatedScales.map(m=> m.field)\n        if(attArray.indexOf('Clade') > -1){\n            let groupData = groupDataByAttribute(calculatedScales, normedPaths, 'Clade');\n            let chosenClade = addCladeGroup('Clade Attribute', groupData.map(m=> m.label), groupData);\n            chosenCladesGroup.push(chosenClade)\n\n        }else{\n            console.error('no clade information');\n        }\n    }\n\n    dataMaster.push(normedPaths);\n    speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.node));\n\n\n\n    \n\n    toolbarControl(toolbarDiv, normedPaths, main, calculatedScales, 'paths');\n    \n    let filterDiv = wrap.select('#filter-tab').classed('hidden', true);\n\n    // ////////TREE RENDER IN SIDEBAR////////\n    let treeDimensions = {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 290,\n        height : 520\n    }\n    nestedData.push(buildTreeStructure(normedPaths, all.concat(matchedLeaves)));\n    renderTreeButtons(normedPaths, calculatedScales, sidebar, false);\n    let tree = renderTree(sidebar, null, false, false, treeDimensions);\n    \n    /// LOWER ATTRIBUTE VISUALIZATION ///\n    initialViewLoad(calculatedScales, 'edgeLength');\n});\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n\n\n\n\n\n"],"sourceRoot":""}