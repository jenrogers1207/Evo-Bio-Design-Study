{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/multinetLoad.js","webpack:///./src/scripts/pathCalc.js","webpack:///./src/scripts/selectedPaths.js","webpack:///./src/scripts/buttonComponents.js","webpack:///./src/scripts/renderPathView.js","webpack:///./src/scripts/filterComponent.js","webpack:///./src/scripts/sidebarComponent.js","webpack:///./src/scripts/cladeMaker.js","webpack:///./src/scripts/toolbarComponent.js","webpack:///./src/scripts/pairView.js","webpack:///./src/scripts/viewControl.js","webpack:///./src/scripts/compare.js","webpack:///./src/scripts/brusherMaker.js","webpack:///./src/scripts/distributionView.js","webpack:///./src/scripts/dataFormat.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Multinet","this","tables","nodes","links","graph_structure","api_root","api","multinetApi","getGraphNames","workspace","graphs","load_data","graph","multinetOb","load_tables","nodeTables","node_table","load_nodes","edge_table","edgeTable","load_links","rename_node_vars","rename_link_vars","JSON","parse","stringify","table","limit","concat","row","id","_id","source","_from","target","_to","allPaths","edgeArray","leafArray","map","le","getPath","leaf","pathKeeper","path","filter","ed","reverse","pullPath","pathArray","arrayOfArray","nameArray","depth","forEach","node","childArray","undefined","children","assign","flag","selectedPaths","comparisonKeeper","pathSelected","selectedPath","otherPaths","scales","selectedDiv","d3","main","selectAll","remove","style","drawPathsAndAttributes","commonNodes","pathData","selectedSpecies","flatMap","f","treeNodes","select","indexOf","classed","attrHide","filterMaster","type","attribute","attrFilter","sc","field","selectedToolTest","selectedTool","empty","append","sortByDistanceDiv","text","sortByDistanceButton","on","sortButton","attrKeys","attrSortWrap","radioDiv","join","radio","attr","svgTest","svg","branchFrequency","reduce","acc","curr","selectWrap","circleScale","range","domain","values","selectedGroups","addRemoveBubble","treeNode","treeLinks","string","label","charAt","toUpperCase","timelines","nodeGroups","x","edgeMove","hovers","nearest","attributeWrapper","attData","formatAttributeData","attributeGroups","renderAttributes","keys","attributes","drawContAtt","drawDiscreteAtt","sorted","sort","a","b","realVal","paths","high","highLeaves","low","lowLeaves","commonNodeStart","maxBranch","thresh","max","chil","parentBase","move","base","scaledParentMove","parentScale","xScale","level","getCommonNodes","pathBars","childNodeWrap","childNodes","curve","y","line","species","commonHover","renderSelectedTopology","attWrap","ch","mappedDis","att","offset","index","last","dis","spec","states","winState","color","maxP","v","notMax","other","findMaxState","attGroups","wrapRect","speciesGrp","lineGenD","attributeHeight","lineGenC","yScale","branchGrpDis","sp","bCirc","otherCirc","tool","transition","duration","html","state","pageX","pageY","ticks","branchGrpCon","MeanRect","scale","min","confiBars","lowerCI95","upperCI95","dataMaster","renderDistibutions","renderSelectedView","commonNode","chosenPath","test","distance","pathIndex","console","error","sortOtherPaths","group","pathRemove","renderComparison","buttonGroupTest","buttonGroup","usedColors","groupColor","newColor","colorKeeper","find","compareButtonTest","compareButton","comparisonCombined","newAtt","com","atts","added","standard","variance","first","second","button","filteredComp","selectedTest","attWraps","normBins","Array","fill","internalNodes","leafNodes","bins","edges","top","mean","e","Math","sqrt","meanStandard","sigma2","upCon95","lowCon95","leaves","exit","attWrapsEnter","enter","merge","innerWrap","lineGen","pathGroups","missing","areaG","y0","y1","confGroups","conf","NaN","axisGroupTest","axisGroup","maxDiff","newScale","startBins","difArray","diffs","abs","clamp","diff","obsDistWrap","histogram","thresholds","newLeaves","xAxis","each","distGroups","groupLength","dropDown","div","optionArray","dropText","dropId","dropdiv","dropContent","options","raise","dimensions","rectWidth","rectHeight","collapsedHeight","getScales","nodeTooltipFlag","collapsed","width","pathWrapTest","pathWrap","pathAdd","notIt","maxTimeKeeper","combLength","nodeFilter","getLatestData","renderPaths","shownAttributes","checked","combinedAttGroup","datum","comboLineGroups","drawDistLines","continuousPaths","predictedAttrGrps","cGroups","compactLineG","attribWrap","attrMove","continuousArea","parentNode","selectedState","filterType","addFilterTag","addFilter","attributeType","updateMainView","nodeList","leafStateFilter","discG","comboDisc","array","maxVal","attrLabel","innerTimeline","change","innerPaths","opacity","colorBool","step","height","log","continuousAtt","attribRectCont","innerBars","rangeRect","colorScale","satScale","drawGroups","stateBins","splitOnArray","newBins","newBinData","scaleName","newData","pa","firstGroupSvg","firstGroup","secondGroup","g","newM","branchBar","drawBranchPointDistribution","groupLabels","stateLabel","innerGroup","innerWrapRect","wrappers","shiftWraps","xAxisShift","shiftCircles","leafWraps","totalVal","totalMean","newVal","groupMean","distcircles","dotVals","w","groupBy","totalArray","leafWrapsD","rects","groupedData","d3Array","ratio","drawLeaves","bars","discreteAtt","innerTimelineDis","statePath","disct","attribRectDisc","attributeNodesDisc","stateDots","endStateDot","stateBars","probability","chosenIn","valueAdd","buildTreeStructure","getNested","String","V1","traitColorDropDown","sidebar","renderCallback","reduce2DropArray","startArray","renderTreeButtons","normedPaths","buttonWrap","renderTree","phenoOptions","phenogramButton","changeTrait","cladeButton","growSidebarRenderTree","collapseSub","_children","assignPosition","position","positionArray","child","addingEdgeLength","edge","combEdge","edgeLength","uncollapse","pheno","margin","right","bottom","left","lengthHeight","treemap","size","nestedData","treenodes","groupedBool","sidebarTest","treeSvg","gTest","cladesGroupKeeper","chosenCladesGroup","newNodes","treeData","getLeaves","stepDown","ids","Set","Clade","branchPoint","clade","from","collapseTree","updateTree","attrDraw","branchCount","findDepth","link","descendants","parent","yAxis","notleaves","stateColors","includes","branchNodes","triangle","uncollapseSub","cladeKeeper","colorKeep","cladeBool","cladeData","cladeGroups","root","updateCladeTree","lengthBool","renderCladeTree","nodeData","findCommonNode","path1","path2","className","common","subtreeFinder","nodeNames","labelTree","others","xStep","leafNames","leafNameNodeData","allLeafNodeData","positionHolder","wrap","textInput","addClade","updateCladeDrop","positions","addCladeGroup","clades","names","groups","toolbarDataControl","toolbar","graphList","chosenGraph","dataDrop","toolbarButtonWrap","loadApp","clearMain","loader","changeDropValue","display","document","getElementById","toolbarControl","calculatedScales","viewArray","dropUpdated","filterButton","filterDiv","moveMetric","selectWrapper","attButton","stateChange","attProps","selectedOption","optKeys","button1","button2","submit","fromState","classList","toState","discreteFilter","filterOb","continRanges","ranges","brushBars","xBrush","extent","selection","handle","invert","brushGroup","selections","_groups","__brush","predictedFilter","observedFilter","lastFilter","continuousFilter","stateFilter","searchDiv","form","input","queryArray","split","toLowerCase","queryFilter","toggleFilters","scrunchButton","toggleScrunch","discreteViewButton","discretePredictedGroups","dropOptions","no","attributeOptions","checkedAttributes","attoptions","cladeOptions","dropdivClade","buttonClade","dropContentClade","li","binGroups","calculatedScalesKeeper","renderDistStructure","dropUl","attKeys","weights","drop","mappedPairs","updateRanking","pairPaths","drawSorted","top20","topPairSearch","pairs","p1","weightScales","deltaMax","deltas","closeMax","closeAll","distMax","delta","close","getWeightScales","pickedPairs","newP","closeness","deltaRank","closenessRank","distanceRank","totalRank","brushes","brushData","pairColor","pairWraps","p2","scoreWrap","scoreGroups","score","scoreLabel","zero","pairGroupN","species1","species2","neighbors","start","speciesTest","speciesNames","labeledN","spec1N","spec2N","closest1","closest2","branchesN","pairGroup","branches","xAxisG","checkArray","mouseG","mousePerLine","dat","mouse","xDate","bisect","getElementsByClassName","beginning","end","getTotalLength","floor","pos","getPointAtLength","toFixed","topPairs","allPairs","matchKeeper","newPair","check","myArray","chunk_size","arrayLength","tempArray","myChunk","chunkArray","newMatch","col","squarebins","rankGrid","view","disabled","rankDiv","defaultW","weightPicker","slider","slide","default","displayValue","num","rankingControl","generatePairs","removeFilter","filterId","dataFilters","filterIndex","testData","fun","filterFunction","newTestData","newFilterMaster","attType","filFunction","oldData","extra","ex","filterToolbar","formater","nodeId","selectedNode","predicted","observed","numb","filterPred","st","filterObs","win","selectorDiv","selectId","dropDownWrapper","compareColors","light","dark","renderDistributionComparison","branchScale","divWrap","groupHeader","textDiv","branchPointSvg","groupBins","pointGroups","selectedClades","selectedNodes","testNodes","testLinks","pathsListOne","pathsListTwo","testNodesOne","testLinksOne","testNodesTwo","testLinksTwo","mapBins","combined","groupKey","leafData","stateKeys","binnedWrap","selected","sum","squareDim","predictedWrap","rootData","contRoot","newy","defaultBarColor","disRoot","rootStateGroups","branchGroup","timeRange","discreteDist","discreteStateGroups","k","newOb","stateKey","discreteWidth","cladeStateGroups","probabilityTicks","jitterMove","arr","average","continDist","list","continBinGroups","maxCount","distrib","mirrorlineGen","gindex","brush","maxCounts","classLabel","brushedVal","otherBins","descendBins","groupDis","histo","continuousHistogram","oNode","oHisto","oDist","nodesFlat","notNodes","brushedNodes","selectedBranch","secondGrp","doesItExist","groupLabel","brushColors","classy","observedWrap","predictedWidth","contOb","contBars","observedWidth","movex","xvalues","discOb","discBars","dRects","offSet","movey","xPoint","padding","brushArray","addBrushables","startPos","endPos","brushOb","mouseBool","ind","rectGroup","dragPos","trait","filterData","brushedDist","otherDist","findNodesOtherTraits","valueRange","testH","findDescendValues","treenodeOb","descendNodes","descendLinks","highlightTree","brushedDomain","dist","removeBrush","addBadge","newNormed","keysToHide","rootNodes","nodeSet","sortedBins","mapNorm","bin","fData","attrib","binI","leafAttr","nodeArray","count","maxO","minO","xO","histogramO","rootNode","colors","entries","h","x1","x0","binWrap","nodeLengthArray","nodeDuplicateCheck","bPointScale","eMove","binsRects","axis","axGroup","drawGroupLabels","fl","cladeLabel","mainDiv","compareTooltipFlag","filteredAttributes","stateBarsPredicted","random","newstate","maxBin","maxState","winStates","renderDiscretePredicted","highlightNodesMouseover","renderContinuousPredicted","brushSpace","notNodeNames","notNodeSelectedBranch","notTest","testtest","notTestTest","notNodeSecondGrp","pair","verts","lastNode","p1Index","p2Index","binCount","binStep","one","two","valdiffs","calculateDelta","leaf1","leaf2","calculateCloseness","calculateNewScales","keyList","scaleCat","combineLength","maxTime","filterArray","speciesLabel","catColor","dataLoadAndFormatMultinet","graphName","dataName","unique","self","attributeList","rows","internal","notAttributeList","discreteTraitList","calculatedAtt","newRow","calcLeafAtt","matchedEdges","fromNode","V2","rooted","chosenClade","savedSelected","toolbarDiv","toolbarDataWrap","then","centData","appLaunch"],"mappings":"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","file":"js/app.533a3046.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Evo-Bio-Design-Study/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([200,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { multinetApi } from \"multinet\";\n\n/* Multinet data importer */\n// Define local variables that will store the api url and the responses from the database\n const api_root = \"https://multinet.app/api\";\n//const api_root = \"http://localhost:8081/api\";\n\nclass Multinet {\n    constructor(){\n        this.tables = {},\n        this.nodes = [],\n        this.links = [],\n        this.graph_structure = {},\n        this.api_root = api_root\n    }\n}\n\nconst api = multinetApi(api_root);\n\nexport async function getGraphNames(workspace){\n    return await api.graphs(workspace);\n}\n\nexport async function load_data(workspace, graph) {\n\n    let multinetOb = new Multinet();\n\n    // Fetch the names of all the node and edge tables \n    await load_tables(workspace, graph, multinetOb);\n\n    // Loop through each node tables and fetch the nodes to global variables\n    for (let node_table of multinetOb.tables.nodeTables) {\n        await load_nodes(workspace, node_table, multinetOb);\n    };\n\n    // Load the edge table (ONLY ONE BECAUSE OF ARANGO API LIMITATIONS) to a global variable\n    let edge_table = multinetOb.tables.edgeTable;\n    await load_links(workspace, edge_table, multinetOb);\n\n    // Set the graph structure\n    multinetOb.graph_structure = { \"nodes\": rename_node_vars(multinetOb.nodes), \"links\": rename_link_vars(multinetOb.links) }\n   \n    return JSON.parse(JSON.stringify(multinetOb.graph_structure))\n};\n\nasync function load_tables(workspace, graph, multinetOb) {\n    multinetOb.tables = await api.graph(workspace, graph);\n};\n\nasync function load_nodes(workspace, node_table, multinetOb) {\n    const table = await api.table(workspace, node_table, {\n      limit: 1000,\n    });\n    multinetOb.nodes = [].concat(multinetOb.nodes, table);\n};\n\nasync function load_links(workspace, edge_table, multinetOb) {\n    const table = await api.table(workspace, edge_table, {\n      limit: 1000,\n    });\n    multinetOb.links = [].concat(multinetOb.links, table)\n};\n\nfunction rename_link_vars(links) {\n    for (let row of links) {\n        row.id = row._id;\n        row.source = row._from;\n        row.target = row._to;\n\n        delete row._id;\n        delete row._from;\n        delete row._to;\n    };\n\n    return links;\n}\n\nfunction rename_node_vars(nodes) {\n    for (let row of nodes) {\n        row.id = row._id;\n\n        delete row._id;\n    };\n\n    return nodes;\n}\n","/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {array of leaf nodes in graph} leafArray \n * @param {string for property} source\n * @param {string for property} target  \n */\nexport function allPaths(edgeArray, leafArray, source, target){\n    return leafArray.map(le=> getPath(edgeArray, le, [le], source, target));\n}\n\nexport function getNested(node, edgeArray){\n    node.children = edgeArray.filter(f=> String(f.V1) === String(node.node));\n    node.name = String(node.node);\n    if(node.children.length > 0){\n        node.children.forEach(c=> getNested(c, edgeArray));\n    }else{\n        return node;\n    }\n    return node;\n}\n\nexport function calculateMovingAverage(data, i) {\n\n    if (movingAverage === 0) {\n        return data[i][yValue];\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        sum += x;\n    }\n\n    return sum / count;\n};\n\nexport function calculateMovingStandardDeviation(data, i, avg) {\n\n    if (movingAverage === 0) {\n        return 0;\n    }\n\n    var count = Math.min(movingAverage, i + 1),\n        first = i + 1 - count;\n\n    var sum = 0;\n    for (var index = first; index <= i; ++index) {\n        var x = data[index][yValue];\n        var dx = x - avg;\n        sum += (dx * dx);\n    }\n\n    var variance = sum / count;\n    return Math.sqrt(variance);\n};\n\n/**\n * \n * @param {array of all graph edges} edgeArray \n * @param {one row of the leaf array} leaf \n * @param {array that holds the constructed path} pathKeeper \n * @param {string for source header} source (V1)\n * @param {string for target header} target (V2)\n */\nexport function getPath(edgeArray, leaf, pathKeeper, source, target){\n    \n    let path = edgeArray.filter(ed=> {\n        return ed[target] === leaf[source];\n    });\n    \n    if(path.length > 0){\n        pathKeeper.push(path[0]);\n        return getPath(edgeArray, path[0], pathKeeper, source, target);\n    }else{\n        pathKeeper.push({'root': true, 'node': leaf[source], 'edgeLength': 0.0});\n        return pathKeeper.reverse();\n    }\n}\n\n\n/**\n * \n * @param {*} pathArray \n * @param {*} nodes \n * @param {*} arrayOfArray \n * @param {*} nameArray \n * @param {*} depth \n */\nexport function pullPath(pathArray, nodes, arrayOfArray, nameArray, depth){\n\n    nodes.forEach((node, i)=> {\n        node.depth = depth;\n        node.id = depth + '.' + i;\n       // node.edgeLength = node.edge_data.weight;\n        if(notEmpty(node.children)){\n            pathArray.push(Object.assign({}, node));\n            pullPath([...pathArray], [...node.children], arrayOfArray, nameArray, depth+1);\n        }else{\n            nameArray.push(node.node);\n            node.flag = true;\n            arrayOfArray.push([...pathArray, Object.assign({},node)]);\n        }\n    });\n    return arrayOfArray;\n}\n\nfunction notEmpty(childArray){\n    if(childArray == undefined){\n        return false;\n    }else if(childArray.length == 0){\n        return false;\n    }else{\n        return true;\n    }\n}\n","import * as d3 from \"d3\";\nimport { branchPaths, renderPaths, renderAttributes, drawContAtt, drawDiscreteAtt, drawPathsAndAttributes } from './renderPathView';\nimport { formatAttributeData } from './dataFormat';\nimport { filterMaster } from './filterComponent';\nimport { dataMaster, collapsed, colorKeeper } from './index';\nimport { renderDistibutions } from \"./distributionView\";\n\nexport let selectedPaths = [];\nexport let comparisonKeeper = [];\n\nexport function pathSelected(selectedPath, otherPaths, scales) {\n\n    let selectedDiv = d3.select('div#selected');\n    let main = d3.select('div#main');\n    if (selectedPath === null) {\n\n        selectedPaths = [];\n\n        d3.select('div#selected').selectAll('*').remove();\n        selectedDiv.style('height', 0);\n        d3.select('div#main').style('padding-top', '0px');\n        let main = d3.select('div#main');\n        drawPathsAndAttributes([...otherPaths], main, scales, false);\n\n    } else {\n      \n        selectedPaths = selectedPaths.concat(selectedPath);\n        let commonNodes = renderSelectedView([...selectedPaths], [...otherPaths], selectedDiv, scales);\n        let sortedPaths = sortOtherPaths([...selectedPaths], [...otherPaths], [...commonNodes]);\n        \n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let pathGroups = drawPathsAndAttributes(sortedPaths.map(s => s.data), main, scales, false);\n\n        main.style('padding-top', '250px');\n    }\n}\nfunction getCommonNodes(paths){\n    let maxBranch = d3.max(paths.map(p => p.length));\n    let longestBranch = paths.filter(path => path.length === maxBranch)[0];\n    let startBranch = longestBranch.filter(f=> f.leaf != true);\n    let commonNodeStart = startBranch;\n    //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n    paths.map(path => {\n        commonNodeStart = [...path].filter(f => {\n            return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n    });\n\n    let children = paths.map(path => {\n        path = (path[0].leaf === true) ? path.reverse() : path;\n        let nodeIndex = path.map(p => p.node);\n        let thresh = nodeIndex.indexOf(commonNodeStart[commonNodeStart.length - 1].node);\n        let subset = path.filter((f, i) => i > thresh);\n        return subset;\n    });\n\n    commonNodeStart[commonNodeStart.length - 1].children = children.map((path, i) => {\n        let max = d3.max(path.map(p => p.edgeMove)) - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n        return path.map((chil, j, n) => {\n            chil.parentBase = commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.move = chil.edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            chil.base = (j === 0) ? 0 : n[j - 1].edgeMove - commonNodeStart[commonNodeStart.length - 1].edgeMove;\n            let parentScale = d3.scaleLinear().domain([0, 1]).range([0, 1000])\n            let scaledParentMove = parentScale(commonNodeStart[commonNodeStart.length - 1].edgeMove);\n            chil.xScale = d3.scaleLinear().domain([0, max]).range([0, (1000 - scaledParentMove)]);\n            chil.level = i;\n            return chil;\n        });\n    });\n\n    return commonNodeStart;\n}\nexport function sortOtherPaths(pathData, otherPaths, commonNode) {\n\n    if(pathData.length > 1){\n\n        if(commonNode != null){\n\n            let chosenPath = commonNode.reverse().map(m => m.node);\n            let rankedPaths = otherPaths.map(path => {\n                let step = 0;\n                let test = path.reverse().map((node, i) => {\n                    if (chosenPath.indexOf(node.node));\n                    return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n                }).filter(f => f.indexOf > -1);\n                let distance = (test[0].indexOf + test[0].pathIndex);\n                return { 'data': path.reverse(), 'distance': distance };\n            });\n            let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        \n            return sortedData;\n        }\n        console.error('multiple paths without common node');\n    }else{\n\n        let chosenPath = pathData[0].reverse().map(m => m.node);\n    \n        let rankedPaths = otherPaths.map(path => {\n            let step = 0;\n            let test = path.reverse().map((node, i) => {\n                if (chosenPath.indexOf(node.node));\n                return { 'indexOf': chosenPath.indexOf(node.node), 'pathIndex': i, 'node': node, 'chosen': chosenPath[chosenPath.indexOf(node.node)] };\n            }).filter(f => f.indexOf > -1);\n            let distance = (test[0].indexOf + test[0].pathIndex);\n            return { 'data': path.reverse(), 'distance': distance };\n        });\n        let sortedData = rankedPaths.sort(function(a, b) { return a.distance - b.distance; });\n        return sortedData;\n    }\n\n}\nfunction renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency){\n\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', 'translate(0, 20)')\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data([commonNodeStart]).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n        pathBars.attr('height', (35 + (25 * commonNodeStart[commonNodeStart.length - 1].children.length)));\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(145, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', (d, i) => {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n                return x(d[d.length - 1].edgeMove)\n            })\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        nodeGroups.classed('common-node', true);\n\n        let childNodeWrap = nodeGroups.filter(c => c.children != undefined).selectAll('g.child').data(d => d.children).join('g').classed('child', true);\n\n        let childNodes = childNodeWrap.selectAll('g.node').data(d => d).join('g').classed('node', true)\n        childNodes.attr('transform', (d, i, n) => {\n            return 'translate(' + d.xScale(d.move) + ', ' + (d.level * 20) + ')';\n        });\n\n        childNodeWrap.append('path').attr('d', (d, i, n) => {\n            let pathArray = [{ 'x': 0, 'y': 0 }, { 'x': 0, 'y': i }];\n            d.map(m => {\n                pathArray.push({ 'x': m.xScale(m.move), 'y': m.level })\n            });\n            let line = d3.line()\n                .curve(d3.curveMonotoneY)\n                .x(function(d) {\n                    return d.x;\n                })\n                .y(d => (d.y * 20))\n            return line(pathArray);\n        }).attr('stoke-width', '2px').attr('fill', 'none').attr('stroke', 'gray');\n\n        childNodeWrap.on('mouseover', (d, i)=> {\n            let specArray = d.map(m=> m.species);\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let commonHover = [...commonNodeStart].map(c=> c.node).concat(d.map(n=> n.node));\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            treeLinks.filter(f => commonHover.indexOf(f.data.node) > -1).classed('hover', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', (d, i)=> {\n            d3.selectAll('.hover').classed('hover', false);\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        let childCirc = childNodes.append('circle').attr('r', 7).attr('fill', 'red').attr('y', 5);\n\n        childCirc.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        childNodes.filter(f => f.leaf === true).append('text').text(d => d.label).attr('x', 9).attr('y', 4);\n        //selectWrap.attr('transform', 'translate('+(50+(20 *commonNodeStart[commonNodeStart.length - 1].children.length))+')')\n       \n\n}\nexport function addRemoveBubble(group, scales){\n\n    let pathRemove = group.append('g').classed('x-icon', true);\n    pathRemove.attr('transform', 'translate(15, 10)');\n    pathRemove.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathRemove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n    pathRemove.style('cursor', 'pointer');\n    pathRemove.on('click', (d, i, n) => {\n        d3.selectAll('.high').classed('high', false);\n        d3.selectAll('.low').classed('low', false);\n        treeNodes.select('.selected').classed('selected', false);\n        pathSelected(null, dataMaster[0], scales);\n    });\n\n}\nexport function renderComparison(group, otherPaths, selectedDiv, scales){\n \n    let buttonGroupTest = selectedDiv.select('.button-wrap');\n    let buttonGroup = buttonGroupTest.empty() ? selectedDiv.append('div').classed('button-wrap', true) : buttonGroupTest;\n\n\n    \n    buttonGroup.style('display','inline-block').style('width', '900px').style('height', '50px');\n    let main = d3.select('div#main');\n    main.style('padding-top', '300px');\n\n    if(group != null){\n        let usedColors = comparisonKeeper.map(m=> m.groupColor);\n        let newColor = colorKeeper.find(c => usedColors.indexOf(c[0]) === -1);\n        group.groupColor = newColor[0];\n        comparisonKeeper.push(group);\n    }\n\n    if(comparisonKeeper.length > 1){\n        let compareButtonTest = d3.select('#toolbar').select('#compare-button');\n        let compareButton = compareButtonTest.empty() ? d3.select('#toolbar').append('button').text('Normal Mode').attr('id', 'compare-button').classed('btn btn-info', true) : compareButtonTest;\n        compareButton.on('click', ()=> {\n            compareButton.text() === \"Normal Mode\" ? compareButton.text('Compare Mode') : compareButton.text('Normal Mode');\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        });\n    }\n\n    let comparisonCombined = scales.map((sc, i)=> {\n        let newAtt = {'field': sc.field, 'type': sc.type, 'data': []}\n        comparisonKeeper.map((com, i)=> {\n            let atts = formatAttributeData(com.data, scales, [sc.field]);\n           \n            let added = atts.flatMap(att=> {\n                return att.map(a => {\n                    return a.map(m=> {\n                        let standard = m.leaf === true ? 0 : (m.upperCI95 - m.realVal) / 2;\n                        m.variance = standard * standard;\n                        return m;\n                    });\n                })\n            })\n\n            newAtt.data.push({'group': {'first': com.first, 'second': com.second, 'color': com.groupColor}, 'data': sc.type === 'continuous' ? added : atts.flatMap(a=> a)});\n        })\n        return newAtt;\n    });\n\n    let button = buttonGroup.selectAll('button').data(comparisonKeeper).join('button').classed('btn btn-info', true).style('background', d=> d.groupColor);\n    button.selectAll('span').data(t=> [t]).join('span').text(t=> {\n        return t.first ? `${t.first[1]} / ${t.second[1]}` : t.state;\n    }).append('span').text(t=> t.data.length).classed(\"badge badge-light\", true)\n    \n    let xOut = button.selectAll('i').data(d=> [d]).join('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    xOut.on('click', (d, i)=> {\n        let filteredComp = comparisonKeeper.filter(f=> f.groupColor != d.groupColor);\n        comparisonKeeper = filteredComp;\n        if(comparisonKeeper.length > 0){\n            renderComparison(null, otherPaths, selectedDiv, scales);\n        }else{\n            selectedDiv.selectAll('*').remove();\n            selectedDiv.style('height', '0px');\n            main.style('padding-top', '0px');\n        }\n    });\n\n    let selectedTest = selectedDiv.select('.comparison-svg');\n    let selectedTool = selectedTest.empty() ? selectedDiv.append('svg').classed('comparison-svg', true) : selectedTest;\n    selectedDiv.style('height', '300px').style('width', '100%');\n    selectedTool.style('height', '300px');\n\n    let attWraps = selectedTool.selectAll('.att-wrapper').data(comparisonCombined.filter(f=> f.type === 'continuous').map((com)=>{\n       \n        let max = d3.max(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.upperCI95)))) + .2;\n        let min = d3.min(com.data.flatMap(d=> d.data.flatMap(m=> m.map(f=> f.lowerCI95)))) - .2;\n        \n        com.data.map(c=> {\n            let binLength = 6;\n            //let max = scales.filter(f=> f.field === com.field)[0].max;\n           // let min = scales.filter(f=> f.field === com.field)[0].min;\n            let normBins = new Array(binLength).fill().map((m, i)=> {\n                let step = 1 / binLength;\n                let base = (i * step);\n                let top = ((i+ 1)* step);\n                return {'base': base, 'top': top, 'binI': i, 'max': max, 'min':min }\n            });\n\n            let internalNodes = c.data.map(path => path.filter(node=> node.leaf != true));\n            let leafNodes = c.data.flatMap(path => path.filter(node=> node.leaf === true));\n\n            c.bins = normBins.map((n, i, nodes)=> {\n                let edges = internalNodes.flatMap(path => path.filter(node=> {\n                    return node.edgeMove >= n.base && node.edgeMove <= n.top;\n                } ));\n                n.data = edges;\n                let mean = d3.mean(edges.map(e=> e.realVal));\n                n.mean = mean === undefined ? normBins[i-1].mean : mean;\n                let standard = Math.sqrt(d3.mean(edges.map(e=> e.variance)));\n                n.meanStandard = edges.length === 0 ? 0 : standard;\n                let sigma2 = standard * 2;\n                n.upCon95 = mean === undefined ? normBins[i-1].upCon95 : mean + sigma2;\n                n.lowCon95 = mean === undefined ? normBins[i-1].lowCon95 : mean - sigma2;\n                return n;\n            });\n            c.leaves = leafNodes;\n           \n            return c;\n        })\n        \n        return com;\n    }));\n    attWraps.exit().remove();\n    let attWrapsEnter = attWraps.enter().append('g').classed('att-wrapper', true);\n\n    let attLabels = attWrapsEnter.append('text').text(d=> d.field).style('text-anchor', 'end')\n                    .style('font-size', '11px').attr('transform', 'translate(120, 35)');\n\n    attWraps = attWrapsEnter.merge(attWraps);\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+(10+(i * 70))+')');\n\n    let innerWrap = attWraps.selectAll('g.inner-group').data(d=> [d]).join('g').classed('inner-group', true);\n    innerWrap.attr('transform', 'translate(150, 0)');\n    let wrapRect = innerWrap.selectAll('rect.outline-rect').data(d=> [d]).join('rect').classed('outline-rect', true)\n                    .attr('width', 800).attr('height', 60).attr('fill', '#fff').attr('stroke', 'gray');\n    \n    if(d3.select('#compare-button').empty() || d3.select('#compare-button').text() === \"Normal Mode\"){\n            let lineGen = d3.line()\n            .x((d, i)=> {\n                let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n                return x(i);\n            })\n            .y(d=> {\n            let y = d3.scaleLinear().domain([d.min, d.max])\n                y.range([60, 1]);\n                return y(d.mean);\n    });\n\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> d.data).join('g').classed('path-groups', true);\n    pathGroups.selectAll('*').remove();\n    let paths = pathGroups.append('path').attr('d', d=> { \n        let scale = d.bins[0].data[0].yScale\n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.mean === undefined){\n                b.mean = d.bins[i-1].mean;\n                d.missing = true;\n            }\n           \n            b.yScale = d3.scaleLinear().domain([b.min, b.max]).range([60, 1])\n            return b;\n        });\n        return lineGen(d.bins);\n    }).classed('path', true);\n\n    var areaG = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i)=> {\n        let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n        return x(i);\n    })\n    .y0(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.lowCon95);\n    })\n    .y1(d=> {\n        let y = d.yScale;\n        y.range([60, 1]);\n     \n        return y(d.upCon95); \n    });\n\n    let confGroups = innerWrap.selectAll('g.conf-groups').data(d=> d.data).join('g').classed('conf-groups', true);\n    confGroups.selectAll('*').remove();\n    let conf = confGroups.append('path').attr('d', d=> { \n        d.bins = d.bins.map((b, i, n)=> {\n            if(b.upCon95 === NaN){\n                b.upCon95 = d.bins[i-1].upCon95;\n                d.missing = true;\n            }\n            if(b.lowCon95 === NaN){\n                b.lowCon95 = d.bins[i-1].lowCon95;\n                d.missing = true;\n            }\n\n            return b;\n        });\n        return areaG(d.bins);\n    }).classed('path', true);\n\n    paths.style('fill', 'none');\n    paths.style('stroke', d=> d.group.color);\n    paths.style('stroke-width', '2px');\n\n    conf.style('fill', d=> d.group.color);\n    conf.style('opacity', 0.15);\n\n    let yAxisG = innerWrap.append('g').classed('y-axis', true);\n\n    innerWrap.on('mousemove', function(d, i) {\n     \n        let scale = d3.scaleLinear().domain([d.data[0].bins[0].min, d.data[0].bins[0].max]).range([1, 60]);\n        let axisGroupTest = d3.select(this).select('.y-axis');\n        let axisGroup = axisGroupTest.empty() ? d3.select(this).append('g').classed('y-axis', true) : axisGroupTest;\n        \n        if(d3.select('#compare-button').empty() || d3.select('#compare-button').text()==='Normal Mode'){\n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)')\n            axisGroup.call(d3.axisLeft(scale).ticks(5));\n        }else{\n            let pathD = d3.select(this).select('.path-groups').selectAll('path');\n            let maxDiff = pathD.data().map(d=> d[0].maxDiff)[0];\n            \n            axisGroup.attr('transform', (d, i)=> 'translate('+(d3.mouse(this)[0] - 10)+',0)');\n            let newScale = d3.scaleLinear().domain([maxDiff, 0]).range([0, 60]);\n            axisGroup.call(d3.axisLeft(newScale).ticks(5));\n        }\n\n    \n    }).on('mouseleave', function(){\n        let axisGroup = d3.select(this).select('.y-axis');\n        axisGroup.remove();\n    });\n    \n}else{\n\n    innerWrap.selectAll('.path-groups').remove();\n    innerWrap.selectAll('g.conf-groups').remove();\n    let pathGroups = innerWrap.selectAll('g.path-groups').data(d=> {\n        let startBins = d.data[0].bins;\n        let difArray = [];\n        for(let i = 1; i < d.data.length; i ++){\n            let diffs = []\n            d.data[i].bins.map((b, j)=>{\n                if(b.mean === undefined){\n                    b.mean = d.data[i].bins[j-1].mean;\n                }\n                if(startBins[j].mean === undefined){\n                    startBins[j].mean = startBins[j-1].mean;\n                }\n                let maxDiff = d.data[0].bins[0].max - d.data[0].bins[0].min;\n                diffs.push({'diff':Math.abs(startBins[j].mean - b.mean), 'maxDiff': maxDiff});\n            });\n            difArray.push(diffs);\n        }\n        return difArray;\n    }).join('g').classed('path-groups', true);\n\n    let lineGen = d3.line()\n        .x((d, i)=> {\n            let x = d3.scaleLinear().domain([0, 5]).range([0, 800]);\n            return x(i);\n        })\n        .y(d=> {\n            let y = d3.scaleLinear().domain([0, d.maxDiff]).clamp(true);\n            y.range([60, 0]);\n            return y(d.diff);\n        });\n\n    let paths = pathGroups.append('path').attr('d', d=> { \n        return lineGen(d);\n    });\n\n    paths.style('fill', 'none');\n    paths.style('stroke', 'black');\n    paths.style('stroke-width', '2px');\n}\n\n/////////////////////////\nlet obsDistWrap = attWraps.selectAll('.observed-dist-wrap').data(d=> {\n  \n        let max = d3.max(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n        let min = d3.min(d.data.flatMap(f=> f.leaves.map(m=> m.realVal)));\n\n        let x = d3.scaleLinear().domain([min, max]).range([0, 200]);\n    \n        let histogram = d3.histogram()\n        .value(function(d) { return d.realVal; })  \n        .domain(x.domain())  \n        .thresholds(x.ticks(10)); \n        \n        let leafData = d.data.map(m=> {\n            let newLeaves = [...m.leaves].map(leaf => {\n                leaf.x = x;\n                leaf.group = m.group;\n                return leaf;\n            });\n            return {'binData':histogram(m.leaves), 'data': newLeaves, 'group': m.group, 'xScale': x};\n        });\n        return [{'data':leafData, 'xScale': x}];\n    }).join('g').classed('observed-dist-wrap', true);\n\n    obsDistWrap.attr('transform', 'translate(970, 0)');\n  \n    let xAxis = obsDistWrap.selectAll('g.axis-x').data(d=> [d]).join('g').classed('axis-x', true);\n    xAxis.attr('transform', 'translate(0, 50)')\n    xAxis.each((d, i, nodes)=> {\n        d3.select(nodes[i]).call(d3.axisBottom(d.xScale).ticks(5))\n    });\n\n    let distGroups = obsDistWrap.selectAll('.observed-group').data(d=> {\n        return d.data.map((m, i, n)=> {\n            m.index = i;\n            m.groupLength = n.length;\n            return m;\n        });\n    }).join('g').classed('observed-group', true);\n\n    let lines = distGroups.selectAll('.line').data(d => {\n            let mean = d3.mean(d.data.map(r=> r.realVal))\n            let vals = {'mean': mean, 'group':d.group, 'x':d.xScale}\n            return [vals];\n    }).join('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.mean)-1.5)+',0)')\n    .attr('height', 50).attr('width', 3).attr('fill', d=> d.group.color).style('opacity', '0.4')\n\n    let circWrap = distGroups.selectAll('.circ-wrap').data((d, i)=> [d]).join('g').classed('circ-wrap', true).attr('transform', (d, i, n)=> {\n        let move = d3.scaleLinear().domain([0, d.groupLength]).range([0, 60]);\n        return 'translate(0,'+(move(d.index+0.5))+')'});\n\n    let distCirc = circWrap.selectAll('circle.disDots').data(d=> d.data).join('circle').attr('r', 3)\n    .attr('cx', (d, i) => {\n        return d.x(d.realVal);\n    }).attr('cy', (d, i, n)=> {\n        return 0;\n    }).attr('fill', d=> d.group.color);\n}\nexport function renderSelectedView(pathData, otherPaths, selectedDiv, scales) {\n\n    let attributeHeight = 50;\n\n    let selectedSpecies = pathData.flatMap(p => p.filter(f => f.leaf === true).map(n => n.node));\n    let treeNodes = d3.select('#sidebar').select('svg').selectAll('.node');\n    treeNodes.filter(node => selectedSpecies.indexOf(node.data.node) > -1).classed('selected', true);\n\n    ////FILTER MASTER TO HIDE ATTRIBUTES THAT ARE DESELECTED FROM FILTERBAR\n    let attrHide = filterMaster.filter(f => f.type === 'hide-attribute').length > 0 ? filterMaster.filter(f => f.type === 'hide-attribute').map(m => m.attribute) : [];\n    let attrFilter = attrHide.length > 0 ? scales.filter(sc => {\n        return attrHide.indexOf(sc.field) === -1;\n    }).map(m => m.field) : null;\n\n    ////IF THE SELECTED DIV IS THERE ALREADY USE THAT/////\n    let selectedToolTest = selectedDiv.select('.selected-toolbar');\n    let selectedTool = selectedToolTest.empty() ? selectedDiv.append('div').classed('selected-toolbar', true) : selectedToolTest;\n    selectedTool.selectAll('*').remove();\n\n    ///////////////////////\n    let sortByDistanceDiv = selectedTool.append('div').style('display', 'inline-block');\n    sortByDistanceDiv.append('text').text('Topology: ');\n    let sortByDistanceButton = sortByDistanceDiv.append('button').classed('btn btn-secondary btn-sm', true);\n    sortByDistanceButton.text('Sort Most to Least');\n    sortByDistanceButton.on('click', () => sortPaths(sortByDistanceButton));\n\n    /////////////Sorting by attribute///////////////\n    let attrKeys = scales.map(m => m.field);\n    let attrSortWrap = selectedTool.append('div').style('display', 'inline-block');\n    attrSortWrap.append('h6').text('Sort by: ').style('display', 'inline');\n\n    let radioDiv = attrSortWrap.selectAll('div.attr-radio').data(attrKeys).join('div').classed('attr-radio form-check form-check-inline', true);\n    let radio = radioDiv.append('input').attr('type', 'radio').property('name', 'attribute-radio-sort').property('value', d => d).attr('id', (d, i) => 'radio-' + i).classed(\"form-check-input\", true);\n    radioDiv.append('label').text(d => d).property('for', (d, i) => 'radio-' + i).classed(\"form-check-label\", true);\n\n    let svgTest = selectedDiv.select('svg.select-svg');\n    let svg = svgTest.empty() ? selectedDiv.append('svg').classed('select-svg', true) : svgTest;\n\n    svg.selectAll('*').remove();\n\n    let branchFrequency = pathData.flatMap(row => row.flatMap(f => f.node)).reduce(function(acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n            acc[curr] = 1;\n        } else {\n            acc[curr] += 1;\n        }\n        return acc;\n    }, {});\n\n    ///RENDERING SELECTED PATHS////\n    if (pathData.length === 1) {\n\n        /////////////////////////////////////////////////\n        let selectWrap = svg.append('g').classed('select-wrap', true);\n        selectWrap.attr('transform', (d, i) => 'translate(0,20)');\n\n        ///Scales for circles ///\n        let circleScale = d3.scaleLog().range([6, 14]).domain([1, d3.max(Object.values(branchFrequency))]);\n\n        let selectedGroups = selectWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n\n        let pathBars = selectedGroups.append('rect').classed('path-rect', true);\n        pathBars.attr('y', -8);\n\n        //////////\n        ///Selecting species\n        /////////\n        addRemoveBubble(selectedGroups, scales)\n\n        /////////\n        selectedGroups.on('mouseover', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let treeLinks = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f => {\n                return d.map(m => m.node).indexOf(f.data.node) > -1;\n            }).classed('hover', true);\n            treeLinks.filter(f => d.map(m => m.node).indexOf(f.data.node) > -1).classed('hover', true);\n            return d3.select(this).classed('hover', true);\n        }).on('mouseout', function(d, i) {\n            let treeNode = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n            let treeLinks = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n            return d3.select(this).classed('hover', false);\n        });\n\n        let speciesTitle = selectedGroups.append('text').text(d => {\n            let string = d.filter(f => f.leaf === true)[0].label;\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        });\n\n        speciesTitle.attr('x', 25).attr('y', 15);\n\n        let timelines = selectedGroups.append('g').classed('time-line', true);\n        timelines.attr('transform', (d, i) => 'translate(150, 0)');\n\n        let lines = timelines.append('line')\n            .attr('x1', 0)\n            .attr('x2', 1000)\n            .attr('y1', 15)\n            .attr('y2', 15);\n\n        let nodeGroups = timelines.selectAll('.node').data((d) => d).join('g').classed('node', true);\n\n        nodeGroups.attr('transform', (d) => {\n            let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate(' + distance + ', 10)';\n        });\n\n        let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d => {\n            return circleScale(branchFrequency[d.node]);\n        }).attr('class', (d, i) => 'node-' + d.node);\n\n        circle.on('mouseover', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            let treeNode = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f => f.data.node === d.node).classed('selected-branch', true);\n            return hovers.classed('hover-branch', true);\n        }).on('mouseout', function(d, i) {\n            let hovers = nodeGroups.filter(n => n.node === d.node);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            return hovers.classed('hover-branch', false);\n        });\n\n        let speciesNodeLabel = nodeGroups.filter(f => f.label != undefined).append('text').text(d => {\n            let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n            return string;\n        }).attr('x', 10).attr('y', 5);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(0,' + (i * 60) + ')');\n\n        let nodes = selectedGroups.select('.time-line').selectAll('.node');\n        nodes.on('mouseover', (d, i) => {\n\n            let nearest = otherPaths.filter(path => {\n                let nodearray = path.flatMap(f => f.node);\n                return nodearray.indexOf(d.node) > -1;\n            });\n\n            let nearestA = nearest[0];\n            let nearestB = nearest[1];\n           \n        });\n\n        //////PLAYING WITH FUNCTION TO CALULATE DISTANCES\n\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        let attributeWrapper = selectedGroups.append('g').classed('attribute-wrapper', true);\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attributeGroups = renderAttributes(attributeWrapper, attData, scales, null);\n\n        selectedGroups.attr('transform', (d, i) => 'translate(10,' + (i * ((attributeHeight + 5) * (Object.keys(d[1].attributes).length + 1))) + ')');\n\n        drawContAtt(attributeGroups);\n        drawDiscreteAtt(attributeGroups, scales, false, false);\n\n        //sizeAndMove(svg, attributeWrapper, pathData, (attrMove * attributeHeight));\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attributeWrapper.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n      \n        return pathData;\n\n    } else if(pathData.length > 1 && pathData.length < 5) {\n       \n        let commonNodeStart = getCommonNodes(pathData);\n        renderSelectedTopology(commonNodeStart, svg, scales, branchFrequency);\n\n        /////END PATH RENDER///////\n        let attWrap = svg.append('g').classed('attribute-wrapper', true);\n        let attributeData = commonNodeStart[commonNodeStart.length - 1].children.map(ch => {\n            return [...commonNodeStart].concat(ch);\n        });\n\n        let attData = formatAttributeData(pathData, scales, attrFilter);\n        let attDataComb = attData[0].map((att, i)=> {\n            let species = pathData[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < attData.length; index++ ){\n                let species = pathData[index].filter(f=> f.leaf === true)[0].label;\n                let last = attData[index][i].length - 1\n                attData[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': attData[index][i]})\n            }\n            return attribute;\n        });\n\n        function findMaxState(states, offset){\n            let maxP = d3.max(states.map(v=> v.realVal));\n            let notMax = states.filter(f=> f.realVal != maxP);\n            let winState = states[states.map(m=> m.realVal).indexOf(maxP)]\n            winState.other = notMax;\n            winState.offset = offset;\n    \n            return winState;\n        }\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'edgeMove': m.edgeMove, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n\n       let attGroups = attWrap.selectAll('g').data(mappedDis).join('g').classed('attr', true);\n       attGroups.attr('transform', (d, i) => 'translate(145,' + (i * (attributeHeight + 10)) + ')');\n\n       attGroups.append('text')\n        .text(d=> d.label)\n        .style('text-anchor', 'end')\n        .style('font-size', 11)\n        .attr('transform', 'translate(0,'+(attributeHeight/2)+')');\n\n       let wrapRect = attGroups.append('rect').attr('width', 1010);\n       wrapRect.attr('height', attributeHeight);\n       wrapRect.style('fill', '#fff');\n       wrapRect.style('stroke', 'gray');\n       wrapRect.style('opacity', 0.5);\n\n       attGroups.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', 1010).attr('y2', 22);\n     \n       let speciesGrp = attGroups.selectAll('g').data(d=> {\n            d.data = d.data.map(m=> {\n                m.type = d.type;\n                return m;\n            });\n            return d.data;\n        }).join('g').classed('species', true);\n\n       let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n           return y(d.realVal) + d.offset;\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n           let distance = d.edgeMove;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([attributeHeight-2, 1]);\n           return y(d.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n           d3.select(n[i]).classed('selected', true);\n       }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).classed('selected', false);\n       });\n\n       let disGroup = speciesGrp.filter(sp=> {\n        return sp.type === 'discrete';\n        });\n\n       let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n       branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n            let distance = x(d.edgeMove);\n            return 'translate('+distance+', 0)';\n        });\n\n        let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 5, 2]);\n            return y(d.realVal) + d.offset;\n        }).attr('cx', 5);\n\n        bCirc.attr('fill', (d, i)=> d.color);\n\n        let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n        otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n                return y(c.realVal);\n            }).attr('fill', (c)=> c.color).style('opacity', 0.1);\n\n        otherCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n\n        bCirc.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n        \n        /////AXIS ON HOVER////\n        branchGrpDis.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let conGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'continuous';\n        });\n\n        let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n        branchGrpCon.attr('transform', (d)=> {\n         let x = d3.scaleLinear().domain([0, 1]).range([0, 1000]);\n             let distance = x(d.edgeMove);\n             return 'translate('+distance+', 0)';\n         });\n\n         /////AXIS ON HOVER////\n        branchGrpCon.on('mouseover', (d, i, n)=> {\n            let y = d.yScale;\n            y.range([0, (attributeHeight-5)]);\n            svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n            svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n            d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n            d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n            d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n            d3.selectAll('.other').style('opacity', 0.1);\n        });\n\n        let MeanRect = branchGrpCon.append('rect');\n   \n        MeanRect.attr('width', 10).attr('height', 3);\n        MeanRect.attr('y', (d, i) => {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0])\n            return y(d.realVal);\n        });\n\n        let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n        confiBars.attr('width', 10).attr('height', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.lowerCI95) - y(d.upperCI95);\n        });\n\n        confiBars.attr('y', (d, i)=> {\n            let scale = scales.filter(s=> s.field === d.label)[0];\n            let y = d3.scaleLinear().domain([scale.min, scale.max]).range([attributeHeight, 0]);\n            return y(d.upperCI95);\n        })\n        confiBars.style('opacity', 0.1);\n\n        //tranforming elements\n        svg.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(0, 60)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n\n\n    }else{\n       \n        /////////\n        //getting common node\n        ///\n\n        let maxBranch = d3.max(pathData.map(p => p.length));\n        let longestBranch = pathData.filter(path => path.length === maxBranch)[0];\n        let startBranch = longestBranch.filter(f=> f.leaf != true);\n        let commonNodeStart = startBranch;\n        //FIND THE COMMON BRANCHES BETWEEN ALL OF THE SELECTED///\n        pathData.map(path => {\n            commonNodeStart = [...path].filter(f => {\n                return (commonNodeStart.map(m => m.node).indexOf(f.node) > -1) & f.leaf != true });\n        });\n\n        svg.remove();\n        let remove = selectedTool.append('g').classed('x-icon', true);\n        remove.attr('transform', 'translate(15, 10)');\n        remove.append('circle').attr('r', 7).attr('fill', '#fff');\n        remove.append('text').text('x').attr('transform', 'translate(-5, 5)');\n        remove.style('cursor', 'pointer');\n        remove.on('click', (d, i, n) => {\n            d3.selectAll('.high').classed('high', false);\n            d3.selectAll('.low').classed('low', false);\n            treeNodes.select('.selected').classed('selected', false);\n            pathSelected(null, dataMaster[0], scales);\n        });        \n\n        /////////\n        renderDistibutions(pathData, selectedDiv, scales);\n        selectedDiv.style('height', '550px');\n\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        ////RADIO BUTTON THAT COLORS BASE DON ATTRIBUTE VALUE////\n        radio.on('click', (d, i) => {\n            let leaf = pathData.map(node => node.filter(d => d.leaf === true)[0])[0];\n            let sorted = [...otherPaths].sort(function(a, b) {\n                return a.filter(n => n.leaf === true)[0].attributes[d].realVal - b.filter(n => n.leaf === true)[0].attributes[d].realVal;\n            });\n    \n            let main = d3.select('div#main');\n            /// LOWER ATTRIBUTE VISUALIZATION ///\n            drawPathsAndAttributes(sorted.reverse(), main, scales);\n            main.style('padding-top', '250px');\n    \n            let paths = main.select('svg#main-path-view').selectAll('.paths');\n    \n            let high = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal > leaf.attributes[d].realVal;\n            });\n            high.classed('high', true);\n    \n            let highLeaves = high.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => highLeaves.indexOf(f.data.node) > -1).classed('high', true);\n    \n            let low = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal < leaf.attributes[d].realVal;\n            });\n            low.classed('low', true);\n    \n            let lowLeaves = low.data().map(path => path.filter(f => f.leaf === true)[0].node);\n    \n            treeNodes.filter(f => lowLeaves.indexOf(f.data.node) > -1).classed('low', true);\n    \n            let same = paths.filter(path => {\n                let leafOther = path.filter(node => node.leaf === true)[0];\n                return leafOther.attributes[d].realVal === leaf.attributes[d].realVal;\n            });\n            same.classed('same', true);\n        });\n        //tranforming elements\n        svg.style('height', ((pathData.length + attributeGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        selectedDiv.style('height', ((pathData.length + attGroups.data().map(m => m[0]).length) * 50) + 50 + 'px');\n        attWrap.attr('transform', (d) => 'translate(140, 25)');\n        d3.selectAll('.selected-path').classed('selected-path', false);\n\n        return commonNodeStart;\n    }\n    \n}\n\nfunction sortPaths(sortButton) {\n    if (sortButton.text() === 'Sort Most to Least') {\n        sortButton.text('Sort Least to Most');\n    } else {\n        sortButton.text('Sort Most to Least');\n    }\n}","import * as d3 from \"d3\";\nimport '../styles/index.scss';\n\nexport function dropDown(div, optionArray, dropText, dropId){\n    let dropdiv = div.append('div').classed(`dropdown ${dropId}`, true);\n    dropdiv.style('display', 'inline-block')\n    let button = dropdiv.append('button').classed('btn dropbtn dropdown-toggle', true).text(dropText);\n    let dropContent = dropdiv.append('div').attr('id', dropId).classed('dropdown-content', true);\n    dropContent.append('a').text('text').attr('font-size', 11);\n    let options = dropContent.selectAll('a').data(optionArray).join('a').text(d=> d.field);\n\n    options.on('click', (d, i, n)=> dropContent.classed('show', false));\n\n    button.on('click', (d, i, n)=> {\n        if(dropContent.classed('show')){\n            dropContent.classed('show', false);\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n    options.raise()\n    return options;\n}\n\nexport function updateDropdown(optionArray, dropId){\n    d3.select(`#${dropId}`).selectAll('a').data(optionArray).join('a').text(d=> d.field);\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport * as d3Array from 'd3-array'\nimport {pathSelected, renderComparison} from './selectedPaths';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport {filterMaster, nodeFilter, getLatestData, leafStateFilter, getScales} from './filterComponent';\nimport { drawBranchPointDistribution } from './distributionView';\nimport { dropDown } from './buttonComponents';\nimport { groupedView } from './viewControl';\n\nconst dimensions = {\n    rectWidth: 15,\n    rectHeight: 40,\n    collapsedHeight: 20,\n}\n\nexport function drawPathsAndAttributes(pathData, main){\n\n    let width = 800;\n\n    let scales = getScales();\n\n    let nodeTooltipFlag = true;\n\n    let collapsed = d3.select('#scrunch').attr('value');\n  \n    main.select('#main-path-view').selectAll('*').remove();\n\n    let pathGroups = renderPaths(pathData, main, 800);\n  \n      /// LOWER ATTRIBUTE VISUALIZATION ///\n    let attributeWrapper = pathGroups.append('g').classed('attribute-wrapper', true);\n  \n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n    let attData = formatAttributeData(pathData, scales, shownAttributes);\n\n    let combinedAttGroup = pathGroups.append('g').classed('all-att-combo', true);\n    combinedAttGroup.datum((d,i)=> attData[i])\n    combinedAttGroup.attr('transform', `translate(${width + 180}, -9)`)\n    combinedAttGroup.append('rect')\n    .attr('width', 80)\n    .attr('height', 40)\n    .attr('fill', '#fff')\n    .style('fill-opacity', '0.6')\n    .style('stroke', 'gray')\n    .style('stroke-width', '0.7px')\n\n    let comboLineGroups = combinedAttGroup.selectAll('g.combo-lines').data((d, i)=> {\n        return d}).join('g').classed('combo-lines', true);\n\n    drawDistLines(comboLineGroups.filter(f=> f[0].type != 'continuous'))\n\n\n    \n    let comboLine = continuousPaths(comboLineGroups.filter(f=> f[0].type === 'continuous'), collapsed, 80, 0.3, false);\n\n    let predictedAttrGrps = renderAttributes(attributeWrapper, attData, collapsed);\n    let attributeHeight = (collapsed === 'true')? 22 : 45;\n    pathGroups.attr('transform', (d, i)=> 'translate(10,'+ (i * ((attributeHeight + 5)* (shownAttributes.length + 1))) +')');\n\n    let cGroups = drawContAtt(predictedAttrGrps, collapsed, width);\n    let dGroups = drawDiscreteAtt(predictedAttrGrps, collapsed, false, width);\n\n    let compactLineG = cGroups.append('g').classed('compact-line', true);\n    compactLineG.attr('transform', `translate(${width + 40}, 0)`);\n    compactLineG.append('rect').attr('width', 80).attr('height', 40).classed('attribute-rect', true);\n\n    let innerPaths = continuousArea(compactLineG.filter(f=> f[0].type === 'continuous'), collapsed, 80, 1);\n    compactLineG.on('mouseover', (d, i, n)=> {\n        let test = d3.select(n[i].parentNode.parentNode.parentNode).selectAll('g.combo-lines');\n        test.filter(f=> {\n            return f[0].field === d[0].field;\n        }).select('path')\n        .style('stroke', (s)=> s[0].color)\n        .style('opacity', 1);\n    }).on('mouseout', (d, i, n)=> {\n        let test = d3.select(n[i].parentNode.parentNode.parentNode).selectAll('g.combo-lines');\n        test.filter(f=> {\n            return f[0].field === d[0].field;\n        }).select('path')\n        .style('stroke', 'gray')\n        .style('opacity', 0.4);\n    })\n    let contDist = drawDistLines(compactLineG.filter(f=> f[0].type != 'continuous'));\n    contDist.select('rect')    \n    .attr('fill', (d, i)=> {\n            if(d.leaf === true){\n                return d.color;\n            }else if(d.length > 1){\n                return 'gray';\n            }else{\n                return d.color.color;\n            }\n        });\n\n    // let compactStateG = compactLineG.filter(f=> {\n    //     return f[0].type != 'continuous';\n    // }).selectAll('g.states').data(d=> {\n       \n    //     let array = [d[0]]\n    //     let test = d.filter(f=> f.leaf != true).map(m=> {\n    //         let maxVal = m.filter(f=> +f.value === d3.max(m.map(v=> +v.value)));\n           \n    //         if(maxVal.length > 1){\n\n    //         }else{\n              \n    //             if(array[array.length - 1].length > 1){\n    //                 array.push(maxVal[maxVal.length - 1]);\n    //             }else{\n    //                 if(maxVal[maxVal.length - 1].key != array[array.length - 1].key){ array.push(maxVal[maxVal.length - 1]); }\n    //             }\n    //         }\n    //     });\n       \n    //     array.push(d.filter(f=> f.leaf === true)[0])\n    //     return array;\n    // }).join('g').classed('states', true);\n\n    // compactStateG.append('rect').attr('width', 3).attr('height', 40)\n    //.attr('fill', (d, i)=> {\n    //     if(d.leaf === true){\n    //         return d.color;\n    //     }else if(d.length > 1){\n    //         return 'gray';\n    //     }else{\n    //         return d.color.color;\n    //     }\n    // });\n    \n    // compactStateG.attr('transform', (d, i)=> {\n    //     let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 77]);\n    //     let move = d.length > 0 ? d[0].combLength : d.combLength;\n    //     return `translate(${x(move)},0)`})\n\n    sizeAndMove(main.select('#main-path-view'), attributeWrapper, pathData, (shownAttributes.length * attributeHeight));\n\n    let leafStates = d3.selectAll('.discrete-leaf');\n    leafStates.on('click', (d, i)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#state-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.winState);\n            d3.select(\"#state-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-state\").on('click', ()=> {\n                leafStateFilter(d, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-state\").on('click', ()=> {\n                let data = getLatestData();\n                let test = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState === d.winState;\n                });\n\n                let notIt = data.filter(path => {\n                    return path[path.length - 1].attributes[d.label].winState != d.winState;\n                });\n            \n                nodeTooltipFlag = false;\n                d3.select(\"#state-tooltip\").classed(\"hidden\", true);\n\n                pathSelected(test, notIt, scales);\n\n            });\n\n        }});\n\n    return pathGroups;\n\n}\nfunction drawDistLines(discG){\n    let comboDisc = discG.selectAll('g.states').data(d=> {\n        let array = [d[0]]\n        let test = d.filter(f=> f.leaf != true).map(m=> {\n            let maxVal = m.filter(f=> +f.value === d3.max(m.map(v=> +v.value)));\n           \n            if(maxVal.length > 1){\n\n            }else{\n                if(array[array.length - 1].length > 1){\n                    array.push(maxVal[maxVal.length - 1]);\n                }else{\n                    if(maxVal[maxVal.length - 1].key != array[array.length - 1].key){ array.push(maxVal[maxVal.length - 1]); }\n                }\n            }\n        });\n        array.push(d.filter(f=> f.leaf === true)[0])\n        return array;\n    }).join('g').classed('states', true);\n\n    comboDisc.append('rect')\n        .attr('width', 2)\n        .attr('height', 40)\n        .attr('fill', 'gray')\n        .attr('opacity', 0.4);\n\n    comboDisc.attr('transform', (d, i)=> {\n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 78]);\n            let move = d.length > 0 ? d[0].combLength : d.combLength;\n            return `translate(${x(move)},0)`});\n\n    return comboDisc;\n}\nexport function sizeAndMove(svg, attribWrap, data, attrMove){\n        //tranforming elements\n    svg.style('height', ((data.length * (attrMove + 52))) + 'px');\n    attribWrap.attr('transform', (d)=> 'translate(140, 35)');\n        ///////////////////////////////////\n}\nexport function renderPaths(pathData, main, width){\n\n    let scales = getScales();\n\n    ////YOU SHOULD MOVE THESE APPENDING THINGS OUT OF HERE///////\n    /////Rendering ///////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    \n    let nodeTooltipFlag = false;\n\n    let pathWrapTest = svg.select('.path-wrapper');\n    let pathWrap = pathWrapTest.empty() ? svg.append('g').classed('path-wrapper', true) : pathWrapTest;\n    pathWrap.attr('transform', (d, i)=> 'translate(0,20)');\n\n      /////Counting frequency of nodes//////\n    let branchFrequency = pathData.flatMap(row=> row.flatMap(f=> f.node)).reduce(function (acc, curr) {\n        if (typeof acc[curr] == 'undefined') {\n          acc[curr] = 1;\n        } else {\n          acc[curr] += 1;\n        }\n        return acc;\n        }, {});\n\n     ///Scales for circles ///\n    let circleScale = d3.scaleLog().range([6, 12]).domain([1, d3.max(Object.values(branchFrequency))]);\n    let pathGroups = pathWrap.selectAll('.paths').data(pathData).join('g').classed('paths', true);\n    let pathBars = pathGroups.append('rect').classed('path-rect', true);\n    pathBars.style('width', '100%');\n    pathBars.attr('y', -12);\n\n    //////////\n    ///Selecting species\n    /////////\n    let pathAdd = pathGroups.append('g').classed(\"fas fa-search-plus\", true);\n    pathAdd.attr('transform', 'translate(15, 10)');\n    pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n    pathAdd.append('text').text('+').attr('transform', 'translate(-5, 5)');\n    pathAdd.style('cursor', 'pointer');\n\n    pathAdd.on('click', (d, i, n)=>{\n\n        let notIt = d3.selectAll(n).filter((f, j)=> j != i).classed('selected-path', false);\n     \n        if(d3.select(n[i]).classed('selected-path')){\n            d3.select(n[i]).classed('selected-path', false);\n            pathSelected(null, notIt.data(), scales);\n        }else{\n            d3.select(n[i]).classed('selected-path', true);\n            pathSelected([d], notIt.data(), scales);\n        }\n    });\n\n    /////////\n    pathGroups.on('mouseover', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        treeNode.filter(f=> {\n            return d.map(m=> m.node).indexOf(f.data.node) > -1;\n        }).classed('hover', true);\n        treeLinks.filter(f=> d.map(m=> m.node).indexOf(f.data.node) > -1).classed('hover', true);\n        return d3.select(this).classed('hover', true);\n    }).on('mouseout', function(d, i){\n        let treeNode  = d3.select('#sidebar').selectAll('.node').classed('hover', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link').classed('hover', false);\n        return d3.select(this).classed('hover', false);\n    });\n\n    let speciesTitle = pathGroups.append('text').text(d=> {\n       let string = d.filter(f=> f.leaf === true)[0].node;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    speciesTitle.attr('x', 25).attr('y', 15);\n\n    let timelines = pathGroups.append('g').classed('time-line', true);\n    timelines.attr('transform', (d, i)=> 'translate(150, 0)');\n\n    let lines = timelines.append('line')\n    .attr('x1', 0)\n    .attr('x2', width)\n    .attr('y1', 15)\n    .attr('y2', 15);\n\n    let nodeGroups = timelines.selectAll('.node').data((d)=> {\n        return d}).join('g').attr('class', (d, i, n)=> {\n            return d3.select(n[n.length - 1]).data()[0].node + \" node\";\n        });\n   \n    nodeGroups.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 10)';});\n\n    nodeGroups.on('click', (d, i, n)=> {\n        if(nodeTooltipFlag){\n            nodeTooltipFlag = false;\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n        }else{\n            nodeTooltipFlag = true;\n            d3.select(\"#branch-tooltip\")\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\")\n            .select(\"#value\")\n            .text(d.node);\n            d3.select(\"#branch-tooltip\").classed(\"hidden\", false);\n\n            d3.select(\"#filter-by-node\").on('click', ()=> {\n                nodeFilter(d.node, scales);\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n            });\n\n            d3.select(\"#select-by-node\").on('click', ()=> {\n                let data = getLatestData();\n                let test = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) > -1;\n                });\n                let notIt = pathGroups.filter(path => {\n                    return path.map(node => node.node).indexOf(d.node) === -1;\n                });\n                nodeTooltipFlag = false;\n                d3.select(\"#branch-tooltip\").classed(\"hidden\", true);\n                pathSelected(test.data(), notIt.data(), scales);\n            });\n        }\n    });\n\n    let circle = nodeGroups.append('circle').attr('cx', 0).attr('cy', 0).attr('r', d=> {\n        return circleScale(branchFrequency[d.node]);\n    }).attr('class', (d, i)=> 'node-'+d.node);\n\n    circle.on('mouseover', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let selectedBranch = treeNode.filter(f=> f.data.node === d.node).classed('selected-branch', true);\n        return hovers.classed('hover-branch', true);\n    }).on('mouseout', function(d, i){\n        let hovers = nodeGroups.filter(n=> n.node === d.node);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        return hovers.classed('hover-branch', false);\n    });\n\n    let speciesNodeLabel = nodeGroups.filter(f=> f.label != undefined).append('text').text(d=> {\n        let string = d.label.charAt(0).toUpperCase() + d.label.slice(1);\n        return string;\n    }).attr('x', 10).attr('y', 5);\n\n    return pathGroups;\n}\nexport function renderAttributes(attributeWrapper, data, collapsed){\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n    let predictedAttrGrps = attributeWrapper.selectAll('g').data((d, i)=> {\n        return data[i]}).join('g');\n    predictedAttrGrps.classed('predicated-attr-groups', true);\n    predictedAttrGrps.attr('transform', (d, i) => 'translate(0, '+(i * (attributeHeight + 5))+')');\n\n    let attrLabel = predictedAttrGrps.append('text').text(d=> {\n        return d[d.length - 1].label ? d[d.length - 1].label : d[d.length - 1].attrLabel\n    });\n    attrLabel.classed('attribute-label', true);\n    attrLabel.attr('transform', 'translate(-15, 20)');\n\n    return predictedAttrGrps;\n}\nfunction collapsedPathGen(data){\n    data.map((p, i)=>{\n        let step = i === 0 ? 0 : 1;\n        let test = (p.realVal > data[i-step].realVal) ? 1 : 18;\n        p.change = test;\n    })\n}\nasync function continuousArea(innerTimeline, collapsed, width){\n\n     //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n     let height = (collapsed === 'true')? dimensions.collapsedHeight : dimensions.rectHeight;\n     var lineGen = d3.area()\n     .x(d=> {\n         let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n         let distance = x(d.combLength);\n         return distance; })\n     .y1(d=> {\n         let y = d.scales.yScale;\n         y.range([40, 0]);\n         if(collapsed === 'true'){\n             return d.change;\n         }else{\n             return y(d.values.realVal);\n         }\n     }).y0(d=> {\n        let y = d.scales.yScale;\n        y.range([40, 0]);\n        return y(-1)\n    });\n \n     let innerPaths = innerTimeline.append('path')\n     .attr(\"d\", lineGen)\n     .style('fill', (d)=> d[0].color)\n     .style('stroke-width', '1px')\n     .style('stroke', (d)=> d[0].color)\n     .style('fill-opacity', 0.3);\n \n     return innerPaths;\n\n}\nasync function continuousPaths(innerTimeline, collapsed, width, opacity, colorBool){\n\n    innerTimeline.data().forEach(path => {\n        collapsedPathGen(path);\n    });\n\n    //THIS IS THE PATH GENERATOR FOR THE CONTINUOUS VARIABLES\n    let height = (collapsed === 'true')? dimensions.collapsedHeight : dimensions.rectHeight;\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n        let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n        let y = d.scales ? d.scales.yScale : console.log('d',d);\n        y.range([height, 0]);\n        if(collapsed === 'true'){\n            return d.change;\n        }else{\n            return y(d.values.realVal);\n        }\n    });\n\n    let innerPaths = innerTimeline.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d)=> {\n        return colorBool ? d[0].color : 'gray'\n    })\n    .style('opacity', opacity);\n\n    return innerPaths;\n    ///////////////////////////////////////////////////////////\n}\nexport function drawContAtt(predictedAttrGrps, collapsed, width){\n\n    let continuousAtt = predictedAttrGrps.filter(d=> {\n        return (d[d.length - 1] != undefined) ? d[d.length - 1].type === 'continuous' : d.type === 'continuous';\n    });\n\n    let attributeHeight = (collapsed === 'true') ? dimensions.collapsedHeight : dimensions.rectHeight;\n    let innerTimeline = continuousAtt.append('g').classed('attribute-time-line', true);\n    /////DO NOT DELETE THIS! YOU NEED TO SEP CONT AND DICRETE ATTR. THIS DRAWS LINE FOR THE CONT/////\n    let innerPaths = continuousPaths(innerTimeline, collapsed, width, 1, true);\n ////////\n    let attribRectCont = innerTimeline.append('rect').classed('attribute-rect', true);\n    attribRectCont.attr('height', attributeHeight);\n    attribRectCont.attr('width', width);\n    let attributeNodesCont = innerTimeline.selectAll('g').data(d=> d).join('g').classed('attribute-node', true);\n\n    let innerBars = attributeNodesCont.append('g').classed('inner-bars', true);\n\n    innerBars.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n        let distance = x(d.combLength);\n        return 'translate('+ distance +', 0)';});\n      \n    let rangeRect = innerBars.append('rect').classed('range-rect', true);\n    rangeRect.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n       \n        let y = d.scales.yScale;\n        y.range([attributeHeight, 0]);\n        let range = d.leaf ? 0 : y(d.values.lowerCI95) - y(d.values.upperCI95);\n        let barHeight = (collapsed === 'true') ? dimensions.collapsedHeight : range;\n        return barHeight;\n    });\n    rangeRect.attr('transform', (d, i)=> {\n        let y = d.scales.yScale;\n        y.range([attributeHeight, 0]);\n        let move = (d.leaf || (collapsed === 'true')) ? 0 : y(d.values.upperCI95);\n        return 'translate(0, '+ move +')';\n    });\n    rangeRect.style('fill', (d)=> {\n        return d.colorScale(d.values.realVal);\n    });\n    rangeRect.attr('opacity', (d)=> {\n        return d.satScale(d.values.realVal);\n    });\n    if(collapsed != 'true'){\n        innerBars.append('rect').attr('width', dimensions.rectWidth).attr('height', 4)\n        .attr('transform', (d, i)=> {\n            let y = d.scales.yScale;\n            y.range([attributeHeight, 0]);\n            return 'translate(0, '+ y(d.values.realVal) +')';})\n        .attr('fill', d=> d.color).classed('val-bar', true);\n    }\n\n    /////AXIS ON HOVER////\n    innerBars.on('mouseover', (d, i, n)=> {\n        let y = d.scales.yScale;\n        y.range([0, attributeHeight]);\n        d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n\n        let f = d3.format(\".3f\");\n\n        tool.html('mean: '+f(d.values.realVal) +\"</br>\"+\"</br>\"+ 'upperCI: '+ f(d.values.upperCI95) +\"</br>\"+\"</br>\"+ 'lowerCI: '+ f(d.values.lowerCI95))\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        tool.style('height', 'auto');\n       \n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).select('g.y-axis')\n        d3.select(n[i]).select('g.y-axis').remove();\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    return predictedAttrGrps;\n   \n}\nexport function findMaxState(states, offset){\n    let maxP = d3.max(states.map(v=> v.values.realVal));\n    let notMax = states.filter(f=> f.values.realVal != maxP);\n    let winState = states[states.map(m=> m.values.realVal).indexOf(maxP)]\n    winState.other = notMax;\n    winState.offset = offset;\n    return winState;\n}\n    //BEGIN TEST\nfunction drawLeaves(attWraps, groupBy){\n    //THIS IS HARD CODED AND SHOULD NOT BE\n\n    let numSpecies = 100;\n    let height = 40;\n    //CONTINUOUS \n    let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap-first.continuous').data(d=> {\n            let totalVal = attWraps.data().filter(f=> f.label === d.label).map(m=> m.data);\n            let totalArray = totalVal.flatMap(p=> p.flatMap(f=> f.paths[f.paths.length - 1].realVal));\n            let max = d3.max(totalArray);\n            let min = d3.min(totalArray);\n            let totalMean = d3.mean(totalArray);\n        \n            let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n            let newVal = d.data.map((m, i)=> {\n                m.index = i;\n                return {'value': m.paths[m.paths.length - 1].values.realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n            });\n            let groupMean = d3.mean(newVal.map(v=> v.value));\n            return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n        }).join('g').classed('observe-wrap-first continuous', true);\n        \n        leafWraps.attr('transform', 'translate(850, 0)');\n        \n        let xAxis = leafWraps.append('g').classed('axis-x', true);\n        xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n        xAxis.each((d, i, nodes)=> {\n            d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n        });\n        \n        let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n        \n        let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n        .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n        \n        let distCircGroupOut = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n        let distcirclesOut = distCircGroupOut.selectAll('circle').data(d=> d.dotVals).join('circle');\n        distcirclesOut.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n        //DISCRETE//\n        let leafWrapsD = attWraps.filter(f=> f.type === 'discrete').selectAll('g.observe-wrap-first.discrete').data(d=> {\n          return [d];\n        }).join('g').classed('observe-wrap-first discrete', true);\n\n        let rects = leafWrapsD.filter(f=> {\n            return f.label != groupBy;\n        }).selectAll('rect').data(d=> {\n            let groupedData = d3Array.groups(d.data.map(m=> m.paths[m.paths.length - 1]), d=> d.state);\n            groupedData.sort((a, b)=> b[1].length - a[1].length)\n            return groupedData;\n        }).join('rect').attr('height', 15).attr('width', (d, i, n)=>{\n            let scale = d3.scaleLinear().domain([0, d3.sum(d3.selectAll(n).data().map(m=> m[1].length))])\n            .range([5, 170]);\n            d.width = scale(d[1].length);\n            return scale(d[1].length);\n        });\n\n        rects.attr('x', (d, i, n)=> {\n            if(i === 0){ return 0}\n            else {\n                d3.selectAll(n).filter((f, j)=> j< i);\n                let move = d3.sum(d3.selectAll(n).filter((f, j)=> j< i).data().map(m=> m.width));\n                return move;}\n        }).attr('y', 12)\n\n        rects.attr('fill', d=> d[1][0].color);\n\n        rects.on('mouseover', (d, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            \n            tool.html(d[0] + \"</br>\" + d[1].length)\n              .style(\"left\", (d3.event.pageX + 10) + \"px\")\n              .style(\"top\", (d3.event.pageY + 20) + \"px\");\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 0.3);\n          \n        }).on('mouseout', (s, i, n)=> {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n\n              d3.selectAll(n).filter((f, j)=> j != i).attr('opacity', 1)\n        })\n\n        leafWrapsD.attr('transform', 'translate(850, 0)');\n\n        let ratio = leafWrapsD.filter(f=> f.label === groupBy)\n            .selectAll('text').data(d=> [d]).join('text').text(d=> {\n                let paths = d.data[d.data.length - 1].paths;\n                return `${paths[paths.length - 1].state}: ${d.data.length} / ${numSpecies}`\n            });\n        ratio.style('text-anchor', 'middle')\n        ratio.style('font-size', '12px')\n        ratio.attr('x', 90).attr('y', 25)\n        \n    }\nexport function drawGroups(stateBins, scales){\n    \n    let groupedBool = d3.select('#show-drop-div-group').attr('value', 'grouped');\n    \n    let height = 40;\n    let selectedTool = d3.select('#selected');\n    selectedTool.selectAll('*').remove();\n \n    let main = d3.select('#main');\n    main.style('padding-top', 0);\n\n    d3.select('#toolbar').append('text').text(stateBins[0].field)\n\n    let splitOnArray = [{'field':'None'}].concat(scales.filter(f=> (f.field != stateBins[0].field) && f.type === 'discrete'));\n    let dropOptions = dropDown(d3.select('#toolbar'), splitOnArray, 'Split On','show-drop-div-group');\n\n    ////THIS SPLITS THE DATA////\n    dropOptions.on('click', (d, i, n)=> {\n        d3.select('#toolbar').append('text').text(d.field);\n        \n        if(d.type === 'discrete'){\n            let newBins = stateBins.map(state=> {\n                let newBinData = d.scales.map(sc=> {\n                    let field = sc.field;\n                    let name = sc.scaleName;\n                    let newData = state.data.filter(pa=> {\n                        let leaf = pa.filter(le=> le.leaf === true)[0];\n                        return leaf.attributes[field].winState === name;\n                    });\n                    return {'field': field, 'state': name, 'data': newData }\n                });\n                state.data = newBinData;\n                return state;\n            });\n\n            //////RENDERING NEED TO SEPARATE OUT/////\n           \n           let main = d3.select('#main');\n           main.selectAll('*').remove();\n           main.style('padding-top', '40px');\n           let firstGroupDiv = main.selectAll('div.first-group').data(newBins).join('div').classed('first-group', true);\n           \n           let firstGroupSvg = firstGroupDiv.append('svg');\n           firstGroupSvg.attr('height', s=> (s.data.length*270));\n           let firstGroup = firstGroupSvg.append('g');\n          \n           let firstLabel = firstGroup.append('text').text(f=> f.state).attr('transform', 'translate(10, 10)');\n\n           let secondGroup = firstGroup.selectAll('g.second-group').data(g=> {\n               let newGroups = g.data.map((m)=>{\n                   let newM = {};\n                   newM.first = [g.field, g.state];\n                   newM.second = [m.field, m.state];\n                   newM.data = m.data\n                   newM.leaves = m.data.flatMap(path=> path.filter(f=> f.leaf === true));\n                   return newM\n               });\n               return newGroups}).join('g').classed('second-group', true);\n\n           secondGroup = secondGroup.filter(f=> f.data.length > 0);\n           secondGroup.attr('transform', (s, i)=> 'translate(30,'+(20 + (i * 270))+')');\n\n           secondGroup.each((s, i, n)=> {\n            let branchBar = drawBranchPointDistribution(s.data, d3.select(n[i]));\n            branchBar.select('rect').attr('x', -80).attr('fill','gray');\n            branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n            \n            branchBar.select('.leaf-label').append('text').text((t, i) =>': '+ t.data.length).attr('transform', 'translate(45, 0)');\n            branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n    \n            branchBar.select('line').attr('stroke', '#fff');\n\n            let groupLabels = d3.select(n[i]).append('g');\n\n            //groupLabels.\n            let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n            pathAdd.attr('transform', 'translate(-10, 15)');\n            pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n            pathAdd.append('text').text('+').attr('transform', 'translate(-5, 3)').attr('fill', 'gray');\n        \n            pathAdd.style('cursor', 'pointer');\n\n            pathAdd.on('click', ()=> {\n                let other = d3.selectAll(n).filter((f,j)=> j != i);\n                renderComparison(s, other.data(), d3.select('#selected'), scales);\n            });\n\n            let stateLabel = groupLabels.append('text').text((s, i)=> s.second[1]);\n            stateLabel.attr('transform', (d, i)=> 'translate(3, 20)');\n            stateLabel.attr('fill', '#fff');\n           });\n\n           let innerGroup = secondGroup.filter(f=> f.data.length > 0).append('g').classed('inner-wrap', true);\n           innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n       \n           let attWraps = innerGroup.selectAll('.att-wrapper').data((d)=> {\n               let atts = formatAttributeData(d.data, scales, null);\n             \n               let attDataComb = atts[0].map((att, i)=> {\n                  \n                   let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n\n                   att[att.length - 1].offset = 0;\n                   let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n                   for(let index = 1; index < atts.length; index++ ){\n                       let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                       let last = atts[index][i].length - 1\n                       atts[index][i][last].offset = (index * 8);\n                       attribute.data.push({'species': species, 'paths': atts[index][i]});\n                   }\n                   \n                   return attribute;\n               });\n\n              let mappedDis = attDataComb.map(dis=> {\n                  dis.data = dis.data.map((spec, i)=> {\n                      spec.paths = spec.paths.map(m=> {\n                            if(dis.type === 'discrete'){\n                                let offset = 5 * i;\n                                let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                                return maxProb;\n                            }else{\n                                return m;\n                            }\n                        });\n                   return spec;\n                  });\n        \n                  dis.leaves = dis.data.flatMap(f=> f.paths.filter(p=> p.leaf === true));\n                  return dis;\n              });\n              return mappedDis;\n           }).join('g').classed('att-wrapper', true);\n\n           let innerWrapRect = attWraps.append('rect').attr('width', 800);\n\n            innerWrapRect.attr('height', height);\n            innerWrapRect.style('fill', '#fff');\n            innerWrapRect.style('stroke', 'gray');\n\n            attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n            wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n            svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n            let labels = attWraps.append('text')\n            .text(d=> d.label)\n            .style('text-anchor', 'end')\n            .style('font-size', 11)\n            labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n////WORKING ON STATE SHIFT VIEW///////\n            let shiftWraps = attWraps.filter(f=> f.type === 'discrete').selectAll('g.shift-wrap').data(d=> {\n       \n                let test = d.data.flatMap(m=> m.paths.filter((f, i)=> {\n                    if(i===0) return (i === 0);\n                    if(i > 0) return (m.paths[i-1].state != f.state)\n                    if(i < m.paths.length - 1) return (m.paths[i+1].state != f.state);\n                }));\n             \n                return [test];\n            }).join('g').classed('shift-wrap', true);\n\n            shiftWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxisShift = shiftWraps.append('g').classed('axis-x', true);\n            xAxisShift.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxisShift.each((d, i, nodes)=> {\n                let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 200]);\n                d3.select(nodes[i]).call(d3.axisBottom(x).ticks(5));\n            });\n\n            let circGroupShift = shiftWraps.append('g').attr('transform', 'translate(0, 20)');\n\n            let shiftCircles = circGroupShift.selectAll('circle.shift').data(d=> d).join('circle').classed('shift', true);\n            shiftCircles.attr('r', 4).attr('cx', (d, i)=> {\n                let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 200]);\n                return x(d.combLength)\n            });\n            shiftCircles.attr('fill', d=> d.color).style('opacity', 0.4);\n\n//////DRAW OBSERVED DISTRIBUTIONS/////\n            let leafWraps = attWraps.filter(f=> f.type === 'continuous').selectAll('g.observe-wrap').data(d=> {\n                let totalVal = attWraps.data().filter(f=> f.label === d.label).flatMap(m=> m.leaves.map(l=> l.realVal));\n                let max = d3.max(totalVal);\n                let min = d3.min(totalVal);\n                let totalMean = d3.mean(totalVal);\n\n                let x = d3.scaleLinear().domain([min, max]).range([0, 200])\n                let newVal = d.leaves.map((m, i)=> {\n                    m.index = i;\n                    return {'value': m.realVal, 'x': x, 'min': min, 'max': max, 'species':m.species };\n                });\n                let groupMean = d3.mean(newVal.map(v=> v.value));\n                return [{'dotVals':newVal, 'x': x, 'totalMean': totalMean, 'groupMean':groupMean}];\n            }).join('g').classed('observe-wrap', true);\n\n            leafWraps.attr('transform', 'translate(850, 0)');\n\n            let xAxis = leafWraps.append('g').classed('axis-x', true);\n            xAxis.attr('transform', 'translate(0, '+(height - 15)+')');\n            xAxis.each((d, i, nodes)=> {\n                d3.select(nodes[i]).call(d3.axisBottom(d.x).ticks(5));\n            });\n\n            let totalMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.totalMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'red').style('opacity', '0.4');\n\n            let groupMeanLine = leafWraps.append('rect').classed('line', true).attr('transform', (d, i)=> 'translate('+(d.x(d.groupMean)-1.5)+',0)')\n            .attr('height', (height - 15)).attr('width', 3).attr('fill', 'gray').style('opacity', '0.4');\n\n            let distCircGroup = leafWraps.append('g').attr('transform', 'translate(0, 20)');\n            let distcircles = distCircGroup.selectAll('circle').data(d=> d.dotVals).join('circle');\n            distcircles.attr('r', 4).attr('cx', (d, i)=> d.x(d.value)).style('opacity', '0.3');\n\n            distcircles.on('mouseover', (d, i, n)=> {\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n           \n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n\n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n\n            ////DRAW SPECIES GROUPS IN THE ATTRIBUTES\n\n            let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n                d.data = d.data.map(m=> {\n                    m.type = d.type;\n                    return m;\n                });\n                return d.data;\n            }).join('g').classed('species', true);\n\n            let lineGenD = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                    })\n                .y(d=> {\n                    let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n                    return y(d.realVal);\n                });\n\n            let lineGenC = d3.line()\n                .x(d=> {\n                    let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 800]);\n                    let distance = d.combLength;\n                    return x(distance);\n                })\n                .y(d=> {\n                    let y = d.scales.yScale;\n                    y.range([height-2, 1]);\n                    return y(d.values.realVal) + 2;\n                });\n\n            let innerStatePaths = speciesGrp.append('path')\n                .attr(\"d\", d=> {\n                        return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n                    })\n                .attr(\"class\", (d, i)=> {\n                        return d.species + \" inner-line\"})\n                .style('stroke-width', 0.7)\n                .style('fill', 'none')\n                .style('stroke', 'gray');\n\n            innerStatePaths.on('mouseover', (d, i, n)=> {\n               \n                d3.select(n[i]).classed('selected', true);\n                distcircles.filter(f=> f.species === d.species).classed('selected', true).style('opacity', 1);\n\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(200)\n                  .style(\"opacity\", .9);\n                let f = d3.format(\".3f\");\n                tool.html(d.species)\n                  .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                  .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', true);\n                \n            }).on('mouseout', (d, i, n)=> {\n                d3.select(n[i]).classed('selected', false);\n\n                distcircles.classed('selected', false).style('opacity', 0.3);\n                let tool = d3.select('#tooltip');\n                tool.transition()\n                  .duration(500)\n                  .style(\"opacity\", 0);\n\n                let leafNodes = d3.select('#sidebar').selectAll('.node--leaf').filter(f=> f.data.label === d.species);\n                leafNodes.classed('selected', false);\n            });\n\n            let disGroup = speciesGrp.filter(sp=> {\n            return sp.type === 'discrete';\n            });\n\n            let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n            branchGrpDis.attr('transform', (d)=> {\n                let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n                    let distance = x(d.combLength);\n                    return 'translate('+distance+', 0)';\n            });\n\n            let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n                let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n                return y(d.realVal);\n            }).attr('cx', 5);\n\n            bCirc.classed('win-state', true);\n\n            bCirc.attr('fill', (d, i, n)=> {\n                if(i === 0){\n                    return d.color;\n                }else if(i === n.length - 1){\n                    if(d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }else{\n                    if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                        return 'rgba(189, 195, 199, 0.3)';\n                    }else{\n                        d.shift = true;\n                        return d.color;\n                    }\n                }\n            });\n\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n    branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     });\n     confiBars.style('opacity', 0.1);\n           \n           //drawGroups(stateBins, scales);\n    }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        selectedTool.select('#show-drop-div-group').classed('show', false);\n    });\n    /////END SPLIT VIEW//////\n    let svgTest = main.select('#main-path-view');\n    let svg = svgTest.empty() ? main.append('svg').attr('id', 'main-path-view') : svgTest;\n    svg.selectAll('*').remove();\n\n    svg.attr('height', (stateBins.length * (height + 20)));\n    svg.append('g').attr('transform', 'translate(500, 40)').append('text').text(stateBins[0].field)\n\n    let wrappers = svg.selectAll('.grouped').data(stateBins).join('g').classed('grouped', true);\n    wrappers.each((d, i, n)=> {\n        let branchBar = drawBranchPointDistribution(d.data, d3.select(n[i]));\n        branchBar.select('rect').attr('x', -80).attr('fill','gray');\n        branchBar.selectAll('.branch-points').selectAll('circle').attr('fill', 'rgba(255, 255, 255, 0.3)');\n        \n        branchBar.select('.leaf-label').append('text').text((d, i) =>': '+ d.data.length).attr('transform', 'translate(45, 0)');\n        branchBar.selectAll('text').style('font-size', '11.5px').style('fill', '#fff');\n\n        branchBar.select('line').attr('stroke', '#fff');\n    });\n\n    let groupLabels = wrappers.append('g');\n   \n\n     //groupLabels.\n     let pathAdd = groupLabels.append('g').classed(\"fas fa-search-plus\", true);\n     pathAdd.attr('transform', 'translate(20, -5)');\n     pathAdd.append('circle').attr('r', 7).attr('fill', '#fff');\n     pathAdd.append('text').text('+').attr('transform', 'translate(5, 3)').attr('fill', 'gray');\n \n     pathAdd.style('cursor', 'pointer');\n\n     pathAdd.on('click', (d, i, n)=> {\n         let other = d3.selectAll(n).filter((f,j)=> j != i);\n         renderComparison(d, other.data(), d3.select('#selected'), scales);\n     });\n\n     groupLabels.append('text').text((d, i)=> d.state);\n     groupLabels.attr('transform', (d, i)=> 'translate(40, 16)');\n     groupLabels.style('text-anchor', 'end');\n     groupLabels.attr('fill', '#fff');\n\n    let innerGroup = wrappers.append('g').classed('inner-wrap', true);\n    innerGroup.attr('transform', (d,i)=> 'translate(110, 0)');\n\n    let attWraps = innerGroup.selectAll('.att-wrapper').data((d, i)=> {\n        let atts = formatAttributeData(d.data, scales, null);\n\n       \n        let attDataComb = atts[0].map((att, i)=> {\n            let species = d.data[0].filter(f=> f.leaf === true)[0].label;\n            att[att.length - 1].offset = 0;\n            let attribute = {'label': att[att.length-1].label, 'type':att[att.length-1].type, 'data': [{'species': species, 'paths': att}]}\n            for(let index = 1; index < atts.length; index++ ){\n                let species = d.data[index].filter(f=> f.leaf === true)[0].label;\n                let last = atts[index][i].length - 1;\n                atts[index][i][last].offset = (index * 8);\n                attribute.data.push({'species': species, 'paths': atts[index][i]})\n            }\n            return attribute;\n        });\n\n       let mappedDis = attDataComb.map(dis=> {\n           dis.data = dis.data.map((spec, i)=> {\n               spec.paths = spec.paths.map(m=> {\n                if(dis.type === 'discrete'){\n                    let offset = 5 * i;\n                    let maxProb = m.states? {'realVal': 1.0, 'state': m.winState, 'color':m.color, 'combLength': m.combLength, 'offset':m.offset, 'leaf': true} : findMaxState(m, offset); \n                    return maxProb;\n                }else{\n                    return m;\n                }\n            });\n            return spec;\n           });\n           return dis;\n       });\n       return mappedDis;\n    }).join('g').classed('att-wrapper', true);\n\n    let innerWrapRect = attWraps.append('rect').attr('width', 800);\n    innerWrapRect.attr('height', height);\n    innerWrapRect.style('fill', '#fff');\n    innerWrapRect.style('stroke', 'gray');\n\n    attWraps.attr('transform', (d, i)=> 'translate(0,'+((i * (height+5))+ 30)+')');\n    wrappers.attr('transform', (d, i)=> 'translate(60,'+(i * (5 * (height+15))+ 50)+')');\n    \n    svg.attr('height', (wrappers.data().length * (5 * (height+15))+ 50));\n\n       //END EXPERIMENT\n    drawLeaves(attWraps, stateBins[0].field);\n\n    let labels = attWraps.append('text')\n    .text(d=> d.label)\n    .style('text-anchor', 'end')\n    .style('font-size', 11)\n    labels.attr('transform', 'translate(-5,'+(50/2)+')');\n\n    let speciesGrp = attWraps.selectAll('g.species').data(d=> {\n        d.data = d.data.map(m=> {\n            m.type = d.type;\n            return m;\n        });\n        return d.data;\n    }).join('g').classed('species', true);\n\n    let lineGenD = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d3.scaleLinear().domain([0, 1]).range([height-2, 1]);\n           return y(d.values.realVal);\n       });\n\n       let lineGenC = d3.line()\n       .x(d=> {\n           let x = d3.scaleLinear().domain([0, 1]).range([0, 800]);\n           let distance = d.combLength;\n           return x(distance);\n        })\n       .y(d=> {\n           let y = d.yScale;\n           y.range([height-2, 1]);\n           return y(d.values.realVal) + 2;\n       });\n\n       let innerStatePaths = speciesGrp.append('path')\n       .attr(\"d\", d=> {\n            return (d.type === 'discrete') ? lineGenD(d.paths) : lineGenC(d.paths);\n        })\n       .attr(\"class\", (d, i)=> {\n            return d.species + \" inner-line\"})\n       .style('stroke-width', 0.7)\n       .style('fill', 'none')\n       .style('stroke', 'gray');\n\n       innerStatePaths.on('mouseover', (d, i, n)=> {\n        d3.select(n[i]).classed('selected', true);\n    }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).classed('selected', false);\n    });\n\n    let disGroup = speciesGrp.filter(sp=> {\n     return sp.type === 'discrete';\n     });\n\n    let branchGrpDis = disGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpDis.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 800]);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n     });\n\n    let bCirc = branchGrpDis.append('circle').attr('r', 5).attr('cy', (d, i)=> {\n         let y = d3.scaleLinear().domain([0, 1]).range([height - 5, 2]);\n         //return y(d.realVal) + d.offset;\n         return y(d.values.realVal);\n     }).attr('cx', 5);\n\n     bCirc.classed('win-state', true);\n\n     bCirc.attr('fill', (d, i, n)=> {\n        if(i === 0 || i === n.length - 1){\n            return d.color;\n            /*\n        }else if(i === n.length - 1){\n            if(d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }*/\n        }else{\n            if(d.state === d3.select(n[i+1]).data()[0].state || d.state === d3.select(n[i-1]).data()[0].state){\n                return 'rgba(189, 195, 199, 0.3)';\n            }else{\n                d.shift = true;\n                return d.color;\n            }\n        }\n     });\n\n    let otherCirc = branchGrpDis.filter(f=> f.leaf != true).selectAll('.other').data(d=> d.other).join('circle').classed('other', true);\n    \n    otherCirc.attr('r', 4).attr('cx', 5).attr('cy', (c, i)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n             return y(c.realVal);\n         }).attr('fill', 'rgba(189, 195, 199, 0.1)');\n\n    otherCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n\n    bCirc.on(\"mouseover\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(200)\n           .style(\"opacity\", .9);\n         let f = d3.format(\".3f\");\n         tool.html(d.state + \": \" + f(d.realVal))\n           .style(\"left\", (d3.event.pageX + 10) + \"px\")\n           .style(\"top\", (d3.event.pageY - 28) + \"px\");\n         })\n       .on(\"mouseout\", function(d) {\n         let tool = d3.select('#tooltip');\n         tool.transition()\n           .duration(500)\n           .style(\"opacity\", 0);\n         });\n     \n     /////AXIS ON HOVER////\n    branchGrpDis.on('mouseover', (d, i, n)=> {\n         let y = d3.scaleLinear().domain([1, 0]);\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7).attr('fill', (d)=> d.color);\n         d3.select(n[i]).selectAll('.win-state').style('opacity', 0.7).attr('fill', (d)=> d.color);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').attr('fill', 'rgba(189, 195, 199, 0.1)');\n         d3.select(n[i]).selectAll('.win-state').filter(w=> w.shift != true).attr('fill', 'rgba(189, 195, 199, 0.3)');\n     });\n\n    let conGroup = speciesGrp.filter(sp=> {\n         return sp.type === 'continuous';\n     });\n\n    let branchGrpCon = conGroup.selectAll('.branch').data(d=>d.paths).join('g').classed('branch', true);\n\n    branchGrpCon.attr('transform', (d)=> {\n      let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 750]);\n          let distance = x(d.combLength);\n          return 'translate('+distance+', 0)';\n      });\n\n      /////AXIS ON HOVER////\n     branchGrpCon.on('mouseover', (d, i, n)=> {\n         let y = d.yScale;\n         y.range([0, (height-5)]);\n         svg.selectAll('path.inner-line.'+ d.species).attr('stroke', 'red');\n         svg.selectAll('path.inner-line.'+ d.species).classed('selected', true);\n         d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n         d3.select(n[i]).selectAll('.other').style('opacity', 0.7);\n\n     }).on('mouseout', (d, i, n)=> {\n         d3.select(n[i]).select('g.y-axis')\n         d3.select(n[i]).select('g.y-axis').remove();\n         d3.selectAll('path.inner-line.'+ d.species).attr('stroke', 'gray');\n         d3.selectAll('path.inner-line.'+ d.species).classed('selected', false);\n         d3.selectAll('.other').style('opacity', 0.1);\n     });\n\n     let MeanRect = branchGrpCon.append('rect');\n     MeanRect.attr('width', dimensions.rectWidth).attr('height', 3);\n     MeanRect.attr('y', (d, i) => {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0])\n         return y(d.realVal);\n     });\n\n     let confiBars = branchGrpCon.filter(f=> f.leaf != true).append('rect');\n     confiBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.lowerCI95) - y(d.upperCI95);\n     });\n\n     confiBars.attr('y', (d, i)=> {\n         let scale = scales.filter(s=> s.field === d.label)[0];\n         let y = d3.scaleLinear().domain([scale.min, scale.max]).range([height, 0]);\n         return y(d.upperCI95);\n     })\n     confiBars.style('opacity', 0.1);\n\n     /////HIGHLIGHTING NODES IN A TREE ON HOVER//////\n     d3.selectAll('.att-wrapper').selectAll('.branch').on('mouseover', (d, i, n)=> {\n         let treeNode  = d3.select('#sidebar').selectAll('.node');\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', true);\n      \n    }).on('mouseout', (d, i, n)=> {\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n        treeNode.filter(f=> {\n            return d.node === f.data.node;\n        }).classed('selected', false);\n    })\n     \n}\nexport function drawDiscreteAtt(predictedAttrGrps, collapsed, bars, width){\n\n    let discreteAtt = predictedAttrGrps.filter(d=> {\n        return d[d.length - 1].type === 'discrete';\n    });\n\n    let attributeHeight = (collapsed === 'true')? 20 : 45;\n\n    let innerTimelineDis = discreteAtt.append('g').classed('attribute-time-line', true);\n\n    innerTimelineDis.append('line').classed('half', true).attr('x1', 0).attr('y1', 22).attr('x2', width).attr('y2', 22);\n    \n    let statePath = innerTimelineDis.selectAll('g').data(d=> {\n        \n        let disct = d;\n       \n        let keys = disct[0].map(s=> s.state);\n        let lines = keys.map(key=> {\n             return disct.map(m=> m.leaf ? m : m.filter(f=> f.state == key)[0]);\n        });\n        return lines;\n    }).join('g').classed('state-path', true);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n        let distance = x(d.combLength);\n        return distance + 7;})\n    .y(d=> {\n        let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight-2, 1]);\n        return d.value ? y(d.value) : y(1);\n    });\n\n    let innerStatePaths = statePath.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", (d, i)=> d[0].species + \" inner-line\")\n    .style('stroke-width', 0.7)\n    .style('stroke', (d)=> {\n        return d[0].color;\n    });\n\n    let attribRectDisc = innerTimelineDis.append('rect').classed('attribute-rect', true);\n    attribRectDisc.attr('height', attributeHeight);\n    attribRectDisc.attr('width', width);\n    let attributeNodesDisc = innerTimelineDis.selectAll('.attribute-node-discrete').data(d=> {\n        return d;}).join('g');\n\n    attributeNodesDisc.attr('transform', (d)=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n        if(d[0]){\n           // let distance = (moveMetric === 'move') ? d[0].move : x(d[0].combLength);\n           let distance = x(d[0].combLength);\n            return 'translate('+distance+', 0)';\n        }else{\n           // let distance = (moveMetric === 'move') ? d.move : x(d.combLength);\n            let distance = x(d.combLength);\n            return 'translate('+distance+', 0)';\n        }\n    });\n\n    attributeNodesDisc.append('rect').attr('width', dimensions.rectWidth).attr('height', attributeHeight).attr('opacity', 0);\n\n    attributeNodesDisc.append('line').attr('x1', 10).attr('x2', 10).attr('y1', 0).attr('y2', attributeHeight);\n\n        /////AXIS ON HOVER////\n    attributeNodesDisc.on('mouseover', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([1, 0]);\n            y.range([0, attributeHeight]);\n            d3.select(n[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(3));\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).select('g.y-axis')\n            d3.select(n[i]).select('g.y-axis').remove();\n        })\n\n    attributeNodesDisc.attr('class', (d, i, n)=> {\n        let path = d3.selectAll(n).data();\n        return path[path.length - 1].species;\n    }).classed('attribute-node-discrete', true);\n\n    if(bars === false){\n\n        let stateDots = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dots').data(d=> {\n            \n            return d;\n        }).join('circle').classed('dots', true);\n        \n        stateDots.attr('cx', 10).attr('cy', (d)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([attributeHeight - 2, 2]);\n            return d.realVal? y(d.realVal) : y(d.value);\n        }).attr('r', 2);\n        \n        stateDots.style('fill', (d, i, n)=> {\n           \n            /*\n            let speciesPath = d3.selectAll('.attribute-node-discrete.'+ d.species)//.filter(f=> f.type === 'discrete');\n           \n            let nodeArray = speciesPath.data().map(m=> {\n                return m.node ? m.node : m[0].node;\n            });\n            let index = nodeArray.indexOf(d.node);\n           \n            */\n            //return d.color\n            return 'gray';\n        });\n    \n        stateDots.filter(f=> f.realVal > 0.5).attr('r', 4);\n/*\n        let maxDots = stateDots.filter((f, i, n)=> {\n           \n            return f.realVal === d3.max(d3.selectAll(n).data().map(m=> m.realVal));\n        });\n*/\n        \n\n        ////NEED TO ADD COLOR ON STATE CHANGE////\n    \n        stateDots.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n        ////NEED TO MAKE A FUNCTION TO ASSIGN COLOR OF STATES//////\n    \n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }else{\n        attributeNodesDisc.filter((att, i)=> {\n            return att[0] != undefined;}).append('rect').attr('height', attributeHeight).attr('width', dimensions.rectWidth).attr('fill', '#fff')\n        let stateBars = attributeNodesDisc.filter((att, i)=> att[0] != undefined).selectAll('.dis-rect').data(d=> {\n            return d;\n        }).join('rect').classed('dis-rect', true);\n\n        stateBars.attr('width', dimensions.rectWidth).attr('height', (d, i)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            return y(d.realVal);\n        });\n\n        stateBars.attr('fill', (d, i)=> d.color);\n        stateBars.attr('opacity', '0.7');\n        stateBars.attr('stroke', '#fff');\n        stateBars.attr('transform', (d, i, n)=> {\n            let y = d3.scaleLinear().domain([0, 1]).range([0, attributeHeight]);\n            let probability = d3.selectAll(n).data().sort((a, b)=> b.realVal - a.realVal);\n            let chosenIn = probability.map(p=> p.state).indexOf(d.state);\n         \n            if(chosenIn === 0){\n                    return 'translate(0,0)';\n            }else{\n                ///need to make this a reduce function///\n                let valueAdd = 0;\n                    for(let step = 0; step < chosenIn; step++){\n                        valueAdd = valueAdd + probability[step].realVal;\n                    }\n                return 'translate(0,'+(y(valueAdd))+')';\n            }\n        });\n\n        stateBars.on(\"mouseover\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(200)\n              .style(\"opacity\", .9);\n            let f = d3.format(\".3f\");\n            tool.html(d.state + \": \" + f(d.realVal))\n              .style(\"left\", (d3.event.pageX) + \"px\")\n              .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n          .on(\"mouseout\", function(d) {\n            let tool = d3.select('#tooltip');\n            tool.transition()\n              .duration(500)\n              .style(\"opacity\", 0);\n            });\n    \n        let endStateDot = attributeNodesDisc.filter((att, i)=> {\n            return att[0] === undefined;}).classed('discrete-leaf', true);\n    \n        endStateDot.append('circle').attr('cx', 10).attr('cy', 2).attr('r', 7).style('fill', d=> {\n           return d.color;\n        });\n\n        endStateDot.append('text').text(d=> d.winState).attr('transform', 'translate(20, 5)').style('font-size', 10);\n\n    }\n\n    return attributeNodesDisc;\n}\n\n","import '../styles/index.scss';\n\nimport * as d3 from \"d3\";\nimport {dataMaster, calculatedScalesKeeper} from './index';\nimport { updateMainView } from './viewControl';\n\nexport let filterMaster = [];\n\nexport function removeFilter(filterId, scales){\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n    let filterIndex = dataFilters.map(f=> f.filterId).indexOf(filterId);\n\n    if(filterIndex != dataFilters.length - 1){\n   \n        let baseData = filterIndex === 0? dataMaster[0] : dataFilters[filterIndex - 1].data;\n    \n        let testData = [...baseData];\n\n        let filterToolbar = d3.select(\"#toolbar\");\n\n        let badges = filterToolbar.selectAll('.filter-tag').remove();\n  \n        for(let i = filterIndex + 1; i < dataFilters.length; i ++){\n       \n            let fun = dataFilters[i].filterFunction;\n            if(dataFilters[i].attributeType === 'continuous'){\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].predictedFilter, dataFilters[i].observedFilter);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'c-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }else{//discrete\n                let newTestData = fun(testData, dataFilters[i].selectedOption, dataFilters[i].fromState, dataFilters[i].toState);\n                dataFilters[i].data = [...newTestData];\n                dataFilters[i].filterId = 'd-'+ i;\n                //// Re adding in buttons ////\n                addFilterTag(dataFilters[i], scales);\n                testData = newTestData;\n            }\n        }\n    }\n    let newFilterMaster = filterMaster.filter(f=> f.filterId != filterId);\n\n    filterMaster = newFilterMaster;\n}\n\nexport function addFilter(filterType, attType, filterId, filFunction, oldData, newData, extra){\n    let filterOb = {'filterType': filterType, 'attributeType': attType, 'filterId': filterId, 'filterFunction':filFunction, 'before-data': oldData, 'data': newData}\n    if(extra != null){\n        extra.forEach(ex=> {\n            filterOb[ex[0]] = ex[1];\n        });\n    }\n    filterMaster.push(filterOb);\n    return filterOb;\n}\n\nexport function getLatestData(){\n    return filterMaster.length > 0 ? filterMaster[filterMaster.length - 1].data : dataMaster[dataMaster.length-1]; \n}\n\nexport function getScales(){\n    return calculatedScalesKeeper[calculatedScalesKeeper.length - 1];\n}\n\n///NEED TO BREAK THESE OUT INTO SEPARATE FILTERS\nexport function toggleFilters(filterButton, main, scales){\n    console.log(filterButton, main, scales)\n\n    let filterDiv = d3.select('#filter-tab');\n    let data = getLatestData();\n\n    if(filterDiv.classed('hidden')){\n        filterButton.text('Hide Filters');\n        filterDiv.classed('hidden', false);\n        main.style('padding-top', '200px');\n\n        //move metric is 'edgeLength'\n\n        //renderAttToggles(filterDiv, data, scales);\n        stateFilter(filterDiv, filterButton, data, main, scales);\n        queryFilter(filterDiv, filterButton, data, main, scales);\n\n    }else{\n        filterButton.text('Show Filters');\n        filterDiv.selectAll('*').remove();\n        filterDiv.classed('hidden', true);\n        main.style('padding-top', '0px');\n    }\n}\nfunction addFilterTag(data, scales){\n\n    let filterToolbar = d3.select('#toolbar');\n\n    if(data.attributeType === 'continuous'){\n\n        let formater = d3.format(\".2s\");\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        d3.select(button).datum(data);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        let label = button.append('h6').text(data.selectedOption + \"  Predicted: \"+ formater(data.predictedFilter[0]) + \"-\" + formater(data.predictedFilter[1]) + \" Observed: \" + formater(data.observedFilter[0]) + \"-\" + formater(data.observedFilter[1]));\n        let xSpan = label.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            let filterLine = filterMaster.filter(f=> f.filterType === 'data-filter').filter(f=> data.attribute != f.attribute);\n            ////YOU NEED TO CHANGE THIS TO REMOVE FILTER FUNCTION\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'discrete'){\n     \n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(data.state[0]);\n        button.append('i').classed('fas fa-arrow-right', true);\n        button.append('h6').text(data.state[1] + '  ');\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }else if(data.attributeType === 'branch'){\n        let button = filterToolbar.append('button').classed('btn btn-info filter-tag', true);\n        let span = button.append('span').classed('badge badge-light', true);\n        span.text(data.data.length);\n        button.append('h6').text(' At Branch: ' + data.nodeId);\n       \n        let xSpan = button.append('i').classed('close fas fa-times', true);\n        xSpan.on('click', ()=> {\n            removeFilter(data.filterId, scales);\n            updateMainView('Summary View');\n            d3.selectAll('.link-not-there').classed('link-not-there', false);\n            d3.selectAll('.node-not-there').classed('node-not-there', false);\n            button.remove();\n        });\n\n    }\n    \n}\nfunction stateFilter(filterDiv, filterButton, normedPaths, main, moveMetric, scales){\n    let keys = ['Select a Trait'].concat(Object.keys(normedPaths[0][0].attributes));\n        let selectWrapper = filterDiv.append('div').classed('filter-wrap', true);\n        selectWrapper.style('width', '200px');\n        selectWrapper.append('h6').text('State Transition:');\n        let attButton = stateChange(selectWrapper, keys, 'attr-select', '');\n\n        let attProps = selectWrapper.append('div').classed('attribute-properties', true);\n\n        attButton.on(\"change\", function(d) {\n            var selectedOption = d3.select(this).property(\"value\");\n            let options = scales.filter(f=> f.field === selectedOption)[0];\n            attProps.selectAll('*').remove();\n\n            if(options.type === \"discrete\"){\n                let optionArray = ['Any'];\n                let optKeys = options.scales.map(s=> s.scaleName);\n                optionArray = optionArray.concat(optKeys);\n                let button1 = stateChange(attProps, optionArray, 'predicted-state', 'From');\n                let button2 = stateChange(attProps, optionArray, 'observed-state', 'To');\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n                    let fromState = button1.node().classList[0];\n                    let toState = button2.node().classList[0];\n\n                      ////GOING TO ADD FILTERING HERE//// NEED TO BREAK INTO ITS OWN THING/////\n                      \n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n              \n                    //let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n                    let data = getLatestData();\n              \n                    let test = discreteFilter(data, selectedOption, fromState, toState);\n\n                    let filId = 'd-'+filterMaster.filter(f=> f.attributeType === 'discrete').length;\n                    let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n                    updateMainView('Summary View');\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    /////ADD THE FILTER TO THE TOOLBAR////\n                    addFilterTag(filterOb, scales);\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }else{\n                \n                let yScale = d3.scaleLinear().domain([options.min, options.max]).range([60, 0]);\n               \n                let continRanges = attProps.append('svg');\n                continRanges.attr('width', 200).attr('height', 100);\n                let data = [{'label':'Ancestors', 'type': 'predicted'}, {'label':'Leaves', 'type': 'observed'}];\n                let ranges = continRanges.selectAll('.range').data(data).join('g').classed('range', true);\n\n                ranges.attr('transform', (d, i)=> 'translate('+((i*125)+',20)'));\n\n                let brushBars = ranges.append('g');\n                brushBars.attr('transform', 'translate(10, 10)');\n\n                let labels = ranges.append('text').text((d)=> d.label+ ': ');\n                labels.attr('x', 0).attr('y', 0);\n                let wrapperRect = brushBars.append('rect').attr('width', 20).attr('height', 50);\n                wrapperRect.attr('x', 10);\n\n                brushBars.append(\"g\")\n                .attr(\"class\", \"axis axis--y\")\n                .attr(\"transform\", \"translate(10,0)\")\n                .call(d3.axisLeft(yScale).ticks(3));\n                \n                let brushMoved = function(){\n                    var s = d3.event.selection;\n                    if (s == null) {\n                      handle.attr(\"display\", \"none\");\n                    \n                    } else {\n                      var sx = s.map(yScale.invert);\n                    }\n                };\n                let xBrush = d3.brushY().extent([[10,0], [30, 60]]).on(\"end\", brushMoved);\n                let brushGroup = brushBars.append('g').call(xBrush);\n                brushGroup.call(xBrush.move, [0, 60]);\n\n                let submit = attProps.append('button').classed('btn btn-outline-success', true);\n                submit.text('Filter');\n\n                submit.on('click', ()=> {\n\n                    let selections = brushGroup._groups[0].map(m=> m.__brush.selection.map(s=> s[1]));\n                    let predictedFilter = selections[0].map(yScale.invert).sort();\n                    let observedFilter = selections[1].map(yScale.invert).sort();\n                    let lastFilter = filterMaster.filter(f=> f['filterType'] === 'data-filter');\n\n                    let data = lastFilter.length > 0 ? lastFilter[lastFilter.length - 1].data : dataMaster[0];\n\n                    let test = continuousFilter(data, selectedOption, predictedFilter, observedFilter);\n\n                    let filId = 'c-'+filterMaster.filter(f=> f.attributeType === 'continuous').length;\n                    let filterOb = addFilter('data-filter', 'continuous', filId, continuousFilter, [...data], [...test], [['selectedOption', selectedOption], ['predictedFilter', predictedFilter], ['observedFilter', observedFilter]]);\n\n                    updateMainView('Summary View');\n\n                    /////ADD THE FILTER TO THE TOOLBAR/////\n                    addFilterTag(filterOb, scales);\n\n                    ///DIMMING THE FILTERED OUT NODES//////\n\n                    ////Class Tree Links////\n                    let treeLinks  = d3.select('#sidebar').selectAll('.link');\n                    let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n                    let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n                    d3.selectAll('.link-not-there').classed('link-not-there', false);\n                    d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n                    let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingLinks.classed('link-not-there', true);\n\n                    let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n                    missingNodes.classed('node-not-there', true);\n\n                    ///END NODE DIMMING///////\n\n                    ////HIDE THE FILTER BAR/////\n                    filterButton.text('Show Filters');\n                    filterDiv.selectAll('*').remove();\n                    filterDiv.classed('hidden', true);\n                    main.style('padding-top', '0px');\n                });\n            }\n         });\n}\nexport function nodeFilter(selectedNode, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path.map(node => node.node).indexOf(selectedNode) > -1;\n    });\n\n    let filId = 'b-'+filterMaster.filter(f=> f.attributeType === 'branch').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'branch', filId, nodeFilter, [...data], [...test], [['nodeId', selectedNode]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\nexport function leafStateFilter(selectedState, scales){\n   \n    let data = getLatestData();\n    let dataFilters = filterMaster.filter(f=> f.filterType === 'data-filter');\n \n    let test = data.filter(path => {\n        return path[path.length - 1].attributes[selectedState.label].winState === selectedState.winState;\n    });\n\n    let filId = 'l-'+filterMaster.filter(f=> f.attributeType === 'leaf').length;\n    //let filterOb = addFilter('data-filter', 'discrete', filId, discreteFilter, [...data], [...test], [['state', [fromState, toState]], ['selectedOption', selectedOption]]);\n\n    let filterOb = addFilter('data-filter', 'leaf', filId, nodeFilter, [...data], [...test], [['leafState', [selectedState.label, selectedState.winState]]])\n    addFilterTag(filterOb, scales);\n    updateMainView('Summary View');\n\n   ////Class Tree Links////\n   let treeLinks  = d3.select('#sidebar').selectAll('.link');\n   let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n   let nodeList = test.flatMap(path=> path.map(node => node.node));\n\n   d3.selectAll('.link-not-there').classed('link-not-there', false);\n   d3.selectAll('.node-not-there').classed('node-not-there', false);\n\n   let missingLinks = treeLinks.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingLinks.classed('link-not-there', true);\n\n   let missingNodes = treeNode.filter(f=> nodeList.indexOf(f.data.node) === -1);\n   missingNodes.classed('node-not-there', true);    \n  \n}\n\n\nfunction continuousFilter(data, selectedOption, predicted, observed){\n\n    return data.filter(path=> {\n        let filterArray = path.map(node=> {\n            let numb = node.attributes[selectedOption].realVal;\n            if(node.leaf == true){\n                return numb > observed[0] && numb < observed[1];\n            }else{\n                return numb > predicted[0] && numb < predicted[1];\n            }\n        });\n        return filterArray.indexOf(false) === -1;\n    });\n}\nfunction discreteFilter(data, selectedOption, fromState, toState){\n    if(selectedOption != undefined){\n        return data.filter(path=> {\n            let filterPred = path.filter(f=> f.leaf != true).map(node=> {\n                let states = node.attributes[selectedOption].states;\n                if(fromState === 'Any'){\n                    return true;\n                }else{\n                    return states.filter(st=> st.state === fromState).length > 0 && states.filter(st=> st.state === fromState)[0].realVal > 0.75;\n                }\n            });\n            let filterObs = path.filter(f=> f.leaf === true).map(node=> {\n            let win = node.attributes[selectedOption].winState;\n            if(toState === 'Any'){\n                return true;\n            }else{\n                return win === toState;\n            }\n            });\n            return filterPred.indexOf(true) > -1 && filterObs.indexOf(true) > -1;\n        });\n    }\n}\nfunction queryFilter(filterDiv, filterButton, normedPaths, main, scales){\n\n    let moveMetric = 'edgeLength';\n\n    let searchDiv = filterDiv.append('div').classed('search-bar-div', true);\n        searchDiv.append('h6').text('Query Filter:');\n        let form = searchDiv.append('form').classed('form-inline', true);\n        let input = form.append('input').classed('form-control mr-sm-2', true);\n        input.attr('type', 'search').attr('placeholder', 'Search by Species').attr('aria-label', 'Search');\n        let searchButton = form.append('button').classed('btn btn-outline-success my-2 my-sm-0', true).attr('type', 'button').append('i').classed(\"fas fa-search\", true);\n        searchButton.on('click', ()=> {\n\n            let queryArray = input.node().value.split(' ').map(m=> m.toLowerCase());\n\n            let test = normedPaths.filter(path=> {\n                let species = path.filter(node=> node.leaf === true)[0].label;\n                return queryArray.indexOf(species) > -1;\n            });\n\n             ////DRAW THE PATHS\n         \n             updateMainView('Summary View');\n\n            let filterToolbar = d3.select(\"#toolbar\");\n            let button = filterToolbar.append('button').classed('btn btn-info', true);\n            let span = button.append('span').classed('badge badge-light', true);\n            span.text(test.length);\n            button.append('h6').text('Query Filter');\n            let xSpan = button.append('i').classed('close fas fa-times', true);\n            xSpan.on('click', ()=> {\n                updateMainView('Summary View');\n                button.remove();\n            });\n            d3.select('#main-path-view').style('height', ()=>{\n                return ((test.length * 60) + (Object.keys(test[0][0].attributes).length * 100) + 'px');\n            });\n\n            ////HIDE THE FILTER BAR/////\n            filterButton.text('Show Filters');\n            filterDiv.selectAll('*').remove();\n            filterDiv.classed('hidden', true);\n            main.style('padding-top', '0px');\n        });\n\n}\nfunction renderAttToggles(filterDiv, normedPaths, scales){\n\n    console.log(normedPaths, scales.map(m=> m.field))\n\n    ////NEED TO GET RID OF TOGGLE SVG\n   // let keys = Object.keys(normedPaths[0][0].attributes);\n   let keys = scales.map(m=> m.field);\n    let presentFilters = filterMaster.filter(f=> f.type === 'hide-attribute');\n    let noShow = presentFilters.length > 0 ? presentFilters.map(m=> m.attribute) : [];\n\n    let wrapper = filterDiv.append('div').classed('filter-wrap', true);\n    wrapper.style('width', '150px');\n   \n    let svg = wrapper.append('svg').classed('attr-toggle-svg', true);\n\n   let title = svg.append('text').text('Attributes: ');\n    title.attr('x', 20).attr('y', 10);\n    \n    let labelWrap = svg.append('g').attr('transform', 'translate(20, 25)');\n    let labelGroups = labelWrap.selectAll('g').data(keys).join('g'); \n    \n    labelGroups.attr('transform', (d, i)=> 'translate(0,'+(i* 25)+')');\n\n    let toggle = labelGroups.append('circle').attr('cx', 0).attr('cy', 0);\n    toggle.classed('toggle', true);\n    let shownToggs = toggle.filter(t=> noShow.indexOf(t) === -1);\n   \n    shownToggs.classed('shown', true);\n    shownToggs.style('fill', (d, i)=>{\n        return scales.filter(f=> f.field === d)[0].catColor;\n    });\n\n    toggle.on('click', function(d, i){\n        let togg = d3.select(this);\n        toggleCircle(togg, scales);\n        filterMaster.push({'type':'hide-attribute', 'attribute':d, 'before-data': [...normedPaths]});\n        let newKeys = d3.selectAll('.shown');\n        let hideKeys = scales.filter(sc=> newKeys.data().indexOf(sc.field) === -1);\n        let newFilMaster = filterMaster.filter(f=> f.type != 'hide-attribute');\n        hideKeys.forEach(key=> {\n            newFilMaster.push({'type':'hide-attribute', 'attribute':key.field, 'before-data': [...normedPaths], 'data': [...normedPaths]});\n        });\n        filterMaster = newFilMaster;\n    \n        updateMainView(\"Summary View\");\n    });\n    let labelText = labelGroups.append('text').text(d=> d).style('font-size', 10);\n    labelText.attr('transform', 'translate(10, 4)');  \n    \n}\nfunction stateChange(selectorDiv, keys, selectId, label){\n\n    let dropDownWrapper = selectorDiv.append('div').classed('selector', true);\n    let header = dropDownWrapper.append('h6').text(label);\n\n    \t// create the drop down menu of cities\n\tlet selectOp = dropDownWrapper\n    .append(\"select\")\n    .attr(\"id\", selectId).attr('class', 'Any');\n    \n    let options = selectOp.selectAll(\"option\")\n    .data(keys).join(\"option\");\n\n    options.text(d=> d).attr(\"value\", d=> d);\n\n    d3.select(\"#\"+selectId).on(\"change\", function(d) {\n       var selectedOption = d3.select(this).property(\"value\");\n       d3.select(this).attr('class', selectedOption);\n    });\n\n    return d3.select('#'+ selectId);\n}\nfunction toggleCircle(circle, scales){\n    if(circle.classed('shown')){\n        circle.classed('shown', false);\n        circle.style('fill', '#fff');\n    }else{\n        circle.classed('shown', true);\n        circle.style('fill', (d, i)=> scales.filter(f=> f.field === d)[0].catColor);\n    }\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\n\nimport {dataMaster, nestedData, collapsed} from './index';\nimport {getScales} from './filterComponent';\nimport {getNested} from './pathCalc';\nimport { dropDown } from './buttonComponents';\nimport { updateRanking, changeTrait } from './pairView';\nimport { pairPaths, maxTimeKeeper } from './dataFormat';\nimport { cladesGroupKeeper, chosenCladesGroup, growSidebarRenderTree } from './cladeMaker';\n\n\nexport function buildTreeStructure(paths, edges){\n   \n    let root = paths[0][0];\n    let nestedData = getNested(root, edges);\n    return nestedData;\n}\n\nexport function traitColorDropDown(scales, sidebar, renderCallback){\n\n    let optionArray  = reduce2DropArray(scales);\n\n    let dropOptions = dropDown(sidebar, optionArray, `Color By Trait`,'show-drop-div-sidebar');\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            renderCallback(d, true, false)\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`)\n        }else if(d.type === 'continuous'){\n            renderCallback(d, true, false)\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Colored by ${d.field}`);\n        }else{\n             renderCallback(null, true, false)\n            d3.select('.dropdown.show-drop-div-sidebar').select('button').text(`Color By Value`);\n        }\n    sidebar.select('#show-drop-div-sidebar').classed('show', false);\n    });\n\n}\n\nexport function reduce2DropArray(startArray){\n    return  startArray.reduce(function(array, scale){\n        array.push(scale);\n        return array; \n    }, [{'field':'None'}]); \n}\n\nexport function renderTreeButtons(normedPaths){\n\n    let scales = getScales();\n    let sidebar = d3.select('#sidebar');\n\n    ///SIDBAR STUFF\n    let buttonWrap = sidebar.append('div').classed('button-wrap', true);\n   \n    traitColorDropDown(scales, buttonWrap, renderTree);\n    buttonWrap.select('button').style('font-size', '12px');\n    let phenoOptions = reduce2DropArray(scales.filter(f=> f.type != 'discrete'));\n \n      ///BUTTON FOR PHENOGRAM VIEW. MAYBE MOVE THIS TO SIDEBAR\n    let phenogramButton = d3.select('#sidebar').select('.button-wrap').append('button').text('Phenogram').style('font-size', '12px');\n    phenogramButton.classed('btn btn-outline-secondary', true).attr('id', 'view-pheno'); \n    phenogramButton.on('click', ()=> {\n          if(phenogramButton.text() === 'Phenogram'){\n\n              phenogramButton.text('View Phylogeny');\n              changeTrait(phenoOptions, normedPaths, null);\n              \n              renderTree(null, true, d3.select('.attr-drop.dropdown').select('button').attr('value'));\n\n          }else{\n            ////ADD THE HIDE BUTTON HERE \n            let view = d3.select('.dropdown.change-view').select('button').text();\n           \n            if(view != \"Pair View\"){\n                d3.select('.dropdown.attr-drop').remove();\n            }\n            renderTree(null, true, false);\n            phenogramButton.text('Phenogram');\n\n          }\n    });\n\n    let cladeButton = buttonWrap.append('button').attr('id', 'clade-maker');\n    cladeButton.attr('class', 'btn btn-outline-secondary').text('Clade View').style('font-size', '12px');\n    cladeButton.on('click', ()=> growSidebarRenderTree(null));\n}\n\nfunction uncollapseSub(d){\n    d.children = d._children;\n    d._children = null;\n    if(d.children){\n        d.children.map(c=> uncollapseSub(c));\n    }    \n}\n\nfunction collapseSub(d){\n    if(d.children) {\n        d._children = d.children\n        d._children.forEach(collapseSub)\n        d.children = null\n    }  \n}\n\nfunction collapseTree(treeData){\n\n    let leaves = getLeaves(treeData, []);\n\n    return stepDown(treeData);\n\n    function stepDown(node){\n        let leaves = getLeaves(node, []);\n        \n        let ids = new Set(leaves.map(m=> m.data.attributes.Clade.values.Clade));\n        if(ids.size > 1){\n            node.children.map(n=> stepDown(n))\n        }else{\n            node.branchPoint = true;\n            node.clade = Array.from(ids)[0]\n            collapseSub(node);\n            return node;\n        }\n        return node;\n    }\n    \n    function getLeaves(node, array){\n        if(node.children != undefined ){\n            node.children.map(n=> getLeaves(n, array))\n        }else{\n            array.push(node);\n        };\n        return array;\n    }\n}\n\nexport function assignPosition(node, position) {\n    if (node.children === undefined || node.children === null){\n        \n        position = position + 1.5;\n        node.position = position;\n        return position;\n    }else{\n        let positionArray = []\n        node.children.forEach((child) => {\n            position = assignPosition(child, position);\n            positionArray.push(position);\n        });\n        node.options = positionArray;\n        node.position = d3.max(positionArray);\n        return position;\n    }\n}\n\nexport function addingEdgeLength(edge, data){\n    data.combEdge = data.edgeLength + edge;\n    if(data.children){\n        data.children.forEach(chil=> {\n            addingEdgeLength(data.combEdge, chil);\n        });\n    }\n}\n\nexport function renderTree(att, uncollapse, pheno){\n\n    let sidebar = d3.select('#sidebar');\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 260,\n        height : 720,\n        lengthHeight: 850,\n    }\n\n    let lengthBool = true;\n\n   \n\n    // declares a tree layout and assigns the size\n    var treemap = d3.tree()\n    .size([dimensions.height, dimensions.width]);\n   \n    addingEdgeLength(0, nestedData[nestedData.length - 1]);\n    \n    //  assigns the data to a hierarchy using parent-child relationships\n    var treenodes = d3.hierarchy(nestedData[nestedData.length - 1]);\n\n    // maps the node data to the tree layout\n    treenodes = treemap(treenodes);\n\n    let groupedBool = d3.select('#show-drop-div-group').attr('value');\n\n    let sidebarTest = sidebar.select('svg');\n    let treeSvg = sidebarTest.empty() ? sidebar.append(\"svg\") : sidebarTest;\n    treeSvg.classed('tree-svg', true);\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + dimensions.margin.top + dimensions.margin.bottom);\n\n    let gTest = treeSvg.select('g.tree-g');\n    let g = gTest.empty() ? treeSvg.append(\"g\").classed('tree-g', true) : gTest;\n    g.attr(\"transform\",\n      \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\");\n\n    if(groupedBool === \"ungrouped\" && uncollapse === false){\n        if((cladesGroupKeeper.length > 0) && (chosenCladesGroup[chosenCladesGroup.length - 1].field != 'Clade Attribute)')){\n            let newNodes = collapseTree(treenodes);\n            console.log('testing this above', treenodes, dimensions, treeSvg, g, att, pheno)\n            updateTree(newNodes, dimensions, treeSvg, g, att, pheno);\n        }else{\n            console.log('testing this', treenodes, dimensions, treeSvg, g, att, pheno)\n            updateTree(treenodes, dimensions, treeSvg, g, att, pheno);\n        }\n        \n    }else{\n        console.log('testing this below', treenodes, dimensions, treeSvg, g, att, pheno)\n        ////Break this out into other nodes////\n        updateTree(treenodes, dimensions, treeSvg, g, att, pheno);\n    }\n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n    return array;\n}\n\nexport function updateTree(treenodes, dimensions, treeSvg, g, attrDraw, pheno){\n\n    console.log('pheno',pheno)\n\n    let length = true;\n    let uncollapse = true;\n\n    d3.select('.pheno-y-axis').remove();\n    d3.select('.pheno-x-axis').remove();\n    \n    assignPosition(treenodes, 0);\n\n    let branchCount = findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, 1]);\n\n    g.attr('transform', 'translate(20, 375)');\n    treeSvg.attr('height', 1100);\n    yScale.range([700, 0]).domain([0, branchCount.length]);\n    xScale.range([0, dimensions.width + 10]);\n\n    if(pheno){\n        treeSvg.attr('height', 800);\n        console.log('tree nodes',treenodes, treenodes.data.attributes[pheno], pheno)\n        xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain())\n        yScale.domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 600])\n    }\n\n    // adds the links between the nodes\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n        if((length && pheno === undefined) || (length && pheno === false)){\n           return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n           + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n           + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n           + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n        }else{\n            return \"M\" + xScale(d.data.attributes[pheno].values.realVal) + \",\" + yScale(d.data.combEdge)\n            + \" \" + xScale(d.parent.data.attributes[pheno].values.realVal) + \",\" + yScale(d.parent.data.combEdge);\n        }       \n    });\n\n    if(pheno){\n        \n        link.style('opacity', 0.3);\n        g.attr('transform', 'translate(30, 50)');\n\n        let x = xScale.domain(treenodes.data.attributes[pheno].scales.yScale.domain()).range([0, (dimensions.width+20)]);\n        let xAxis = d3.axisBottom(x);\n        g.append('g').classed('pheno-x-axis', true).call(xAxis).attr('transform', 'translate(0, 610)').select('path').attr('stroke-width', 0);\n\n        let y = d3.scaleLinear().domain([0,maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, 600-20]);\n        let yAxis = d3.axisLeft(y);\n        g.append('g').classed('pheno-y-axis', true).call(yAxis).attr('transform', 'translate(0, 2)').select('path').attr('stroke-width', 0);;\n    }\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n    .data(treenodes.descendants(), d => d.data.node)\n    .join(\"g\")\n    .attr(\"class\", function(d) { \n    return \"node\" + \n    (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n    .duration(500)\n    .attr(\"transform\", function(d) { \n        if(length && pheno === undefined || pheno === false){\n            return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n        }else{\n\n           return \"translate(\" + (xScale(d.data.attributes[pheno].values.realVal) - 5) + \",\" + yScale(d.data.combEdge) + \")\"; \n        }\n    });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n\n        console.log('d in sidebar', d)\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    });\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateTree(treenodes, dimensions, treeSvg, g, attrDraw, \"SVL\");\n        //treenodes, dimensions, treeSvg, g, att, pheno\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n    if(uncollapse){\n       \n        // let groups = chosenCladesGroup[chosenCladesGroup.length - 1];\n        \n        // let groupGroup = treeSvg.selectAll('.clade-rects')\n        // .data(groups.groups)\n        // .join('g')\n        // .attr('class', d=> d.label)\n        // .classed('clade-rects', true)\n    \n        // let rect = groupGroup.append('rect');\n        // rect.attr('width', 20);\n        // rect.attr('height', (d, i)=> {\n        //     return d.paths.length * 6;\n        // });\n        // groupGroup.each((d, i, node)=> {\n       \n        //     let first = d.paths.map(m=> m[m.length-1].node);\n        //     let test = treeSvg.selectAll('.node--leaf').filter((f)=> {\n        //         return first.indexOf(f.data.node) > -1});\n        //     let leafSort = test.data().sort((a, b)=> {\n        //         return a.x - b.x;\n        //     });\n        //     console.log(leafSort[0].data.node)\n\n        //     let chosenNode = test.filter(f=> {\n        //         return f.data.node === leafSort[leafSort.length - 1].data.node;\n        //     });\n\n        //     console.log(chosenNode.data())\n     \n        //     d3.select(node[i]).attr('transform', `translate(300, ${yScale(leafSort[0].position)})`)\n        // })\n\n    }\n\n    return node;\n}","import {dataMaster, nestedData, calculatedScalesKeeper} from './index';\nimport { updateDropdown } from './buttonComponents';\nimport * as d3 from \"d3\";\nimport { addingEdgeLength, assignPosition, renderTree, renderTreeButtons, traitColorDropDown } from './sidebarComponent';\nimport { maxTimeKeeper } from './dataFormat';\nimport { getLatestData, getScales } from './filterComponent';\nimport { renderDistStructure, binGroups, continuousHistogram, mirrorlineGen } from './distributionView';\nimport { updateMainView } from './viewControl';\nimport { pullPath } from './pathCalc';\nimport { updateCladeDrop } from './toolbarComponent';\n\nexport const cladesGroupKeeper = []\nexport const chosenCladesGroup = []\nexport const cladeKeeper = [[]]\n\nconst colorKeep = ['#58D68D', '#F39C12', '#EC7063']\n\n\nexport function growSidebarRenderTree(attrDraw){\n\n    let sidebar = d3.select('#sidebar');\n    let cladeBool = null;\n\n    sidebar.classed('clade-view', true);\n    d3.select('#main').classed('clade-view', true);\n\n    sidebar.select('.tree-svg').remove();\n    sidebar.select('.button-wrap').selectAll('*').remove();\n\n    traitColorDropDown(getScales(), sidebar.select('.button-wrap'), growSidebarRenderTree);\n\n    let x = sidebar.select('.button-wrap').append('div')\n    .style('position', 'absolute')\n    .style('right', '5px')\n    .style('top', '18px')\n    .append('i')\n    .classed('close fas fa-times', true)\n    .style('padding-right', '10px');\n\n    x.on('click', ()=> {\n        sidebar.classed('clade-view', false);\n        d3.select('#main').classed('clade-view', false);\n        sidebar.selectAll('*').remove();\n        ////REDRAW SIDEBAR\n        renderTreeButtons(getLatestData(), sidebar, false);\n        renderTree(sidebar, null, false);\n    });\n\n    const dimensions =  {\n        margin : {top: 10, right: 90, bottom: 50, left: 20},\n        width : 400,\n        height : (getLatestData().length * 8),\n        lengthHeight: 500,\n    }\n   \n    let treenodes = renderCladeTree(sidebar, null, dimensions);\n\n    let leaf = sidebar.select('.tree-svg').selectAll('.node--leaf');\n    let nodes = sidebar.select('.tree-svg').selectAll('.node');\n    let link = sidebar.select('.tree-svg').selectAll('.link');\n\n    let nodeData = getLatestData();\n  \n    function  findCommonNode(path1, path2, className){\n\n        let common = path1.filter(f=> path2.map(m=> m.node).indexOf(f.node) > -1);\n        let subtreeFinder = [nestedData[nestedData.length - 1]];\n        let commonNodeMark = nodes.filter(f=> f.data.node === common[common.length - 1].node);\n      \n        common.map(m=> m.node).map((m, i)=> {\n            if(i > 0){\n                let child = subtreeFinder[subtreeFinder.length - 1].children.filter(f=> {\n                    return f.node === m})[0];\n                subtreeFinder.push(child);\n            }\n        });\n\n        let paths = pullPath([subtreeFinder[subtreeFinder.length - 1]], subtreeFinder[subtreeFinder.length - 1].children, [], [], 0);\n        let nodeNames = paths.flatMap(path => path.map(p=> p.node))\n        nodes.filter(f=> nodeNames.indexOf(f.data.node) > -1).select('circle').classed(className, true);\n        link.filter(f=> nodeNames.filter((n)=> n != common[common.length - 1].node).indexOf(f.data.node) > -1).classed(className, true);\n\n        return paths;\n\n    }\n   \n    labelTree(leaf);\n\n    if(attrDraw != null){\n    \n        let notleaves = nodes.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaf.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaf.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        nodes.selectAll('circle').attr('fill', 'gray');\n    }\n\n    drawCladeBox(cladeKeeper[cladeKeeper.length - 1].filter(f=> f.position != undefined));\n\n    leaf.on('click', (d, i, n)=> {\n   \n        d3.select(n[i]).select('circle').attr('fill', 'orange').attr('r', '5');\n\n        if(cladeBool === null){\n            cladeBool = d;\n           \n        }else{\n            let dat1 = nodeData.filter(f=> f[f.length-1].node === cladeBool.data.node)[0];\n            let dat2 = nodeData.filter(f=> f[f.length-1].node === d.data.node)[0];\n            let paths = findCommonNode(dat1, dat2, 'selected');\n\n            let leafNames = paths.map(p=> p[p.length - 1].node);\n\n            let leafNameNodes = leaf.filter(f=> {\n                return leafNames.indexOf(f.data.node) > -1;\n            });\n            \n            let leafNameNodeData = leafNameNodes.data().sort((a, b)=> b.position - a.position);\n            let allLeafNodeData = leaf.data().sort((a, b)=> b.position - a.position);\n            \n            let positionHolder = [leafNameNodeData[0], leafNameNodeData[leafNameNodeData.length - 1]].map((m)=> {\n                let index = allLeafNodeData.indexOf(m);\n                m.index = index;\n                return m;\n            });\n\n            let yScale = d3.scaleLinear()\n            yScale.range([dimensions.height, 0]).domain(d3.extent(leaf.data().map(m=> m.position)));\n\n            let wrap = sidebar.select('.button-wrap').append('form').classed(\"form-inline\", true)\n            .append('div').classed(\"form-group\", true).style('width', '300px');\n            \n            let textInput = wrap.append('input').attr('type', 'text')\n            .classed('form-control', true)\n            .attr('placeholder', 'Clade Name');\n\n            let button = wrap.append('div').classed('input-group-append', true).append('button').attr('type', 'button').classed('btn btn-outline-secondary', true);\n            button.text('Add Clade');\n            \n            button.on('click', ()=> {\n                let name = textInput.node().value != \"\" ? textInput.node().value : `Clade-${cladeKeeper.length}`;\n               \n                addClade(name, paths, positionHolder);\n                growSidebarRenderTree(null);\n                let ul = d3.select('div#clade-show').selectAll('ul');\n                updateCladeDrop(ul, cladeKeeper[cladeKeeper.length - 1]);\n            });\n            cladeBool = null;\n        }\n    });\n    leaf.on('mouseover', (d, i, n)=> {\n        if(cladeBool!=null){\n            let dat1 = nodeData.filter(f=> f[f.length-1].node === cladeBool.data.node)[0];\n            let dat2 = nodeData.filter(f=> f[f.length-1].node === d.data.node)[0];\n            findCommonNode(dat1, dat2, 'selected-hover');\n        }\n\n    }).on('mouseout', ()=> {\n        sidebar.selectAll('.selected-hover').classed('selected-hover', false);\n    });\n\n   sidebar.select('.tree-svg').classed('clade-view', true).append('g').classed('overlay-brush', true);\n\n}\n\nfunction drawCladeBox(cladeData){\n    let base = 0;\n    let treeSVG = d3.select('.tree-svg');\n    let cladeGroups = treeSVG.append('g').selectAll('g.clade-label').data(cladeData).join('g').classed('clade-label', true);\n    cladeGroups.append('rect')\n    .attr('width', (d, i, n)=> {\n        if(i>0){\n            let others = d3.select(n[i-1]).data()[0].nodes.map(m=> m[m.length-1].node);\n            let test = d.nodes.filter(m=> {\n                let node = m[m.length-1].node;\n                return others.indexOf(node) > -1;\n            });\n            \n            let width = test.length > 0 ? 8 : 60;\n            return width;\n            \n        }else{\n            \n            return 60;\n        }\n    })\n    .attr('height', (d, i)=>{\n        return (d.nodes.length * 12);\n    }).attr('transform', (d, i, n)=> {\n        if(i>0){\n            let others = d3.select(n[i-1]).data()[0].nodes.map(m=> m[m.length-1].node);\n            let test = d.nodes.filter(m=> {\n                let node = m[m.length-1].node;\n                return others.indexOf(node) > -1;\n            });\n          \n            if(test.length > 0){base = base + 1};\n            let xStep = test.length === 0 ? 0 : base;\n            let step = d.position[0].index > 10 ? 12 : 11.6;\n            return `translate(${(xStep*65)+435}, ${((d.position[0].index * step)+28)})`;\n            \n        }else{\n            let step = d.position[0].index > 10 ? 12 : 11.6;\n            return `translate(${435}, ${((d.position[0].index * step)+28)})`;\n        }\n        \n        \n    })\n    .attr('fill',(d, i)=> colorKeep[i])\n    .attr('opacity', .3);\n\n    cladeGroups.on('mouseover', (d, i, n)=> {\n\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.field}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n\n    }).on('mouseout', (d, i, n)=> {\n       \n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n}\n\nexport function addClade(name, nodes, positions){\n    cladeKeeper[cladeKeeper.length - 1].push({field: name, nodes: nodes, position: positions});\n}\n\nexport function addCladeGroup(name, clades, nodes){\n    cladesGroupKeeper.push({field: name, names: clades, groups:nodes});\n    return {field: name, names: clades, groups:nodes};\n}\n\nexport function removeCladeGroup(clades){\n    cladeKeeper[cladeKeeper.length - 1] = cladeKeeper[cladeKeeper.length - 1].filter(f=> f.groupKey != clades.groupKey);\n}\n\nfunction createNewCladeGroup(div, scales){\n    let cladeNames = [];\n    let clades = [];\n    d3.selectAll('.clade-name').each((e, i, n)=> {\n       cladeNames.push(n[i].value);\n       let rectTest = d3.select(`.rect-${i + 1}`).node().getBoundingClientRect();\n       let nodes = div.select('.tree-svg.clade-view').selectAll('.node--leaf').filter((f, j, node)=> {\n           let circPos = node[j].getBoundingClientRect();\n           return circPos.y >= rectTest.y-4 && circPos.y <= ((rectTest.y + rectTest.height) - 4);\n       })\n       nodes.select('circle').attr('fill', 'red');\n       clades.push({'clade': n[i].value , 'nodes': nodes.data().map(m=> m.data)});\n    });\n \n    let groupName = d3.select('.group-name').node().value;\n    let chosenGroup = addCladeGroup(groupName, cladeNames, clades);\n    updateDropdown(cladesGroupKeeper, 'change-clade');\n    let groups = groupDataByClade(scales, getLatestData(), chosenGroup);\n\n    d3.select('.dropdown.change-clade').select('button').text(`Clades Shown: ${chosenGroup.field}`);\n\n    updateMainView('Summary View', groups);\n    renderTree(d3.select('#sidebar'), null, true, false);\n}\n\n// function cladeToolbar(div, scales){\n\n//     let toolBar = div.append('div').classed('clade-toolbar', true);\n//     let textInput = toolBar.append('input')\n//     .classed('group-name', true)\n//     .attr('type', 'text')\n//     .attr('value', 'Name Your Group');\n  \n//     let addCladeGroupButton = toolBar.append('button').text('Add Clade Group');\n//     addCladeGroupButton.on('click', ()=> createNewCladeGroup(div, scales));\n\n//     let inputGroup = toolBar.append('div').classed('input-group input-number-group', true);\n//     let minusButton = inputGroup.append('button').text('-');\n   \n//     let numberText = inputGroup.append('input')\n//         .attr('value', 3)\n//         .attr('min', 0)\n//         .attr('max', 10)\n//         .attr('type', 'number')\n//         .classed('input-number', true);\n\n//     let plusButton = inputGroup.append('button').text('+');\n\n//     let nameWrap = inputGroup.append('div').classed('name-input-wrap', true);\n//     minusButton.on('click', ()=> {\n//         let num = numberText.attr('value');\n//         numberText.attr('value', +num - 1);\n//         addTextInputForGroups(+numberText.attr('value'), nameWrap);\n//     });\n\n//     plusButton.on('click', ()=> {\n//         let num = numberText.attr('value');\n//         numberText.attr('value', +num + 1);\n//         addTextInputForGroups(+numberText.attr('value'), nameWrap);\n//     });\n\n//     addTextInputForGroups(+numberText.attr('value'), nameWrap);\n\n//     function addTextInputForGroups(index, nameWrap){\n       \n//         nameWrap.selectAll('*').remove();\n//         d3.selectAll('.overlay-brush').selectAll('rect').remove();\n//         for(let ind = 0; ind < index; ind = ind + 1){\n//             nameWrap.append('input')\n//             .classed('clade-name', true)\n//             .attr('value', `Group ${ind+1}`)\n//             .attr('type', 'text');\n\n//             let rectGroup = d3.select('.overlay-brush').append('g').classed(`group-${ind}`, true)\n\n//             let rect = rectGroup.append('rect')\n//             .classed(`rect-${ind + 1}`, true)\n//             .attr('height', 100)\n//             .attr('width', 910)\n//             .attr('opacity', 0.3)\n//             .attr('transform',  (d, i, n)=> `translate(${0},${((800 / index) * ind)})`);\n\n//             let rectSizer = rectGroup.append('rect').attr('class', `handle-${ind}`)\n//             .attr('width', 700)\n//             .attr('height', 20)\n//             .attr('y', rect.node().getBoundingClientRect().y + 20)\n//             .attr('opacity', 0)\n//             .call(d3.drag()\n//             .on('drag', function(){\n//                 let dragPos = d3.mouse(this);\n//                 let dragY = d3.event.y\n//                 d3.select(this).attr('y', dragPos[1]);\n//                 let height = +d3.select(`.rect-${ind + 1}`).attr('height')\n//                 let rectY = d3.select(`.rect-${ind + 1}`).node().getBoundingClientRect().bottom;\n//                 d3.select(`.rect-${ind + 1}`).attr('height', height + (dragY-rectY) + 70);\n//             }));\n            \n//             rect.call(d3.drag().on('drag', function(){\n//                 let dragPos = d3.mouse(this);\n//                 let dragY = d3.event.y\n//                 d3.select(this).attr('y', dragPos[1]);\n//                 let rectH = d3.select(`.rect-${ind + 1}`).node().getBoundingClientRect().height;\n//                 d3.select(`.handle-${ind}`).attr('y', dragY + (rectH - 20));\n//             }))\n//         }\n//     }\n// }\n\nfunction labelTree(nodes){\n    nodes.append('text')\n    .text(d=> d.data.node)\n    .attr('font-size', 9)\n    .attr('x', 4)\n    .attr('y', 2);\n}\n\nexport async function createCladeView(div, scales){\n    drawTreeForGroups(div);\n    cladeToolbar(div, scales);\n}\n\nexport function renderCladeTree(sidebar, att, dimensions){\n\n     addingEdgeLength(0, nestedData[nestedData.length - 1]);\n    \n    let treeFun = data => {\n        const root = d3.hierarchy(data);\n        return d3.tree().size([dimensions.width, dimensions.height])(root);\n      }\n\n    let treenodes = treeFun(nestedData[nestedData.length - 1]);\n\n    let treeSvg = sidebar.append(\"svg\").classed('tree-svg', true);\n    let g = treeSvg.append(\"g\").classed('tree-g', true);\n   \n    ////Break this out into other nodes////\n    updateCladeTree(treenodes, dimensions, treeSvg, g, att, true);\n    return treenodes;\n    /////END TREE STUFF\n    ///////////\n}\n\nexport function findDepth(node, array){\n    function stepDown(n){\n        if(n.children != null){\n            n.children.forEach(child=> {\n                stepDown(child);\n            })\n        }else{\n            array.push(n);\n        }\n    }\n    stepDown(node);\n    return array;\n}\n\nexport function updateCladeTree(treenodes, dimensions, treeSvg, g, attrDraw, length){\n    \n    assignPosition(treenodes, 0);\n\n    treeSvg.attr(\"width\", dimensions.width + dimensions.margin.left + dimensions.margin.right)\n    .attr(\"height\", dimensions.height + (dimensions.height / 1.5));\n\n    findDepth(treenodes, []);\n    let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.width]).clamp(true);\n    let yScale = d3.scaleLinear().range([dimensions.height, 0]).domain([0, getLatestData().length])\n    g.attr('transform', `translate(30, ${dimensions.height / 1.9})`);\n\n    let link = g.selectAll(\".link\")\n    .data( treenodes.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"class\", \"link\");\n\n    link.transition()\n    .duration(500)\n    .attr(\"d\", function(d) {\n        return \"M\" + xScale(d.data.combEdge) + \",\" + yScale(d.position)\n        + \"C\" + (xScale(d.data.combEdge) + xScale(d.parent.data.combEdge)) / 2 + \",\" + yScale(d.position)\n        + \" \" + (xScale(d.parent.data.combEdge)) + \",\" + yScale(d.position)\n        + \" \" + xScale(d.parent.data.combEdge) + \",\" + yScale(d.parent.position);\n    });\n\n    // adds each node as a group\n    var node = g.selectAll(\".node\")\n        .data(treenodes.descendants(), d => d.data.node)\n        .join(\"g\")\n        .attr(\"class\", function(d) { \n        return \"node\" + \n        (d.children ? \" node--internal\" : \" node--leaf\"); });\n\n    // adds the circle to the node\n    node.selectAll('circle').data(d=> [d]).join(\"circle\")\n      .attr(\"r\", 3);\n\n    node.transition()\n        .duration(500)\n        .attr(\"transform\", function(d) { \n                return \"translate(\" + xScale(d.data.combEdge) + \",\" + yScale(d.position) + \")\"; \n        });\n\n    if(attrDraw != null){\n        let leaves = node.filter(n=> n.data.leaf === true);\n        let notleaves = node.filter(n=> n.data.leaf != true);\n\n        if(attrDraw.type === 'discrete'){\n            attrDraw.stateColors.forEach(att=> {\n                let circ = leaves.filter(f=> {\n                    return att.state.includes(f.data.attributes[attrDraw.field].states.state)//f.data.attributes[attrDraw.field].winState === att.state;\n                }).select('circle');\n                circ.attr('fill', att.color);\n                notleaves.selectAll('circle').attr('fill', 'gray');\n            });\n        }else{\n            let scale = attrDraw.yScale;\n            scale.range(['#fff', '#E74C3C']);\n            leaves.select('circle').attr('fill', (d, i)=> {\n                return scale(d.data.attributes[attrDraw.field].values.realVal);\n            });\n        }\n    }else{\n        node.selectAll('circle').attr('fill', 'gray');\n    }\n\n    node.on('mouseover', (d, i, n)=> {\n        let paths = d3.select('#main-path-view').selectAll('.paths');\n        let points = d3.select('#main-summary-view').selectAll('.branch-points');\n        points.filter(f=> f.node === d.data.node).classed('selected', true);\n\n        let selectedPaths = paths.filter(path=> {\n            let nodes = path.map(m=> m.node);\n            return nodes.indexOf(d.data.node) > -1;\n        }).classed('hover', true);\n\n        selectedPaths.selectAll('g').filter(g=> g.node === d.data.node).classed('selected', true);\n        d3.select(n[i]).classed('selected-branch', true);\n\n        if(d.data.label){\n\n            let tool = d3.select('#tooltip');\n            tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          \n            tool.html(`${d.data.label.charAt(0).toUpperCase() + d.data.label.slice(1)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            tool.style('height', 'auto');\n        }\n\n    }).on('mouseout', (d, i, n)=> {\n        d3.selectAll('.paths.hover').classed('hover', false);\n        d3.selectAll('g.selected').classed('selected', false);\n        d3.select(n[i]).classed('selected-branch', false);\n\n        let tool = d3.select('#tooltip');\n        tool.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n    });\n\n    let leaves = node.filter(f=> f.data.children.length == 0);\n\n    node.selectAll('text').remove();\n    node.selectAll('.triangle').remove();\n\n    let branchNodes = node.filter(n=> n.branchPoint === true);\n\n    branchNodes.each((b, i, n)=> {\n        if(b.children === null){\n            let triangle = d3.select(n[i]).append('path').classed('triangle', true).attr('d', d3.symbol().type(d3.symbolTriangle).size('400'))\n            triangle.attr('transform', `rotate(-90) translate(0, 65) scale(.9 4)`);\n            triangle.attr('fill', 'gray').style('opacity', 0.3);\n            let text = d3.select(n[i]).selectAll('text').data(d=> [d]).join('text').text(b.clade);\n            text.attr('transform', 'translate(55, 5)');\n        }\n    });\n\n    branchNodes.select('circle').attr('fill', 'red').attr('r', 4.5);\n    branchNodes.on('click', (d, i, n)=> {\n        if(d.children == null){\n            uncollapseSub(d);\n        }else{\n            collapseSub(d);\n        }\n        let lengthBool = d3.select('button#length').text() === 'Hide Lengths';\n        updateCladeTree(treenodes, dimensions, treeSvg, treeSvg.select('g'), attrDraw, lengthBool);\n      \n    });\n\n    node.raise();\n    node.selectAll('circle').raise();\n\n    return node;\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {drawPathsAndAttributes, drawDiscreteAtt, drawGroups} from './renderPathView';\nimport {toggleFilters, getLatestData} from './filterComponent';\nimport { updateMainView } from './viewControl';\nimport { collapsed, calculatedScalesKeeper, workspace, loadApp } from '.';\nimport { dropDown } from './buttonComponents';\nimport { cladesGroupKeeper, chosenCladesGroup, cladeKeeper } from './cladeMaker';\nimport { binGroups, renderDistStructure } from './distributionView';\n\n\nexport function findBrushedNodes(){\n    let brushes = d3.select('#toolbar').selectAll('.brush-span');\n    let brushData =  [];\n    brushes.each(e => brushData.push(e));\n    let nodes = brushData.flatMap(m=> m.nodes);\n    return nodes;\n}\nexport function toolbarDataControl(toolbar, graphList, chosenGraph){\n\n    let dataDrop = dropDown(toolbar, graphList, chosenGraph.text, 'change-data');\n    d3.select('.dropdown.change-data').select('button').node().value = chosenGraph.field;\n    dataDrop.on('click', (d, i, n)=> {\n        d3.select('.dropdown.change-data').select('button').node().value = d.field;\n        d3.select('.dropdown.change-data').select('button').text(d.text);\n        d3.select('#change-data').classed('show', false);\n        let main = d3.select('#main');\n        let sidebar = d3.select('#sidebar');\n        let toolbarDiv = d3.select('#toolbar');\n        let toolbarButtonWrap = toolbarDiv.select('.toolbar-button-wrap');\n\n        main.selectAll('*').remove();\n        sidebar.selectAll('*').remove();\n        toolbarButtonWrap.selectAll('*').remove();\n        console.log('cladeKeeper', cladeKeeper)\n        cladeKeeper.push([]);\n\n        loadApp(workspace, d.field);\n\n    });\n\n}\nasync function dropUpdated(d){\n    let loader = await clearMain();\n    await changeDropValue(d);\n    await updateMainView(d.field, chosenCladesGroup[chosenCladesGroup.length - 1].groups);\n    loader.style.display = \"none\";\n}\nfunction changeDropValue(d){\n    d3.select('.dropdown.change-view').select('button').node().value = d.field;\n    d3.select('.dropdown.change-view').select('button').text(d.field);\n    return d;\n}\nexport function clearMain(){\n    d3.select('#main').selectAll('*').remove();\n    d3.select('#change-view').classed('show', false);\n    document.getElementById(\"loader\").style.display = \"block\";\n    return document.getElementById(\"loader\");\n}\nexport function toolbarControl(toolbar, main, calculatedScales){\n\n    let viewArray = [{'field':'Summary View'},{'field':'Path View'},{'field':'Pair View'}];\n    let viewDrop = dropDown(toolbar, viewArray, viewArray[0].field, 'change-view');\n\n    viewDrop.on('click', (d)=> dropUpdated(d));\n    \n    let filterButton = toolbar.append('button').attr('id', 'view-filter');\n    filterButton.attr('class', 'btn btn-outline-secondary').text('Show Filters');\n    filterButton.on('click', ()=> toggleFilters(filterButton, main, calculatedScales));\n    filterButton.classed('hidden', true);\n    ///LENGTH BUTTON CODE\n\n    let scrunchButton = toolbar.append('button').attr('id', 'scrunch');\n    scrunchButton.attr('class', 'btn btn-outline-secondary').text('Collapse Attributes');\n    scrunchButton.attr('value', false);\n    scrunchButton.on('click', ()=> toggleScrunch(scrunchButton, main, calculatedScales));\n\n    let discreteViewButton = toolbar.append('button').attr('id', 'discrete-view');\n    discreteViewButton.attr('class', 'btn btn-outline-secondary').text('Switch to Discrete Bars');\n    discreteViewButton.attr('value', false);\n    \n    discreteViewButton.on('click', ()=> {\n        let discretePredictedGroups = d3.selectAll('.predicated-attr-groups');\n        if(discreteViewButton.text() === 'Switch to Discrete Bars'){\n            discreteViewButton.text('Switch to Discrete Dots');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, true);\n        }else{\n            discreteViewButton.text('Switch to Discrete Bars');\n            drawDiscreteAtt(discretePredictedGroups, collapsed, false);\n        }\n    });\n\n    let optionArray = [{'field':'None'}];\n\n    calculatedScales.map(m=> {\n        if(m.type === 'discrete'){\n            optionArray.push(m);\n        }\n    });\n\n    let dropOptions = dropDown(toolbar, optionArray, 'Group By', 'show-drop-div-group');\n    toolbar.select('#show-drop-div-group').attr('value', 'ungrouped');\n\n    d3.select('.dropdown.show-drop-div-group').select('button').style('display', 'none')\n\n    dropOptions.on('click', (d, i, n)=> {\n        if(d.type === 'discrete'){\n            let data = getLatestData();\n            let stateBins = d.scales.map(m=> {\n                return {'field': m.field, 'state': m.scaleName, 'data': []}});\n           \n            stateBins.map(state=> {\n               state.data = data.filter(paths=> {\n                    let node = paths.filter(no=> no.leaf === true);\n                        return node[0].attributes[state.field].winState === state.state;\n                });\n            });\n           d3.select('#main').selectAll('*').remove();\n           drawGroups(stateBins, calculatedScales);\n        }else{\n            console.error('THIS HAS TO BE DISCRETE');\n        }\n        toolbar.select('#show-drop-div-group').classed('show', false);\n    });\n\n    /////ATTRIBUTE DROP DOWN\n    let attributeOptions = calculatedScales.map(m=> m.field).filter(f=> f != \"Clade\");\n    let checkedAttributes = attributeOptions.length > 11 ? attributeOptions.slice(0, 8) : attributeOptions;\n\n    let dropdiv = toolbar.append('div').classed(`dropdown attribute-show`, true);\n    dropdiv.style('display', 'inline-block');\n    let button = dropdiv.append('button').classed('btn dropbtn dropdown-toggle', true).text('Shown Attributes');\n    let dropContent = dropdiv.append('div').attr('id', 'attribute-show').classed('dropdown-content', true);\n    let dropUl = dropContent.append('ul');\n    \n    let attoptions = dropUl.selectAll('li').data(attributeOptions).join('li')\n    let checkBox = attoptions.append('input').attr('type', 'checkbox');\n    attoptions.append('text').text(d=> ` ${d}`);\n\n    let checkedDefault = attoptions.filter(f=> checkedAttributes.indexOf(f) > -1).select('input');\n    checkedDefault.each((d, i, n) => n[i].checked = true);\n\n    button.on('click', async(d, i, n)=> {\n        if(dropContent.classed('show')){\n\n            let loader = await clearMain();\n            dropContent.classed('show', false);\n            await updateMainView('Summary View', chosenCladesGroup[chosenCladesGroup.length - 1].groups);\n            loader.style.display = \"none\";\n        }else{\n            dropContent.classed('show', true);\n        }\n    });\n\n    /////ATTRIBUTE DROP DOWN\n    let cladeOptions = cladeKeeper[cladeKeeper.length - 1];\n\n\n    let dropdivClade = toolbar.append('div').classed(`dropdown clade-show`, true);\n    dropdivClade.style('display', 'inline-block')\n    let buttonClade = dropdivClade.append('button').classed('btn dropbtn dropdown-toggle', true).text('Shown Subtrees');\n\n    let dropContentClade = dropdivClade.append('div').attr('id', 'clade-show').classed('dropdown-content', true);\n    let dropUlClade = dropContentClade.append('ul');\n\n    let options = updateCladeDrop(dropUlClade, cladeOptions);\n\n    buttonClade.on('click', (d, i, n)=> {\n        if(dropContentClade.classed('show')){\n            dropContentClade.classed('show', false);\n           \n            let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n                return li[j].checked === true});\n            \n            let groups = test.data().map((m=> {\n                let names = m.nodes.map(path => path[path.length - 1].node);\n                let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n                \n                let group = binGroups(data, m.field, calculatedScalesKeeper[0], 8);\n                return {'label': m.field, 'paths': data, 'groupBins': group};\n           }));\n\n           d3.select('#summary-view').remove();\n           renderDistStructure(d3.select('#main'), groups);  \n\n        }else{\n            dropContentClade.classed('show', true);\n        }\n    });\n}\n\nexport function updateCladeDrop(dropUl, cladeOptions){\n\n    let options = dropUl.selectAll('li').data(cladeOptions).join('li');\n    let checkBox = options.selectAll('input').data(d=> [d]).join('input').attr('type', 'checkbox');\n    options.selectAll('text').data(d=> [d]).join('text').text(d=> ` ${d.field}`);\n    \n    if(cladeOptions.length < 1){\n        d3.select('.dropdown.clade-show').select('button').classed('hidden', true);\n    }else{\n        d3.select('.dropdown.clade-show').select('button').classed('hidden', false);\n    }\n\n    return options;\n    \n    // let checkedDefault = options.filter(f=> checkedAttributes.indexOf(f) > -1).select('input');\n}\n////COLLAPSES THE NODES DOWN\nfunction toggleScrunch(button, main, calculatedScales){\n\n    let data = getLatestData();\n   \n    if(button.text() === 'Collapse Attributes'){\n        button.text('Expand Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', true);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }else{\n        button.text('Collapse Attributes');\n        main.selectAll('*').remove();\n        button.attr('value', false);\n        drawPathsAndAttributes(data, main, calculatedScales);\n    }\n}","import { pairPaths, maxTimeKeeper } from \"./dataFormat\";\nimport { dropDown } from \"./buttonComponents\";\nimport * as d3 from \"d3\";\nimport * as slide from 'd3-simple-slider';\nimport { speciesTest, dataMaster } from \".\";\nimport { findBrushedNodes } from \"./toolbarComponent\";\nimport { getScales } from \"./filterComponent\";\nimport { renderTree } from \"./sidebarComponent\";\n\nexport function rankingControl(data){\n    let rankDiv = d3.select('#pair-rank').classed('hidden', false);\n    rankDiv.selectAll('*').remove();\n\n    let defaultW = [1, 1, 1];\n    let sliderWidth = 140;\n    let sliderMargin = 50;\n  \n    let weightPicker = rankDiv\n      .append('svg')\n      .attr('width', 800)\n      .attr('height', 100)\n      .append('g')\n      .attr('transform', 'translate(10,10)');\n\n     weightPicker\n    .append(\"svg:image\")\n    .attr('width', 200)\n    .attr('height', 140)\n    .attr('y', -50)\n    .attr(\"xlink:href\", \"./public/mini-diagram.gif\");\n\n    weightPicker.append('text').text('Distance').attr('font-size', 10).attr('x', 85).attr('y', 60);\n    weightPicker.append('text').text('Delta').attr('font-size', 10).attr('x', 66).attr('y', 20);\n    weightPicker.append('text').text('Closeness').attr('font-size', 10).attr('x', 195).attr('y', 22);\n\n    let labels = ['Distance', 'Delta', 'Closeness'];\n\n    weightPicker.selectAll('text.labels').data(labels).join('text').classed('labels', true)\n    .text(d=> d)\n    .attr('y', 10)\n    .attr('x', (d, i)=> (300+((sliderWidth + sliderMargin) * i)));\n \n    defaultW.forEach((color, i) => {\n      var slider = slide\n        .sliderBottom()\n        .min(-1)\n        .max(1)\n       // .step(.5)\n       .ticks(3)\n  \n        .width(sliderWidth)\n        .default(defaultW[i])\n        .displayValue(false)\n        .fill('#516880')\n        .on('end', num => {\n          defaultW[i] = num;\n          let mappedPairs = updateRanking(pairPaths(data), d3.select('.attr-drop.dropdown').select('button').attr('value'), defaultW);\n       \n          drawSorted(mappedPairs.top20, d3.select('.attr-drop.dropdown').select('button').attr('value'));\n          topPairSearch(mappedPairs.top20, mappedPairs.pairs, d3.select('.attr-drop.dropdown').select('button').attr('value'), defaultW);\n        });\n  \n      weightPicker\n        .append('g')\n        .attr('transform', `translate(${300+((sliderWidth + sliderMargin) * i)}, 20)`)\n        .call(slider);\n\n      weightPicker.selectAll('.tick')\n        .filter(f=> f < 0).select('text')\n        .attr('fill', 'red')\n        .attr('opacity', 0.6);\n    });\n}\nexport function changeTrait(attKeys, data, weights){\n\n  let view = d3.select('#toolbar').select('.dropdown.change-view').select('.dropdown-toggle').node().value;\n\n  let drop = d3.select('.attr-drop.dropdown')\n  .selectAll('a').empty() ? dropDown(d3.select('#toolbar'), attKeys, `Trait: ${attKeys[1].field}`, 'attr-drop') : d3.select('.attr-drop.dropdown').selectAll('a');\n\n  d3.select('.attr-drop.dropdown').select('button').attr('value', attKeys[1].field);\n\n  drop.on('click', (d, i, n)=> {\n\n    if(d3.select('#toolbar').select('.dropdown.change-view').select('.dropdown-toggle').node().value === \"Pair View\"){\n      let mappedPairs = updateRanking(pairPaths(data), d.field, weights);\n\n      drawSorted(mappedPairs.top20, d.field);\n      topPairSearch(mappedPairs.top20, mappedPairs.pairs, d.field, weights);\n    }\n\n    if(d3.select('#sidebar').select('#view-pheno').text() === 'View Phylogeny'){\n      renderTree(null, true, d.field);\n    }\n\n    d3.select('.attr-drop.dropdown').select('button').attr('value', d.field);\n    d3.select('.attr-drop.dropdown').select('button').text(`Trait: ${d.field}`);\n    d3.select('#attr-drop').classed('show', false);\n});\n\nreturn drop;\n\n}\nexport async function generatePairs(data){\n\n        let pairs = await pairPaths(data);\n     \n        let weights = [1, 1, 1];\n\n        let attKeys = d3.entries(pairs[0].p1[0].attributes)\n                    .filter(f=> f.value.type === 'continuous')\n                    .map(m=> {\n                        return {'field': m.key, 'value': m.key }\n                    });\n        \n        \n        let drop = changeTrait(attKeys, data, weights);\n\n        let mappedPairs = updateRanking([...pairs], attKeys[0].field, weights);\n       \n        drawSorted(mappedPairs.top20, attKeys[0].field);\n        topPairSearch(mappedPairs.top20, mappedPairs.pairs, attKeys[0].field, weights);\n}\nfunction getWeightScales(pairs, field){\n \n  let deltaMax = d3.max([...pairs].map(m=> m.deltas.filter(f=> f.key === field)[0]).map(m=> m.value));\n  let closeMax = d3.max([...pairs].map(m=> m.closeAll.filter(f=> f.key === field)[0]).map(m=> m.value));\n  let distMax = d3.max([...pairs].map(d=> d.distance));\n  let deltaScale = d3.scaleLinear().domain([0, deltaMax]).range([0, 1]);\n  let closeScale = d3.scaleLinear().domain([closeMax, 0]).range([0, 1]);\n  let distScale = d3.scaleLinear().domain([0, distMax]).range([0, 1]);\n  return {delta: deltaScale, close:closeScale, distance: distScale};\n}\nexport function updateRanking(pairs, field, weights){\n\n    let weightScales = getWeightScales(pairs, field);\n\n    let pickedPairs = [...pairs].map(p=> {\n        let newP = Object.assign({}, p);\n        \n        newP.delta = p.deltas.filter(d=> d.key === field)[0];\n        newP.closeness = p.closeAll.filter(d=> d.key === field)[0];\n        newP.deltaRank = weightScales.delta(newP.delta.value);\n        newP.closenessRank = weightScales.close(newP.closeness.value);\n        newP.distanceRank = weightScales.distance(p.distance);\n        newP.totalRank = (weights[0] * newP.distanceRank) + (weights[1] * newP.deltaRank) + (weights[2] * newP.closenessRank);\n        return newP;\n    });\n\n    let sortedPairs = pickedPairs.sort((a, b)=> b.totalRank - a.totalRank).slice(0, 20);\n\n    return {top20: sortedPairs, 'pairs': pickedPairs};\n}\n\nfunction drawSorted(pairs, field){\n\n  let pairColor = ['#FF5733', '#129BF5'];\n  let nodes = findBrushedNodes();\n\n  d3.select('#main').selectAll('*').remove();\n   \n  let width = 600;\n  let height = 100;\n  let xScale = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n    \n  let svg = d3.select('#main').append('svg');\n  svg.attr('height', pairs.length * (height * 1.9))\n  let wrap = svg.append('g');\n  wrap.attr('transform', 'translate(20, 120)')\n  let pairWraps = wrap.selectAll('g.pair-wrap').data(pairs).join('g').classed('pair-wrap', true);\n  pairWraps.attr('transform', (d, i)=> `translate(50,${i*(height * 1.8)})`);\n  pairWraps.append('rect')\n    .attr('width', (d, i)=> {\n    return width - xScale(d.common.combLength);\n  })\n    .attr('height', height)\n    .attr('x', d=> xScale(d.common.combLength))\n    .attr('stroke-width', 1).attr('stroke', 'black')\n    .attr('fill', '#fff');\n\n    pairWraps.append('text').text((d, i)=> {\n        return `${d.p1[d.p1.length - 1].node} + ${d.p2[d.p2.length - 1].node}`\n    }).attr('y', -10);\n\n    let scoreWrap = pairWraps.append('g').classed('score-wrap', true);\n    let scoreGroups = scoreWrap.selectAll('g.score').data((d, i)=> {\n        return [\n         {label: 'Distance', value: d.distance, score: d.distanceRank}, \n         {label: 'Delta', value: d.delta.value, score: d.deltaRank},\n         {label: 'Closeness', value: d.closeness.value, score: d.closenessRank}\n        ];\n    }).join('g').classed('score', true);\n\n    let scoreLabel = scoreWrap.append('g').attr('transform', `translate(650, 10)`);\n    scoreLabel.append('rect').attr('width', 200).attr('height', 40).attr('fill', 'gray').attr('y', 45).attr('opacity', .1)\n    scoreLabel.append('text').text('Score').attr('y', 20).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Value').attr('y', 40).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreLabel.append('text').text('Distinctiveness Score').attr('y', 60).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n    scoreLabel.append('text').text('Rank').attr('y', 80).attr('x', 95).style('text-anchor', 'end').style('font-size', 11);\n\n    scoreGroups.attr('transform', (d, i, n)=> {\n       return  i === 0 ? `translate(${(670)},0)` : \n       `translate(${(660+(d3.sum(d3.selectAll(n).filter((f, j)=> i > j).data().map(m=> m.label.length * 6)))+ (i*30))},0)`;\n    });\n\n    var zero = d3.format(\".3n\");\n    scoreGroups.append('text').text((d, i)=>  d.label).style('font-size', 10).attr('y', 10);;\n    scoreGroups.append('text').text((d, i)=> zero(d.score)).style('font-size', 10).attr('y', 30);\n    scoreGroups.append('text').text((d, i)=> zero(d.value)).style('font-size', 10).attr('y', 50);\n\n    scoreLabel.append('text').text((d, i, n)=> zero(d.closenessRank + d.distanceRank + d.deltaRank)).style('font-size', 10).attr('y', 60).attr('x', 115);\n    scoreLabel.append('text').text((d, i)=> i+1).style('font-size', 10).attr('y', 80).attr('x', 115);\n\n    var lineGen = d3.line()\n    .x(d=> {\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, width]);\n       let distance = x(d.combLength);\n        return distance; })\n    .y(d=> {\n        let y = d.attributes[field].scales.yScale;\n        y.range([height, 0]);\n        return y(d.attributes[field].values.realVal);\n    });\n\n    //BEGIN EXPERIOMENTING////]\n\n    let pairGroupN = pairWraps.selectAll('g.pair-neighbor').data((d, i, n)=> {\n      let species1 = d.p1.map(n=> n.node);\n      let species2 = d.p2.map(n=> n.node);\n      let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n\n      let neighbors = labels.flatMap(m=> {\n          let start = speciesTest[speciesTest.length - 1].indexOf(m);\n          let ne = speciesTest[speciesTest.length - 1].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n          return ne;\n      });\n      \n      let speciesNames = [species1[species1.length-1], species2[species2.length-1]];\n\n      \n\n      ////EXPERIMENTING WITH NODES////\n      let neighPaths = dataMaster[dataMaster.length - 1].filter(f=> \n        (neighbors.indexOf(f[f.length - 1].node)) > -1 && (speciesNames.indexOf(f[f.length - 1].node) === -1));\n\n    \n  \n      let labeledN = [...neighPaths].map(path=> {\n        let name = path[path.length - 1].node;\n        return path.map(p=> {\n          p.name = name;\n          return p\n        })\n      });\n      \n      let spec1N = labeledN.map(m => m.filter(f=> species1.indexOf(f.node) > -1));\n      let spec2N = labeledN.map(m => m.filter(f=> species2.indexOf(f.node) > -1));\n\n\n      let closest1 = spec1N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n  \n      let closest2 = spec2N.filter((f, i, n)=> {\n        let max = d3.max(n.map(d=> d.length));\n        return f.length === max;\n      })[0];\n      \n      let wholeClosest1 = labeledN.filter(f=> f[f.length-1].node === closest1[closest1.length - 1].name)[0];\n      let wholeClosest2 = labeledN.filter(f=> f[f.length-1].node === closest2[closest2.length - 1].name)[0];\n     \n      return [wholeClosest1, wholeClosest2];\n\n    }).join('g').classed('pair-neighbor', true).attr('opacity', 0);\n\n      let innerPathsN = pairGroupN.append('path')\n      .attr(\"d\", lineGen)\n      .attr(\"class\", \"inner-line-n\")\n      .attr('fill', 'none')\n      .attr('stroke-width', 1)\n      .style('stroke', 'rgba(160, 141, 184, .9)');\n     \n      let branchesN = pairGroupN.selectAll('g.branch-n').data(d=> d).join('g').classed('branch-n', true);\n      branchesN.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n      branchesN.filter(f=> f.leaf != true).append('rect').attr('width', 10).attr('height', (d)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n      }).attr('fill', 'rgba(160, 141, 184, .2)').attr('y', (d, i)=> {\n          let y = d.attributes[field].scales.yScale;\n          return y(d.attributes[field].values.upperCI95);\n      });\n  \n      branchesN.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n          return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n      }).attr('opacity', 0.5);\n\n      branchesN.filter((b, i, n)=> {\n        return i === (n.length - 1);\n      }).append('text').text(d=> d.node)\n        .attr('fill', 'rgba(160, 141, 184, 1)')\n        .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return (y(d.attributes[field].values.realVal) - 4);\n        }).attr('x', 3).style('font-size', 10);\n\n////////////////////////////END EXPERIMENT///////\n\n    let pairGroup = pairWraps.selectAll('g.pair').data(d=> [d.p1, d.p2]).join('g').classed('pair', true);\n\n    let innerPaths = pairGroup.append('path')\n    .attr(\"d\", lineGen)\n    .attr(\"class\", \"inner-line\")\n    .style('stroke', (d, i)=> pairColor[i])\n   // .style('stroke', 'rgb(165, 185, 198)');\n\n   let brushedPaths = innerPaths.filter(f=> {\n    let nodeTest = f.filter(n=> nodes.map(m=> m.node).indexOf(n.node) > -1)\n    return nodeTest.length > 0}).style('stroke', '#64B5F6').style('stroke-width', '5px');\n\n    let branches = pairGroup.selectAll('g.branch').data(d=> d).join('g').classed('branch', true);\n    branches.attr('transform', (d, i)=> `translate(${xScale(d.combLength)}, 0)`);\n    branches.filter(f=> f.leaf != true).append('rect')\n    .classed('range', true)\n    .attr('width', 10)\n    .attr('height', (d)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.lowerCI95) - y(d.attributes[field].values.upperCI95)\n    }).attr('fill', 'rgba(165, 185, 198, .5)')\n    .attr('y', (d, i)=> {\n        let y = d.attributes[field].scales.yScale;\n        return y(d.attributes[field].values.upperCI95);\n    });\n\n    let chosenNodes = branches.filter(f=> {\n      return nodes.map(m=> m.node).indexOf(f.node) > -1\n    }).selectAll('rect.range').attr('fill', '#64B5F6')\n\n    branches.append('rect').attr('width', 10).attr('height', 4).attr('y', (d, i)=> {\n        return d.attributes[field].scales.yScale(d.attributes[field].values.realVal) - 2;\n    });\n\n    pairWraps.append('rect').attr('width', (d, i)=> {\n        return xScale(d.common.combLength)})\n        .attr('height', height)\n        .attr('fill', '#fff').style('opacity', 0.7);\n        let yAxisG = pairWraps.append('g').classed('y-axis', true);\n        let xAxisG = pairWraps.append('g').classed('x-axis', true);\n        xAxisG.call(d3.axisBottom(xScale).ticks(10));\n        xAxisG.attr('transform', `translate(0, ${height})`)\n\n    pairWraps.on('mouseover', (d, i, n)=> {\n       \n        let species1 = d.p1.map(n=> n.node);\n        let species2 = d.p2.map(n=> n.node);\n        let labels = [...d.p1.filter(n=> n.leaf === true).map(m=> m.node)].concat(d.p2.filter(n=> n.leaf === true).map(m=> m.node));\n        let neighbors = labels.flatMap(m=> {\n            let start = speciesTest[speciesTest.length - 1].indexOf(m);\n            let ne = speciesTest[speciesTest.length - 1].filter((f, j)=> (j < (+start + 2)) && (j > (+start - 2)));\n            return ne;\n        });\n        let checkArray = species1.filter(s=> species2.indexOf(s) > -1);\n       \n        let treeNode  = d3.select('#sidebar').selectAll('.node');\n        let treeLinks  = d3.select('#sidebar').selectAll('.link');\n        let pairNode1 = treeNode.filter(f=> {\n            return species1.filter(s=> species2.indexOf(s) === -1).indexOf(f.data.node) > -1;\n        }).classed('hover one', true);\n\n        let pairNode2 = treeNode.filter(f=> {\n          return species2.filter(s=> species1.indexOf(s) === -1).indexOf(f.data.node) > -1;\n      }).classed('hover two', true);\n\n        treeLinks.filter(f=> species1.filter(s=> species2.indexOf(s) === -1).indexOf(f.data.node) > -1).classed('hover one', true);\n        treeLinks.filter(f=> species2.filter(s=> species1.indexOf(s) === -1).indexOf(f.data.node) > -1).classed('hover two', true);\n     \n        //Hiding Others\n        treeNode.filter(f=> (checkArray[checkArray.length - 1] != f.data.node) && (species1.filter(s=> species2.indexOf(s) === -1).concat(species2.filter(s=> species1.indexOf(s) === -1)).indexOf(f.data.node) === -1)).classed('hover-not', true);\n     \n        //Hiding Others\n        treeLinks.filter(f=> (species1.filter(s=> species2.indexOf(s) === -1).concat(species2.filter(s=> species1.indexOf(s) === -1)).indexOf(f.data.node) === -1)).classed('hover-not', true);\n        \n        let speciesNames = [species1[species1.length-1], species2[species2.length-1]]\n      \n        return d3.select(this).classed('hover', true);\n    })\n    .on('mouseleave', (d, i, n)=>{\n\n      d3.select(n[i]).selectAll('.pair-neighbor').attr('opacity', 0);\n\n        let treeNode  = d3.select('#sidebar').selectAll('.node')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n        let treeLinks  = d3.select('#sidebar').selectAll('.link')\n        .classed('hover', false)\n        .classed('hover-neighbor', false)\n        .classed('hover-not', false)\n        .classed('two', false)\n        .classed('one', false);\n        return d3.select(n[i]).classed('hover', false);\n    });\n\n    let axisGroup = pairWraps.append('g').classed('y-axis', true);\n  \n    axisGroup.each((d, i, n)=> {\n        let scale = d.p1[0].attributes[field].scales.yScale;\n        d3.select(n[i]).call(d3.axisLeft(scale).ticks(5));\n    });\n\n  let mouseG = pairWraps.append(\"g\")\n    .attr(\"class\", \"mouse-over-effects\");\n\n  mouseG.append(\"path\") // this is the black vertical line to follow mouse\n    .attr(\"class\", \"mouse-line\")\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", \"1px\")\n    .style(\"opacity\", \"0\");\n\n   var mousePerLine = mouseG.selectAll('.mouse-per-line')\n   .data((d, i)=> {\n\n    return [d.p1, d.p2]})\n   .join(\"g\")\n   .attr(\"class\", \"mouse-per-line\");\n\nmousePerLine.append(\"circle\")\n   .attr(\"r\", 7)\n   .style(\"stroke\", function(d) {\n     return 'red';\n   })\n   .style(\"fill\", \"none\")\n   .style(\"stroke-width\", \"1px\")\n   .style(\"opacity\", \"0\");\n\nmousePerLine.append(\"text\").attr('class', 'value')\n   .attr(\"transform\", \"translate(10,3)\");\n\nmousePerLine.append(\"text\").attr('class', 'species')\n   .attr(\"transform\", \"translate(10,3)\");\n\nmouseG.append('svg:rect') // append a rect to catch mouse movements on canvas\n      .attr('width', width) // can't catch mouse events on a g element\n      .attr('height', height)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .on('mouseout', function() { // on mouse out hide line, circles and text\n        d3.selectAll(\".mouse-line\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"0\");\n      })\n      .on('mouseover', (d, i, n)=> { // on mouse in show line, circles and text\n        d3.select(n[i].parentNode).selectAll('.mouse-line')\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"1\");\n          d3.select(n[i].parentNode).selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"1\");\n\n          \n      })\n      .on('mousemove', (dat, i, n)=> { // mouse moving over canvas\n        var mouse = d3.mouse(n[i]);\n       \n        d3.select(n[i].parentNode).select('.mouse-line')\n          .attr(\"d\", function() {\n            var d = \"M\" + mouse[0] + \",\" + height;\n            d += \" \" + mouse[0] + \",\" + 0;\n            return d;\n          });\n       \n          d3.select(n[i].parentNode).selectAll('.mouse-per-line')\n          .attr(\"transform\", function(d, j, node) {\n         \n            var xDate = xScale.invert(mouse[0]),\n                bisect = d3.bisector(function(d) { return d.edgeLength; }).right,\n                idx = bisect(d.values, xDate);\n            \n            let line = n[i].parentNode.parentNode.getElementsByClassName('inner-line');\n          \n            var beginning = 0,\n                end = line[j].getTotalLength(),\n                target = null\n\n            while (true){\n               target = Math.floor((beginning + end) / 2);\n               var pos = line[j].getPointAtLength(target);\n              if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n                  break;\n              }\n              if (pos.x > mouse[0])      end = target;\n              else if (pos.x < mouse[0]) beginning = target;\n              else break; //position found\n            }\n            let y = dat.p1[0].attributes[field].scales.yScale;\n          \n            d3.select(node[j]).select('text.value')\n              .text(y.invert(pos.y).toFixed(2))\n              .style('font-size', 11)\n              .attr('y', ()=> {\n                  return j === 0 ? 10 : -10;\n                });\n\n            d3.select(node[j]).select('text.species')\n                .text(d[d.length-1].node)\n                .style('font-size', 11)\n                .attr('y', ()=> {\n                    return j === 0 ? 19 : -19;\n                  });\n              \n            return \"translate(\" + mouse[0] + \",\" + pos.y +\")\";\n          });\n      });\n\n\n   \n}\nfunction topPairSearch(topPairs, allPairs, field, weights){\n\n  let matchKeeper = [];\n  let nameArray = topPairs.map(m=> m.key);\n  let otherFields = getScales()\n    .filter(f=> f.field != field && f.type === 'continuous')\n    .map(m=> m.field);\n\n  otherFields.map(m => {\n  \n    let mappedPairs = updateRanking([...allPairs], m, weights);\n\n    let test = mappedPairs.top20.map((m, i)=> {\n      let newPair = m.key\n      if(nameArray.indexOf(m.key) > -1){\n      \n        let check = matchKeeper.map(m=> m.key);\n        if(check.indexOf(newPair) > -1){\n          let index = check.indexOf(newPair);\n          matchKeeper[index].value.push([newPair, i+1, m]);\n        }else{\n          matchKeeper.push({key: newPair, value: [[newPair, i+1, m]]})\n        }\n      }\n    });\n  });\n\n  //rankHistogram(matchKeeper);\n  rankGrid(matchKeeper);\n\n  // matchKeeper.map((m, i)=> {\n   \n  //   let group = d3.selectAll('.pair-wrap').filter(f=> {\n  //     return (m.key === f.key);\n  //   }).append('g').classed('other-rank', true);\n\n  //   let rankSet = [...new Set(m.value.map(v=> v[1]).sort())]\n  //   let groupedRanks = rankSet.map(f=> {\n  //     let ranked = m.value.filter(va=> va[1]===f);\n  //     return {rank:f, value:ranked}\n  //   }).sort((a, b)=> a.rank - b.rank);\n\n  //   group.attr('transform', 'translate(860, 0)');\n  //   group.append('rect').attr('width', 300).attr('height', groupedRanks.length * 20).attr('opacity', 0.1);\n  //   let textGrp = group.selectAll('g.text-group').data(groupedRanks).join('g').classed('text-group', true);\n\n  //   let text = textGrp.append('text').text(d=> {\n  //     let traits = d.value.map(v=>v[2].delta.key).join(', ');\n  //     return `Ranking: ${d.rank} Traits: ${traits},  `});\n  //   text.style('font-size', '10px');\n  //   text.attr('transform', (d, i)=> `translate(20, ${(i*20)+11})`);\n  // });\n}\n\nfunction rankGrid(matchKeeper){\n\n  let scales = getScales();\n\n  let size = 20;\n\n  let result = chunkArray(scales.map(m=> m.field), 4);\n\n  let newMatch = matchKeeper.map(m=> {\n    let bins = result.map(col=> {\n      return col.map(c=> {\n        return {key: c, value: m.value.filter(f=> f[2].delta.key === c) }\n      })\n    });\n    \n    return {key:m.key, 'bins':bins}\n  });\n\n  let satScale = d3.scaleLinear().domain([20, 1]).range([0.02, 1])\n\n  newMatch.map(m=> {\n\n    let group = d3.selectAll('.pair-wrap').filter(f=> {\n          return (m.key === f.key);\n        }).append('g').classed('other-rank', true);\n\n    group.attr('transform', 'translate(880, 0)');\n\n    group.append('text')\n    .text('Ranked Top 20 in Other Traits')\n    .style('font-size', 11)\n    .attr('transform', `translate(5,0)`);\n    \n   \n    let groups = group.selectAll('.square-group').data(m.bins).join('g').classed('square-group', true);\n    groups.attr('transform', (d, i)=> `translate(${i*22}, 5)`);\n    let squarebins = groups.selectAll('.trait-bin').data(d=> {\n      return d;\n    }).join('g').classed('trait-bin', true);\n\n    squarebins.on('mouseover', (r,i)=>{\n      let tool = d3.select('#tooltip');\n      tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n      \n      let f = d3.format(\".3f\");\n      if(r.value[0]){\n        tool.html(`${r.value[0][2].delta.key} : ${f(r.value[0][2].totalRank)} </br> Ranking: ${r.value[0][1]}`)\n        .style(\"left\", (d3.event.pageX - 40) + \"px\")\n        .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        \n        tool.style('height', 'auto');\n        tool.style('width', '150px');\n\n      }\n    \n\n    }).on('mouseout', ()=> {\n      let tool = d3.select('#tooltip').style('opacity', 0);\n    });\n\n    squarebins.append('rect')\n    .attr('width', size)\n    .attr('height', size)\n    .style('stroke', '#EBECED')\n    .style('stoke-width', '0.5px')\n    .style('fill', (d, i)=> {\n      if(d.value.length === 0){\n        return 'gray';\n      }else{\n        return d.value[0][1] < 2 ? '#FFC74F' : 'gray';\n      }\n    })\n    .style('fill-opacity', (d, i)=> {\n      return d.value.length === 0 ? satScale(33) : satScale(d.value[0][1]);ß\n    });\n    squarebins.attr('transform', (d, i)=> `translate(0, ${i*22})`);\n  });\n\n\n\n}\nfunction chunkArray(myArray, chunk_size){\n    var index = 0;\n    var arrayLength = myArray.length;\n    var tempArray = [];\n    \n    for (index = 0; index < arrayLength; index += chunk_size) {\n        let myChunk = myArray.slice(index, index+chunk_size);\n        // Do something if you want with the group\n        tempArray.push(myChunk);\n    }\n\n    return tempArray;\n}\n\n\nfunction rankHistogram(matchKeeper){\n\n  let size = 25;\n  let height = 12;\n\n  let rankBins = [[1,3], [4,6], [7,9], [10, 12], [13, 15], [16, 18], [19, 21]];\n  let axisLabels = ['1-3', '4-6', '7-9', '10-12', '13-15', '16-18', '19-21'];\n\n  let newArray = matchKeeper.map(m=> {\n    let bins = rankBins.map(r=> {\n      return {bin:r, values: m.value.filter(f=> f[1] >= r[0] && f[1] <= r[1])}\n    });\n    return {key:m.key, 'bins':bins}\n  });\n\n  newArray.map(m=> {\n\n    let group = d3.selectAll('.pair-wrap').filter(f=> {\n          return (m.key === f.key);\n        }).append('g').classed('other-rank', true);\n\n    group.attr('transform', 'translate(880, 0)');\n\n    group.append('text')\n    .text('Ranked Top 20 in Other Traits')\n    .style('font-size', 11)\n    .style('text-anchor', 'middle')\n    .attr('transform', `translate(${(rankBins.length * (size+2))/2},0)`);\n\n    group.append('g')\n    .call(d3.axisBottom(d3.scaleBand().domain(axisLabels).range([0, rankBins.length * (size+2)])))\n    .attr('transform', 'translate(0, 92)');\n\n    let binGroups = group.selectAll('g.bin').data(m.bins).join('g').classed('bin', true);\n    binGroups.attr('transform', (d, i)=> `translate(${i*(size+2)}, ${80})`);\n\n    let binRects = binGroups.selectAll('rect').data(d=>d.values.sort((a, b)=> a[1]-b[1])).join('rect');\n    binRects.attr('width', size)\n    .attr('height', size/2)\n    .attr('transform', (d, i)=> `translate(0, ${-1*(i*((size/2)+1))})`);\n\n    binRects.attr('opacity', (d, i, n)=> {\n      let minMax = rankBins.filter(r=> d[1]<= r[1] && d[1] >= r[0])[0];\n      let scale = d3.scaleLinear().domain([minMax[0], minMax[1]]).range([.8, .2])\n      return scale(d[1])})\n\n    binRects.on('mouseover', (r,i)=>{\n      let tool = d3.select('#tooltip');\n      tool.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n      \n      let f = d3.format(\".3f\");\n        \n      tool.html(`${r[2].delta.key} : ${f(r[2].totalRank)} </br> Ranking: ${r[1]}`)\n          .style(\"left\", (d3.event.pageX - 40) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n          \n      tool.style('height', 'auto');\n      tool.style('width', '150px');\n\n    }).on('mouseout', ()=> {\n      let tool = d3.select('#tooltip').style('opacity', 0);\n    });\n  });\n\n}","import * as d3 from \"d3\";\nimport { renderDistibutions, groupDistributions, renderDistStructure, binGroups } from './distributionView';\nimport {drawPathsAndAttributes} from './renderPathView';\nimport { getLatestData } from \"./filterComponent\";\nimport { generatePairs, rankingControl } from \"./pairView\";\nimport { drawTreeForGroups, createCladeView, chosenCladesGroup } from \"./cladeMaker\";\nimport { calculatedScalesKeeper } from \".\";\n\nexport let groupedView = false;\n\nexport function updateMainView(d, groups){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n    let view = d3.select('#view-pheno').empty()? null : d3.select('#view-pheno').text();\n   \n    if(d != 'Pair View' && view === 'View Phenogram'){\n        d3.select('.dropdown.attr-drop').remove();\n    }\n  \n    if(d === 'Path View' || d === null){\n        d3.select('#pair-rank').classed('hidden', true);\n        drawPathsAndAttributes(data, main);\n\n        document.getElementById(\"scrunch\").disabled = false;\n        document.getElementById(\"discrete-view\").disabled = false;\n\n        d3.select('#scrunch').classed('hidden', false);\n        d3.select('#discrete-view').classed('hidden', false);\n\n    }else if(d === 'Summary View'){\n\n        d3.select('#pair-rank').classed('hidden', true);\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n        groups ? renderDistStructure(main, groups) : renderDistStructure(main, data);\n       \n    }else if(d === 'Pair View'){\n        rankingControl(data);\n        generatePairs(data);\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n    }else{\n        console.error('field not found');\n    }\n\n    return main;\n}\nexport function initialViewLoad(scales, dataName){\n\n    let main = d3.select('#main');\n    let data = getLatestData();\n\n    main.selectAll('*').remove();\n\n    if(data.length > 50){\n\n        // rankingControl(data);\n        // generatePairs(data);\n\n        // document.getElementById(\"scrunch\").disabled = true;\n        // document.getElementById(\"discrete-view\").disabled = true;\n\n        // d3.select('#scrunch').classed('hidden', true);\n        // d3.select('#discrete-view').classed('hidden', true);\n\n        renderDistStructure(main, chosenCladesGroup[chosenCladesGroup.length - 1].groups)\n            .then(()=>  document.getElementById(\"loader\").style.display = \"none\");\n\n        \n        d3.select('#view-toggle').text('View Paths');\n\n        document.getElementById(\"scrunch\").disabled = true;\n        document.getElementById(\"discrete-view\").disabled = true;\n\n        d3.select('#scrunch').classed('hidden', true);\n        d3.select('#discrete-view').classed('hidden', true);\n\n    }else{\n        drawPathsAndAttributes(data, main);\n        d3.select('#view-toggle').text('View Summary');\n\n        document.getElementById(\"scrunch\").disabled = false;\n        document.getElementById(\"discrete-view\").disabled = false;\n\n        d3.select('#scrunch').classed('hidden', false);\n        d3.select('#discrete-view').classed('hidden', false);\n      \n    }\n\n}\n\n","\nimport '../styles/index.scss';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster, getLatestData, getScales} from './filterComponent';\nimport { calculatedScalesKeeper } from '.';\nimport { drawBranchPointDistribution, dimensions, defaultBarColor, mirrorlineGen, lineGen, selectedClades, binGroups, renderDistStructure } from './distributionView';\nimport { renderTree } from './sidebarComponent';\n\nconst compareColors = [{light: '#F8C471', dark: '#F39C12'}, {light: '#A3E4D7', dark: '#17A589'}]\n\n\nexport function renderDistributionComparison(div, data, branchScale){\n  \n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n  \n    let divWrap = div.append('div').attr('id', 'compare-wrap');\n\n    let groupHeader = divWrap.append('div').classed('compare-header', true).style('margin', 'auto');\n\n    let textDiv = groupHeader.append('div').attr('height', 50).attr('width', 200).style('margin-left', '460px');\n    let branchPointSvg  = groupHeader.append('svg');\n\n    let pointData = {paths: data[0].paths.concat(data[1].paths), groupBins: data[0].groupBins};\n    let branchBar = drawBranchPointDistribution(pointData, branchPointSvg);\n    branchBar.attr('transform', 'translate(-30, 10)');\n\n    //'#DCD4D4'\n\n    branchBar.selectAll('rect.bin').attr('stroke', '#fff').attr('stroke-width', '3px');\n    let pointGroups = branchBar.selectAll('g.branch-points');\n  \n    let xOut = groupHeader.append('div')\n    .style('position', 'absolute')\n    .style('left', '5px')\n    .style('top', '65px')\n    .append('i')\n    .classed('close fas fa-times', true)\n    .style('padding-left', '10px');\n    \n    xOut.on('click', (d, i, n)=> {\n        divWrap.remove();\n        selectedClades.push(new Array());\n       \n        let test = d3.select('#clade-show').selectAll('li').selectAll('input').filter((f, j, li)=> {\n            return li[j].checked === true});\n\n        let groups = test.data().map((m=> {\n            let names = m.nodes.map(path => path[path.length - 1].node);\n            let data = getLatestData().filter(path => names.indexOf(path[path.length - 1].node) > -1);\n                \n            let group = binGroups(data, m.field, calculatedScalesKeeper[0], 8);\n            return {'label': m.field, 'paths': data, 'groupBins': group};\n        }));\n      \n        d3.select('#summary-view').remove();\n        renderDistStructure(d3.select('#main'), groups);  \n       \n        d3.select('#sidebar').selectAll('.node').remove();\n        d3.select('#sidebar').selectAll('.link').remove();\n\n        renderTree(null, true, false);\n       \n    });\n\n    if(data.length > 1){\n//ADD THIS BACK IN//\n\n        d3.select('#toolbar').selectAll('.brush-span').remove();\n       \n        let selectedNodes = Array.from(new Set(data.flatMap(f=> f.paths).flatMap(p=> p.map(m=> m.node))));\n   \n        let testNodes = d3.select('#sidebar').selectAll('.node').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n        let testLinks = d3.select('#sidebar').selectAll('.link').filter(f=> selectedNodes.indexOf(f.data.node) === -1);\n\n        testNodes.attr('opacity', 0.3)\n        testLinks.attr('opacity', 0.3)\n\n        let pathsListOne = Array.from(new Set(data[0].paths.flatMap(p=> p.map(m=> m.node))));\n        let pathsListTwo = Array.from(new Set(data[1].paths.flatMap(p=> p.map(m=> m.node))));\n\n        let testNodesOne = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n        let testLinksOne = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListOne.indexOf(f.data.node) > -1);\n\n        testNodesOne.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[0].dark)\n        testLinksOne.attr('opacity', .8).style('stroke', compareColors[0].dark)\n\n        let testNodesTwo = d3.select('#sidebar').selectAll('.node').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n        let testLinksTwo = d3.select('#sidebar').selectAll('.link').filter(f=> pathsListTwo.indexOf(f.data.node) > -1);\n\n        testNodesTwo.attr('opacity', .8).selectAll('circle').attr('fill', compareColors[1].dark)\n        testLinksTwo.attr('opacity', .8).style('stroke', compareColors[1].dark)\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-left', true)\n        .style('margin-right', '10px');\n\n        data.forEach((d, i)=> {\n        textDiv.append('span')\n            .text(d.label)\n            .classed('badge badge-secondary', true)\n            .style('padding', '5px')\n            .style('margin-bottom', '7px')\n            .style('background', compareColors[i].light)\n        });\n\n        textDiv.append('i')\n        .classed('fas fa-arrow-right', true)\n        .style('margin-left', '10px');\n        \n    }\n    let svg = divWrap.append('svg').attr('class', 'compare-svg').style('padding-top', '50px');\n\n    ////COMBINEDATA///\n    if(data.length > 1){\n       \n        let startBins = data[0].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let mapBins = data[1].groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n        let combined = startBins.map((d, i, n)=> {\n         \n            d.branches = [...d.branches].map((b, j)=> {\n                \n                b.bins = [{key:data[0].label, value: b.bins, index:0},\n                          {key:data[1].label, value: mapBins[i].branches[j].bins, index:1}\n                         ];\n             \n                b.data = [{key: data[0].label, \n                            value: b.data.map(m=>{\n                                    m.groupKey = data[0].label;\n                                    m.index = 0;\n                                    return m;\n                                    }), \n                            index: 0},\n                        \n                        { key: data[1].label, \n                            value : mapBins[i].branches[j].data.map(m=> {\n                                    m.groupKey = data[1].label;\n                                    m.index = 1;\n                                    return m;\n                            }), \n                         index: 1 }];\n\n                return b;\n            });\n          \n           if(d.type === 'continuous'){\n\n            d.leafData.data = [{key: data[0].label, \n                value: d.leafData.data.map(m=>{\n                        m.groupKey = data[0].label;\n                        m.index = 0;\n                        return m;\n                        }), \n                index: 0},\n            \n            { key: data[1].label, \n                value : mapBins[i].leafData.data.map(m=> {\n                        m.groupKey = data[1].label;\n                        m.index = 1;\n                        return m;\n                }), \n             index: 1 }];\n\n             d.leafData.bins = [{key:data[0].label, value: d.leafData.bins, index:0},\n                                {key:data[1].label, value: mapBins[i].leafData.bins, index:1}\n                                ];\n           }else{\n\n            d.leafData.data = [{key: data[0].label, \n                value: d.leafData.data.map(m=>{\n                        m.groupKey = data[0].label;\n                        m.index = 0;\n                        return m;\n                        }), \n                index: 0},\n            \n            { key: data[1].label, \n                value : mapBins[i].leafData.data.map(m=> {\n                        m.groupKey = data[1].label;\n                        m.index = 1;\n                        return m;\n                }), \n             index: 1 }];\n\n             d.leafData.bins = [\n                {key:data[0].label, keys: d.stateKeys, value: d.leafData.bins, index:0},\n                {key:data[1].label, keys: d.stateKeys, value: mapBins[i].leafData.bins, index:1}\n                ];\n           }\n          \n            return d;\n        });\n\n        let wrap = svg.append('g').attr('class', 'group-wrap').attr('transform', 'translate(30, 10)');\n        let binnedWrap = wrap.selectAll('.attr-wrap').data(combined).join('g').classed('attr-wrap', true);\n        svg.attr('height', (combined.length * (dimensions.height + 5)));\n        \n        binnedWrap.attr('transform', (d, i, n)=>  {\n            if(i === 0){\n                    return 'translate(0,0)';\n            }else{\n                let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                d.sum = sum;\n                return `translate(0, ${sum})`;\n            }\n        });\n\n        let label = binnedWrap.append('text')\n            .text(d=> d.key);\n    \n        label.filter(f=> f.type === 'continuous')\n            .attr('y', 40)\n            .attr('x', 80)\n            .style('text-anchor', 'end')\n            .style('font-size', 11);\n    \n        label.filter(f=> f.type === 'discrete')\n            .attr('y', (d, i)=> 3)\n            .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n            .style('text-anchor', 'middle')\n            .style('font-size', 11)\n            .attr('transform', 'rotate(-90)');\n\n        /////FROM DISCRETE DRAW\n\n        let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n        predictedWrap.attr('transform', 'translate(25, 0)');\n        predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n        //ROOT RENDERING\n        let root = predictedWrap.selectAll('g.root').data(d=> {\n            return [d.rootData]}).join('g').classed('root', true);\n        root.attr('transform', `translate(60,0)`);\n\n        let contRoot = root.filter(f=> f.type === \"continuous\");\n        contRoot.append('rect')\n            .attr('height', dimensions.height)\n            .attr('width', 12)\n            .attr('fill', '#fff')\n            .style('stroke-width', '0.5px')\n            .style('stroke', 'black')\n    \n        let rootRange = contRoot.append('rect')\n            .attr('width', 12)\n            .attr('height', d=> {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return newy(d.values.lowerCI95) - newy(+d.values.upperCI95)\n            }).attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([(dimensions.height - 5), 0]);\n                return 'translate(0,'+newy(+d.values.upperCI95)+')'\n            }).style('opacity', 0.5)//.attr('fill', \"rgba(133, 193, 233)\")\n            .attr('fill', defaultBarColor);\n    \n        let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n        \n        rootAv.attr('transform', (d, i) => {\n                let newy = d.scales.yScale;\n                newy.range([dimensions.height, 0]);\n                let mean = +d.values.realVal;\n                return 'translate(0,'+newy(mean)+')';\n        }).attr('fill', '#004573');\n    \n           // Discrete Root\n        let disRoot = root.filter(f=> f.type === \"discrete\");\n        let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n            return d.bins}).join('g').classed('root-state-groups', true);\n    \n        rootStateGroups.append('text')\n            .text((d, i)=> d.color.state)\n            .attr('y', 10)\n            .attr('x', -3)\n            .style('font-size', 10)\n            .style('text-anchor', 'end');\n    \n        rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n        rootStateGroups.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim)\n            .attr('fill', '#fff').attr('opacity', 1);\n    \n        let rootRects = rootStateGroups.append('rect')\n            .classed('color-rect', true)\n            .attr('height', dimensions.squareDim)\n            .attr('width', dimensions.squareDim);\n    \n        rootRects.attr('fill', (d, i)=> {\n                return `rgba(89, 91, 101, ${d.state[0].value})`;\n            }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n    \n        let winStateRoot = disRoot.selectAll('g.root-state-groups')\n            .filter((f, j, n)=>{\n                let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n                return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n            }).classed('win', true);\n    \n        winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            });\n\n        ////BRANCHES\n        let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n           \n            return d.branches}).join('g').classed('branch-bin', true);\n    \n        branchGroup.attr('transform', (d, i, n)=> {\n            let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0\n            let x = d3.scaleLinear().domain([0, maxTimeKeeper[0]]).range([0, dimensions.timeRange]);\n           \n            let move = d.type === 'continuous'? 100 : 70;\n                return 'translate('+(move + (branchScale(i)) + x(step)) +', 0)'});\n\n        let discreteDist = branchGroup.filter(f=> f.type === 'discrete').append('g');\n\n        discreteDist.attr('transform', 'translate(5, 0)');\n\n        let discreteWidth = 85;\n\n        let discreteStateGroups = discreteDist.selectAll('g.group')\n            .data(d=> {\n                let keys = d.bins[0].value.map(m=> m.color.state);\n            \n                let bins = keys.map(k=> {\n                    let newOb = {};\n                    newOb.stateKey = k;\n                    \n                    newOb.bins = d.bins.map((m, i)=> {\n                        let clade = {}\n                        clade.index = i;\n                        clade.value = m.value.filter(f=> f.color.state === k)[0];\n                        clade.key = m.key;\n                        return clade;\n                    });\n                    return newOb;\n                });\n              \n                return bins;\n            })\n            .join('g')\n            .classed('group', true)\n            .attr('transform', (d, i)=> { \n                let move = d.index === 0 ? (-40 - (dimensions.squareDim/2)) : (dimensions.squareDim/2);\n                return `translate(${move}, 0)`});\n\n        let binRects = discreteStateGroups.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', discreteWidth)\n            .attr('stroke', 'black')\n            .attr('fill', '#fff')\n            .attr('opacity', 0.3);\n            \n            discreteStateGroups.attr('transform', (d, i)=> `translate(0, ${4+(i*(dimensions.squareDim+2))})`);\n\n            discreteStateGroups.append('text')\n            .text('1')\n            .attr('transform', `translate(${discreteWidth + 2},10)`)\n            .style('font-size', '10px')\n            .style('opacity', 0.6);\n        \n            discreteStateGroups.append('text')\n            .text('0')\n            .attr('transform', `translate(-7,10)`)\n            .style('font-size', '10px')\n            .style('opacity', 0.6);\n\n            let cladeStateGroups = discreteStateGroups.selectAll('.clade-dis').data(d=> {\n                return d.bins}).join('g').classed('clade-dis', true);\n\n\n            //////\n            function randomizer(){\n                var min= -.03; \n                var max= .03;  \n                var random = Math.random() * (+max - +min) + +min; \n                return random;\n            }\n        \n\n            let probabilityTicks = cladeStateGroups\n            .selectAll('.prob-tick')\n            .data((d, i, n)=> {\n                \n                let form = d3.format(\".3f\");\n                console.log('compare d', d)\n                let jitterMove = [...new Set(d.value.state.map(m=> +form(m.value)))].map(m=> {\n                    console.log('m', m, d.value.state)\n                    let arrayTest = d.value.state\n                    .filter(f=> +form(f.value) === m)\n                    .map(arr=> {\n                        console.log(arr)\n                        arr.index = d.index;\n                      //  arr.y = Math.random();\n                      //  arr.x = randomizer();\n                        return arr;\n                    });\n                    return arrayTest;\n                })\n\n                console.log(jitterMove)\n                return jitterMove.flatMap(j=> j);\n               \n\n            }).join('circle').classed('prob-tick', true)\n        \n            probabilityTicks\n                .attr('r', 2)\n                .attr('opacity', 0.4)\n                .attr('fill', (d)=> {\n                    return compareColors[d.index].light;\n                });\n        \n            probabilityTicks.attr('transform', (d, i, n)=> {\n                console.log('d in prob', d)\n                let scale = d3.scaleLinear().domain([0, 1]).range([2, (discreteWidth - 2)]).clamp(true);\n                \n                let yScale = d3.scaleLinear().domain([0, 1]).range([2, dimensions.squareDim - 2])\n                return `translate(${scale(d.value + d.x)},${yScale(d.y)})`;\n             });\n\n\n            let averageTick = cladeStateGroups\n                    .selectAll('.av-tick').data(d=> {\n                        return [{value: d.value.state[0].average, color: d.value.color.color, index: d.index}];\n                    }).join('rect').classed('av-tick', true)\n                    .attr('width', 2).attr('height', dimensions.squareDim)\n                    .attr('fill', d=> {\n                        return compareColors[d.index].dark})\n                    .attr('transform', (d, i, n)=> {\n                        let scale = d3.scaleLinear().domain([0, 1]).range([0, (discreteWidth - 2)]);\n                        return `translate(${scale(d.value)}, 0)`});\n\n            averageTick.on('mouseover', (d, i, n)=> {\n                \n                    let tool = d3.select('#tooltip');\n                    tool.transition()\n                        .duration(200)\n                        .style(\"opacity\", .9);\n                    \n                    let f = d3.format(\".3f\");\n                    tool.html(`Average: ${f(d.value)}`)\n                        .style(\"left\", (d3.event.pageX - 40) + \"px\")\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            \n                    tool.style('height', 'auto');\n            \n                }).on('mouseout', ()=>{\n                    let tool = d3.select('#tooltip');\n                    tool.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n                });\n            \n            probabilityTicks.on('mouseover', (d, i, n)=> {\n                \n                    let tool = d3.select('#tooltip');\n            \n                    tool.transition()\n                        .duration(200)\n                        .style(\"opacity\", .9);\n                    \n                    let f = d3.format(\".3f\");\n                    \n                    tool.html(`${d.state} : ${f(d.value)}`)\n                        .style(\"left\", (d3.event.pageX - 40) + \"px\")\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            \n                    tool.style('height', 'auto');\n            \n                }).on('mouseout', ()=>{\n                    let tool = d3.select('#tooltip');\n                    tool.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n                });\n \n\n    //         //END\n\n    //     //////PREDICTED CONTINUOUS\n\n    //       //CONTIN PREDICTED\n        let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n        continDist.on('mouseover', (d, i, node)=> {\n            let newData = d.data;\n            let list = newData[0].value.concat(newData[1].value).map(m=> m.node);\n            let selected = pointGroups.filter(p=> {\n                return list.indexOf(p.node) > -1}).classed('selected', true);\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n            let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n            let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n        }).on('mouseout', (d, i, node)=> {\n            d3.selectAll(\".branch-points.selected\").classed('selected', false);\n            d3.selectAll('.selected-branch').classed('selected-branch', false);\n            d3.select(node[i]).select('.y-axis').remove();\n        });\n\n        let continBinGroups = continDist.selectAll('g.group').data(d=> {\n            return d.bins;\n        }).join('g').attr('class', d=> `g-${d.index} group`)//.classed('group', true);\n\n        continBinGroups.each((d, i, nodes)=> {\n            d.maxCount = d3.sum(d.value.map(m=> m.length));\n            d.value.maxCount = d3.sum(d.value.map(m=> m.length));\n            let distrib = d3.select(nodes[i])\n                .selectAll('g')\n                .data([d.value.map(v=> {\n                    v.maxCount = d3.sum(d.value.map(m=> m.length))\n                    v.index = d.index;\n                    return v;\n                })])\n                .join('g')\n                .classed('distribution', true);\n            distrib.attr('transform', (d,i,n)=> {\n                if(d[0].index === 0){\n                    return 'translate(0, 0) rotate(90)'\n                }else{\n                    return 'translate(11, '+dimensions.height+') rotate(-90)'\n                }\n               });\n            let path = distrib.append('path').attr('d', d.index === 0 ? mirrorlineGen : lineGen);\n            path.attr(\"fill\", (v, i, n)=> {\n                return defaultBarColor})\n            .attr('opacity', 0.4)\n            .style('stroke', compareColors[d.index].dark);\n        });\n\n        let contRect = continBinGroups.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 10)\n        .style('fill', '#fff')\n        .style('stroke', 'gray');\n\n    let rangeRectWrap = continDist.selectAll('g.range-wrap').data(d=> {\n        return d.data;\n    }).join('g').classed('range-wrap', true);\n    \n    let rangeRect = rangeRectWrap.selectAll('rect.range').data((d,i)=> {\n        let newData = d.value.map(m=> {\n            m.range = d.range;\n            m.gindex = i;\n            return m;\n        })\n        return newData;\n    }).join('rect').classed('range', true);\n\n    let avRect = continDist.selectAll('rect.av-rect').data(d=> d.data)\n        .join('rect').classed('av-rect', true).attr('width', 10).attr('height', (d, i)=> {\n        if(d.value != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n    \n    avRect.attr('transform', (d, i) => {\n        if(d.value != undefined){\n            let newy = d.value[0].scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = d3.mean(d.value.map(m=> +m.values.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', (d)=>compareColors[d.index].dark);\n\n     //////START BRANCH EXPERIMENT\n     let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n     brush.on('end', brushedComparison);\n\n     continDist.append(\"g\")\n     .classed('continuous-branch-brush', true)\n     .attr(\"class\", \"brush\")\n     .call(brush);\n\n     //////BRUSH FOR COMPARISON/////\n\n     function brushedComparison(){\n\n        let data = d3.select(this.parentNode).data()[0]\n\n        let maxCounts = data.bins.map(m => m.maxCount);\n       \n        var s = d3.event.selection;\n        var zero = d3.format(\".3n\");\n    \n        let index = d3.select('#toolbar').selectAll('.brush-span').size();\n        let classLabel = index === 0 ? 'one' : 'two';\n    \n        if(s != null){\n            let treeTest = d3.select('#sidebar').selectAll('.node').filter(f=> {\n                return f.data.leaf === true});\n    \n            \n            let y = d3.scaleLinear().domain([data.domain[0], data.domain[1]]).range([0, dimensions.height])\n            let attribute = data.key;\n            let brushedVal = [y.invert(s[1]), y.invert(s[0])];\n    \n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n            let nodes = data.data.map(m=> m.value.filter(f=> {\n                return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n            }));\n\n\n            let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n\n            let descendBins = continDist.filter(f=> {\n                return (f.index > data.index) && (f.key === data.key)});\n                \n    \n            nodes.forEach((n, i)=> {\n               \n                if(n.length > 0){\n                    let test = d3.select(this.parentNode).select(`.g-${i}`)\n                    let groupDis = test.append('g').classed('distribution-too', true);\n                    \n                    let histo = continuousHistogram(n)\n                    histo.maxCount = maxCounts[i];\n\n                    let names = n.map(m=> m.node);\n                   \n                    groupDis\n                    .data([histo]);\n\n                    groupDis.append('path')\n                    .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                    .style('stroke', compareColors[i].dark)\n                    .style('fill', compareColors[i].light)\n                    .style('fill-opacity', 0.8);\n\n                    groupDis.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n                    let otherDis = otherBins\n                    .select(`.g-${i}`).each((o, j, oNode)=> {\n                        let oHisto = continuousHistogram(o.data.filter(f=> f.index === i)[0].value.filter(f=> names.indexOf(f.node) > -1));\n                        oHisto.maxCount = o.bins[i].maxCount;\n                        let oDist = d3.select(oNode[j]).append('g').classed('distribution-too', true);\n                        oDist.data([oHisto])\n                        .append('path')\n                        .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                        .style('stroke', compareColors[i].dark)\n                        .style('fill', compareColors[i].light)\n                        .style('fill-opacity', 0.8);\n                        oDist.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n                    });\n\n                    let otherDesDis = descendBins\n                    .select(`.g-${i}`).each((o, j, oNode)=> {\n\n                        let oHisto = continuousHistogram(o.data.filter(f=> f.index === i)[0].value\n                                    .filter(f=> (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1])));\n                        oHisto.maxCount = o.bins[i].maxCount;\n\n                        let oDist = d3.select(oNode[j]).append('g').classed('distribution-too', true);\n                        oDist.data([oHisto])\n                        .append('path')\n                        .attr('d', i === 0 ? mirrorlineGen : lineGen)\n                        .style('stroke', compareColors[i].dark)\n                        .style('fill', compareColors[i].light)\n                        .style('fill-opacity', 0.8);\n                        oDist.attr('transform', i === 0 ? 'translate(0, 0) rotate(90)' : `translate(11, ${dimensions.height}) rotate(-90)`);\n\n                    });\n                  \n                }\n            });\n\n             let nodesFlat = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n            }));\n\n           \n            let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n            }));\n    \n            let selectedNodes = brushedNodes(nodesFlat, notNodes, data, brushedVal, classLabel);\n            let selectedBranch = selectedNodes[0];\n            let secondGrp = selectedNodes[1];\n            let antiSelected = selectedNodes[2];\n            let antiSecond = selectedNodes[3];\n    \n            if(index < 2){\n                let doesItExist = d3.select('#toolbar').selectAll('.brush-span').filter((f, i, n)=> {\n                    return d3.select(n[i]).attr('value') == `${data.bins.groupLabel}-${data.key}`;\n                });\n    \n                if(doesItExist.size() === 0){\n    \n                    d3.select(this).select('.selection')\n                    .style('fill', `${brushColors[index][0]}`)\n                    .attr('stroke', `${brushColors[index][0]}`)\n                    .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                    .attr('stroke', brushColors[index][1])\n                    .attr('stroke-width', 2);\n    \n                    let badge = d3.select('#toolbar')\n                        .append('span')\n                        .attr('class', classLabel)\n                        .attr('id', classLabel)\n                        .classed('brush-span', true)\n                        .classed(`${data.bins.groupLabel}`, true)\n                        .classed('badge badge-secondary', true)\n                        .style('background', brushColors[index][0])\n                        .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                        .datum({brush:this, nodes: nodes})\n                        .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n    \n                    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        let classy = index === 0 ? 'one' : 'two';\n                        \n                        d3.select(d.brush).call(brush.move, null);\n                        d3.select(n[i].parentNode).remove();\n                        d3.select(d.brush).select('.overlay').attr('stroke-width', 0);\n                        descendBins.selectAll('.distribution-too').remove();\n                        otherBins.selectAll('.distribution-too').remove();\n                        d3.select(d.brush.parentNode).selectAll('.distribution-too').remove();\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed-second', false);\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed', false);\n                    });\n    \n                }else{\n\n                    doesItExist.text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                    let xOut = doesItExist.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                        d3.select(n[i].parentNode).remove();\n                    });\n                   \n                    d3.select(doesItExist.datum()).call(brush.move, null);\n                    d3.select(doesItExist.datum()).select('.overlay').attr('stroke-width', 0)\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll(`${data.bins.groupLabel}`)\n                        .selectAll('.second-branch')\n                        .classed('second-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.selected-branch')\n                        .classed('selected-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-second')\n                        .classed('anti-brushed-second', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-branch')\n                        .classed('anti-brushed-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n    \n                    let label = doesItExist.attr('id');\n    \n                    index = label === 'one' ? 0 : 1;\n    \n                    d3.select(this).select('.selection')\n                        .style('fill', `${brushColors[index][0]}`)\n                        .attr('stroke', `${brushColors[index][0]}`)\n                        .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                        .attr('stroke', brushColors[index][1])\n                        .attr('stroke-width', 2);\n\n                        let nodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n                        }))\n                       \n                        let notNodes = data.data.flatMap(m=> m.value.filter(f=> {\n                            return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n                        }));\n\n                        doesItExist.datum({brush: this, nodes: nodes})\n    \n                        brushedNodes(nodes, notNodes, data, brushedVal, label);\n                    \n                }\n    \n            }else{\n    \n                d3.select('#toolbar').selectAll('.brush-span').filter((f, i)=> i === 0).remove();\n    \n                let classLabel = colorBool === 0 ? 'one': 'two';\n    \n                d3.select('#toolbar')\n                    .append('span')\n                    .attr('class', )\n                    .classed('brush-span', true)\n                    .classed('badge badge-secondary', true)\n                    .style('background', brushColors[colorBool][0])\n                    .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                    .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n\n                colorBool === 0 ? colorBool = 1 : colorBool = 0;\n                secondGrp.classed(classLabel, true);\n                selectedBranch.classed(classLabel, true);\n            }\n    \n        }else{\n            d3.selectAll(`.${data.key}.brushed-branch`).classed('brushed-branch', false);\n            d3.selectAll(`.${data.key}.brushed-second`).classed('brushed-second', false);\n        }\n     }\n    \n\n    ///OBSERVED/////\n    let observedWrap = binnedWrap.append('g').classed('observed', true);\n    observedWrap.attr('transform', (d, i, n)=> {\n        return 'translate('+ (dimensions.predictedWidth + 150) +', 0)'});\n\n    ////OBSERVED CONTIUOUS/////\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n    contOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, -15)`);\n\n    let compContGroups = contOb.selectAll('g.cont-groups').data(d=> d.leafData.bins).join('g').classed('cont-groups', true);\n\n    let contBars = compContGroups.selectAll('g.ob-bars').data(d=> {\n        let value = d.value.map(m=> {\n            m.index = d.index;\n            return m;\n        });\n        return value}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(dimensions.height - dimensions.margin), 0])\n        return y(Object.keys(d).length - 2)\n    })\n    .attr('fill', d=> compareColors[d.index].light).attr('fill-opacity', .4);\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let y = d3.scaleLinear()\n            .domain([0, Object.keys(d).length])\n            .range([(dimensions.height - dimensions.margin), 0]);\n\n     let movey = dimensions.height - y(Object.keys(d).length - 2);\n     return 'translate('+(movex * i)+', '+movey+')'});\n\n contOb.each((d, i, nodes)=> {\n\n     let xvalues = d.leafData.data[0].value.map(m=> {\n         return +m.values.realVal});\n     let x = d3.scaleLinear()\n         .domain([d3.min(xvalues), d3.max(xvalues)])\n         .range([0, dimensions.observedWidth]);\n\n     let y = d3.scaleLinear()\n         .domain([0, d3.max(d.leafData.bins[0].value.map(b=> Object.keys(b).length)) - 2])\n         .range([(dimensions.height - dimensions.margin), 0]);\n     \n     d3.select(nodes[i])\n         .append('g')\n         .classed('x-axis', true)\n         .call(d3.axisBottom(x))\n         .attr('transform', 'translate(0, '+dimensions.height+')')\n\n     d3.select(nodes[i]).append('g')\n         .classed('y-axis', true)\n         .call(d3.axisLeft(y).ticks(4))\n         .attr('transform', 'translate(0, '+dimensions.margin+')');\n\n         d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n         d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n\n         d3.select(nodes[i])\n         .append('g')\n         .classed('x-axis-label', true)\n         .append('text').text('Frequency')\n         .attr('transform', `translate(-20, ${dimensions.height- 10}) rotate(-90)`)\n         .style('font-size', '10px');\n });\n \n        ////Observed Discrete////\n        let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n        discOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, 5)`);\n\n        let compDisGroups = discOb.selectAll('g.dis-groups').data(d=> d.leafData.bins).join('g').classed('dis-groups', true);\n\n        let discBars = compDisGroups.selectAll('g.ob-bars').data(d=> {\n            return d.keys.map((key, i)=>{\n                return {state: key, data: d.value[i], max: d3.sum(d.value[i].map(b=> b.length)), index: d.index}\n            });\n        }).join('g').classed('ob-bars', true);\n        let dRects = discBars.append('rect').attr('width', (d, i, n)=> {\n            let width = dimensions.observedWidth / n.length;\n            return width/2;\n        }).attr('height', (d, i, n)=> {\n           \n            let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10): 0;\n            let y = d3.scaleLinear().domain([0, d.max]).range([0, (height)])\n            return y(d.data.length);\n        }).attr('fill', (d, i) => {\n            return d.data[0] != undefined ? d.data[0].color : '#fff';\n        }).attr('opacity', 0.3);\n\n        discBars.attr('transform', (d, i, n)=> {\n            let movex = dimensions.observedWidth / n.length;\n            let offSet = movex / 2\n            let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10) : 0;\n            let y = d3.scaleLinear().domain([0, d.max]).range([0, (height-5)])\n            let movey = (height-2) - y(d.data.length);\n            let finalMove = d.index === 0 ? 'translate('+(movex * i)+', '+movey+')' : 'translate('+(offSet+(movex * i))+', '+movey+')';\n            return finalMove;\n        })\n\n        dRects.on('mouseover', (d, i, n)=> {\n            let state = d3.select('g.'+d[0].label).selectAll('g.state');\n            state.filter(f=> {\n                return f[0].state === d[0].winState}).attr('opacity', 0.8);\n            state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n            d3.select(n[i]).attr('opacity', 0.9);\n        }).on('mouseout', (d, i, n)=> {\n            d3.select(n[i]).attr('opacity', 0.3);\n            let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n        });\n\n        discOb.each((d, i, nodes)=> {\n                \n                let xPoint = d3.scalePoint().domain(d.stateKeys).range([0, dimensions.observedWidth]).padding(.6)\n                let height = d.stateKeys ? (d.stateKeys.length * dimensions.squareDim - 10) : 0;\n                let y = d3.scaleLinear().domain([0, d.leafData.data.length]).range([(height), 0]);\n                d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4))//.attr('transform', 'translate(0, '+height+')');\n                d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n\n                d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n                d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n        });\n\n\n\n    }\n\n}","import * as d3 from \"d3\";\nimport { renderDistStructure, binGroups, continuousHistogram, mirrorlineGen } from './distributionView';\n\n\nexport let brushArray = [];\n\nexport const brushColors = [\n    '#FE6D5E', '#85C1E9', '#A3E4D7' \n]\n\nexport function addBrushables(bins, continDist){\n\n    let startPos = 0;\n    let endPos = 0;\n    let brushOb = null;\n    let mouseBool = false;\n\n    bins.on('mousedown', (d, i, n)=> {\n\n        mouseBool = true;\n\n        let scale = d3.scaleLinear().domain(d.domain).range([0, 80]);\n        \n        let ind = brushArray.length + 1;\n        let rectGroup = d3.select(n[i]).append('g').classed(`group-${ind}`, true);\n        let dragPos = d3.mouse(n[i]);\n        startPos = dragPos[1];\n        brushOb = {key: `${d.key}-${d.index}-${ind}`, trait:d.key, brush: rectGroup, 'scale': scale, color: brushColors[ind-1]};\n        brushArray.push(brushOb);\n        \n        let rect = rectGroup.append('rect')\n            .classed(`rect-${ind}`, true)\n            .attr('height', 10)\n            .attr('width', 10)\n            .attr('opacity', 0.5)\n            .attr('fill', brushOb.color)\n            .attr('transform', `translate(0, ${dragPos[1]})`);\n    });\n\n    bins.on('mousemove', (d, i, n)=> {\n\n        let dragPos = d3.mouse(n[i]);\n        if(mouseBool === true){\n\n            brushOb.brush.select('rect').attr('height', (dragPos[1] - startPos));\n\n        }\n    })\n\n    bins.on('mouseup', (d, i, n)=> {\n       \n        mouseBool = false;\n        let dragPos = d3.mouse(n[i]);\n        endPos = dragPos[1];\n\n        var zero = d3.format(\".3n\");\n       \n        console.log('dddd',d)\n\n        let filterData = d.data.filter(f=> f.values.realVal >= brushOb.scale.invert(endPos) && f.values.realVal <= brushOb.scale.invert(startPos));\n        let test = continuousHistogram(filterData);\n\n        test.maxCount = d3.sum(d.bins.map(m=> m.length));\n\n        //////EXPERIMENTING WITH BRUSH DRAW DISTRIBUTIONS////\n        let brushedDist = d3.select(n[i].parentNode)\n            .selectAll('g.distribution-too')\n            .data([test])\n            .join('g')\n            .classed('distribution-too', true);\n\n        brushedDist\n        .attr('transform', 'translate(0, 0) rotate(90)');\n\n        let path = brushedDist.append('path')\n        .attr('d', mirrorlineGen);\n\n        path.attr(\"fill\", brushOb.color)\n        .attr('fill-opacity', 0.5)\n            .style('stroke', brushOb.color);\n\n        \n        let otherBins = findNodesOtherTraits(d, brushOb, filterData, continDist);\n        let descendBins = findDescendValues(d, brushOb, [endPos, startPos], continDist);\n       \n        let treenodeOb = highlightTree(filterData, descendBins, brushOb)\n        addBadge(brushOb, [zero(brushOb.scale.invert(endPos)), zero(brushOb.scale.invert(startPos))], path, otherBins, descendBins, treenodeOb);\n      \n    });\n}\n\nfunction highlightTree(nodes, descendBins, brushOb){\n    let treenodes = d3.select('#sidebar').select('.tree-svg').selectAll('.node').filter(f=> {\n        let names = nodes.map(m=> m.node);\n        return names.indexOf(f.data.node) > -1});\n    let descendNodes = d3.select('#sidebar').select('.tree-svg').selectAll('.node').filter(f=> {\n        let names = descendBins.data().flatMap(m=> m.data.map(d=> d.node));\n        return names.indexOf(f.data.node) > -1});\n    let descendLinks = d3.select('#sidebar').select('.tree-svg').selectAll('.link').filter(f=> {\n        let names = descendBins.data().flatMap(m=> m.data.map(d=> d.node));\n        return names.indexOf(f.data.node) > -1});\n    treenodes.select('circle').attr('fill', brushOb.color).attr('r', 5).style('stroke-width', '1px').style('stroke', 'gray');\n    descendNodes.select('circle').attr('fill', brushOb.color).attr('r', 5);\n    //descendLinks.style('stroke', brushOb.color);\n    return {'treenodes': treenodes, 'descendNodes':descendNodes, 'descendLinks': descendLinks};\n}\n\nfunction findNodesOtherTraits(data, brushOb, filterData, continDist){\n\n    let nodeNames = filterData.map(m=> m.node);\n\n    let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n\n    otherBins.each((b, i, n)=> {\n            \n        let test = continuousHistogram(b.data.filter(f=> nodeNames.indexOf(f.node) > -1) );\n           \n        test.maxCount = d3.sum(b.bins.map(m=> m.length));\n          \n        let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n            .data([test])\n            .join('g')\n            .classed('distribution-too', true);\n\n        otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n        let path = otherDist.append('path').attr('d', mirrorlineGen);\n        path.attr(\"fill\", brushOb.color).attr('fill-opacity', 0.5)\n            .style('stroke', brushOb.color);\n\n    });\n\n    return otherBins;\n}\nfunction findDescendValues(data, brushOb, valueRange, continDist){\n\n    let descendBins = continDist.filter(f=> {\n        return (f.index > data.index) && (f.key === data.key)});\n\n    descendBins.each((b, i, n)=> {\n\n        let test = b.data.filter(f=> {\n            return (f.values.realVal > brushOb.scale.invert(valueRange[0])) && (f.values.realVal < brushOb.scale.invert(valueRange[1]));\n            });\n\n         let testH = continuousHistogram(test);\n       \n         testH.maxCount = d3.sum(b.bins.map(m=> m.length));\n      \n        let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n        .data([testH])\n        .join('g')\n        .classed('distribution-too', true);\n\n        otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n        let path = otherDist.append('path').attr('d', mirrorlineGen);\n        path.attr(\"fill\", brushOb.color).attr('fill-opacity', 0.5)\n        .style('stroke', brushOb.color);\n    });\n\n    return descendBins;\n\n}\n\nfunction addBadge(brushOb, brushedDomain, dist, otherBins, descendBins, treenodeOb){\n    d3.select('#toolbar').append()\n\n    let badge = d3.select('#toolbar')\n    .append('span')\n    .attr('id', brushOb.key)\n    .classed('brush-span', true)\n    .classed('badge badge-secondary', true)\n    .style('background', brushOb.color)\n    .datum({brush:brushOb})\n    .text(`${brushOb.trait}:${brushedDomain[0]} - ${brushedDomain[1]}`);\n  \n    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n    xOut.on('click', (d, i, n)=> {\n        \n        removeBrush(d.brush);\n        d3.select(n[i].parentNode).remove();\n        dist.remove();\n        otherBins.selectAll('.distribution-too').remove();\n        descendBins.selectAll('.distribution-too').remove();\n        treenodeOb.treenodes.selectAll('circle').attr('fill', 'gray').attr('r', 3).style('stroke-width', '0px');\n        treenodeOb.descendNodes.selectAll('circle').attr('fill', 'gray').attr('r', 3);\n        treenodeOb.descendLinks.style('stroke', 'gray');\n    \n    });\n}\n\nfunction removeBrush(brushOb){\n\n    brushOb.brush.remove();\n    brushArray = brushArray.filter(f=> f.key != brushOb.key);\n\n}","import '../styles/index.scss';\nimport {formatAttributeData, maxTimeKeeper} from './dataFormat';\nimport * as d3 from \"d3\";\nimport {filterMaster, getLatestData, getScales} from './filterComponent';\nimport { pullPath, calculateMovingAverage } from './pathCalc';\nimport { renderTree } from './sidebarComponent';\nimport {renderDistributionComparison} from './compare';\nimport { addBrushables } from './brusherMaker';\n\nexport const dimensions = {\n    height: 80,\n    observedWidth : 200,\n    predictedWidth : 900,\n    margin : 20,\n    squareDim : 15,\n    timeRange: 895\n}\n\nexport const brushColors = [\n    ['#64B5F6', '#F39C12'],\n    ['#6A1B9A', '#FDD835'],\n]\n\nexport const defaultBarColor = '#baaaaa'//#DCD4D4';\n\nexport let colorBool = 0;\nexport const selectedClades = [[]];\n\nexport function groupDistributions(pathData, mainDiv, groupAttr){\n\n    let scales = getScales();\n\n    let groupKeys = scales.filter(f=> f.field === groupAttr)[0].scales.map(s=> s.scaleName)\n  \n    let branchBinCount = d3.median(pathData.map(m=> m.length)) - d3.min(pathData.map(m=> m.length))\n   \n    let pathGroups = groupKeys.map(group => {\n        let paths = pathData.filter(path => {\n            return group.includes(path[path.length - 1].attributes[groupAttr].values[groupAttr]);\n        });\n\n        let groupBins = binGroups(paths, group, scales, branchBinCount);\n        return {'label': group, 'paths': paths, 'groupBins': groupBins}\n    });\n\n    renderDistStructure(mainDiv, pathGroups);\n}\nexport function binGroups(pathData, groupLabel, scales, branchCount){\n\n  \n    let attrHide = filterMaster.filter(f=> f.type === 'hide-attribute').map(m=> m.attribute);\n    \n    let keys = scales.map(s=> s.field).filter(f=> attrHide.indexOf(f) === -1);\n\n    let newNormed = [...pathData];\n    let keysToHide = attrHide.length > 0 ? scales.filter(f=> attrHide.indexOf(f.field) === -1).map(m=> m.field) : null;\n\n    formatAttributeData(newNormed, scales, keysToHide);\n  \n    let max = maxTimeKeeper[maxTimeKeeper.length - 1]\n\n    let normBins = new Array(branchCount)\n        .fill().map((m, i)=> {\n            let step = max / branchCount;\n            let base = (i * step);\n            let top = ((i + 1)* step);\n            return {'base': base, 'top': top, 'binI': i , 'step':step}\n        });\n\n    let internalNodes = newNormed.map(path => path.filter(node=> (node.leaf != true) && (node.root != true)));\n    let leafNodes = newNormed.flatMap(path => path.filter(node=> node.leaf === true));\n    let rootNodes = newNormed.flatMap(path => path.filter(node=> node.root === true));\n\n    normBins.map((n, i)=> {\n       \n        let edges = internalNodes.flatMap(path => path.filter(node=> {\n            return node.combLength > n.base && node.combLength <= n.top;\n        } ));\n\n        let nodeSet = [...new Set(edges.map(e=> e.node))].map(m=> edges.filter(f=> f.node === m)[0]);\n\n        n.data = nodeSet.map(m=> {\n            m.range = [...new Set(edges.map(e=> e.node))].length;\n            return m;\n        });\n\n        return n;\n    });\n\n    let sortedBins = keys.map(key=> {\n        let scale = scales.filter(f=> f.field === key)[0];\n    \n        let mapNorm = normBins.map(bin => {\n            if(bin.data.length > 0){\n                bin.fData = bin.data.map(d=> {\n                    let attrib = d.attributes[key];\n                    attrib.node = d.node;\n                    return attrib;\n                })\n            }else{\n                bin.fData = [];\n            }\n            return {'data': bin.fData, 'range': [bin.base, bin.top], 'index': bin.binI, 'key': key };\n        });\n       \n        let leafAttr = leafNodes.map(m=> m.attributes[key]);\n        let leafData = {'data': leafAttr};\n   \n        if(scale.type === 'continuous'){\n            let x = d3.scaleLinear().domain([scale.min, scale.max]).range([0, dimensions.height]);\n    \n            let histogram = d3.histogram()\n            .value(function(d) { return d.values.realVal; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(20)); \n  \n            mapNorm.map((n, i, nodeArray)=> {\n                n.type = scale.type;\n                n.bins = histogram(n.data);\n                n.domain = [scale.max, scale.min];\n                n.bins.count = branchCount;\n                n.bins.groupLabel = groupLabel;\n\n                if(d3.mean(n.bins.map(m=> m.length)) === 0){\n                    if(i === 0){\n                        n.bins = histogram(rootNodes.map(m=> m.attributes[key]));\n                        n.data = rootNodes.map(m=> m.attributes[key]);\n                        n.bins.count = branchCount;\n                    }else{\n                        n.bins = nodeArray[i-1].bins;\n                        n.data = nodeArray[i-1].data;\n                    }\n                }\n                return n;\n            });\n\n            //Histogram for observed////\n            let maxO = d3.max(leafAttr.flatMap(v=> +v.values.realVal));\n            let minO = d3.min(leafAttr.flatMap(v=> +v.values.realVal));\n            let xO = d3.scaleLinear().domain([minO, maxO]).range([0, dimensions.height]);\n\n            let histogramO = d3.histogram()\n            .value(function(d) { \n                return +d.values.realVal; })  \n            .domain(xO.domain())  \n            .thresholds(xO.ticks(20)); \n\n            leafData.bins = histogramO(leafAttr);\n      \n            let newK = {'key': key, \n                    'branches': [...mapNorm], \n                    'type': scale.type, \n                    'leafData': leafData, \n                    'rootData': rootNodes.map(m=> m.attributes[key])[0]}\n   \n            return newK;\n\n        }else{\n            //HANDLING DISCRETE//\n            let states = leafAttr[0].scales.scales;\n            let stateKeys = states[0].state? states.map(s=> s.state) : states.map(s=> s.scaleName);\n          \n            let rootNode = rootNodes[0].attributes[key]\n            rootNode.bins = d3.entries(rootNodes[0].attributes[key].values).map(m=> {       \n                let states = [{'state': m.key, 'value':m.value}];\n                return {state: states, branchCount:branchCount, color : scale.stateColors.filter(f=> f.state === m.key)[0], max:80};\n               });\n            \n            mapNorm.bins = null;\n            leafData.bins = states.map(s=> {\n                return leafAttr.filter(f=> s.scaleName.includes(f.states.state))});\n   \n            let y = d3.scaleLinear().domain([0, 1]).range([0, 40]);\n\n            let histogram = d3.histogram()\n                .value(function(d) { return d.value; })  \n                .domain(y.domain())  \n                .thresholds(y.ticks(10)); \n  \n            mapNorm.map((n, i, nodeArray)=> {\n                let colors = scale.stateColors;\n                n.bins = stateKeys.map(state=> {\n                    let test = n.data.flatMap(m=> Object.entries(m.values).filter(f=> f[0] === state))\n                    .map(m=> {\n                        return {'state': m[0], 'value':m[1]};\n                    });\n                    \n                    return {state: test, branchCount:branchCount, histogram: histogram(test), color : colors.filter(f=> f.state === state)[0], max:80};\n                });\n                //IF WE DONT HAVE ANY BRANCHES< WE ASSUME THAT THEY ARE THE SAME AS THE PREVIOUS\n                if(n.bins[0].state.length === 0){\n                    if(i === 0){\n                        n.bins = d3.entries(rootNode.values).map(m=> {\n                            let histo = histogram([+m.value]).map(h=>{\n                                if(m.value <= h.x1 && m.value >= h.x0){\n                                    h.push(+m.value);\n                                }\n                                return h;\n                             });\n                             let states = [{'state': m.key, 'value':m.value}];\n                             return {state: states, branchCount:branchCount, histogram: histo, color:colors.filter(f=> f.state === m.key)[0], max:80};\n                            });\n                        \n                    }else{\n                        n.bins = nodeArray[i-1].bins;\n                    }\n                }\n\n                n.type = scale.type;\n                return n;\n            });\n\n            let newK = {'key': key, \n                        'branches': [...mapNorm], \n                        'type': scale.type, \n                        'leafData': leafData, \n                        'rootData': rootNodes.map(m=> m.attributes[key])[0],\n                        'stateKeys': stateKeys,\n                        'maxCount': d3.max(mapNorm.map(n=> n.data.length)),\n                    }\n            return newK;\n        }\n    });\n\n    sortedBins.group = groupLabel;\n    sortedBins.branchCount = branchCount;\n    sortedBins.keys = keys;\n    return sortedBins;\n}\nexport function drawBranchPointDistribution(data, svg){\n\n    let branchBar = svg.append('g').classed('branch-bar', true);\n    branchBar.attr('transform', 'translate(150, 0)')\n\n    branchBar.append('rect').classed('point-dis-rect', true)\n        .attr('height', 25)\n        .attr('x', -10)\n        .attr('y', -10)\n       .attr('fill', 'none');\n\n    let binWrap = branchBar.append('g').attr('transform', 'translate(115, -10)');\n\n    branchBar.append('line')\n        .attr('y1', 2)\n        .attr('y2', 2)\n        .attr('x1', '100')\n        .attr('x2', dimensions.predictedWidth)\n        .attr('stroke', 'gray')\n        .attr('stroke-width', .25);\n\n    branchBar.append('text').text('Root').attr('transform', 'translate(80, 7)');\n    let leafLabel = branchBar.append('g').classed('leaf-label', true).attr('transform', `translate(${dimensions.predictedWidth + 200}, 7)`);\n    leafLabel.append('text').text('Leaves');\n\n    let nodeLengthArray = [];\n    let nodeDuplicateCheck = [];\n\n    data.paths.map(path=> {\n        path.filter(n=> n.leaf != true).map(node=> {\n            if(nodeDuplicateCheck.indexOf(node.node) == -1){\n                nodeDuplicateCheck.push(node.node);\n                nodeLengthArray.push({'node': node.node, 'eMove': node.combLength });\n            }\n        })\n    });\n\n    let bPointScale = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.timeRange]);\n    let pointGroups = branchBar.selectAll('g.branch-points').data(nodeLengthArray)\n        .join('g').attr('class', (d, i)=> d.node).classed('branch-points', true);\n\n    pointGroups.attr('transform', (d, i) => {\n        return `translate(${(115 + bPointScale(d.eMove))}, 0)`});\n    pointGroups.append('circle').attr('r', 5).attr('fill', '#fff').attr('opacity', 0.5);\n\n    let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.timeRange]);\n    \n    let binsRects = binWrap\n        .selectAll('rect.bin')\n        .data(data.groupBins[0].branches.map(m=> m.range))\n        .join('rect')\n        .classed('bin', true);\n\n    binsRects.attr('width', (d, i, n)=> {\n        return x(d[1]) - x(d[0]);\n    }).attr('height', 20);\n\n    binsRects.attr('transform', (d, i, n)=> {\n        let step = x(d[1]) - x(d[0]);\n        return `translate(${step*i},0)`});\n\n    binsRects.attr('fill', 'gray').attr('stroke-width', 2).attr('stroke', 'white');\n\n    let axis = d3.axisBottom(x);\n    let axGroup = branchBar.append('g').call(axis);\n    axGroup.attr('transform', 'translate(113, 10)');\n    axGroup.select('path').attr('stroke-width', 0);\n\n    return branchBar;\n}\nexport function drawGroupLabels(pathData, svg, groupLabel){\n\n    let leafNames = pathData[0].leafData.data.map(m=> m.node);\n    let nodeNames = getLatestData().filter(f=> leafNames.indexOf(f[f.length - 1].node) > -1).flatMap(fl=> fl.map(m=> m.node));\n\n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n\n    let cladeLabel = svg.append('g').classed('clade-label', true).attr('transform', 'translate(10, 0)');\n    cladeLabel.append('rect')\n        .attr('width', 50)\n        .attr('height', (pathData.keys.length * (dimensions.height+ 15)))\n        .attr('fill', 'gray')\n        .style('opacity', 0.2)\n        .on('mouseover', (d, i)=>{\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.filter(f=> {\n                return nodeNames.indexOf(f.data.node) > -1;\n            }).classed('hover clade', true);\n        \n        treeLinks.filter(f=> {\n            return nodeNames.indexOf(f.data.node) > -1;\n        }).classed('hover clade', true);\n\n        let species = d.paths.map(m=> m[m.length - 1].label);\n        }).on('mouseout', (d, i)=> {\n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n            let treeLinks  = d3.select('#sidebar').selectAll('.link');\n            treeNode.classed('hover clade', false);\n            treeLinks.classed('hover clade', false);\n        });\n\n    cladeLabel.append('text').text(d=> d.label)\n    .style('text-anchor', 'middle')\n    .attr('transform', `translate(23, ${(shownAttributes.length * (dimensions.height+ 15)/2)}), rotate(-90)`);\n\n    return cladeLabel;\n}\n/**\n * \n * @param {*} mainDiv \n * @param {*} pathGroups \n */\nexport async function renderDistStructure(mainDiv, pathGroups){\n\n    let compareTooltipFlag = false;\n   \n    let shownAttributes = d3.select('#attribute-show').selectAll('input').filter((f, i, n)=> n[i].checked === true).data();\n   \n    let groupWrap = mainDiv.append('div').attr('id', 'summary-view');\n    let groupDivs = groupWrap.selectAll('.group-div').data(pathGroups).join('div').classed('group-div', true);\n\n    groupDivs.each((d, i, node)=> {\n\n       let filteredAttributes = d.groupBins.filter(f=> shownAttributes.indexOf(f.key) > -1);\n\n        let group = d3.select(node[i]);\n        group.classed(d.label, true);\n        group.style('text-align', 'center');\n        group.append('text').text(d.label);\n        group.append('text').text(` : ${d.paths.length} Paths` );\n\n        //////Starting something new/////\n        let svg = group.append('svg');\n        svg.attr('class', 'main-summary-view');\n        svg.attr('id', `${d.label}-svg`);\n        svg.attr('height', (shownAttributes.length * (dimensions.height + 5))+ 50);\n    \n        let branchBar = drawBranchPointDistribution(d, svg);\n        branchBar.attr('transform', 'translate(55, 10)');\n    \n        let branchScale = d3.scaleLinear().domain([0, d.groupBins.branchCount]).range([0, dimensions.timeRange]);\n        let pointGroups = branchBar.selectAll('g.branch-points');\n      \n        let wrap = svg.append('g').classed('summary-wrapper', true);\n        wrap.attr('transform', 'translate(70, 50)');\n    \n        let binnedWrap = wrap.selectAll('.attr-wrap').data(filteredAttributes).join('g').attr('class', d=> d.key + ' attr-wrap');\n    \n        binnedWrap.attr('transform', (d, i, n)=>  {\n                if(i === 0){\n                    return 'translate(0,0)';\n                }else{\n                    let selected = d3.selectAll(n).filter((f, j)=>j < i).data();\n                    let sum = d3.sum(selected.flatMap(s=> s.type === 'continuous'? dimensions.height+5 : (s.stateKeys.length*(dimensions.squareDim+4))));\n                    d.sum = sum;\n                    return `translate(0, ${sum})`;\n                }\n        });\n\n        let label = binnedWrap.append('text')\n        .text(d=> d.key);\n\n        label.filter(f=> f.type === 'continuous')\n        .attr('y', 40)\n        .attr('x', 80)\n        .style('text-anchor', 'end')\n        .style('font-size', 11);\n\n        label.filter(f=> f.type === 'discrete')\n        .attr('y', (d, i)=> 3)\n        .attr('x', d=> -((d.stateKeys.length)*(dimensions.squareDim)/2))\n        .style('text-anchor', 'middle')\n        .style('font-size', 11)\n        .attr('transform', 'rotate(-90)');\n    \n        let groupLabelBars = drawGroupLabels(d.groupBins, svg, d.label);\n        groupLabelBars.on('click', (d, i, n)=> {\n            if(compareTooltipFlag){\n                compareTooltipFlag = false;\n                d3.select(\"#compare-tooltip\").classed(\"hidden\", true);\n            }else{\n                compareTooltipFlag = true;\n                d3.select(\"#compare-tooltip\")\n                    .style(\"left\", (d3.event.pageX) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\")\n                    .select(\"#value\")\n                    .text(d.node);\n\n                d3.select(\"#compare-tooltip\").classed(\"hidden\", false);\n                d3.select('#select-for-compare').on('click', ()=> {\n\n                    compareTooltipFlag = false;\n                    d3.select(\"#compare-tooltip\").classed(\"hidden\", true);\n                    d3.select(n[i]).select('rect').attr('fill', '#F5B041');\n\n                    selectedClades[selectedClades.length - 1].push(Object.assign({},d));\n                    if(selectedClades[selectedClades.length - 1].length > 1){\n                        mainDiv.selectAll('*').remove();\n                        mainDiv.select('#compare-wrap').remove();\n                        \n                        renderDistributionComparison(mainDiv, selectedClades[selectedClades.length - 1], branchScale);\n                    }\n                });\n            }\n        });\n           \n        return renderDistibutions(binnedWrap, branchScale, pointGroups);\n    });\n}\n\n/**\n * \n * @param {*} binnedWrap \n * @param {*} branchScale \n * @param {*} pointGroups \n */\n\nexport function renderDistibutions(binnedWrap, branchScale, pointGroups){\n\n    let predictedWrap = binnedWrap.append('g').classed('predicted', true);\n    predictedWrap.attr('transform', 'translate(35, 0)');\n    predictedWrap.filter(f=> f.type === 'discrete').append('g').classed('win-line', true);\n\n    //ROOT RENDERING\n    let root = predictedWrap.selectAll('g.root').data(d=> {\n        return [d.rootData]}).join('g').classed('root', true);\n    root.attr('transform', `translate(50,0)`);\n\n    let contRoot = root.filter(f=> f.type === \"continuous\");\n    contRoot.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 12)\n        .attr('fill', '#fff')\n        .style('stroke-width', '0.5px')\n        .style('stroke', 'black');\n\n    let rootRange = contRoot.append('rect')\n        .attr('width', 12)\n        .attr('height', d=> {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            return newy(d.values.lowerCI95) - newy(+d.values.upperCI95);\n        }).attr('transform', (d, i) => {\n            let newy = d.scales.yScale;\n            newy.range([(dimensions.height - 5), 0]);\n            return 'translate(0,'+newy(+d.values.upperCI95)+')';\n        }).style('opacity', 0.5).attr('fill', defaultBarColor);\n\n    let rootAv = contRoot.append('rect').attr('width', 12).attr('height', 3);\n    \n    rootAv.attr('transform', (d, i) => {\n        let newy = d.scales.yScale;\n        newy.range([dimensions.height, 0]);\n        let mean = +d.values.realVal;\n        return 'translate(0,'+newy(mean)+')';\n    }).attr('fill', '#004573');\n\n    // Discrete Root\n    let disRoot = root.filter(f=> f.type === \"discrete\");\n    let rootStateGroups = disRoot.selectAll('g.root-state-groups').data(d=> {\n        return d.bins}).join('g').classed('root-state-groups', true);\n\n    rootStateGroups.append('text')\n        .text((d, i)=> d.color.state)\n        .attr('y', 10)\n        .attr('x', -3)\n        .style('font-size', 10)\n        .style('text-anchor', 'end');\n\n    rootStateGroups.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n\n    rootStateGroups.append('rect')\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim)\n        .attr('fill', '#fff').attr('opacity', 1);\n\n    let rootRects = rootStateGroups.append('rect')\n        .classed('color-rect', true)\n        .attr('height', dimensions.squareDim)\n        .attr('width', dimensions.squareDim);\n\n    rootRects.attr('fill', (d, i)=> {\n            return `rgba(89, 91, 101, ${d.state[0].value})`;\n        }).attr('stroke-width', 0.5).attr('stroke', `rgba(200, 203, 219, .9)`);\n\n    let winStateRoot = disRoot.selectAll('g.root-state-groups')\n        .filter((f, j, n)=>{\n            let maxVal = d3.max(d3.selectAll(n).data().map(m=> m.state[0].value));\n            return f.color.state === d3.selectAll(n).data().filter(m=> m.state[0].value === maxVal)[0].color.state;\n        }).classed('win', true);\n\n    winStateRoot.select('rect.color-rect').attr('fill', (c, i)=> {\n            return c.color.color;\n        }).attr('opacity', (c)=>{\n            let sum = d3.sum(c.state.flatMap(s=> s.value));\n            return sum/c.state.length;\n        });\n\n    /////BRANCHES\n    let branchGroup = predictedWrap.selectAll('g.branch-bin').data(d=> {\n        return d.branches}).join('g').classed('branch-bin', true);\n\n    branchGroup.filter(f=> f.type === 'continuous').attr('transform', (d, i, n)=> {\n        let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0;\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.timeRange]);\n            return 'translate('+(90 + (branchScale(i)) + x(step)) +', 0)'});\n\n    let discreteDist = branchGroup.filter(f=> f.type === 'discrete');\n\n  \n    \n    /**\n     * Discrete Predicted Render and Events\n     */\n    renderDiscretePredicted(discreteDist);\n\n    discreteDist.attr('transform', (d, i, n)=> {\n        let step = n.length < 11 ? (d.range[1] - d.range[0]) / 5 : 0;\n        let x = d3.scaleLinear().domain([0, maxTimeKeeper[maxTimeKeeper.length - 1]]).range([0, dimensions.timeRange]);\n            return 'translate('+(44 + (branchScale(i)) + x(step)) +', 0)'});\n\n    discreteDist.on('mouseover', (d, i, node)=> {\n       highlightNodesMouseover(d, i, node, pointGroups);\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    //CONTIN PREDICTED\n    let continDist = branchGroup.filter(f=> f.type === 'continuous');\n\n    continDist.on('mouseover', (d, i, node)=> {\n        highlightNodesMouseover(d, i, node, pointGroups);\n    }).on('mouseout', (d, i, node)=> {\n        d3.selectAll(\".branch-points.selected\").classed('selected', false);\n        d3.selectAll('.selected-branch').classed('selected-branch', false);\n        d3.select(node[i]).select('.y-axis').remove();\n    });\n\n    renderContinuousPredicted(continDist);\n\n     //////START BRANCH EXPERIMENT\n     let brush = d3.brushY().extent([[0, 0], [20, dimensions.height]])\n     brush.on('end', brushed);\n\n     let brushSpace = continDist.append(\"g\")\n     .classed('brush-space', true);\n     brushSpace.append('rect').classed('brush-space-rect', true);\n\n     addBrushables(brushSpace, continDist);\n \n     function brushed(){\n\n        let data = d3.select(this.parentNode).data()[0]\n        var s = d3.event.selection;\n        var zero = d3.format(\".3n\");\n\n        let index = d3.select('#toolbar').selectAll('.brush-span').size();\n        let classLabel = index === 0 ? 'one' : 'two';\n    \n        if(s != null){\n            let treeTest = d3.select('#sidebar').selectAll('.node').filter(f=> {\n                return f.data.leaf === true});\n    \n            if(treeTest.empty()){\n                renderTree(d3.select('#sidebar'), null, true);\n            }\n\n            let y = d3.scaleLinear().domain([data.domain[0], data.domain[1]]).range([0, dimensions.height])\n           \n            let attribute = data.key;\n            let brushedVal = [y.invert(s[1]), y.invert(s[0])];\n    \n            let treeNode  = d3.select('#sidebar').selectAll('.node');\n\n            let nodes = data.data.filter(f=> {\n                return (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1]);\n            });\n           \n            let test = continuousHistogram(nodes);\n\n            test.maxCount = d3.sum(data.bins.map(m=> m.length));\n\n            //////EXPERIMENTING WITH BRUSH DRAW DISTRIBUTIONS////\n            let brushedDist = d3.select(this.parentNode)\n                .selectAll('g.distribution-too')\n                .data([test])\n                .join('g')\n                .classed('distribution-too', true);\n\n            brushedDist.attr('transform', 'translate(0, 0) rotate(90)');\n            let path = brushedDist.append('path').attr('d', mirrorlineGen);\n            path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n\n            let nodeNames = nodes.map(m=> m.node);\n\n            let otherBins = continDist.filter(f=> f.index === data.index && f.key != data.key);\n\n            otherBins.each((b, i, n)=> {\n                \n                let test = continuousHistogram(b.data.filter(f=> nodeNames.indexOf(f.node) > -1) );\n               \n                test.maxCount = d3.sum(b.bins.map(m=> m.length));\n              \n                let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n                .data([test])\n                .join('g')\n                .classed('distribution-too', true);\n\n                otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n                let path = otherDist.append('path').attr('d', mirrorlineGen);\n                path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n    \n            });\n\n            let descendBins = continDist.filter(f=> {\n                return (f.index > data.index) && (f.key === data.key)});\n\n            descendBins.each((b, i, n)=> {\n\n                let test = b.data.filter(f=> {\n                    return (f.values.realVal > brushedVal[0]) && (f.values.realVal < brushedVal[1]);\n                    });\n\n                 let testH = continuousHistogram(test);\n               \n                 testH.maxCount = d3.sum(b.bins.map(m=> m.length));\n              \n                let otherDist = d3.select(n[i]).selectAll('g.distribution-too')\n                .data([testH])\n                .join('g')\n                .classed('distribution-too', true);\n\n                otherDist.attr('transform', 'translate(0, 0) rotate(90)');\n                let path = otherDist.append('path').attr('d', mirrorlineGen);\n                path.attr(\"fill\", brushColors[index][0]).attr('fill-opacity', 0.5)\n                .style('stroke', brushColors[index][0]);\n\n            })\n          \n            ////END DISTRIBUTION///\n           \n            let notNodes = data.data.filter(f=> {\n                return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n            });\n\n            let selectedNodes = brushedNodes(nodes, notNodes, data, brushedVal, classLabel);\n            let selectedBranch = selectedNodes[0];\n            let secondGrp = selectedNodes[1];\n            let antiSelected = selectedNodes[2];\n            let antiSecond = selectedNodes[3];\n    \n            if(index < 2){\n    \n                let doesItExist = d3.select('#toolbar').selectAll('.brush-span').filter((f, i, n)=> {\n                    return d3.select(n[i]).attr('value') == `${data.bins.groupLabel}-${data.key}`;\n                });\n    \n                if(doesItExist.size() === 0){\n    \n                    d3.select(this).select('.selection')\n                    .style('fill', `${brushColors[index][0]}`)\n                    .attr('stroke', `${brushColors[index][0]}`)\n                    .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                    .attr('stroke', brushColors[index][1])\n                    .attr('stroke-width', 2);\n    \n                    let badge = d3.select('#toolbar')\n                        .append('span')\n                        .attr('class', classLabel)\n                        .attr('id', classLabel)\n                        .classed('brush-span', true)\n                        .classed(`${data.bins.groupLabel}`, true)\n                        .classed('badge badge-secondary', true)\n                        .style('background', brushColors[index][0])\n                        .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                        .datum({brush:this, nodes: nodes})\n                        .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n    \n                    let xOut = badge.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                       \n                        let classy = index === 0 ? 'one' : 'two';\n                        d3.select(d.brush).call(brush.move, null);\n                        d3.select(n[i].parentNode).remove();\n                        d3.select(d.brush).select('.overlay').attr('stroke-width', 0);\n                        descendBins.selectAll('.distribution-too').remove();\n                        otherBins.selectAll('.distribution-too').remove();\n                        d3.select(d.brush.parentNode).select('.distribution-too').remove();\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed-second', false);\n                        d3.select('#sidebar').selectAll(`.${classy}`).classed('anti-brushed', false);\n                    });\n    \n                }else{\n    \n                    doesItExist.text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                    let xOut = doesItExist.append('i').classed('close fas fa-times', true).style('padding-left', '10px');\n    \n                    xOut.on('click', (d, i, n)=> {\n                        d3.select(d).call(brush.move, null);\n                        d3.select(d).select('.overlay').attr('stroke-width', 0);\n                        d3.select(n[i].parentNode).remove();\n                    });\n                   \n                    d3.select(doesItExist.datum().brush).call(brush.move, null);\n                    d3.select(doesItExist.datum().brush).select('.overlay').attr('stroke-width', 0)\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll(`${data.bins.groupLabel}`)\n                        .selectAll('.second-branch')\n                        .classed('second-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.selected-branch')\n                        .classed('selected-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-second')\n                        .classed('anti-brushed-second', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                        treeNode.selectAll(`.${data.key}`)\n                        .selectAll('.anti-brushed-branch')\n                        .classed('anti-brushed-branch', false)\n                        .classed('one', false)\n                        .classed('two', false)\n                        .classed(`${data.key}`, false);\n    \n                    let label = doesItExist.attr('id');\n    \n                    index = label === 'one' ? 0 : 1;\n    \n                    d3.select(this).select('.selection')\n                        .style('fill', `${brushColors[index][0]}`)\n                        .attr('stroke', `${brushColors[index][0]}`)\n                        .attr('stroke-width', 2);\n    \n                    d3.select(this).select('.overlay')\n                        .attr('stroke', brushColors[index][1])\n                        .attr('stroke-width', 2);\n\n                    let nodes = data.data.filter(f=> {\n                        return (f.values.realVal >= brushedVal[0]) && (f.values.realVal <= brushedVal[1]);\n                    });\n                    let notNodes = data.data.filter(f=> {\n                        return (f.values.realVal < brushedVal[0]) || (f.values.realVal > brushedVal[1]);\n                    });\n                    doesItExist.datum({brush:this, nodes: nodes})\n                    brushedNodes(nodes, notNodes, data, brushedVal, label);\n                    \n                }\n    \n            }else{\n    \n                d3.select('#toolbar').selectAll('.brush-span').filter((f, i)=> i === 0).remove();\n    \n                let classLabel = colorBool === 0 ? 'one': 'two';\n    \n                d3.select('#toolbar')\n                    .append('span')\n                    .attr('class', )\n                    .classed('brush-span', true)\n                    .classed('badge badge-secondary', true)\n                    .style('background', brushColors[colorBool][0])\n                    .attr('value', `${data.bins.groupLabel}-${data.key}`)\n                    .text(`${data.bins.groupLabel}, ${data.key}: ${zero(brushedVal[0])} - ${zero(brushedVal[1])}`);\n                colorBool === 0 ? colorBool = 1 : colorBool = 0;\n                secondGrp.classed(classLabel, true);\n                selectedBranch.classed(classLabel, true);\n            }\n    \n        }else{\n            d3.selectAll(`.${data.key}.brushed-branch`).classed('brushed-branch', false);\n            d3.selectAll(`.${data.key}.brushed-second`).classed('brushed-second', false);\n        }\n     }\n\n     ///OBSERVED/////\n     let observedWrap = binnedWrap.append('g').classed('observed', true);\n     observedWrap.attr('transform', (d, i, n)=> {\n         return 'translate('+ (dimensions.predictedWidth + 150) +', 0)'});\n\n    ////OBSERVED CONTIUOUS/////\n    let contOb = observedWrap.filter(f=> f.type === 'continuous');\n    contOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, -15)`);\n\n    let contBars = contOb.selectAll('g.ob-bars').data(d=> {\n        return d.leafData.bins}).join('g').classed('ob-bars', true);\n\n    let cRects = contBars.append('rect').attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i)=> {\n        let y = d3.scaleLinear().domain([0, Object.keys(d).length]).range([(dimensions.height - dimensions.margin), 0])\n        return y(Object.keys(d).length - 2)\n    })\n    .attr('fill', defaultBarColor).attr('fill-opacity', .5);\n\n    contBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let y = d3.scaleLinear()\n            .domain([0, Object.keys(d).length])\n            .range([(dimensions.height - dimensions.margin), 0]);\n\n        let movey = dimensions.height - y(Object.keys(d).length - 2);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    contOb.each((d, i, nodes)=> {\n\n        let xvalues = d.leafData.data.map(m=> {\n            return +m.values.realVal});\n        let x = d3.scaleLinear()\n            .domain([d3.min(xvalues), d3.max(xvalues)])\n            .range([0, dimensions.observedWidth]);\n\n        let y = d3.scaleLinear()\n            .domain([0, d3.max(d.leafData.bins.map(b=> Object.keys(b).length)) - 2])\n            .range([(dimensions.height - dimensions.margin), 0]);\n        \n        d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis', true)\n            .call(d3.axisBottom(x))\n            .attr('transform', 'translate(0, '+dimensions.height+')')\n\n        d3.select(nodes[i]).append('g')\n            .classed('y-axis', true)\n            .call(d3.axisLeft(y).ticks(4))\n            .attr('transform', 'translate(0, '+dimensions.margin+')');\n\n            d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n            d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n\n            d3.select(nodes[i])\n            .append('g')\n            .classed('x-axis-label', true)\n            .append('text').text('Frequency')\n            .attr('transform', `translate(-20, ${dimensions.height- 10}) rotate(-90)`)\n            .style('font-size', '10px');\n    });\n    \n    ////Observed Discrete////\n    let discOb =  observedWrap.filter(f=> f.type === 'discrete');\n\n    discOb.attr('transform', `translate(${dimensions.predictedWidth + 160}, 5)`)\n    let discBars = discOb.selectAll('g.ob-bars').data(d=> {\n        return d.stateKeys.map((key, i)=>{\n            return {state: key, data: d.leafData.bins[i], max: d3.sum(d.leafData.bins.map(b=> b.length))}\n        });\n    }).join('g').classed('ob-bars', true);\n    let dRects = discBars.append('rect')\n    .attr('width', (d, i, n)=> {\n        let width = dimensions.observedWidth / n.length;\n        return width;\n    }).attr('height', (d, i, n)=> {\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10): 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height)])\n        return y(d.data.length);\n    }).attr('fill', (d, i) => {\n        return d.data[0] != undefined ? d.data[0].color : '#fff';\n    }).attr('opacity', 0.3);\n\n    discBars.attr('transform', (d, i, n)=> {\n        let movex = dimensions.observedWidth / n.length;\n        let height = d.data[0] ? (d.data[0].scales.stateColors.length * dimensions.squareDim - 10) : 0;\n        let y = d3.scaleLinear().domain([0, d.max]).range([0, (height-5)])\n        let movey = (height) - y(d.data.length);\n        return 'translate('+(movex * i)+', '+movey+')'});\n\n    dRects.on('mouseover', (d, i, n)=> {\n        let state = d3.select('g.'+d[0].label).selectAll('g.state');\n        state.filter(f=> {\n            return f[0].state === d[0].winState}).attr('opacity', 0.8);\n        state.filter(f=> f[0].state != d[0].winState).attr('opacity', 0.1);\n        d3.select(n[i]).attr('opacity', 0.9);\n    }).on('mouseout', (d, i, n)=> {\n        d3.select(n[i]).attr('opacity', 0.3);\n        let state = d3.select('g.'+d[0].label).selectAll('g.state').attr('opacity', 0.6);\n    });\n\n    discOb.each((d, i, nodes)=> {\n           \n        let xPoint = d3.scalePoint().domain(d.stateKeys).range([0, dimensions.observedWidth]).padding(.6)\n        let height = d.stateKeys ? (d.stateKeys.length * dimensions.squareDim - 10) : 0;\n        let y = d3.scaleLinear().domain([0, d.leafData.data.length]).range([(height), 0]);\n        d3.select(nodes[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(4))//.attr('transform', 'translate(0, '+height+')');\n        d3.select(nodes[i]).append('g').classed('x-axis', true).call(d3.axisBottom(xPoint)).attr('transform', 'translate(0, '+height+')');\n\n        d3.select(nodes[i]).select('.x-axis').selectAll('text').style('font-size', '8px');\n        d3.select(nodes[i]).select('.y-axis').selectAll('text').style('font-size', '8px');\n    });\n\n}\n\nfunction brushedNodes(nodes, notNodes, data, brushedVal, classLabel){\n   \n    let nodeNames = nodes.map(m=> m.node);\n    let notNodeNames = notNodes.map(m=> m.node);\n\n    let timeNodes = d3.extent(nodes.map(m=> m.combLength));\n    let treeNode = d3.select('#sidebar').selectAll('.node');\n\n    let selectedBranch = treeNode.filter(f=> {\n        return nodeNames.indexOf(f.data.node) > -1;\n    }).classed('brushed-branch', true);\n\n    let notNodeSelectedBranch = treeNode.filter(f=> notNodeNames.indexOf(f.data.node) > -1).classed('anti-brushed', true);\n\n    let test = pullPath([], selectedBranch.data(), [], [], 0);\n    let notTest = pullPath([], notNodeSelectedBranch.data(), [], [], 0);\n\n    let testtest = test.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values.realVal >= brushedVal[0] && f.data.attributes[data.key].values.realVal <= brushedVal[1];\n    }).map(m=> m.data.node);\n\n    let notTestTest = notTest.flatMap(t=> t).filter(f=>{\n        return f.data.attributes[data.key].values.realVal < brushedVal[0] || f.data.attributes[data.key].values.realVal > brushedVal[1];\n    }).map(m=> m.data.node);\n    \n    let secondGrp = treeNode.filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n    let secondLinks = d3.select('#sidebar').selectAll('.link')\n        .filter(f=> (nodeNames.indexOf(f.data.node) === -1)&&(testtest.indexOf(f.data.node) > -1))\n        .classed('brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n    \n    selectedBranch.classed(`${data.key}`, true).classed(classLabel, true).classed('brushed-branch', true);\n   \n    let notNodeSecondGrp = treeNode\n        .filter(f=> (notNodeNames.indexOf(f.data.node) === -1 )&& (notTestTest.indexOf(f.data.node) > -1))\n        .classed('anti-brushed-second', true)\n        .classed(`${data.key}`, true)\n        .classed(classLabel, true);\n\n    let secondAntiLinks = d3.select('#sidebar').selectAll('.link')\n            .filter((f, j)=> (notNodeNames.indexOf(f.data.node) === -1)&&(notTestTest.indexOf(f.data.node) > -1));\n    secondAntiLinks.classed('anti-brushed-second', true).classed(`${data.key}`, true).classed(classLabel, true);\n    notNodeSelectedBranch.classed('anti-brushed', true).classed(classLabel, true).classed(classLabel, true);\n\n    return [selectedBranch, secondGrp, notNodeSelectedBranch, notNodeSecondGrp];\n}\n\nexport function continuousHistogram(data){\n\n    if(data[0]){\n        let x = data[0].yScale;\n        let histogram = d3.histogram()\n                .value(function(d) { return d.values.realVal; })  \n                .domain(x.domain())  \n                .thresholds(x.ticks(20)); \n    \n        return histogram(data);\n    }else{\n        return [];\n    }\n   \n}\n\nexport const mirrorlineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([n.length - 1, 0]).range([0, dimensions.height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = n.maxCount ? n.maxCount : d.maxCount;\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        \n        return x(dat); \n});\n\nexport const lineGen = d3.area()\n    .curve(d3.curveCardinal)\n    .x((d, i, n)=> {\n        let y = d3.scaleLinear().domain([0, n.length - 1]).range([0, dimensions.height]).clamp(true);\n        return y(i); \n    })\n    .y0(d=> {\n        return 0;\n    })\n    .y1((d, i, n)=> {\n        let max = d.maxCount? d.maxCount : d3.sum(n.map(m=> m.length))\n        let dat = d.length;\n        let count = n.count? n.count : 8;\n        let x = d3.scaleLinear().domain([0, max]).range([0, ((dimensions.predictedWidth/count)*.5)]).clamp(true);\n        return x(dat); \n    });\n\nfunction renderDiscretePredicted(discreteDist){\n            /////////EXPERIMENT////////\n    let stateBarsPredicted = discreteDist.selectAll('g.histo-bars')\n        .data(d=> {\n            let bins = d.bins.map(m=> {\n                m.index = d.index;\n                return m\n            });\n            return bins}).join('g')\n        .classed('histo-bars', true);\n\n    //stateBarsPredicted.attr('transform', (d, i)=> `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`);\n    stateBarsPredicted.attr('transform', (d, i, n)=> {\n        return `translate(${dimensions.squareDim}, ${3.5+(i*(dimensions.squareDim+2))})`});\n\n    let discreteWidth = 85;\n\n    let binRects = stateBarsPredicted.append('rect')\n            .attr('height', dimensions.squareDim)\n            .attr('width', discreteWidth)\n            .attr('stroke', 'black')\n            .style('stroke-width', 0.5)\n            .attr('fill', '#fff')\n            .attr('opacity', 0.3);\n\n    stateBarsPredicted.append('text')\n        .text('1')\n        .attr('transform', `translate(${discreteWidth + 2},10)`)\n        .style('font-size', '10px')\n        .style('opacity', 0.6);\n\n    stateBarsPredicted.append('text')\n        .text('0')\n        .attr('transform', `translate(-7,10)`)\n        .style('font-size', '10px')\n        .style('opacity', 0.6);\n\n    function randomizer(){\n        var min= -.03; \n        var max= .03;  \n        var random = Math.random() * (+max - +min) + +min; \n        return random;\n    }\n\n\n    let probabilityTicks = stateBarsPredicted\n    .selectAll('.prob-tick')\n    .data((d, i, n)=> {\n        \n        let form = d3.format(\".3f\");\n\n        let jitterMove = [...new Set(d.state.map(m=> +form(m.value)))].map(m=> {\n            let arrayTest = d.state\n            .filter(f=> +form(f.value) === m)\n            .map(arr=> {\n                arr.y = Math.random();\n                arr.x = randomizer();\n                \n                return arr;\n            });\n            return arrayTest;\n        })\n       \n        let state = d.state.map(m=> {\n          \n            let newstate = m;\n            newstate.average = d3.mean(d.histogram.flatMap(m=> m.map(v=> +v.value)));\n            newstate.color = d.color.color;\n            return newstate;\n        });\n        state.color = d.color.color;\n        state.average = d3.mean(d.histogram.flatMap(m=> m.map(v=> +v.value)));\n        return state;\n    }).join('circle').classed('prob-tick', true)\n\n    probabilityTicks\n        .attr('r', 2)\n        .attr('opacity', 0.4)\n        .attr('fill', 'gray');\n\n    probabilityTicks.attr('transform', (d, i, n)=> {\n        let scale = d3.scaleLinear().domain([0, 1]).range([2, (discreteWidth - 2)]).clamp(true);\n    \n    let yScale = d3.scaleLinear().domain([0, 1]).range([2, dimensions.squareDim - 2]);\n  \n    return `translate(${scale(+d.value + d.x)},${yScale(d.y)})`});\n\n    let averageTick = stateBarsPredicted\n        .selectAll('.av-tick').data(d=> {\n            return [{value: d.state[0].average, color: d.color.color}];\n        }).join('rect').classed('av-tick', true)\n        .attr('width', 1).attr('height', dimensions.squareDim)\n        .attr('fill', d=> d.color)\n        .attr('transform', (d, i, n)=> {\n            let scale = d3.scaleLinear().domain([0, 1]).range([0, (discreteWidth - 2)]);\n            return `translate(${scale(d.value)}, 0)`});\n\n    averageTick.on('mouseover', (d, i, n)=> {\n    \n        let tool = d3.select('#tooltip');\n\n        tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n        \n        let f = d3.format(\".3f\");\n        \n        tool.html(`Average: ${f(d.value)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n        tool.style('height', 'auto');\n\n    }).on('mouseout', ()=>{\n        let tool = d3.select('#tooltip');\n        tool.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    });\n\n    probabilityTicks.on('mouseover', (d, i, n)=> {\n    \n        let tool = d3.select('#tooltip');\n\n        tool.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n        \n        let f = d3.format(\".3f\");\n        \n        tool.html(`${d.state} : ${f(d.value)}`)\n            .style(\"left\", (d3.event.pageX - 40) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n        tool.style('height', 'auto');\n\n    }).on('mouseout', ()=>{\n        let tool = d3.select('#tooltip');\n        tool.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    });\n\n    /////////END XPERIMENT////////\n\n    let stateBinsPredicted = discreteDist.selectAll('g.state-bins')\n        .data(d=> d.bins).join('g')\n        .classed('state-bins', true);\n\n    stateBinsPredicted.attr('transform', (d, i)=> `translate(0, ${3.5+(i*(dimensions.squareDim+2))})`);\n\n    discreteDist.each((d, i, node)=>{\n        let maxBin = 0;\n        let maxState = null;\n        d.bins.map(m=> {\n            if(d3.sum(m.state.flatMap(s=> s.value)) > maxBin){\n                maxBin = d3.sum(m.state.flatMap(s=> s.value));\n                maxState = m.color.state;\n            }\n        });\n\n        let winStates = d3.select(node[i]).selectAll('g.state-bins')\n            .filter((f, j, n)=>{\n                return f.color.state === maxState;\n            }).classed('win', true);\n\n        let winStateTicks = d3.select(node[i]).selectAll('g.histo-bars')\n            .filter((f, j, n)=>{\n                return f.color.state === maxState;\n            }).classed('win', true);\n        \n        winStates.select('rect.state-rect').attr('fill', (c)=> {\n                return c.color.color;\n            }).attr('opacity', (c)=>{\n                let sum = d3.sum(c.state.flatMap(s=> s.value));\n                return sum/c.state.length;\n            });\n    // winStateTicks.selectAll('rect.prob-tick').attr('fill', (c)=> c.color);\n        \n    });\n}\n\nfunction renderContinuousPredicted(continDist){\n\n    continDist.each((d, i, nodes)=> {\n        let distrib = d3.select(nodes[i])\n            .selectAll('g')\n            .data([d.bins])\n            .join('g')\n            .classed('distribution', true);\n\n        distrib.attr('transform', 'translate(11, '+dimensions.height+') rotate(-90)');\n        let path = distrib.append('path').attr('d', lineGen);\n        path.attr(\"fill\", defaultBarColor).attr('fill-opacity', .4)//.attr(\"fill\", \"rgba(133, 193, 233, .4)\")\n        .style('stroke', defaultBarColor);\n    });\n\n    let contRect = continDist.append('rect')\n        .attr('height', dimensions.height)\n        .attr('width', 10)\n        .style('fill', 'none')\n        .style('stroke', 'gray');\n\n    let rangeRect = continDist.selectAll('rect.range').data(d=> {\n        let newData = d.data.map(m=> {\n            m.range = d.range;\n            return m;\n        })\n        return newData}).join('rect').classed('range', true);\n\n    rangeRect.attr('width', 10);\n    rangeRect.attr('height', (d, i)=> {\n        if(d.scales.yScale != undefined){\n            let newy = d.scales.yScale;\n            newy.range([80, 0]);\n            return newy(d.values.lowerCI95) - newy(d.values.upperCI95)\n        }else{\n            return 0;\n        }\n    }).attr('transform', (d, i) => {\n        let newy = d.scales.yScale;\n        newy.range([80, 0]);\n        return 'translate(0,'+newy(d.values.upperCI95)+')'\n    });\n\n    //rangeRect.attr('fill', \"rgba(133, 193, 233, .05)\");\n    rangeRect.attr('fill', defaultBarColor).attr('opacity', 0.5)\n\n    let avRect = continDist.append('rect').attr('width', 10).attr('height', (d, i)=> {\n        if(d.data[0] != undefined){\n            return 3;\n        }else{\n            return 0;\n        }\n    });\n\n    avRect.attr('transform', (d, i) => {\n        if(d.data[0] != undefined){\n            let newy = d.data[0].scales.yScale;\n            newy.range([dimensions.height, 0]);\n            let mean = d3.mean(d.data.map(m=> +m.values.realVal));\n            return 'translate(0,'+newy(mean)+')';\n        }else{\n            return 'translate(0,0)';\n        }\n    }).attr('fill', '#004573');\n}\n\nfunction highlightNodesMouseover(d, i, node, pointGroups){\n    let list = d.data.map(m=> m.node);\n    let selected = pointGroups.filter(p=> {\n        return list.indexOf(p.node) > -1}).classed('selected', true);\n    let treeNode  = d3.select('#sidebar').selectAll('.node');\n    let selectedBranch = treeNode.filter(f=> list.indexOf(f.data.node) > -1).classed('selected-branch', true);\n    if(d.type === 'continuous'){\n        let y = d3.scaleLinear().domain(d.domain).range([0, dimensions.height])\n        let axis = d3.select(node[i]).append('g').classed('y-axis', true).call(d3.axisLeft(y).ticks(5));\n    }\n    \n}\n\n","import * as d3 from \"d3\";\nimport { load_data } from \"./multinetLoad\";\nimport { discreteTraitList, colorKeeper, calculatedScalesKeeper, dataMaster, nestedData, speciesTest } from \".\";\nimport { allPaths } from \"./pathCalc\";\nimport { binGroups } from \"./distributionView\";\nimport { addCladeGroup, chosenCladesGroup, addClade } from \"./cladeMaker\";\nimport { buildTreeStructure } from \"./sidebarComponent\";\n\nexport const maxTimeKeeper = [];\n\nexport async function loadData(readFunction, fileString, type){\n    let data = await readFunction(fileString);\n    data.type = String(type);\n    return data;\n}\n\nfunction generatePairs(pathData){\n    return pathData.flatMap((path, i)=> {\n        let pairs = pathData.filter((f, j)=> j != i);\n        let paired =  pairs.map((p)=> {\n            return {'p1': path, 'p2': p}\n        });\n        return paired.map(m=> {\n            \n            let key = [m.p1[m.p1.length - 1].node, m.p2[m.p2.length - 1].node].sort();\n            m.key = key.join(',');\n            let distance = getDistance(m);\n            m.distance = distance;\n            m.deltas = calculateDelta(m, distance);\n            m.closeAll = calculateCloseness(m, distance);\n           \n            return m;\n        });\n    });\n}\n\nexport function pairPaths(pathData){\n\n    let allPairs = generatePairs(pathData);\n    let pairSet = [...new Set(allPairs.map(m=> m.key))];\n    return pairSet.map(k=> {\n        let index = allPairs.map(m=> m.key).indexOf(k);\n        return allPairs[index];\n    });\n}\n\nfunction getDistance(pair){\n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n    pair.common = pair.p1[p1Index]\n\n    return d3.sum(p1.map(m=> m.edgeLength)) + d3.sum(p2.map(m=> m.edgeLength));\n}\n\nfunction calculateDelta(pair, distance){\n   \n    let verts = pair.p2.map(m=> m.node);\n\n    let test = pair.p1.filter(f=> verts.indexOf(f.node) != -1);\n    let lastNode = test[test.length - 1].node;\n\n    let p1Index = pair.p1.map(m=> m.node).indexOf(lastNode);\n    let p2Index = pair.p2.map(m=> m.node).indexOf(lastNode);\n  \n    let p1 = pair.p1.filter((f, i)=> i >= p1Index);\n    let p2 = pair.p2.filter((f, i)=> i >= p2Index);\n\n \n    let range = maxTimeKeeper[maxTimeKeeper.length - 1] - p1[0].combLength;\n    let binCount = d3.max([p1.length, p2.length])\n    let binStep = range / binCount;\n   \n    let bins = [...new Array(binCount-1)].map((d, i)=> {\n        return {'bottom': p1[0].combLength + (i*binStep), 'top': p1[0].combLength + ((i+1)*binStep) }\n    })\n   \n    bins = bins.map((d, i)=> {\n        let one = p1.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        let two = p2.filter(f=> (f.combLength <= d.top) && (f.combLength >= d.bottom))\n        d.one = one;\n        d.two = two;\n        return d;\n    });\n\n    bins = bins.map((b, i)=> {\n        if(b.one.length === 0){\n            b.one = bins[i-1].one;\n        }\n        if(b.two.length === 0){\n            b.two = bins[i-1].two;\n        }\n\n        return b;\n    })\n    \n    let attributes = d3.entries(p1[0].attributes)\n                    .filter(f => f.value.type === 'continuous')\n                    .map(m=> {\n                        let name = m.key;\n                        let valdiffs = bins.map((b, i)=> {\n                            return Math.abs(b.one[0].attributes[name].values.realVal - b.two[0].attributes[name].values.realVal);\n                        });\n                       // m.value = d3.max(valdiffs) / distance;\n                        m.value = d3.max(valdiffs) /// distance;\n                        return m;\n                    });\n\nreturn attributes;\n\n}\n\nfunction calculateCloseness(pair, distance){\n let leaf1 = pair.p1.filter(p=> p.leaf === true)[0].attributes;\n let leaf2 = pair.p2.filter(p=> p.leaf === true)[0].attributes;\n\n let closeness = d3.entries(leaf1).filter(f=> f.value.type === 'continuous').map(m=> {\n     //m.value = Math.abs(m.value.values.realVal - leaf2[m.key].values.realVal) / distance;\n     m.value = Math.abs(m.value.values.realVal - leaf2[m.key].values.realVal)// / distance;\n     return m\n });\n\n return closeness;\n}\n\nexport function calculateNewScales(attributes, keyList, colorKeeper){\n\n    return keyList.map((d, i)=> {\n\n        let attData = attributes.flatMap(f=> f[d]);\n        let color = colorKeeper[i] != undefined ? colorKeeper[i][0] : colorKeeper[0][0];\n       \n        if(attData[0].type == 'continuous'){\n            \n            let max = d3.max(attData.flatMap(m=> m.values.upperCI95));\n            let min = d3.min(attData.flatMap(m=> m.values.lowerCI95));\n            let mean = d3.mean(attData.flatMap(m=> m.values.realVal));\n\n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([color, '#f23929']).domain([min, max]),\n                'catColor': color,\n            };\n        }else{\n            let scaleCat = d3.keys(attData[0].values);\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, j)=> {\n                    return {'state': sc, 'color': colorKeeper[j][0]};\n                }),\n                'catColor': color,\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function calculateScales(calculatedAtt, colorKeeper){\n    return Object.keys(calculatedAtt).map((d, i)=> {\n       \n        if(calculatedAtt[d].type == 'continuous'){\n            \n            let max = d3.max(calculatedAtt[d].rows.map(m=> m.upperCI95));\n            let min = d3.min(calculatedAtt[d].rows.map(m=> m.lowerCI95));\n            let mean = d3.mean(calculatedAtt[d].rows.map(m=> m.realVal));\n            \n            return {\n                'field': d, \n                'type':'continuous',\n                'max': max, \n                'min':  min,\n                'yScale': d3.scaleLinear().range([0, 43]).domain([min, max]).clamp(true),\n                'satScale': d3.scaleLinear().range([0, .9]).domain([min, max]),\n                'colorScale': d3.scaleLinear().range([colorKeeper[i][0], '#f23929']).domain([min, max]),\n                'catColor': colorKeeper[i][0],\n            };\n        }else{\n            let scaleCat = calculatedAtt[d].fields.filter(f=> f!= 'nodeLabels');\n            return { \n                'field': d,\n                'type':'discrete',\n                'stateColors': scaleCat.map((sc, i)=> {\n                    return {'state': sc, 'color': colorKeeper[i][0]};\n                }),\n                'catColor': colorKeeper[i][0],\n                'scales': scaleCat.map(sc=> {\n                let scaleName = sc;\n               \n                let max = 1;\n                let min = 0;\n                return {\n                    'field': d, \n                    'scaleName': scaleName,\n                    'max': max, \n                    'min':  min,\n                    'yScale': d3.scaleLinear().range([45, 0]).domain([min, max]),\n                };\n                \n            }) };\n        }\n    });\n}\n\nexport function matchLeaves(labels, leaves, leafChar, calculatedScales){\n\n        ////MATCHING LABELSS TO THE STUFF/////\n    let  mappedLeafLabels = labels.rows.map(m=> {\n        let label = m.x;\n        return label;\n    });\n\n    return leaves.map((leaf, i)=> {\n      \n        leaf.label = mappedLeafLabels[i];\n\n        //let leafCharIndex = leafChar.rows.map(m=> m[\"\"]);\n      \n        let leafCharIndex = leafChar.rows[0][\"\"] ? leafChar.rows.map(m=> m[\"\"]) : leafChar.rows.map(m=> m[\"species\"]);\n  \n        leaf.node = leaf.V2;\n        let keys = calculatedScales.map(m=> m.field);\n        let attr = {};\n         \n        let chosenOne = leafChar.rows[leafCharIndex.indexOf(leaf.label)];\n \n        keys.forEach((k)=> {\n             let scaleOb = calculatedScales.filter(f=> f.field == k)[0];\n            \n             if(scaleOb.type === 'discrete'){\n                 let thisScale = scaleOb.scales.filter(f=> f.scaleName == chosenOne[k])[0].yScale;\n                 let states = scaleOb.scales.map(m=> m.scaleName).map(state=> {\n                     let value = (state === chosenOne[k])? 1 : 0;\n                    // return {'state': state,  scaleVal: thisScale(value), realVal: value};\n                     return {'state': state, realVal: value};\n                 });\n                 //let states = {'state': leafChar.rows[i][k],  scaleVal: thisScale(1), realVal: 1}\n                 attr[k] = {'states': states, 'label': k, 'type': scaleOb.type, leaf: true};\n             }else if(scaleOb.type === 'continuous'){\n                 let scale = scaleOb.yScale;\n                 //attr[k] = {'scaleVal': scale(chosenOne[k]), 'scaledHigh': 0, 'scaledLow': 0, 'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n                 attr[k] = {'realVal': chosenOne[k], 'type': scaleOb.type, leaf: true};\n \n             }else{\n                 attr[k] = 'error in leaf matching';\n             }\n         });\n\n         leaf.clade = chosenOne.clade;\n         leaf.attributes = attr;\n         leaf.leaf = true;\n     \n         return leaf;\n     });\n}\n\nexport function matchEdges(edges, edgeLen, calculatedAtt, calculatedScales){\n    return edges.rows.map((edge, i)=> {\n        let attrKeys = Object.keys(calculatedAtt);\n        let index = calculatedAtt[attrKeys[0]].rows.map(m=> m['nodeLabels']).indexOf(edge.V2);\n        edge.edgeLength = edgeLen.rows[i].x;\n        edge.node = edge.V2;\n        if(index > -1){ \n            attrKeys.forEach(attr=> {\n                if(calculatedAtt[attr].type == 'continuous'){\n                    let scale = calculatedScales.filter(f=> f.field == attr)[0].yScale;\n                    let res = calculatedAtt[attr].rows[index];\n                   // res.scaleVal = scale(res.estimate);\n                   // res.scaledLow = scale(res.lowerCI95);\n                    //res.scaledHigh = scale(res.upperCI95);\n                    res.realVal = res.estimate;\n                    res.type = 'continuous';\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = res;\n                }else{\n                    let scales = calculatedScales.filter(f=> f.field == attr)[0].scales;\n                    let row = calculatedAtt[attr].rows[index];\n                    let states = scales.map(s=> {\n                       // return {'state': s.scaleName,  scaleVal: s.yScale(row[s.scaleName]), realVal: row[s.scaleName]};\n                        return {'state': s.scaleName, realVal: row[s.scaleName]};\n                    });\n                    edge.attributes = (edge.attributes != undefined)? edge.attributes : {};\n                    edge.attributes[attr] = {'states':states, 'type': 'discrete'};\n                }\n            });\n        }\n        return edge;\n    });\n\n}\nexport function rootAttribute(paths, calculatedAtt, calculatedScales){\n\n    let rootAtt = calculatedAtt.filter(f=> f.node === paths[0][0].node)[0];\n\n    Object.keys(rootAtt).filter(f=> f != 'node').map(att=> {\n        rootAtt[att].scales = calculatedScales.filter(f=> f.field === att)[0];\n    });\n\n    return paths.map((p, i)=> {\n        p[0].attributes = rootAtt;\n        p[0].root = true;\n        return p\n    });\n\n};\nexport function combineLength(paths){\n\n    let maxTime = paths.map(path=> d3.sum(path.map(p=> p.edgeLength)))[0];\n    maxTimeKeeper.push(maxTime);\n    return paths.map(path=> {\n        return path.map((node, i, n)=> {\n            node.maxTime = maxTime;\n            node.combLength = d3.sum(n.filter((f, j)=> i >= j).map(m=> m.edgeLength));\n            return node;\n        })\n    })\n\n}\n\nexport function filterKeeper(){\n\n    this.filterArray = new Array();\n    this.attributeFilter = false;\n\n    this.addFilter = function(filter){\n        this.filterArray.push(filter);\n        return this.filterArray;\n    };\n    this.removeFilter = function(index){\n        this.filterArray = this.filterArray.filter((f, i)=> i != index);\n        return this.filterArray;\n    };\n}\n\nexport function formatAttributeData(pathData, scales, filterArray){\n\n  \n\n    let keys = (filterArray == null)? Object.keys(pathData[0][0].attributes).filter(f=> f != 'node' && f != 'leaf' && f != 'length' && f != 'root' && f != 'key'): filterArray;\n   \n    let newData = pathData.map(path=> {\n        return keys.map((key)=> {\n            return path.map((m)=> {\n                let speciesLabel = path[path.length - 1].node;\n                \n                if(m.attributes[key].type === 'continuous'){\n                    m.attributes[key].species = speciesLabel;\n                    m.attributes[key].color = scales.filter(f=> f.field === key)[0].catColor;\n                    m.attributes[key].move = m.combineLength;\n                    m.attributes[key].combLength = m.combLength;\n                    m.attributes[key].node = m.node;\n                    m.attributes[key].edgeMove = m.edgeLength;\n                    m.attributes[key].edgeLength = m.edgeLength;\n                    m.attributes[key].label = key;\n                    m.attributes[key].yScale = m.attributes[key].scales.yScale;\n                    m.attributes[key].satScale = m.attributes[key].scales.satScale;\n                    m.attributes[key].colorScale = m.attributes[key].scales.colorScale;\n                    if(m.leaf){\n                        m.attributes[key].leaf = m.leaf;\n                    }\n                    m.attributes[key].leaf = m.leaf;\n                    return m.attributes[key];\n                }else if(m.attributes[key].type === 'discrete'){\n                    if(m.leaf === true){\n                        let states = d3.entries(m.attributes[key].values);\n                     \n                        m.attributes[key].leaf = m.leaf;\n                        let state = m.attributes[key];\n                        state.states = {field: key, state: m.attributes[key].values[key]}\n                        state.species = speciesLabel;\n                        state.winState = m.attributes[key].values[key] ?  m.attributes[key].values[key] : d3.entries(m.attributes[key].values);\n                        state.color = m.attributes[key].scales.stateColors.filter(f=> {\n                            return f.state.includes(state.winState)})[0].color;\n\n                        \n                        state.move = m.combLength;\n                        state.combLength = m.combLength;\n                        state.node = m.node;\n                        state.edgeMove = m.edgeLength;\n                        state.edgeLength = m.edgeLength;\n                        state.attrLabel = key;\n                        return state;\n                    }else{\n                        let states = m.attributes[key].states ? m.attributes[key].states : d3.entries(m.attributes[key].values);//.filter(f => f.state != undefined);\n\n                        return states.map((st, j)=> {\n                            st.state = st.key;\n                            st.value = st.value;\n                            \n                            st.color = m.attributes[key].scales.stateColors.filter(f=> f.state === st.key)[0];\n                           \n                            st.move = m.combLength;\n                            st.combLength = m.combLength;\n                            st.node = m.node;\n                            st.edgeMove = m.edgeLength;\n                            st.edgeLength = m.edgeLength;\n                            st.attrLabel = key;\n                            st.species = speciesLabel;\n                            return st;\n                        });\n                    }\n             \n                }else{\n                    console.error('attribute type not found');\n                }\n            });\n        });\n    });\n    return newData;\n}\n\nexport async function dataLoadAndFormatMultinet(workspace, graphName){\n\n    let dataName = graphName;\n    let data = await load_data(workspace, graphName);\n\n    let internalIndex = 0;\n    let leafIndex = 1;\n  \n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let attributeList = [];\n\n    let edges = data.links[0].rows;\n\n    let internal = data.nodes[internalIndex].rows//.filter(f=> f._id.includes('internal'));\n    let leaves = data.nodes[leafIndex].rows//.filter(f=> f._id.includes('leaf'));\n\n    let notAttributeList = [\"_id\", \"label\", \"_key\", \"_rev\", \"key\", \"length\"];\n\n    ///Creating attribute list to add estimated values in //\n    d3.keys(leaves[0]).filter(f=> notAttributeList.indexOf(f) === -1).forEach((d, i)=> {\n        if(discreteTraitList.indexOf(d) > -1){\n            attributeList.push({field: d, type: 'discrete'});\n        }else{\n            attributeList.push({field: d, type:'continuous'});\n        }\n    });\n\n    let calculatedAtt = internal.map((row, i)=> {\n\n        let newRow = {};\n        attributeList.forEach((att)=>{\n         \n            if(d3.entries(row).filter(f=> f.key.includes(att.field)).length > 0){\n                newRow[att.field] = {};\n                newRow[att.field].field = att.field;\n                newRow[att.field].type = att.type;\n                let values = {}\n                d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                    \n                    if(att.type === 'continuous'){\n                       \n                        if(m.key.includes('upperCI')){\n                            values.upperCI95 = +m.value;\n                        }else if(m.key.includes('lowerCI')){\n                            values.lowerCI95 = +m.value;\n                        }else{\n                            values.realVal = +m.value;\n                        }\n                    }else{\n                         values[m.key] = m.value;   \n                    }\n                });\n                newRow[att.field].values = values;\n\n            }\n        });\n        newRow.node = row.label;\n        newRow.key = row._id;\n        newRow.length = +row.length;\n        newRow.leaf = false;\n        return newRow;\n    });\n\n    console.log('calc', d3.keys(calculatedAtt[0]), attributeList);\n   \n    let calcLeafAtt = leaves.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                    values.realVal = +m.value;\n                }else{\n                    values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.label;\n        newRow.label = row.label;\n        newRow.length = +row.length;\n        newRow.key = row._id;\n        newRow.leaf = true;\n        return newRow;\n    });\n\n    \n\n    let calculatedScales = calculateNewScales(calculatedAtt, attributeList.map(m=> m.field).filter(f=> d3.keys(calculatedAtt[0]).indexOf(f) > -1), colorKeeper);\n\n    let matchedEdges = edges.map((edge, i)=> {\n\n        let edgeSource = '_from';\n        let edgeTarget = '_to';\n\n        let attrib = edge[edgeTarget].includes(\"internal\") ? calculatedAtt.filter(f=> f.key === edge[edgeTarget])[0] : calcLeafAtt.filter(f=> f.key === edge[edgeTarget])[0];\n        let fromNode = edge[edgeSource].includes(\"internal\") ? calculatedAtt.filter(f=> f.key === edge[edgeSource])[0] : calcLeafAtt.filter(f=> f.key === edge[edgeSource])[0];\n\n        if(attrib){\n        \n            Object.keys(attrib).filter(f=> (f != 'node') && (f != 'label') && (f != 'length') && (f != 'leaf') && (f != 'key')).map((att, i)=>{\n                let scales = calculatedScales.filter(f=> f.field=== att)[0];\n                attrib[att].scales = scales;\n                return att;\n            })\n        }\n        let newEdge = {\n            V1: fromNode.node,\n            V2: attrib.node,\n            node: attrib.node,\n            leaf: attrib.leaf,\n            edgeLength: +attrib.length,\n            attributes: attrib ? attrib : null\n        }\n       \n        return newEdge;\n    });\n\n    let paths = allPaths(matchedEdges, matchedEdges.filter(f=> f.leaf === true), \"V1\", \"V2\")\n        .map((path, i)=> {\n            let root = path[0];\n            let attrib = calculatedAtt.filter(f=> f.node === root.node)[0];\n            if(attrib){\n               \n                Object.keys(attrib).filter(f=> (f != 'node') && (f != 'label') && (f != 'length') && (f != 'leaf') && (f != 'key')).map((att, i)=>{\n                    let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                    attrib[att].scales = scales;\n                    return att;\n                });\n            }\n            let rooted = {\n                V1: null,\n                V2: attrib.node,\n                node: attrib.node,\n                leaf: attrib.leaf,\n                root: true,\n                edgeLength: 0,\n                attributes: attrib ? attrib : null\n            }\n            path[0] = rooted;\n            return path;\n        });\n\n    let normedPaths = combineLength(paths);\n    let group = binGroups(normedPaths, dataName, calculatedScales, 8);\n    let chosenClade = addCladeGroup(`All ${dataName}`, ['Whole Set'], [{'label': `All ${dataName}`, 'paths': normedPaths, 'groupBins': group}]);\n    chosenCladesGroup.push(chosenClade)    \n    \n    addClade(`All ${dataName}`, normedPaths);\n\n    calculatedScalesKeeper.push(calculatedScales);\n    dataMaster.push(normedPaths);\n    nestedData.push(buildTreeStructure(normedPaths, matchedEdges));\n    speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.node));\n\n    return [normedPaths, calculatedScales];\n}","import '../styles/index.scss';\nimport * as d3 from \"d3\";\nimport {calculateNewScales, rootAttribute, combineLength, dataLoadAndFormatMultinet, loadData} from './dataFormat';\nimport {allPaths} from './pathCalc';\nimport {renderTree, buildTreeStructure, renderTreeButtons} from './sidebarComponent';\nimport {toolbarControl, toolbarDataControl} from './toolbarComponent';\nimport { initialViewLoad } from './viewControl';\nimport { addCladeGroup, chosenCladesGroup, addClade} from './cladeMaker';\nimport { binGroups } from './distributionView';\nimport { getGraphNames } from './multinetLoad';\n\n\nexport const dataMaster = [];\nexport const savedSelected = [];\nexport const collapsed = false;\nexport const nestedData = [];\nexport const speciesTest = [];\nexport const calculatedScalesKeeper = [];\n\nexport const colorKeeper = [\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n    ['#0dc1d1', '#c8f7fd'],\n    ['#3AD701', '#2a9b01'],\n    ['#fec303', '#d3a001'],\n    ['#fe4ecb', '#d30197'],\n    ['#f36b2c'],\n    ['#1abc9c'],\n    ['#493267'],\n    ['#a40b0b'],\n    ['#0095b6'],\n    ['#97A628'],\n    ['#9B28A6'],\n    ['#3928A6'],\n]\n\nexport const attributeList = [];\nexport let discreteTraitList = ['Clade', 'Group', 'island/mainland'];\n\nexport const workspace = 'evo-bio';\n\nlet wrap = d3.select('#wrapper');\nlet main = wrap.select('#main');\nwrap.select('#selected').classed('hidden', true);\nlet sidebar = wrap.select('#sidebar');\nlet toolbarDiv = wrap.select('#toolbar');\nlet toolbarDataWrap = toolbarDiv.append('div').classed('toolbar-data-button', true);\nlet toolbarButtonWrap = toolbarDiv.append('div').classed('toolbar-button-wrap', true);\nwrap.select('#filter-tab').classed('hidden', true);\n\nlet tooltip = wrap.append(\"div\")\n.attr(\"id\", \"tooltip\")\n.style(\"opacity\", 0);\n\n////DATA LOADING////\n\nappLaunch();\n\n// async function appLaunch(){\n\n//    // let graphList = await getGraphNames(workspace);\n//     // graphList = graphList.map(name=> {\n//     //     return {field: name, text: `Data: ${name}`}\n//     // })\n//    let graphList = ['Anolis', 'Anolis']\n//    // toolbarDataControl(toolbarDataWrap, graphList, graphList[1]);\n//    toolbarDataControl(toolbarDataWrap, graphList, graphList[0]);\n   \n//     //loadApp(workspace, graphList[0].field);\n//     loadApp(null, null);\n\n// }\n\nasync function appLaunch(){\n\n    let graphList = await getGraphNames(workspace);\n    graphList = graphList.map(name=> {\n        return {field: name, text: `Data: ${name}`}\n    })\n    toolbarDataControl(toolbarDataWrap, graphList, graphList[0]);\n    loadApp(workspace, graphList[0].field);\n}\n\nexport async function loadApp(workspace, graphName){\n \n\n    //dataLoadAndFormat('anolis-edges.json', 'anolis-edge-lengths.json', 'anolis-leaf-data.csv', 'anolis-res.json', 'Anolis').then(centData=> {\n    dataLoadAndFormatMultinet(workspace, graphName).then(centData=> {\n\n        toolbarControl(toolbarButtonWrap, main, centData[1]);\n        d3.select('#clade-show').selectAll('li').select('input').node().checked = true\n        console.log(graphName, centData)\n        renderTree(null, true, false);\n        renderTreeButtons(centData[0], false);\n        /// LOWER ATTRIBUTE VISUALIZATION ///\n        initialViewLoad(centData[1]);\n    });\n}\n\nasync function dataLoadAndFormat(edgeFile, edgeLengthFile, leafCharFile, resFile, dataName){\n\n    //helper function to create array of unique elements\n    Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n            return self.indexOf(value) === index;\n        });\n    }\n\n    let edges = await loadData(d3.json, `./public/data/${edgeFile}`, 'edge');\n    let leafChar = await loadData(d3.csv, `./public/data/${leafCharFile}`, '');\n    let edgeLen = await loadData(d3.json, `./public/data/${edgeLengthFile}`, 'edge');\n    let char = await loadData(d3.json, `./public/data/${resFile}`, '');\n\n    ///Creating attribute list to add estimated values in //\n\n    leafChar.columns.filter(f=> f != 'species').forEach((d, i)=> {\n\n        if(discreteTraitList.indexOf(d) > -1){\n            attributeList.push({field: d, type: 'discrete'});\n        }else{\n            attributeList.push({field: d, type:'continuous'});\n        }\n\n    });\n\n    edges.rows = edges.rows.filter(f=> f.From != \"\").map((edge, i)=> {\n        edge.edgeLength = edgeLen.rows[i].x;\n        return edge;\n    });  \n\n    //Mapping data together/////\n    let edgeSource = edges.rows.map(d=> d.From);\n   \n    let leaves = edges.rows.filter(f=> edgeSource.indexOf(f.To) == -1 );\n\n    let calculatedAtt = char.rows.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                   \n                    if(m.key.includes('upperCI')){\n                        values.upperCI95 = m.value;\n                    }else if(m.key.includes('lowerCI')){\n                        values.lowerCI95 = m.value;\n                    }else{\n                        values.realVal = m.value;\n                    }\n                }else{\n                     values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.nodeLabels;\n        return newRow;\n    });\n\n  \n    let calculatedScales = calculateNewScales(calculatedAtt, attributeList.map(m=> m.field), colorKeeper);\n\n    let matchedEdges = edges.rows.map((edge, i)=> {\n        let attrib = calculatedAtt.filter(f=> f.node === edge.To)[0]\n        if(attrib){\n            Object.keys(attrib).filter(f=> f != 'node').map((att, i)=>{\n                \n                let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                attrib[att].scales = scales;\n                return att;\n                \n            })\n        }\n        let newEdge = {\n            V1: edge.From,\n            V2: edge.To,\n            node: edge.To,\n            edgeLength: edge.edgeLength,\n            attributes: attrib ? attrib : null\n        }\n        return newEdge;\n    });\n\n\n    let calcLeafAtt = leafChar.map((row, i)=> {\n        let newRow = {};\n        attributeList.forEach((att)=>{\n            newRow[att.field] = {};\n            newRow[att.field].field = att.field;\n            newRow[att.field].type = att.type;\n            let values = {}\n            d3.entries(row).filter(f=> f.key.includes(att.field)).map(m=> {\n                if(att.type === 'continuous'){\n                    values.realVal = m.value;\n                }else{\n                    values[m.key] = m.value;   \n                }\n            });\n            newRow[att.field].values = values;\n        });\n        newRow.node = row.species;\n        newRow.label = row.species;\n        \n        return newRow;\n    })\n\n\n    let matchedLeaves = leaves.map((leaf, i)=>{\n        let attrib = calcLeafAtt.filter(f=> f.node === leaf.To)[0]\n        if(attrib){\n            Object.keys(attrib).map((att, i)=>{\n                if(att!='node' && att != 'label'){\n                    let scales = calculatedScales.filter(f=> f.field=== att)[0]\n                    attrib[att].scales = scales;\n                    return att;\n                }\n            });\n        }\n        let newEdge = {\n            V1: leaf.From,\n            V2: leaf.To,\n            node: leaf.To,\n            edgeLength: leaf.edgeLength,\n            attributes: attrib ? attrib : null,\n            group: null,\n            leaf: true\n        }\n        return newEdge;\n    });\n\n    let all = matchedEdges.filter(f=> f.attributes != null);\n\n    let paths = allPaths(all, matchedLeaves, \"V1\", \"V2\");\n    \n    let addedRoot = rootAttribute(paths, calculatedAtt, calculatedScales);\n\n    let normedPaths = combineLength(addedRoot);\n\n    let group = binGroups(normedPaths, dataName, calculatedScales, 8);\n    let chosenClade = addCladeGroup(`All ${dataName}`, ['Whole Set'], [{'label': `All ${dataName}`, 'paths': normedPaths, 'groupBins': group}]);\n    chosenCladesGroup.push(chosenClade)    \n    \n    addClade(`All ${dataName}`, normedPaths);\n\n    calculatedScalesKeeper.push(calculatedScales);\n    dataMaster.push(normedPaths);\n    nestedData.push(buildTreeStructure(normedPaths, all.concat(matchedLeaves)));\n    speciesTest.push(normedPaths.flatMap(m=> m.filter(f=> f.leaf === true)).map(l=> l.node));\n\n    return [normedPaths, calculatedScales];\n}\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}